
==================== FINAL INTERFACE ====================
2018-11-30 19:28:24.754807 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.CoreImp.Optimizer.Inliner 8043
  interface hash: c37a452e03830d1d499c7a0927f2f801
  ABI hash: 94a95d1faf913ea900666cb0a9bd36cb
  export-list hash: cd9c4a1d20eac08cccd5ddf6e37421e3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bec0ba85914d2da9e0a4be22213f6c78
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreImp.Optimizer.Inliner.etaConvert
  Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonValues
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineFnComposition
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables
  Language.PureScript.CoreImp.Optimizer.Inliner.unThunk
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Control.Monad.Supply.Class a5ac88ebb2786fa0ca39c7248b7c5b8f
  exports: 91d489aaf16020272ece745e2b32bd17
  MonadSupply 6a9f80f28cc3fad47a987fee945f2fd2
  freshName c7b156bc37f8ecaaa383d28184cd1960
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  add 07a6e0e5307af6ac6c6cb39144224b3e
  and 4750702e0b009376bd5a972ad34b5737
  append 8a2a295b394233233460f66d1be1b5db
  apply 1b3870406d0b271d04e51bc1c492b249
  applyFlipped 12f341ea59e1ee33641a725d656e5ec6
  bottom 7b2ab8eaa99ab570f3b4746f815e5d50
  boundedBoolean 03c673ee96e983b04358895c9fae3553
  complement d4778ae519ac1ab665e876b963183db9
  compose e88b91e19e7e44a03bfb4490e650fe70
  composeFlipped 3fd06d9e7faac5331184b8a2ad67840c
  conj c0d86c82691ffc3459145b8fce70ae99
  controlMonadEffUncurried 31784bd62e24d078063cb838b1f1b2fd
  controlSemigroupoid 0913ade347e1cd99cc73ee362005d4b8
  dataArray 2575ec3882fdc78d6d1862be7791b5d5
  dataBounded 8decb64881f188cc0d8e9eb736f4a81e
  dataEq 476bd793c1a492cf4c94206bdd121831
  dataEuclideanRing 2d89c11f64028389631e7fb4e4addb2a
  dataFunction 36f06366d854ac821b52597ae92dfbc4
  dataFunctionUncurried 0ecd266398f91e512862a1a824a1e2da
  dataHeytingAlgebra e49fbe52258b38d902404538b4cc9b50
  dataIntBits 1837bf54b633552f2520c982ea878221
  dataOrd 9df12f5acf79d7c5cebf9d55dfdfd506
  dataRing 83bf92df355fdad644a9c772128125e5
  dataSemigroup b3292bcdde2bc30c6af136078e416fbc
  dataSemiring 728e964916156737ca9e29743df60e70
  disj eef71ed336f6115c85694fbf34a89476
  div 470add851aa7382de4b712edbbf3d3f0
  effectUncurried d82eb212a82ebe3820e6103351920f0d
  eq 54fce466423bcf0eeb91d3af0175f601
  eqBoolean fe8b6b337c6d144aec1141d26b2b9fd7
  eqChar 3b338b89c6d2eb0e0e23b324f5bf974a
  eqInt 0c917913975381bcfbaf7248cbd4a53a
  eqNumber 5c87331a392e22c8ee83881849603b2f
  eqString acb847db11ac758adfb9eecb383c3310
  euclideanRingNumber db7eb91e6637a79d581bd6fb9507d812
  greaterThan fe77b46846c1b90d89c66594fbc8ea83
  greaterThanOrEq bea583171ad9c688f1cafac7ad00fc7c
  heytingAlgebraBoolean 1f1084392b615201440485f137b55861
  lessThan a99670c8da61a9c228e865a95c09270c
  lessThanOrEq 6c6b688a114d85bfa712afd89e9c1eaf
  mkEffFn 29900fbb2c6c228374d53af3ff7323f5
  mkEffectFn 6b053877428ab7c1bbcbeda4765dc541
  mkFn cc24f8530d8ac0254d03fd510ce2ce35
  mul 6bf6b20a38af1cf9da89913a96014896
  negate e1b56b28dd4e93b9bdbc393809b558a0
  not 131d7e92ac9d1f8e08c22efed858ca98
  notEq b1ad73ff37e023b890e9ffb3e3fa3d5f
  one 8da5e1db6530abbd3823bc107b3ab352
  or 66d74837799bdec7031ebcda893b4f2d
  ordBoolean fbd4aa98978b7f9e0b8bd7fcbd2339f5
  ordChar 96fa655f02208f95917dc15935cb9ffa
  ordInt 2645ec2ecfdf0e839455ded2341da162
  ordNumber 5b5f8d198abc51b2342632dac17ac0e9
  ordString dd91503ee4182416eb40d35a7c70b806
  partialUnsafe e96e347f8d3b5f9e0ed36b28ee0955ef
  ringInt 4f9edcd1f0006ebfd575733879d4ed74
  ringNumber d3b4f8f42381dfd2aa4947b7941f37e4
  runEffFn 0f8f05e28080fd6ddad8f51061654361
  runEffectFn ce0996c2ba92684edbb31988398a2ff6
  runFn 77b20863594c320186949163795b0d34
  semigroupString 5228c40f9e52838eea65edc4d5dea935
  semigroupoidFn b7199de3acf0152f7427088c15605169
  semiringInt 645de9472e106ee948494c15c5725c7d
  semiringNumber ea2e695041ab9e6f95cfbc01a3a39eb2
  shl 829d2d0f612cd1bf3469efd3131f27c0
  shr 551b89b8499e311bef46561f443a92bf
  sub c2167ccfa9101a7ae6e83db6ce7ce562
  top d6eb79bbe757b0ae47c44aa3647d61a6
  undefined e59818a4be78c1acaccdcd57ca5c2293
  unsafeCoerce d18b813e88b47a1c8284d98109aaf4fd
  unsafeCoerceFn c8b0b7f5bfad86ae1f6c4341691618b2
  unsafeIndex c8eed047561a1377e4a06fa3599fab86
  unsafePartial be9e7e502aef2cbb016893c3d5c6cb17
  xor 4227b2ec0a00301d30ac41a967461eca
  zero 988a511b65375c52dd25bea1cef15fff
  zshr 306c20b7b631c8d9c7324918991432f8
import  -/  Language.PureScript.CoreImp.AST 66108f8b83c9a1c508a34f2e6114094e
  exports: 1da27be6d04935ab665d52ac441d8230
  AST 2d7016401e08dc68af93e9a4339f76ff
  Add 7e5d84007ab9036383a6a6cccbc68513
  And d78a5f0a6e4f1787fe8a41b415f31603
  App d468a52c8340e49be5e7e3a8742c9aaf
  Binary 2a933ca609152651cc6896eb3ba9b36d
  BinaryOperator 18df6e381ca5d528fdf9b14543c09e16
  BitwiseAnd cdd6abef165defefc5ffeba2e8ccdc24
  BitwiseNot eb38db08b4302db666085b0e52874036
  BitwiseOr 8d485c9ed22e1bc9522a8f246781c0c8
  BitwiseXor 0d8bebc2c343ce6026506cdefc4158fc
  Block ae40450aa1df093ea2f6b6a0b6380186
  BooleanLiteral de16554a89d0104f6ca2ec3a3baff8bf
  Divide 2b4c3e127a3610947dab982bf98855aa
  EqualTo 274afe96e7e36c5dafe0f078e4e80022
  Function 6a0d4d5d81b982f4c8eca9b6610fca93
  GreaterThan a2765932b03b7b071e9fc5dd723b1830
  GreaterThanOrEqualTo 4dab2f9dda7f9e5224e3842d0891f0c8
  Indexer 76027cc8e466bea1311cd2770f494b34
  LessThan f8e4c8c0271a3ea5dffe08d0b8471887
  LessThanOrEqualTo aab372a1785ae43ddfd46f0ef153e28a
  Multiply bb28e9c7e2b42f22ac3d2786213917d3
  Negate 8b646499e2f6df1786796d7df426ed64
  Not 415bbec2eee01da016123628f437e861
  NotEqualTo 10cc5dd0d94665da69c109d2c3260882
  NumericLiteral 189ef67e3cc2b6814f48cdba36b2c258
  Or 7806b23607b9a3069168d5c50873e50c
  Return cbec3880ff1a27efbadc035339cd78c6
  ShiftLeft 06b2de7c0923eaa2cc584a5cebc28ae3
  ShiftRight f7fd0c3e6e2663210cc79e2152f9d2ac
  StringLiteral a6ff0f5bf676b04b36c1bcbec4e8d804
  Subtract cad7adf2e0be0be6486ebcc0e0d24a5e
  Unary 63c6298165339fcc21548384afa4c9f1
  UnaryOperator 279962a5f124fddd93c8f8b35bde7cce
  Var c3d3709a7644965f92d8326eb3be56cf
  VariableIntroduction 47f714cb8440f55c999364abbec8bff7
  ZeroFillShiftRight f107272cdb021598da4fa232df31ed15
  everywhere 8ce9417ee75b74710133c4483c16425a
  everywhereTopDown 9b50355bc857aa97a5e517d27220201c
  everywhereTopDownM 5f88f494ab702b2ebcab457ec4859609
import  -/  Language.PureScript.CoreImp.Optimizer.Common d1b700c07ed6677e35c7d0ef5c1d797a
  exports: 6b4d83e29381b01143d015e4188e1b4a
  applyAll 08a668726537f334aa8c502e17246480
  isDict ed8e6ae6890dfcc089e7b80eb521297a
  isDict' 3168dd94b4f73b7315062090fee0d79c
  isReassigned d05ad96780973c00c709a3e8f98c4ee9
  isRebound afe79a9faef69d36b5eed8390fa5d02b
  isUpdated 8f09dd8940858e686de52dfa56a49e4d
  removeFromBlock 281994b35a4fd4cb5eceb2b42d1e5d18
  replaceIdent 4bcd508bd97f20da235c609cf5c794b4
  replaceIdents b4f7daa1aa369c8e6cab34fa4406a534
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  PSString 0c2d9eac7fc8cff2b3ca27abf6053439
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
2c339ecf80366632e7a3ed1d1e659b26
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule3
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule1) -}
c5314143cc6df366c20029354b3b4ceb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule2) -}
55fdb8b9a227d8c3c4548876121c40bd
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.CoreImp.Optimizer.Inliner"#) -}
b3aa8b1bbbc373bce2a10170c520e687
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule4) -}
aed669639953b789f2f0dfdbf323913a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
a14e47c49fd0a918dafd454b0014031b
  etaConvert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.etaConvert_convert) -}
cc5993576eb2d7145c03be14cdd21cb0
  etaConvert_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Function ds7 ds8 ds9 ds10
                   -> case ds8 of wild1 {
                        GHC.Base.Nothing
                        -> case ds9 of wild2 {
                             []
                             -> case ds10 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Block ds11 ds12
                                  -> case ds12 of wild4 {
                                       [] -> wild
                                       : ds13 ds14
                                       -> case ds13 of wild5 {
                                            DEFAULT -> wild
                                            Language.PureScript.CoreImp.AST.Return ds15 ds16
                                            -> case ds16 of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.App ds17 fn ds18
                                                 -> case ds18 of wild7 {
                                                      []
                                                      -> case ds14 of wild8 {
                                                           [] -> fn : ipv ipv1 -> wild }
                                                      : ipv ipv1 -> wild } } } } }
                             : ipv ipv1 -> wild }
                        GHC.Base.Just ipv -> wild }
                   Language.PureScript.CoreImp.AST.Block ss ds7
                   -> case ds7 of wild1 {
                        [] -> wild
                        : ds8 ds9
                        -> case ds8 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.Return ds10 ds11
                             -> case ds11 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.App ds12 ds13 args
                                  -> case ds13 of wild4 {
                                       DEFAULT -> wild
                                       Language.PureScript.CoreImp.AST.Function ds14 ds15 idents block
                                       -> case ds15 of wild5 {
                                            GHC.Base.Nothing
                                            -> case block of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Block ds16 body
                                                 -> case ds9 of wild7 {
                                                      []
                                                      -> let {
                                                           $j :: Language.PureScript.CoreImp.AST.AST
                                                             <join 0>
                                                           = let {
                                                               $j1 :: Language.PureScript.CoreImp.AST.AST
                                                                 <join 0>
                                                               = let {
                                                                   exit :: Language.PureScript.CoreImp.AST.AST
                                                                     <join 0>
                                                                   = Language.PureScript.CoreImp.AST.Block
                                                                       ss
                                                                       (GHC.Base.map
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          (Language.PureScript.CoreImp.Optimizer.Common.replaceIdents
                                                                             (GHC.List.zip
                                                                                @ Data.Text.Internal.Text
                                                                                @ Language.PureScript.CoreImp.AST.AST
                                                                                idents
                                                                                args))
                                                                          body)
                                                                 } in
                                                                 letrec {
                                                                   go4 :: [Language.PureScript.CoreImp.AST.AST]
                                                                          -> Language.PureScript.CoreImp.AST.AST
                                                                     <join 1> {- Arity: 1,
                                                                                 Strictness: <S,1*U> -}
                                                                   = \ (ds17 :: [Language.PureScript.CoreImp.AST.AST]) ->
                                                                     case ds17 of wild8 {
                                                                       [] -> exit
                                                                       : y ys
                                                                       -> case (Language.PureScript.CoreImp.Optimizer.Common.isRebound1
                                                                                  y
                                                                                  wild6)
                                                                                 `cast`
                                                                               (Data.Semigroup.Internal.N:Any[0]) of wild9 {
                                                                            GHC.Types.False
                                                                            -> go4 ys
                                                                            GHC.Types.True
                                                                            -> wild } }
                                                                 } in
                                                                 go4 args
                                                             } in
                                                             letrec {
                                                               go4 :: [Data.Text.Internal.Text]
                                                                      -> Language.PureScript.CoreImp.AST.AST
                                                                 <join 1> {- Arity: 1,
                                                                             Strictness: <S,1*U> -}
                                                               = \ (ds17 :: [Data.Text.Internal.Text]) ->
                                                                 case ds17 of wild8 {
                                                                   [] -> $j1
                                                                   : y ys
                                                                   -> case (Language.PureScript.CoreImp.Optimizer.Common.isRebound1
                                                                              (Language.PureScript.CoreImp.AST.Var
                                                                                 (GHC.Base.Nothing
                                                                                    @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                 y)
                                                                              wild6)
                                                                             `cast`
                                                                           (Data.Semigroup.Internal.N:Any[0]) of wild9 {
                                                                        GHC.Types.False -> go4 ys
                                                                        GHC.Types.True -> wild } }
                                                             } in
                                                             go4 idents
                                                         } in
                                                         letrec {
                                                           go4 :: [Language.PureScript.CoreImp.AST.AST]
                                                                  -> Language.PureScript.CoreImp.AST.AST
                                                             <join 1> {- Arity: 1,
                                                                         Strictness: <S,1*U> -}
                                                           = \ (ds17 :: [Language.PureScript.CoreImp.AST.AST]) ->
                                                             case ds17 of wild8 {
                                                               [] -> $j
                                                               : y ys
                                                               -> case Language.PureScript.CoreImp.Optimizer.Inliner.shouldInline
                                                                         y of wild9 {
                                                                    GHC.Types.False -> wild
                                                                    GHC.Types.True -> go4 ys } }
                                                         } in
                                                         go4 args
                                                      : ipv ipv1 -> wild } }
                                            GHC.Base.Just ipv -> wild } } } } } }) -}
672c2c9e6ba91d3770639a25dd205c24
  evaluateIifes ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes_convert) -}
4df432593086cf91f77bc4e1eff67307
  evaluateIifes1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.undefined2) -}
324031af8d8737451523bf9de8f16f34
  evaluateIifes_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Function ds10 ds11 ds12 ds13
                        -> case ds11 of wild2 {
                             GHC.Base.Nothing
                             -> let {
                                  fail :: GHC.Prim.Void# -> Language.PureScript.CoreImp.AST.AST
                                    <join 1> {- Arity: 1, Strictness: <L,A> -}
                                  = \ (ds14 :: GHC.Prim.Void#)[OneShot] ->
                                    case ds13 of wild3 {
                                      DEFAULT -> wild
                                      Language.PureScript.CoreImp.AST.Block ds15 ds16
                                      -> case ds16 of wild4 {
                                           [] -> wild
                                           : ds17 ds18
                                           -> case ds17 of wild5 {
                                                DEFAULT -> wild
                                                Language.PureScript.CoreImp.AST.Return ss ret
                                                -> case ds18 of wild6 {
                                                     []
                                                     -> case ds9 of wild7 {
                                                          []
                                                          -> let {
                                                               $j :: Language.PureScript.CoreImp.AST.AST
                                                                 <join 0>
                                                               = Language.PureScript.CoreImp.Optimizer.Common.replaceIdents
                                                                   (let {
                                                                      lvl16 :: Language.PureScript.CoreImp.AST.AST
                                                                      = Language.PureScript.CoreImp.AST.Var
                                                                          ss
                                                                          Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes1
                                                                    } in
                                                                    GHC.Base.map
                                                                      @ Data.Text.Internal.Text
                                                                      @ (Data.Text.Internal.Text,
                                                                         Language.PureScript.CoreImp.AST.AST)
                                                                      (\ (ds19 :: Data.Text.Internal.Text) ->
                                                                       (ds19, lvl16))
                                                                      ds12)
                                                                   ret
                                                             } in
                                                             letrec {
                                                               go4 :: [Data.Text.Internal.Text]
                                                                      -> Language.PureScript.CoreImp.AST.AST
                                                                 <join 1> {- Arity: 1,
                                                                             Strictness: <S,1*U> -}
                                                               = \ (ds19 :: [Data.Text.Internal.Text]) ->
                                                                 case ds19 of wild8 {
                                                                   [] -> $j
                                                                   : y ys
                                                                   -> case Language.PureScript.CoreImp.Optimizer.Common.isReassigned
                                                                             y
                                                                             ret of wild9 {
                                                                        GHC.Types.False -> go4 ys
                                                                        GHC.Types.True -> wild } }
                                                             } in
                                                             go4 ds12
                                                          : ipv ipv1 -> wild }
                                                     : ipv ipv1 -> wild } } } }
                                } in
                                case ds12 of wild3 {
                                  []
                                  -> case ds13 of wild4 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       Language.PureScript.CoreImp.AST.Block ds14 ds15
                                       -> case ds15 of wild5 {
                                            [] -> fail GHC.Prim.void#
                                            : ds16 ds17
                                            -> case ds16 of wild6 {
                                                 DEFAULT -> fail GHC.Prim.void#
                                                 Language.PureScript.CoreImp.AST.Return ds18 ret
                                                 -> case ds17 of wild7 {
                                                      []
                                                      -> case ds9 of wild8 {
                                                           [] -> ret
                                                           : ipv ipv1 -> fail GHC.Prim.void# }
                                                      : ipv ipv1 -> fail GHC.Prim.void# } } } }
                                  : ipv ipv1 -> fail GHC.Prim.void# }
                             GHC.Base.Just ipv -> wild } } }) -}
87200bb9628796cce19d5cb1d0b48bf1
  inlineCommonOperators ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
0bb9801163c4df520838549b82065de2
  inlineCommonOperators1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators2
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
848fdada04c9bb6b9081955f27adc57c
  inlineCommonOperators10 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators147
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators11) -}
74cd4814386c3ba9939a72021aa596a1
  inlineCommonOperators100 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
7aa95040e061f370a803afccc2e6bb82
  inlineCommonOperators101 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators102
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
cfde5fccf4d51423d4609b1c3aaac8e9
  inlineCommonOperators102 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.lessThanOrEq1) -}
e9bbd9a86879bdc4b9d2e38ee2d12a38
  inlineCommonOperators103 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
3aa69fdd6197b83c4c9de1e5604ef389
  inlineCommonOperators104 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators105
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
e33dd6432361ac722d09279c3f3a8b79
  inlineCommonOperators105 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.lessThan1) -}
2ebc68c505c3f44f3bbc1d59f0c50af1
  inlineCommonOperators106 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
a7b3c9fb2bf11e9380d432892702a044
  inlineCommonOperators107 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators108
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
94891fba627ca9672fc7131c540ca7a2
  inlineCommonOperators108 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordNumber1) -}
557151bfe4082bdcb1d72dfbc221cb60
  inlineCommonOperators109 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
bb71ccf91067ec2b59101c3752a507b8
  inlineCommonOperators11 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators146
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators12) -}
f7708e5a9354d9c17c9f6f12b30f06c1
  inlineCommonOperators110 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
5e9c000b2b5be5b43d3c0ae229c5c65b
  inlineCommonOperators111 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
add7c94c010ac2b36a60a206c3b4a685
  inlineCommonOperators112 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
e7bf019cef28de8ac8f59bc0b341cec5
  inlineCommonOperators113 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators114
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
039e8738556da5d8826dd2743bfab37d
  inlineCommonOperators114 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordInt1) -}
d7d608f588db208defc0db28d93b47bd
  inlineCommonOperators115 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
fb27bc2a6a478b845d20a9a951ee0f2f
  inlineCommonOperators116 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
e8239ab67e7e304747dc45f6992456a3
  inlineCommonOperators117 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
b92e210e73e33b77c99e03f60f986dfe
  inlineCommonOperators118 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
b43458a02d3d3b86d593fd88c65c3d41
  inlineCommonOperators119 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators120
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
7da2cd25aebdd40499323a259e3d8ed9
  inlineCommonOperators12 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators143
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators13) -}
d6215c2f1f822d9754e1d696e39e4221
  inlineCommonOperators120 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordChar1) -}
a027739a5907fc79ec5a17c74037e01c
  inlineCommonOperators121 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
e12f615f6ad8fd79c41f24f141d7b2bb
  inlineCommonOperators122 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
ca19f7849e7d53a2c7439b423ead6e89
  inlineCommonOperators123 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
0861f587a3379660f84397adeb80c00f
  inlineCommonOperators124 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
59695943c2f582302cc35404262f964b
  inlineCommonOperators125 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators126
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
dc8574c6dfd22fcd81060b7a7e236e45
  inlineCommonOperators126 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordBoolean1) -}
927643b7aa816f7af504c1bbbb51f930
  inlineCommonOperators127 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
b816ee670463c771ad64703df2205f9d
  inlineCommonOperators128 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
e3c5f3840fa9dd30d8219caef782ce5a
  inlineCommonOperators129 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
94609f005a10e58bcfe4efe3c10c5976
  inlineCommonOperators13 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators142
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators14) -}
7f94743dc950853bed8f923799ab8a5d
  inlineCommonOperators130 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators134
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
e167bcd657f9e80935216b80465aafea
  inlineCommonOperators131 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators132
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
ae7c24bd8424b0b6f91915fd0ab94489
  inlineCommonOperators132 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.notEq1) -}
6ac2b6b130f490ac3d0073e81465ee49
  inlineCommonOperators133 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataEq2) -}
3feb835bd0135671e7181a5be3bc848d
  inlineCommonOperators134 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators135
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
f0f142752007ad62def5a7d8c87060d3
  inlineCommonOperators135 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqBoolean1) -}
651420490274f57680ac436022da9baf
  inlineCommonOperators136 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators134
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
de338eb22ce10d27abd3d6851898a425
  inlineCommonOperators137 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators138
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
7f5802febccbf74c8d497d230b5fd9c4
  inlineCommonOperators138 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eq2) -}
a25648a28a568fff7501c473a5d946ac
  inlineCommonOperators139 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators140
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
2b7ab9d3d7d3d0bb4f1e68da2997f54f
  inlineCommonOperators14 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators139
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators15) -}
47ff54ae5bded71ce45357efc5905bf7
  inlineCommonOperators140 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators141
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
05dfeb3cfa242255080ff6960363e578
  inlineCommonOperators141 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqChar1) -}
dd69de43396cd95fc97358a9d7f80426
  inlineCommonOperators142 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators140
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
32866ce55632a748a0c0e359152d0478
  inlineCommonOperators143 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators144
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
63baa8c6c801d52f200508f71acdaf18
  inlineCommonOperators144 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators145
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
09213489b9c93b3f465f6470875a1509
  inlineCommonOperators145 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqString1) -}
69d42d6312c5375d871c7db60fcb2ad7
  inlineCommonOperators146 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators144
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
a5deca6d1a95042463c7354ed7656a0b
  inlineCommonOperators147 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators148
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
f6f262dfb25c37fa9bf5a36633fa76e0
  inlineCommonOperators148 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators149
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
004f73379790bcf4c239fcee4727eb03
  inlineCommonOperators149 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqInt1) -}
5d2adb65df8e1a4571a7b1ab3ccd40ef
  inlineCommonOperators15 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators136
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators16) -}
a608584871bc2e8fa6bbf7be764e5c2b
  inlineCommonOperators150 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators148
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
16d65d9085fe9f5b61537f7e32e5117a
  inlineCommonOperators151 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators152
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
e44ce3dd2b349870072c94ea199bebec
  inlineCommonOperators152 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators153
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
d38f79da64cd8ecaa931c81eae580ce7
  inlineCommonOperators153 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqNumber1) -}
ad87999c8a55cddb2467538205047fcc
  inlineCommonOperators154 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators152
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
4a6e99b21c39684b1e453cee08a30beb
  inlineCommonOperators155 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators159
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators156
                   Language.PureScript.CoreImp.AST.Divide) -}
537cc1854f6c10f416dcc3fdc0401927
  inlineCommonOperators156 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators158,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators157
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
a31d21c6ed6c71f05b8beaaae718569d
  inlineCommonOperators157 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.div1) -}
57e262e952f7cf345ab2038566888c3e
  inlineCommonOperators158 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataEuclideanRing2) -}
61b6f6ce1e2104cf6dee6572f6898564
  inlineCommonOperators159 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators158,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators160
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
d0f7e23a72cfe4bd5e00d3d5e4f05faa
  inlineCommonOperators16 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators130
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators17) -}
a8b6f9f1312f0979619dd7312c9b1e86
  inlineCommonOperators160 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.euclideanRingNumber1) -}
2c4fd35ed0387afdf2aa7e0d532eb70a
  inlineCommonOperators161 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_unary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators165
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators162
                   Language.PureScript.CoreImp.AST.Negate) -}
9ddca57e39b085a88766dfb5310b51b6
  inlineCommonOperators162 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators163
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
59e7d4058aa0b9b96da7cc408e1b44c3
  inlineCommonOperators163 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.negate1) -}
8e66eeca8dde12d490583fc7d2edc62b
  inlineCommonOperators164 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataRing2) -}
403867b02e20791ff0e2879e79aaf81c
  inlineCommonOperators165 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators166
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
0918aab5033d1f7d447740f666cda17b
  inlineCommonOperators166 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ringNumber1) -}
c8bdf17020ba408eb5f3b6d38a352d12
  inlineCommonOperators167 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators165
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators168
                   Language.PureScript.CoreImp.AST.Subtract) -}
d63f22b4d6952cff4e316d675b0aad76
  inlineCommonOperators168 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators169
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
35fe68ae9ef43b6d1241db170611a874
  inlineCommonOperators169 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.sub1) -}
a4d80ff5049b28d8ba310098904a2e8d
  inlineCommonOperators17 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators129
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators18) -}
88246bffe30f1a40a4df8ee3bdadf3cb
  inlineCommonOperators170 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators174
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators171
                   Language.PureScript.CoreImp.AST.Multiply) -}
e9b1e72d5497328ed185dc7fc5620001
  inlineCommonOperators171 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators173,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators172
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
5f14f349ff12ce62bfbd71b937794622
  inlineCommonOperators172 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.mul1) -}
3a64f48ecb645fa387a7240c4033c349
  inlineCommonOperators173 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataSemiring2) -}
52d833a029597a2c67318874fd9d0ccc
  inlineCommonOperators174 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators173,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators175
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
44913bfe014231fff2f09947197ed715
  inlineCommonOperators175 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.semiringNumber1) -}
2ae9fc2be5be8495bb5a3d6812ba3425
  inlineCommonOperators18 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators128
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators19) -}
774ac5aab81116db76e40ec58f33a6b6
  inlineCommonOperators19 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators127
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators20) -}
de41a175749c3a60b35fe04214a73bc0
  inlineCommonOperators2 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_f10
                   x) -}
203b93e257496b0a154ab20f86c7e2bb
  inlineCommonOperators20 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators124
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators21) -}
41add0c2ed7172d025ef4bbaab41cd87
  inlineCommonOperators21 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators123
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators22) -}
2ee138e6732420be8b82844a1495e584
  inlineCommonOperators22 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators122
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators23) -}
bddce4b633283cb5b968f350ee0fd34d
  inlineCommonOperators23 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators121
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators24) -}
dbb61a8b1a0982735de40b34fae1427b
  inlineCommonOperators24 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators118
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators25) -}
8d34368a8d3bd29923a485f5f9ff4df8
  inlineCommonOperators25 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators117
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators26) -}
773da16d89a41bb3bd706daa7f632021
  inlineCommonOperators26 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators116
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators27) -}
c94c457b90b727cc99db2d2d515fe88e
  inlineCommonOperators27 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators115
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators28) -}
19919f92838b43e7bad51124c284299c
  inlineCommonOperators28 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators112
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators29) -}
037b9d8658ef92969005a0d999072909
  inlineCommonOperators29 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators111
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators30) -}
9cd121a9fccc13d93e31f42386954f97
  inlineCommonOperators3 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators170
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators4) -}
1015b612ad89dff2d257902ce2638d6e
  inlineCommonOperators30 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators110
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators31) -}
16b4c0c29a3aa4f6406d554d85fcfda4
  inlineCommonOperators31 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators109
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators32) -}
62c7ba9fdb7004080d01e4eef48bde8f
  inlineCommonOperators32 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators106
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators33) -}
4bc78456c671e4c4da2241f6e064c387
  inlineCommonOperators33 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators103
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators34) -}
df8a32bae76ee392e8d4c1c797829557
  inlineCommonOperators34 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators100
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators35) -}
e8db3a9663e6c411b3887d2ed5ea18b6
  inlineCommonOperators35 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators97
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators36) -}
89cba2b7914f7cc53a68c9efe7a2a92e
  inlineCommonOperators36 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators91
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators37) -}
aea6aab8ff4ec922a604e1953266bba1
  inlineCommonOperators37 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators85
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators38) -}
a540de98453bc0c2b798a193949613a9
  inlineCommonOperators38 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators82
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators39) -}
d0e89445acb333aa88f6fd532e231628
  inlineCommonOperators39 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators79
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators40) -}
7bea36826c07b51f64b93979007ba4bd
  inlineCommonOperators4 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators167
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators5) -}
cc63e63f80606522f0f5d3dc431aea87
  inlineCommonOperators40 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators73
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators41) -}
4059069391854bc6e3086e0646eba04a
  inlineCommonOperators41 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators71
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators42) -}
9cd0c9d62c419c586fbc215f789693dd
  inlineCommonOperators42 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators69
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators43) -}
3ee3f4431bbbc9893d128b1ff97bbbc6
  inlineCommonOperators43 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators67
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators44) -}
89abb2904fa5d033d49b4483cb9a1da3
  inlineCommonOperators44 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators65
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators45) -}
b7aa49f40aa0aefb84f62e4fe3753d30
  inlineCommonOperators45 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators63
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators46) -}
3670a42d82b81fc7b40d2853f97b8403
  inlineCommonOperators46 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators61
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators47) -}
c80c7c92df195c12870c0d5516963943
  inlineCommonOperators47 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators59
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators48) -}
733d609369a55053b0d84407e0eed083
  inlineCommonOperators48 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators57
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators49) -}
9e5ee70dd3efb0b18f6cab97894ddc0a
  inlineCommonOperators49 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators54
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators50) -}
4171e9242168006a31e4228c89cbc740
  inlineCommonOperators5 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators161
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators6) -}
aaf918395116284e012ff2beb5e7e742
  inlineCommonOperators50 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators51
                   (GHC.Types.[]
                      @ (Language.PureScript.CoreImp.AST.AST
                         -> Language.PureScript.CoreImp.AST.AST))) -}
8be842a683530bd577732b14370926b6
  inlineCommonOperators51 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.App ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.Indexer ds17 ds18 ds19
                                                      -> case ds18 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.StringLiteral ds20 op'1
                                                           -> case ds19 of wild9 {
                                                                DEFAULT -> wild
                                                                Language.PureScript.CoreImp.AST.Var ds21 m'
                                                                -> case ds16 of wild10 {
                                                                     [] -> wild
                                                                     : ds22 ds23
                                                                     -> case ds22 of wild11 {
                                                                          DEFAULT -> wild
                                                                          Language.PureScript.CoreImp.AST.Var ds24 ds25
                                                                          -> case ds23 of wild12 {
                                                                               []
                                                                               -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators53 of wild13 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                                  case m' of wild14 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                                  case GHC.Prim.==#
                                                                                         dt2
                                                                                         dt5 of lwild {
                                                                                    DEFAULT -> wild
                                                                                    1#
                                                                                    -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                            GHC.Prim.Int# #)}
                                                                                              dt
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt1)
                                                                                              dt3
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt4)
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt2)
                                                                                              GHC.Prim.realWorld# of wild15 { (#,#) ds26 ds27 ->
                                                                                       case GHC.Prim.narrow32Int#
                                                                                              ds27 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         0#
                                                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                                                   @ GHC.Word.Word16
                                                                                                   GHC.Word.$fEqWord16
                                                                                                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators52
                                                                                                   op'1
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0]) of wild17 {
                                                                                              GHC.Types.False
                                                                                              -> wild
                                                                                              GHC.Types.True
                                                                                              -> Language.PureScript.CoreImp.AST.Indexer
                                                                                                   (GHC.Base.Nothing
                                                                                                      @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                   y
                                                                                                   x } } } } } }
                                                                               : ipv ipv1
                                                                               -> wild } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
c2c1dd20d2012addb78d04293a934be6
  inlineCommonOperators52 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafeIndex1) -}
2e3d32ef0922e77d3fc19cd2e31445c6
  inlineCommonOperators53 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataArray2) -}
8a24def118826c7039d50a67e77f5d45
  inlineCommonOperators54 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds17 op'1
                                                      -> case ds16 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds18 m'
                                                           -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators56 of wild9 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                              case m' of wild10 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                              case GHC.Prim.==# dt2 dt5 of lwild {
                                                                DEFAULT -> wild
                                                                1#
                                                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                                                                          dt
                                                                          (GHC.Prim.int2Word# dt1)
                                                                          dt3
                                                                          (GHC.Prim.int2Word# dt4)
                                                                          (GHC.Prim.int2Word# dt2)
                                                                          GHC.Prim.realWorld# of wild11 { (#,#) ds19 ds20 ->
                                                                   case GHC.Prim.narrow32Int#
                                                                          ds20 of wild12 {
                                                                     DEFAULT -> wild
                                                                     0#
                                                                     -> case GHC.Classes.$fEq[]_$c==
                                                                               @ GHC.Word.Word16
                                                                               GHC.Word.$fEqWord16
                                                                               Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators55
                                                                               op'1
                                                                                 `cast`
                                                                               (Language.PureScript.PSString.N:PSString[0]) of wild13 {
                                                                          GHC.Types.False -> wild
                                                                          GHC.Types.True
                                                                          -> Language.PureScript.CoreImp.AST.App
                                                                               (GHC.Base.Nothing
                                                                                  @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                               y
                                                                               (GHC.Types.:
                                                                                  @ Language.PureScript.CoreImp.AST.AST
                                                                                  x
                                                                                  (GHC.Types.[]
                                                                                     @ Language.PureScript.CoreImp.AST.AST)) } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
0bb40804e0328c5240b43324dd0758b6
  inlineCommonOperators55 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.applyFlipped1) -}
317454c311a9f9d0f545dfbd777230e6
  inlineCommonOperators56 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataFunction2) -}
9cd4ab9924ca12bf39b7c03f63232a94
  inlineCommonOperators57 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds17 op'1
                                                      -> case ds16 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds18 m'
                                                           -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators56 of wild9 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                              case m' of wild10 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                              case GHC.Prim.==# dt2 dt5 of lwild {
                                                                DEFAULT -> wild
                                                                1#
                                                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                                                                          dt
                                                                          (GHC.Prim.int2Word# dt1)
                                                                          dt3
                                                                          (GHC.Prim.int2Word# dt4)
                                                                          (GHC.Prim.int2Word# dt2)
                                                                          GHC.Prim.realWorld# of wild11 { (#,#) ds19 ds20 ->
                                                                   case GHC.Prim.narrow32Int#
                                                                          ds20 of wild12 {
                                                                     DEFAULT -> wild
                                                                     0#
                                                                     -> case GHC.Classes.$fEq[]_$c==
                                                                               @ GHC.Word.Word16
                                                                               GHC.Word.$fEqWord16
                                                                               Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators58
                                                                               op'1
                                                                                 `cast`
                                                                               (Language.PureScript.PSString.N:PSString[0]) of wild13 {
                                                                          GHC.Types.False -> wild
                                                                          GHC.Types.True
                                                                          -> Language.PureScript.CoreImp.AST.App
                                                                               (GHC.Base.Nothing
                                                                                  @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                               x
                                                                               (GHC.Types.:
                                                                                  @ Language.PureScript.CoreImp.AST.AST
                                                                                  y
                                                                                  (GHC.Types.[]
                                                                                     @ Language.PureScript.CoreImp.AST.AST)) } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
4e42bb42eb58aa44761bdc0ef5173a22
  inlineCommonOperators58 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.apply1) -}
528ff30b3da15029ae909594c1cb1fcf
  inlineCommonOperators59 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss fn ds7
                   -> case ds7 of wild1 {
                        [] -> wild
                        : x ds8
                        -> case ds8 of wild2 {
                             []
                             -> case fn of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Indexer ds9 ds10 ds11
                                  -> case ds10 of wild4 {
                                       DEFAULT -> wild
                                       Language.PureScript.CoreImp.AST.StringLiteral ds12 x1
                                       -> case ds11 of wild5 {
                                            DEFAULT -> wild
                                            Language.PureScript.CoreImp.AST.Var ds13 y
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      x1
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators60 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case y of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds14 ds15 ->
                                                         case GHC.Prim.narrow32Int# ds15 of wild10 {
                                                           DEFAULT -> wild
                                                           0#
                                                           -> Language.PureScript.CoreImp.AST.Unary
                                                                ss
                                                                Language.PureScript.CoreImp.AST.BitwiseNot
                                                                x } } } } } } } } }
                             : ipv ipv1 -> wild } } }) -}
e4d79560dc7b13d5b3b163a72ecfa1a2
  inlineCommonOperators6 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators155
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators7) -}
4d4b573fa1f3eeaf910297493189f7a5
  inlineCommonOperators60 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.complement1) -}
681a979a32574c1929d2a407d766daba
  inlineCommonOperators61 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators62 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ZeroFillShiftRight
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
a7e8d20cdc13fc554bb9085d78c1ae1b
  inlineCommonOperators62 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.zshr1) -}
2d83fa9e7f54dbef1801f5835690c021
  inlineCommonOperators63 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators64 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ShiftRight
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
421d4a1e4e432d89a734c135b0eba266
  inlineCommonOperators64 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.shr1) -}
409bbf22e84bc06482e616818ccb6348
  inlineCommonOperators65 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators66 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ShiftLeft
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
4b1e78bc8d4f6073ef9a58f7f3e46afb
  inlineCommonOperators66 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.shl1) -}
5f9f264f550b1257fcbcc395f77f299e
  inlineCommonOperators67 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators68 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseXor
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
abb20cb7af4febcdecd78408b91e6603
  inlineCommonOperators68 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.xor1) -}
29476081c4ed929fa557956aa3f58ca6
  inlineCommonOperators69 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators70 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseAnd
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
a60401710ef3ba618a2f7c6e822fa5a7
  inlineCommonOperators7 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators154
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators8) -}
fb76804aea19d264631326400c8bd2f4
  inlineCommonOperators70 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.and1) -}
51ec22402d3ebfe1fece84fc610f922d
  inlineCommonOperators71 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators72 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseOr
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
82619ca5d502989d11ac5ec9be44323b
  inlineCommonOperators72 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.or1) -}
a952b7c3967aab099837b6d8d392aca5
  inlineCommonOperators73 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_unary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators74
                   Language.PureScript.CoreImp.AST.Not) -}
f072408986acf71fa42e4fd44826afe3
  inlineCommonOperators74 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators75
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
60f96067edb59f6e747c26cf0071b210
  inlineCommonOperators75 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.not1) -}
de246d4154e3ea89970bc62c5cc1563b
  inlineCommonOperators76 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataHeytingAlgebra2) -}
89479bf70c955537d1f0cad1934becfe
  inlineCommonOperators77 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators78
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
88f1af7e33dd2fe45dcb44d3a4315b73
  inlineCommonOperators78 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.heytingAlgebraBoolean1) -}
6a78a6ea62e099eead829a08d34ed51d
  inlineCommonOperators79 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators80
                   Language.PureScript.CoreImp.AST.Or) -}
c39c65d7449de06f28b89947850cf090
  inlineCommonOperators8 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators151
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators9) -}
3f747f56a7ae2507afc717f12114a21b
  inlineCommonOperators80 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators81
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
3cbc37c2178cdcb7019d28234ba4b77d
  inlineCommonOperators81 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.disj1) -}
4fc014c64bad46d44ac118787be46af2
  inlineCommonOperators82 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators83
                   Language.PureScript.CoreImp.AST.And) -}
68f626aea38b2efeba300c05ed29a01a
  inlineCommonOperators83 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators84
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
62dc7ef6a73b61d30f3d0586b177dc2c
  inlineCommonOperators84 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.conj1) -}
d917d6f0781bc60f5ada7ff0f246ae19
  inlineCommonOperators85 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators89
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators86
                   Language.PureScript.CoreImp.AST.Add) -}
9e85f3623e72774d6fe0c49022f9d20f
  inlineCommonOperators86 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators88,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators87
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
5a722f11289c390ab49021636e779118
  inlineCommonOperators87 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.append1) -}
3f1ef6fc0582c8e6dfcaa1a4da739c36
  inlineCommonOperators88 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataSemigroup2) -}
e7e088857ac4fb7a0128e3e282ffaa1f
  inlineCommonOperators89 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators88,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators90
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
3660e8b6a032228e865e5bd6eb096068
  inlineCommonOperators9 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators150
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators10) -}
88be3ec812791c1020159650bb917f78
  inlineCommonOperators90 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.semigroupString1) -}
2ed3bd954444deb47dcba298d80e4d51
  inlineCommonOperators91 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
a056a4f43c6b3c21d99b7b9203b59a06
  inlineCommonOperators92 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators93
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
6a58fdbcd31869539975e35cd5d85438
  inlineCommonOperators93 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.greaterThanOrEq1) -}
56706462649b01a106a0dfdc8bca361f
  inlineCommonOperators94 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataOrd2) -}
2964860face60c399bbb5d95b078dc54
  inlineCommonOperators95 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators96
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
0b6e93f84d7d574118e5292ddc934b13
  inlineCommonOperators96 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordString1) -}
40783b7f4e0aa0ba574dff3b1ea7c0c9
  inlineCommonOperators97 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
f77582543de4a6e348ca2c3ac607790f
  inlineCommonOperators98 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators99
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
102158de5a6ce0185d75ff2b0867236b
  inlineCommonOperators99 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.greaterThan1) -}
5cd4d6aa1b06f5d1e5300adea4e9ebc3
  inlineCommonOperators_$sgo ::
    (Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST)
    -> [Language.PureScript.CoreImp.AST.AST
        -> Language.PureScript.CoreImp.AST.AST]
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
117bba7a8e3e6cb06351283ee9d16ee9
  inlineCommonOperators_binary ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> Language.PureScript.CoreImp.AST.BinaryOperator
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U,U,U),1*U)><L,1*U(1*U(U,U,U),1*U)><L,U><S,1*U>,
     Unfolding: (\ (dict :: (Data.Text.Internal.Text,
                             Language.PureScript.PSString.PSString))
                   (fns :: (Data.Text.Internal.Text,
                            Language.PureScript.PSString.PSString))
                   (op :: Language.PureScript.CoreImp.AST.BinaryOperator)
                   (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 ds10 ds11
                        -> case ds10 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.App ds12 fn ds13
                             -> case ds13 of wild3 {
                                  [] -> wild
                                  : dict' ds14
                                  -> case ds14 of wild4 {
                                       []
                                       -> case ds11 of wild5 {
                                            [] -> wild
                                            : x ds15
                                            -> case ds15 of wild6 {
                                                 []
                                                 -> case ds8 of wild7 {
                                                      [] -> wild
                                                      : y ds16
                                                      -> case ds16 of wild8 {
                                                           []
                                                           -> case dict of ww { (,) ww1 ww2 ->
                                                              case dict' of wild9 {
                                                                DEFAULT -> wild
                                                                Language.PureScript.CoreImp.AST.Indexer ds17 ds18 ds19
                                                                -> case ds18 of wild10 {
                                                                     DEFAULT -> wild
                                                                     Language.PureScript.CoreImp.AST.StringLiteral ds20 x1
                                                                     -> case ds19 of wild11 {
                                                                          DEFAULT -> wild
                                                                          Language.PureScript.CoreImp.AST.Var ds21 y1
                                                                          -> case GHC.Classes.$fEq[]_$c==
                                                                                    @ GHC.Word.Word16
                                                                                    GHC.Word.$fEqWord16
                                                                                    x1
                                                                                      `cast`
                                                                                    (Language.PureScript.PSString.N:PSString[0])
                                                                                    ww2
                                                                                      `cast`
                                                                                    (Language.PureScript.PSString.N:PSString[0]) of wild12 {
                                                                               GHC.Types.False
                                                                               -> wild
                                                                               GHC.Types.True
                                                                               -> case y1 of wild13 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                                  case ww1 of wild14 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                                  case GHC.Prim.==#
                                                                                         dt2
                                                                                         dt5 of lwild {
                                                                                    DEFAULT -> wild
                                                                                    1#
                                                                                    -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                            GHC.Prim.Int# #)}
                                                                                              dt
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt1)
                                                                                              dt3
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt4)
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt2)
                                                                                              GHC.Prim.realWorld# of wild15 { (#,#) ds22 ds23 ->
                                                                                       case GHC.Prim.narrow32Int#
                                                                                              ds23 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         0#
                                                                                         -> case fns of ww4 { (,) ww5 ww6 ->
                                                                                            case fn of wild17 {
                                                                                              DEFAULT
                                                                                              -> wild
                                                                                              Language.PureScript.CoreImp.AST.Indexer ds24 ds25 ds26
                                                                                              -> case ds25 of wild18 {
                                                                                                   DEFAULT
                                                                                                   -> wild
                                                                                                   Language.PureScript.CoreImp.AST.StringLiteral ds27 x2
                                                                                                   -> case ds26 of wild19 {
                                                                                                        DEFAULT
                                                                                                        -> wild
                                                                                                        Language.PureScript.CoreImp.AST.Var ds28 y2
                                                                                                        -> case GHC.Classes.$fEq[]_$c==
                                                                                                                  @ GHC.Word.Word16
                                                                                                                  GHC.Word.$fEqWord16
                                                                                                                  x2
                                                                                                                    `cast`
                                                                                                                  (Language.PureScript.PSString.N:PSString[0])
                                                                                                                  ww6
                                                                                                                    `cast`
                                                                                                                  (Language.PureScript.PSString.N:PSString[0]) of wild20 {
                                                                                                             GHC.Types.False
                                                                                                             -> wild
                                                                                                             GHC.Types.True
                                                                                                             -> case y2 of wild21 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                                                                                case ww5 of wild22 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                                                                                                case GHC.Prim.==#
                                                                                                                       dt9
                                                                                                                       dt12 of lwild1 {
                                                                                                                  DEFAULT
                                                                                                                  -> wild
                                                                                                                  1#
                                                                                                                  -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.ByteArray#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.State#
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                    -> (# GHC.Prim.State#
                                                                                                                                                            GHC.Prim.RealWorld,
                                                                                                                                                          GHC.Prim.Int# #)}
                                                                                                                            dt7
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt8)
                                                                                                                            dt10
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt11)
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt9)
                                                                                                                            GHC.Prim.realWorld# of wild23 { (#,#) ds29 ds30 ->
                                                                                                                     case GHC.Prim.narrow32Int#
                                                                                                                            ds30 of wild24 {
                                                                                                                       DEFAULT
                                                                                                                       -> wild
                                                                                                                       0#
                                                                                                                       -> Language.PureScript.CoreImp.AST.Binary
                                                                                                                            ss
                                                                                                                            op
                                                                                                                            x
                                                                                                                            y } } } } } } } } } } } } } } } } } } } }
                                                           : ipv ipv1 -> wild } }
                                                 : ipv ipv1 -> wild } }
                                       : ipv ipv1 -> wild } } } } }) -}
a44daf1e100c27c668b2d02c97be0bf5
  inlineCommonOperators_f10 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_$sgo
                   (GHC.Base.id @ Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators3) -}
4a3f2cbb0482d55734ea42782e5bbb16
  inlineCommonOperators_moduleName :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataIntBits2) -}
2b739435e7e16d9948585eb294b43c8c
  inlineCommonOperators_unary ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> Language.PureScript.CoreImp.AST.UnaryOperator
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U,U,U),1*U)><L,1*U(1*U(U,U,U),1*U)><L,U><S,1*U>,
     Unfolding: (\ (dicts :: (Data.Text.Internal.Text,
                              Language.PureScript.PSString.PSString))
                   (fns :: (Data.Text.Internal.Text,
                            Language.PureScript.PSString.PSString))
                   (op :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : dict' ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : x ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case dicts of ww { (,) ww1 ww2 ->
                                               case dict' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     ww2
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0]) of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case ww1 of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> case fns of ww4 { (,) ww5 ww6 ->
                                                                             case fn of wild14 {
                                                                               DEFAULT -> wild
                                                                               Language.PureScript.CoreImp.AST.Indexer ds20 ds21 ds22
                                                                               -> case ds21 of wild15 {
                                                                                    DEFAULT -> wild
                                                                                    Language.PureScript.CoreImp.AST.StringLiteral ds23 x2
                                                                                    -> case ds22 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         Language.PureScript.CoreImp.AST.Var ds24 y1
                                                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                                                   @ GHC.Word.Word16
                                                                                                   GHC.Word.$fEqWord16
                                                                                                   x2
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0])
                                                                                                   ww6
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0]) of wild17 {
                                                                                              GHC.Types.False
                                                                                              -> wild
                                                                                              GHC.Types.True
                                                                                              -> case y1 of wild18 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                                                                 case ww5 of wild19 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                                                                                 case GHC.Prim.==#
                                                                                                        dt9
                                                                                                        dt12 of lwild1 {
                                                                                                   DEFAULT
                                                                                                   -> wild
                                                                                                   1#
                                                                                                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.ByteArray#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.State#
                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                                           GHC.Prim.Int# #)}
                                                                                                             dt7
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt8)
                                                                                                             dt10
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt11)
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt9)
                                                                                                             GHC.Prim.realWorld# of wild20 { (#,#) ds25 ds26 ->
                                                                                                      case GHC.Prim.narrow32Int#
                                                                                                             ds26 of wild21 {
                                                                                                        DEFAULT
                                                                                                        -> wild
                                                                                                        0#
                                                                                                        -> Language.PureScript.CoreImp.AST.Unary
                                                                                                             ss
                                                                                                             op
                                                                                                             x } } } } } } } } } } } } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
7fc17936279f21a3797d00ed5c9cf004
  inlineCommonValues ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonValues_convert) -}
8e50909850f5033fc149a465c4e658a2
  inlineCommonValues_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U> -}
a35150853dcb45d36b37e64faba55d9e
  inlineFnComposition ::
    Control.Monad.Supply.Class.MonadSupply m =>
    Language.PureScript.CoreImp.AST.AST
    -> m Language.PureScript.CoreImp.AST.AST
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A)><L,U> -}
2e1caeaf9b6f39a12b76d16ee7977123
  inlineUnsafeCoerce ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
07ab7194edeee481de11b1256b10432f
  inlineUnsafeCoerce1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce_convert
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
8da2758baffba073bc6c3662708121f9
  inlineUnsafeCoerce2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.unsafeCoerce2) -}
82a74ce075cfd8fec4d2989f7e0b731b
  inlineUnsafeCoerce3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafeCoerceFn1) -}
8665837ab9d6bf9638aa24c8d5b746d2
  inlineUnsafeCoerce_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Indexer ds10 ds11 ds12
                        -> case ds11 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.StringLiteral ds13 unsafeCoerceFn
                             -> case ds12 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Var ds14 unsafeCoerce
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : comp ds15
                                       -> case ds15 of wild5 {
                                            []
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      unsafeCoerceFn
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce3 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case unsafeCoerce of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce2 of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds16 ds17 ->
                                                         case GHC.Prim.narrow32Int# ds17 of wild10 {
                                                           DEFAULT -> wild 0# -> comp } } } } } }
                                            : ipv ipv1 -> wild } } } } } }) -}
27b56ffaa28355d06f7f77d32dcb631d
  inlineUnsafePartial ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
40fb1446df0ed71562e03e6c2a6b2c35
  inlineUnsafePartial1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial_convert
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
c194f18b0f97204c8871268ecdc3f65a
  inlineUnsafePartial2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.partialUnsafe2) -}
710524ee44967ddb61193b5bbc8bf190
  inlineUnsafePartial3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafePartial1) -}
eba8c270c3555e084f006227817d49c4
  inlineUnsafePartial_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Indexer ds9 ds10 ds11
                        -> case ds10 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.StringLiteral ds12 unsafePartial
                             -> case ds11 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Var ds13 partialUnsafe
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : comp ds14
                                       -> case ds14 of wild5 {
                                            []
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      unsafePartial
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial3 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case partialUnsafe of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial2 of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds15 ds16 ->
                                                         case GHC.Prim.narrow32Int# ds16 of wild10 {
                                                           DEFAULT -> wild
                                                           0#
                                                           -> Language.PureScript.CoreImp.AST.App
                                                                ss
                                                                comp
                                                                (GHC.Types.:
                                                                   @ Language.PureScript.CoreImp.AST.AST
                                                                   (Language.PureScript.CoreImp.AST.Var
                                                                      ss
                                                                      Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes1)
                                                                   (GHC.Types.[]
                                                                      @ Language.PureScript.CoreImp.AST.AST)) } } } } } }
                                            : ipv ipv1 -> wild } } } } } }) -}
c31b430c55e8ce4c0972df682801bdca
  inlineVariables ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables1) -}
fea40f6cbe8af30dc6a240c5f63854d8
  inlineVariables1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Block ss sts
                   -> Language.PureScript.CoreImp.AST.Block
                        ss
                        (Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables_go
                           sts) }) -}
17ef0d4a669e5bc2b93c0887673db96d
  inlineVariables_go ::
    [Language.PureScript.CoreImp.AST.AST]
    -> [Language.PureScript.CoreImp.AST.AST]
  {- Arity: 1, Strictness: <S,1*U> -}
bd3e4c63e560c15fc8932bf7e6470767
  shouldInline ::
    Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8855fbc5e426bd8664ffa5fc0b3da7bb
  unThunk ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.unThunk_convert) -}
89fa19c850e3f516d137275502dc5520
  unThunk_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Block ss ds7
                   -> case ds7 of wild1 {
                        []
                        -> Language.PureScript.CoreImp.AST.Block
                             ss
                             (GHC.Types.[] @ Language.PureScript.CoreImp.AST.AST)
                        : ipv ipv1
                        -> let {
                             exit :: Language.PureScript.CoreImp.AST.AST
                                     -> Language.PureScript.CoreImp.AST.AST
                               <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (eta :: Language.PureScript.CoreImp.AST.AST)[OneShot] ->
                               case eta of wild2 {
                                 DEFAULT -> wild
                                 Language.PureScript.CoreImp.AST.Return ds8 ds9
                                 -> case ds9 of wild3 {
                                      DEFAULT -> wild
                                      Language.PureScript.CoreImp.AST.App ds10 ds11 ds12
                                      -> case ds11 of wild4 {
                                           DEFAULT -> wild
                                           Language.PureScript.CoreImp.AST.Function ds13 ds14 ds15 ds16
                                           -> case ds14 of wild5 {
                                                GHC.Base.Nothing
                                                -> case ds15 of wild6 {
                                                     []
                                                     -> case ds16 of wild7 {
                                                          DEFAULT -> wild
                                                          Language.PureScript.CoreImp.AST.Block ds17 body
                                                          -> case ds12 of wild8 {
                                                               []
                                                               -> Language.PureScript.CoreImp.AST.Block
                                                                    ss
                                                                    (GHC.Base.++
                                                                       @ Language.PureScript.CoreImp.AST.AST
                                                                       (GHC.List.init1
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          ipv
                                                                          ipv1)
                                                                       body)
                                                               : ipv2 ipv3 -> wild } }
                                                     : ipv2 ipv3 -> wild }
                                                GHC.Base.Just ipv2 -> wild } } } }
                           } in
                           letrec {
                             go4 :: [Language.PureScript.CoreImp.AST.AST]
                                    -> Language.PureScript.CoreImp.AST.AST
                                    -> Language.PureScript.CoreImp.AST.AST
                               <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                             = \ (ds8 :: [Language.PureScript.CoreImp.AST.AST])
                                 (eta :: Language.PureScript.CoreImp.AST.AST) ->
                               case ds8 of wild2 { [] -> exit eta : y ys -> go4 ys y }
                           } in
                           let {
                             $sgo :: Language.PureScript.CoreImp.AST.AST
                                     -> Language.PureScript.CoreImp.AST.AST
                                     -> [Language.PureScript.CoreImp.AST.AST]
                                     -> Language.PureScript.CoreImp.AST.AST
                               <join 3> {- Arity: 3, Strictness: <L,A><L,1*U><S,1*U> -}
                             = \ (sc :: Language.PureScript.CoreImp.AST.AST)
                                 (sc1 :: Language.PureScript.CoreImp.AST.AST)
                                 (sc2 :: [Language.PureScript.CoreImp.AST.AST]) ->
                               go4 sc2 sc1
                           } in
                           $sgo
                             (GHC.List.lastError @ Language.PureScript.CoreImp.AST.AST)
                             ipv
                             ipv1 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

