
==================== FINAL INTERFACE ====================
2019-01-24 14:16:21.827559 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.CoreImp.Optimizer.Inliner 8043
  interface hash: 29b8655796cfd154ac49322d0d085de1
  ABI hash: 3b14b1d80f4c19ad45b7f526e4f3b930
  export-list hash: afeba31d14fa511bef4287e8d33b43ba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bec0ba85914d2da9e0a4be22213f6c78
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreImp.Optimizer.Inliner.etaConvert
  Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonValues
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineFnComposition
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial
  Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables
  Language.PureScript.CoreImp.Optimizer.Inliner.unThunk
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
  freshName 3b42bd990d5e852928ea9f3f20a8c018
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  add bc75330939bbdb0372a244a6d1213f36
  and e43791a8a0d780c01beffeb04696877e
  append fb527f4c5c460f597512daa24dea6309
  apply 2965ad4d4a930a7136541d13817769db
  applyFlipped db2fdd8ed168d53999a885c30d931f5a
  bottom 28bf3b98ed5f9176957d82b44e467201
  boundedBoolean 63dd05c310328435df05cbcb36f359e6
  complement 1c77ba0fdf2e10b783871f847975f687
  compose 29cdf472891adf8e8823f7f88105413a
  composeFlipped 343e7ca99ba6921a7fc13dfe8a2c6051
  conj 82f49a3d788cce8f918ed52038a33482
  controlMonadEffUncurried 71a2385bd852903f020aba3174e33a8a
  controlSemigroupoid a59870e3403c568c9cab4d87d53d6d24
  dataArray 4e70940442d0072625e8cafa9973aaed
  dataBounded c81aca5cfaea54a92f5123e3e4693e2d
  dataEq 5a4e993b467928d86fa5cc85ac5bcd9c
  dataEuclideanRing ed3ca2f8ef4b898452b0fc76b8b9382c
  dataFunction 8d864d52c9be9ee646ee03db4368e7a4
  dataFunctionUncurried ea5782602cbf4513b65e91e77c657763
  dataHeytingAlgebra e2672a46611ab91453ec419b45a05e3f
  dataIntBits 1259e6fec0549f14211c767e0b023173
  dataOrd 809e14af05308feb48d3d8e631cc098c
  dataRing 10596d38849da57891d20da3184ab2c2
  dataSemigroup 0c5fb6817cb581312062d369dff33d17
  dataSemiring e58e18cb310d7ccea383e37b71b9e2b6
  disj fc32d34f19917fb5008e871568596f8c
  div 93e092698a92a6af030645efa965e6c2
  effectUncurried 28e67be309d165bfe7f20fe072c231b2
  eq 75a29caf169679f02ace1903e716411f
  eqBoolean 5d2ac078be93eece6818572cdac6b6be
  eqChar a1d1b4aadd681a0b12ef0d5be193e87d
  eqInt 75893ceb1d35d90dfc0460dfafcf82bc
  eqNumber 4a7ff71645911044dbcac4fca60aea5c
  eqString d8b90d3eb29d8c342604b26f4c43f104
  euclideanRingNumber 4469082092d9dbc2a7d8a771cc7ac9ca
  greaterThan ad63c4c1176f92a3070a12ee11f0bdf9
  greaterThanOrEq cd2e59723a03a7ada96425fff59635f4
  heytingAlgebraBoolean f0e2af4831196ce285081ad63f77edb4
  lessThan 155e79391204f531bb1866fb28a28a5f
  lessThanOrEq 24e0256d4d79ba00a0a0cd681ba29e17
  mkEffFn ae996f9991512441af772f0153456aaf
  mkEffectFn c4c8b2e4e4b7731b1506fd5764404656
  mkFn 353f0eaa5442d7194b181f648c56f2d2
  mul 03a7c1d6db30329a74b6f814ff9dba42
  negate f20a91ad9d930a40924d2c7851e42a34
  not 3a61f0b021f4103bb802de2382a3034e
  notEq 4c79ba1d8cc950390aeca62574cd5aa9
  one 1c4a21fb959ddebef28df9610df4da58
  or ba667d8c2325fe01daaf239bc6477711
  ordBoolean cb44df3e45ec19548de25c893e123039
  ordChar 496cef7f2afb795c7cc69eb474fc16d9
  ordInt 233495a6d0530257d6f3b1c7529ac5d7
  ordNumber 3816ac7f4c66e6392f8014c48c7460ec
  ordString 26b2376a5c1879d5a631cacbbe84ec15
  partialUnsafe 11bf7b4478d4d3990999f71ced356339
  ringInt 67c4a20ce55c983a5c7466d551c81c7f
  ringNumber 2a25986bd0bef4b5bca19fa1db451d47
  runEffFn 57d1d908bc26cf635aab6fddee198350
  runEffectFn 9cededbaf4e4bddcb88920e28d0561fe
  runFn 53d53c8c91dbf8972c0720e289c65935
  semigroupString 519cb884fef1c0e6ceda4c1f2d76cc19
  semigroupoidFn 6fcbb2908945fcb1888d06f3d5147030
  semiringInt cba7c0c57da2d3daeefb67679f072d3c
  semiringNumber 8acb95354fc73236590d44765ead5b65
  shl 16067eb5693809f6d661037b729749af
  shr 5b94dbd32a75da0cf7bae5da72ba3056
  sub e0fcaf992855b3514c7e23756e4a6782
  top 6ef390262a0ee3df612a942b1f7245ad
  undefined b36b119b983e0cdb9453c1f408720756
  unsafeCoerce 02c046c873fa7a0a2c1ce48e006fd86e
  unsafeCoerceFn 63460ed21d334e9ff0d0df65fbb194b6
  unsafeIndex c3c6cc9bcd0b8f8188d30325114b9f29
  unsafePartial 57a2402a4fe19c5d2f262f447a276a86
  xor 754fd6ac744b83d50a46a4c73fb52b27
  zero e3308d06e8b90b23ebc4122b0c5c4945
  zshr 98f0b811d01035bc61304b20846c30bd
import  -/  Language.PureScript.CoreImp.AST e13d2052141e50eca2a5dfdad2a67d5a
  exports: d4ba1e9a31e7dde56b84028e789bb579
  AST 27e474366a6164e874a6d4e5cad82745
  Add ee8a15bf68727ba38e3259f9d38ce000
  And 8f00816debfa32cad0f15ad059f34f40
  App 5abf9416415bc5ba651add3314a10fff
  Binary 080096309bcbab903b0217978ad73d77
  BinaryOperator 489f0b1ed508c6f848c3aae91aed6e07
  BitwiseAnd ca64e038dc66df8563e163ba5053c42d
  BitwiseNot c08141fcf210a6db833377173a21718c
  BitwiseOr 626103fe48287518ea90198749c2453b
  BitwiseXor 4d030de10ca2e2e941f3e7d550fef2f4
  Block 7fbe9eae8f7ef21e5be6cd4f87dbd7bb
  BooleanLiteral a84a7866637474e546180785e6edb816
  Divide 92442e545926606e3ed41eac81269c09
  EqualTo 0f986cc7cd79b0c38c6426e5ba77a2b4
  Function 2710f3d739ccf31052f17a06deb026c1
  GreaterThan c71ccf28ed4f4c93878d2a24d76eff35
  GreaterThanOrEqualTo 82aa847ea3678ad3d8206089c32630cf
  Indexer b754e3d8b497f4ad29c8bd5817cd1f9c
  LessThan 075ac47b6d209105b9ef9ea3b4f60ae9
  LessThanOrEqualTo 2890fb71be83399206ab06ef76cfd832
  Multiply f8c939955ba418da8e70b5d9544273f1
  Negate a398f8e5dcba8ddc9e41581101e5d959
  Not fca5f655c10c599b512c4ffda42ebc61
  NotEqualTo ffbe690215f48015d0d0e23fb00aa8b1
  NumericLiteral e38711d9d729f5ebddad949c20bcac53
  Or 58ced2b047db68c8d5ebe8cf67c0f61e
  Return 8563204060a8b0a3f8d4adff3485df46
  ShiftLeft 28c4707ec0257a78d05e065f8d46f35b
  ShiftRight 2e644adac5ad8b5171dde047773390c0
  StringLiteral 60beb3f92e5b8969f2f1b00baaaee73d
  Subtract cf9d313242a222bc2b4b5981f4fed9c9
  Unary 356b8c86a9d1db6d32ffd8003aeb3e81
  UnaryOperator 25c18297338795f6f1b7341e3c4ca5dd
  Var 22edb01eb085c313bbae6149799eeeee
  VariableIntroduction 564ecc61882b20dd946b2a6b65aaab39
  ZeroFillShiftRight 63466398f8e63366293629c88f7b1a97
  everywhere b72aec4edb3793e6cf984fe7c0beffe3
  everywhereTopDown 01ac618ec3874485a8c28a970ba13ab8
  everywhereTopDownM 4b71f6abad916f1f31f0c3fb21573bdc
import  -/  Language.PureScript.CoreImp.Optimizer.Common f77cc52a6dde77bba5df16c20fb29fac
  exports: 35654d9237eb883ff052c1e1ed279bb1
  applyAll 3363d918d9a2ed790eb2715c7758fea9
  isDict ee71858a411ace591c46a330339c5634
  isDict' a86047b1df479257652aae2b493d2f19
  isReassigned f297005aa3b2c99542686f76d1b0f394
  isRebound 2a608c9b953027c723ee28cd977d1ba9
  isUpdated acf3f9de0e5d7b5be99a5d6739a85e91
  removeFromBlock 0157b87fb5bd12f4148618d6af3406a1
  replaceIdent 6b7f7aeb3c0c280576b5070f6f2c2d32
  replaceIdents 16f8035b8032093a965026a0eaff7a5e
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
13a7b7f9267bd1f70bb600c06383f0f8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule3
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule1) -}
dc5d6d94381a13b5e8e0e3c29072543d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule2) -}
cd017fb616714a0be00dce9d44ad441e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.CoreImp.Optimizer.Inliner"#) -}
fcfaa54ad987aee4c94f7ee4a5dc68ca
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Inliner.$trModule4) -}
64932213d7f780846db64a99b0931634
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
daea0ffcb5055b19453f6622d397ee80
  etaConvert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.etaConvert_convert) -}
3eefaa25f2d3118bd0869e6bf8248c70
  etaConvert_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Function ds7 ds8 ds9 ds10
                   -> case ds8 of wild1 {
                        GHC.Base.Nothing
                        -> case ds9 of wild2 {
                             []
                             -> case ds10 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Block ds11 ds12
                                  -> case ds12 of wild4 {
                                       [] -> wild
                                       : ds13 ds14
                                       -> case ds13 of wild5 {
                                            DEFAULT -> wild
                                            Language.PureScript.CoreImp.AST.Return ds15 ds16
                                            -> case ds16 of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.App ds17 fn ds18
                                                 -> case ds18 of wild7 {
                                                      []
                                                      -> case ds14 of wild8 {
                                                           [] -> fn : ipv ipv1 -> wild }
                                                      : ipv ipv1 -> wild } } } } }
                             : ipv ipv1 -> wild }
                        GHC.Base.Just ipv -> wild }
                   Language.PureScript.CoreImp.AST.Block ss ds7
                   -> case ds7 of wild1 {
                        [] -> wild
                        : ds8 ds9
                        -> case ds8 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.Return ds10 ds11
                             -> case ds11 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.App ds12 ds13 args
                                  -> case ds13 of wild4 {
                                       DEFAULT -> wild
                                       Language.PureScript.CoreImp.AST.Function ds14 ds15 idents block
                                       -> case ds15 of wild5 {
                                            GHC.Base.Nothing
                                            -> case block of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Block ds16 body
                                                 -> case ds9 of wild7 {
                                                      []
                                                      -> let {
                                                           $j :: Language.PureScript.CoreImp.AST.AST
                                                             <join 0>
                                                           = let {
                                                               $j1 :: Language.PureScript.CoreImp.AST.AST
                                                                 <join 0>
                                                               = let {
                                                                   exit :: Language.PureScript.CoreImp.AST.AST
                                                                     <join 0>
                                                                   = Language.PureScript.CoreImp.AST.Block
                                                                       ss
                                                                       (GHC.Base.map
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          (Language.PureScript.CoreImp.Optimizer.Common.replaceIdents
                                                                             (GHC.List.zip
                                                                                @ Data.Text.Internal.Text
                                                                                @ Language.PureScript.CoreImp.AST.AST
                                                                                idents
                                                                                args))
                                                                          body)
                                                                 } in
                                                                 letrec {
                                                                   go4 :: [Language.PureScript.CoreImp.AST.AST]
                                                                          -> Language.PureScript.CoreImp.AST.AST
                                                                     <join 1> {- Arity: 1,
                                                                                 Strictness: <S,1*U> -}
                                                                   = \ (ds17 :: [Language.PureScript.CoreImp.AST.AST]) ->
                                                                     case ds17 of wild8 {
                                                                       [] -> exit
                                                                       : y ys
                                                                       -> case (Language.PureScript.CoreImp.Optimizer.Common.isRebound1
                                                                                  y
                                                                                  wild6)
                                                                                 `cast`
                                                                               (Data.Semigroup.Internal.N:Any[0]) of wild9 {
                                                                            GHC.Types.False
                                                                            -> go4 ys
                                                                            GHC.Types.True
                                                                            -> wild } }
                                                                 } in
                                                                 go4 args
                                                             } in
                                                             letrec {
                                                               go4 :: [Data.Text.Internal.Text]
                                                                      -> Language.PureScript.CoreImp.AST.AST
                                                                 <join 1> {- Arity: 1,
                                                                             Strictness: <S,1*U> -}
                                                               = \ (ds17 :: [Data.Text.Internal.Text]) ->
                                                                 case ds17 of wild8 {
                                                                   [] -> $j1
                                                                   : y ys
                                                                   -> case (Language.PureScript.CoreImp.Optimizer.Common.isRebound1
                                                                              (Language.PureScript.CoreImp.AST.Var
                                                                                 (GHC.Base.Nothing
                                                                                    @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                 y)
                                                                              wild6)
                                                                             `cast`
                                                                           (Data.Semigroup.Internal.N:Any[0]) of wild9 {
                                                                        GHC.Types.False -> go4 ys
                                                                        GHC.Types.True -> wild } }
                                                             } in
                                                             go4 idents
                                                         } in
                                                         letrec {
                                                           go4 :: [Language.PureScript.CoreImp.AST.AST]
                                                                  -> Language.PureScript.CoreImp.AST.AST
                                                             <join 1> {- Arity: 1,
                                                                         Strictness: <S,1*U> -}
                                                           = \ (ds17 :: [Language.PureScript.CoreImp.AST.AST]) ->
                                                             case ds17 of wild8 {
                                                               [] -> $j
                                                               : y ys
                                                               -> case Language.PureScript.CoreImp.Optimizer.Inliner.shouldInline
                                                                         y of wild9 {
                                                                    GHC.Types.False -> wild
                                                                    GHC.Types.True -> go4 ys } }
                                                         } in
                                                         go4 args
                                                      : ipv ipv1 -> wild } }
                                            GHC.Base.Just ipv -> wild } } } } } }) -}
908f2f54095481fda58bafc099ec3f7e
  evaluateIifes ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes_convert) -}
51e77a449952957a76cd2e5acfad2dbe
  evaluateIifes1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.undefined2) -}
238a2f800e53f656291b1022ed6054b3
  evaluateIifes_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Function ds10 ds11 ds12 ds13
                        -> case ds11 of wild2 {
                             GHC.Base.Nothing
                             -> let {
                                  fail :: GHC.Prim.Void# -> Language.PureScript.CoreImp.AST.AST
                                    <join 1> {- Arity: 1, Strictness: <L,A> -}
                                  = \ (ds14 :: GHC.Prim.Void#)[OneShot] ->
                                    case ds13 of wild3 {
                                      DEFAULT -> wild
                                      Language.PureScript.CoreImp.AST.Block ds15 ds16
                                      -> case ds16 of wild4 {
                                           [] -> wild
                                           : ds17 ds18
                                           -> case ds17 of wild5 {
                                                DEFAULT -> wild
                                                Language.PureScript.CoreImp.AST.Return ss ret
                                                -> case ds18 of wild6 {
                                                     []
                                                     -> case ds9 of wild7 {
                                                          []
                                                          -> let {
                                                               $j :: Language.PureScript.CoreImp.AST.AST
                                                                 <join 0>
                                                               = Language.PureScript.CoreImp.Optimizer.Common.replaceIdents
                                                                   (let {
                                                                      lvl16 :: Language.PureScript.CoreImp.AST.AST
                                                                      = Language.PureScript.CoreImp.AST.Var
                                                                          ss
                                                                          Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes1
                                                                    } in
                                                                    GHC.Base.map
                                                                      @ Data.Text.Internal.Text
                                                                      @ (Data.Text.Internal.Text,
                                                                         Language.PureScript.CoreImp.AST.AST)
                                                                      (\ (ds19 :: Data.Text.Internal.Text) ->
                                                                       (ds19, lvl16))
                                                                      ds12)
                                                                   ret
                                                             } in
                                                             letrec {
                                                               go4 :: [Data.Text.Internal.Text]
                                                                      -> Language.PureScript.CoreImp.AST.AST
                                                                 <join 1> {- Arity: 1,
                                                                             Strictness: <S,1*U> -}
                                                               = \ (ds19 :: [Data.Text.Internal.Text]) ->
                                                                 case ds19 of wild8 {
                                                                   [] -> $j
                                                                   : y ys
                                                                   -> case Language.PureScript.CoreImp.Optimizer.Common.isReassigned
                                                                             y
                                                                             ret of wild9 {
                                                                        GHC.Types.False -> go4 ys
                                                                        GHC.Types.True -> wild } }
                                                             } in
                                                             go4 ds12
                                                          : ipv ipv1 -> wild }
                                                     : ipv ipv1 -> wild } } } }
                                } in
                                case ds12 of wild3 {
                                  []
                                  -> case ds13 of wild4 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       Language.PureScript.CoreImp.AST.Block ds14 ds15
                                       -> case ds15 of wild5 {
                                            [] -> fail GHC.Prim.void#
                                            : ds16 ds17
                                            -> case ds16 of wild6 {
                                                 DEFAULT -> fail GHC.Prim.void#
                                                 Language.PureScript.CoreImp.AST.Return ds18 ret
                                                 -> case ds17 of wild7 {
                                                      []
                                                      -> case ds9 of wild8 {
                                                           [] -> ret
                                                           : ipv ipv1 -> fail GHC.Prim.void# }
                                                      : ipv ipv1 -> fail GHC.Prim.void# } } } }
                                  : ipv ipv1 -> fail GHC.Prim.void# }
                             GHC.Base.Just ipv -> wild } } }) -}
3eb3aa359666fccfa1605db8b9045acf
  inlineCommonOperators ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
b43afece40a8008d7d9ffd73e1d3880e
  inlineCommonOperators1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators2
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
c0a089de5ad17b184fd70b92d71cc100
  inlineCommonOperators10 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators147
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators11) -}
2d99759152d45a59e1426dcfe1a22f50
  inlineCommonOperators100 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
f5a88af20acd36da64b0442e73c00e72
  inlineCommonOperators101 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators102
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
2ded45ea42dc8451c6349982620bb864
  inlineCommonOperators102 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.lessThanOrEq1) -}
5d6dada20df6688c86558802fb8b8bfd
  inlineCommonOperators103 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
cfede9f79b6c400cadd6cb9b28779370
  inlineCommonOperators104 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators105
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
9d2e707bed0943e611266dd321f1f521
  inlineCommonOperators105 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.lessThan1) -}
ad2843e2b303609264ae6fe393eb3d62
  inlineCommonOperators106 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
c99c615e22a4ff009962fd943f2b8805
  inlineCommonOperators107 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators108
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
cd44052e32700256457d32ac160b62aa
  inlineCommonOperators108 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordNumber1) -}
9f745e378cc759561ddc19a9ebb3f88b
  inlineCommonOperators109 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
2fb065d3f78e4711698e81bb938e83d1
  inlineCommonOperators11 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators146
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators12) -}
f0399412dc54d25854d5e35317d581e5
  inlineCommonOperators110 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
007c2b53ab3f96e5a0fea041bb099fb7
  inlineCommonOperators111 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators107
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
e921389f7347d36b8a41b1c68cce67d6
  inlineCommonOperators112 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
6e0c514c542d3e73864f7717b4189514
  inlineCommonOperators113 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators114
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
2e1d89d6b605fe7b0f603fd84c685b16
  inlineCommonOperators114 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordInt1) -}
9d3ab810f75fa20d70abe483b4cf170f
  inlineCommonOperators115 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
4fb7951b7c1a6bbd1d3ba57772b408f5
  inlineCommonOperators116 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
f8bf6d2c087dd7dd1f539c10e29f2561
  inlineCommonOperators117 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators113
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
5b43da1ca939625fb513a5be79398be6
  inlineCommonOperators118 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
7628df48403a92e10a88ee6ac0c74c82
  inlineCommonOperators119 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators120
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
b22448c3e85f353b2bd06669903bbe6f
  inlineCommonOperators12 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators143
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators13) -}
74252d7c834496a09d51bad17d4cbb7e
  inlineCommonOperators120 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordChar1) -}
a6164576378ecef6718208fbaf82c3da
  inlineCommonOperators121 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
917e6194c7a4eaeef3eb7a340683a81c
  inlineCommonOperators122 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
3f34f1bbed01bb9bdc204717a60b9ddd
  inlineCommonOperators123 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators119
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
4987176c5d9461049ce27618afa62a1d
  inlineCommonOperators124 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
314458d717490a59233d2d227fa3ed04
  inlineCommonOperators125 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators126
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
c2d784521905571620fb83f3c806e80b
  inlineCommonOperators126 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordBoolean1) -}
1e0d92413fa66f850189049b690b1f6a
  inlineCommonOperators127 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
f7972bb81ec835ed27a935ae62151b7b
  inlineCommonOperators128 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators101
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo) -}
c5e623c40558cb47d303fac994a583ab
  inlineCommonOperators129 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators125
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators104
                   Language.PureScript.CoreImp.AST.LessThan) -}
86b0e0d7ab51fe90582cb80728b3f111
  inlineCommonOperators13 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators142
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators14) -}
2b4a0ee850445277f1f8dc02526faf74
  inlineCommonOperators130 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators134
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
0f8f6e1219a470bd66a26fbe4a971039
  inlineCommonOperators131 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators132
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
a7c2110e13592235b87597d3fcba3279
  inlineCommonOperators132 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.notEq1) -}
bbda72d6f4ac24200a951ae379dbeeae
  inlineCommonOperators133 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataEq2) -}
97d1ec50d48ca665bd8fdab1de058d1b
  inlineCommonOperators134 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators135
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
2b322234e4f309744121b39af1403671
  inlineCommonOperators135 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqBoolean1) -}
f8e6ced0557c48aefaedc8a8cf2de9d6
  inlineCommonOperators136 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators134
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
10b7160cf39c13d952d7f27b7ea73c8a
  inlineCommonOperators137 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators138
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
5b4d55b3523eb90941bed47d48f78f38
  inlineCommonOperators138 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eq2) -}
b7cf2432cbaf3ee6cdfc6753868dc4bb
  inlineCommonOperators139 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators140
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
f0cdc9f4a4a577f6bf56071dcf4b0435
  inlineCommonOperators14 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators139
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators15) -}
1f29ca539d92b575ff7c137dc9af704c
  inlineCommonOperators140 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators141
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
c9871545bd43356c5ecdd470a6bfd484
  inlineCommonOperators141 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqChar1) -}
7b9833e0183c1531e9e8bc3d6750de06
  inlineCommonOperators142 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators140
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
5c7cbb0292c1f71284345222461c8675
  inlineCommonOperators143 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators144
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
528738bc47e4ad3eebe391ef3d62abe4
  inlineCommonOperators144 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators145
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
0b982119546102730fd2df854f2b2fc0
  inlineCommonOperators145 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqString1) -}
c2417c30b8748b8689981bf596bd259b
  inlineCommonOperators146 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators144
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
1d55cc46d6fb3da49ac2a5794a777d34
  inlineCommonOperators147 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators148
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
54de61a021a814e8d8adadd8e196197b
  inlineCommonOperators148 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators149
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
b392946c84a335af74fc6526a67da4a2
  inlineCommonOperators149 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqInt1) -}
d1f2fd8fe8115e05a262b3767d5120ef
  inlineCommonOperators15 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators136
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators16) -}
8b28dbe16c2c286684c53a12698bfcb9
  inlineCommonOperators150 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators148
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
cefb43aa952dab0b6ae164001c03aa85
  inlineCommonOperators151 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators152
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators131
                   Language.PureScript.CoreImp.AST.NotEqualTo) -}
110d5b2cefe0fc009864cdc708fefdf0
  inlineCommonOperators152 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators133,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators153
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
a3843ccfb5346221d0fb8d21769c82c1
  inlineCommonOperators153 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.eqNumber1) -}
4d6c113dca1809745e6aabd625c0f100
  inlineCommonOperators154 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators152
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators137
                   Language.PureScript.CoreImp.AST.EqualTo) -}
86a3f128c0707b2eb1c1d1d804f4eef1
  inlineCommonOperators155 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators159
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators156
                   Language.PureScript.CoreImp.AST.Divide) -}
6ff6336da95b4b6814a50da455871a6a
  inlineCommonOperators156 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators158,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators157
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
60e7fe5ed055add265eefda347a94df1
  inlineCommonOperators157 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.div1) -}
c12dc7fecdb256b228d1e956222fde81
  inlineCommonOperators158 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataEuclideanRing2) -}
3100b0ee27714cb1806e12c88bcd8ec7
  inlineCommonOperators159 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators158,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators160
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
fe48f8cf2e7039a3df5edf3d3ec8d904
  inlineCommonOperators16 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators130
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators17) -}
4fade25eed508244bb08a6ff23a9edd9
  inlineCommonOperators160 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.euclideanRingNumber1) -}
beb626e03cc93d870a962ba59313a27b
  inlineCommonOperators161 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_unary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators165
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators162
                   Language.PureScript.CoreImp.AST.Negate) -}
3ebf614f49a134f8b2005c879dd3ea5e
  inlineCommonOperators162 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators163
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
84de6b3e2ccd27f683d701ad9de66c0c
  inlineCommonOperators163 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.negate1) -}
41377fd08df42bd9fc8d1a1e08fe4658
  inlineCommonOperators164 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataRing2) -}
2dd51341051f3761cb2e3394d7d145d2
  inlineCommonOperators165 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators166
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
177367b121db338e312e31acaffef19f
  inlineCommonOperators166 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ringNumber1) -}
20fc62a2cbc01946b0f274f0b88b9f4a
  inlineCommonOperators167 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators165
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators168
                   Language.PureScript.CoreImp.AST.Subtract) -}
90c2444f6a39af65c7d6c68c202afaa0
  inlineCommonOperators168 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators164,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators169
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
0fc473cee4bcea9bf7a5abf45dd76f50
  inlineCommonOperators169 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.sub1) -}
5a212ff2bac5cc53f9e9350bae922bb2
  inlineCommonOperators17 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators129
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators18) -}
23854c87773f47586442bf07b53423f2
  inlineCommonOperators170 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators174
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators171
                   Language.PureScript.CoreImp.AST.Multiply) -}
eefbffd6b3bd9dd514442564581f9e57
  inlineCommonOperators171 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators173,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators172
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
095c23af6c90cc52fdf54cb24e5d1cf6
  inlineCommonOperators172 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.mul1) -}
b26f6e9cd462d0f38afa40935e53f909
  inlineCommonOperators173 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataSemiring2) -}
1f5f6604bceaff57de5f6a94c07ec41a
  inlineCommonOperators174 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators173,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators175
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
36a820be8b93024c8431d4aa5a792a13
  inlineCommonOperators175 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.semiringNumber1) -}
d6e26abb0551c6323e1bfb8d291ad0fa
  inlineCommonOperators18 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators128
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators19) -}
9ad427ad66b38755d9dd51d2d6eb2a4f
  inlineCommonOperators19 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators127
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators20) -}
165bdfeddc984d61ad18e4bb8c6472d5
  inlineCommonOperators2 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_f10
                   x) -}
2ac95347d4cb499bfb06014148c4b019
  inlineCommonOperators20 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators124
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators21) -}
86b2cc4843e7525e0a8b9e078a430584
  inlineCommonOperators21 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators123
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators22) -}
8e6795a4116afe9223bfd0607ab0390a
  inlineCommonOperators22 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators122
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators23) -}
ac4786eb5d0bcbda57cccd0aee5d7261
  inlineCommonOperators23 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators121
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators24) -}
426a0daa5418b05259152b5fb3001157
  inlineCommonOperators24 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators118
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators25) -}
3154763942dd48ab83fff31811bb0f62
  inlineCommonOperators25 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators117
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators26) -}
60ec2a14471cffba28f9b07e5438dfec
  inlineCommonOperators26 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators116
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators27) -}
e3a8ead17c7738badd1d42454324805b
  inlineCommonOperators27 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators115
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators28) -}
b18199b1701beafc1190b62ad72fe4c6
  inlineCommonOperators28 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators112
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators29) -}
1e79a82d8fa5eaa066f7c44d4d495793
  inlineCommonOperators29 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators111
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators30) -}
2a1a41b7d1cc60752a09082c20b170b9
  inlineCommonOperators3 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators170
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators4) -}
9722791ccf3b71b581a38d826f1b1d4b
  inlineCommonOperators30 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators110
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators31) -}
f925d1ae60fbdca8f86dd2add8a92d99
  inlineCommonOperators31 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators109
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators32) -}
c5179c16b8e78a872c69834553667a12
  inlineCommonOperators32 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators106
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators33) -}
649de73a72fdf938ebd9917365684fd3
  inlineCommonOperators33 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators103
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators34) -}
b2ea826dcc11b4b8923ad66e33e9d1e4
  inlineCommonOperators34 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators100
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators35) -}
ebc02aad7bba29439b6e6ce1b7f521a5
  inlineCommonOperators35 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators97
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators36) -}
9942ea6ad7486d3262cc48f8769b9bf4
  inlineCommonOperators36 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators91
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators37) -}
8bb8fca261bbb288ec9f73adb982373d
  inlineCommonOperators37 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators85
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators38) -}
45c54e1629fffdd530b14c030c43e6aa
  inlineCommonOperators38 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators82
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators39) -}
925c4b539a0c2a1f46e8e3cb92abb5de
  inlineCommonOperators39 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators79
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators40) -}
f831f45991d7c60243b8eb02262f60c8
  inlineCommonOperators4 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators167
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators5) -}
e99d66d6b4dc32a028b3237d1a5f7412
  inlineCommonOperators40 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators73
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators41) -}
7cf848cc2d5c409eb6f7be29c0834104
  inlineCommonOperators41 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators71
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators42) -}
e18009fb09a0455604542aa177aa8117
  inlineCommonOperators42 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators69
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators43) -}
d16db24c249ba48d2fd10f3e5d8d0964
  inlineCommonOperators43 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators67
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators44) -}
626c9da553a02e2203d9f1a8ec58b5c9
  inlineCommonOperators44 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators65
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators45) -}
e1b3ed0735cbe10c10941dc84d0637d4
  inlineCommonOperators45 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators63
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators46) -}
803c11539a2ba948f20c7693a13904f6
  inlineCommonOperators46 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators61
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators47) -}
9c66a944b05e62765279cd071f2cf501
  inlineCommonOperators47 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators59
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators48) -}
e716d83351a9112f42fc5ad8d30f07a9
  inlineCommonOperators48 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators57
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators49) -}
996e08137ddc45786163a6f7a0c9e6f0
  inlineCommonOperators49 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators54
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators50) -}
d242f19f21692afcf8f30b3a267603ee
  inlineCommonOperators5 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators161
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators6) -}
8d1356e7d755e1be397b25506a2bee6c
  inlineCommonOperators50 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators51
                   (GHC.Types.[]
                      @ (Language.PureScript.CoreImp.AST.AST
                         -> Language.PureScript.CoreImp.AST.AST))) -}
abf2b3e2ffae94d6ae4ec67de647d4f0
  inlineCommonOperators51 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.App ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.Indexer ds17 ds18 ds19
                                                      -> case ds18 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.StringLiteral ds20 op'1
                                                           -> case ds19 of wild9 {
                                                                DEFAULT -> wild
                                                                Language.PureScript.CoreImp.AST.Var ds21 m'
                                                                -> case ds16 of wild10 {
                                                                     [] -> wild
                                                                     : ds22 ds23
                                                                     -> case ds22 of wild11 {
                                                                          DEFAULT -> wild
                                                                          Language.PureScript.CoreImp.AST.Var ds24 ds25
                                                                          -> case ds23 of wild12 {
                                                                               []
                                                                               -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators53 of wild13 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                                  case m' of wild14 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                                  case GHC.Prim.==#
                                                                                         dt2
                                                                                         dt5 of lwild {
                                                                                    DEFAULT -> wild
                                                                                    1#
                                                                                    -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                            GHC.Prim.Int# #)}
                                                                                              dt
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt1)
                                                                                              dt3
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt4)
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt2)
                                                                                              GHC.Prim.realWorld# of wild15 { (#,#) ds26 ds27 ->
                                                                                       case GHC.Prim.narrow32Int#
                                                                                              ds27 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         0#
                                                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                                                   @ GHC.Word.Word16
                                                                                                   GHC.Word.$fEqWord16
                                                                                                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators52
                                                                                                   op'1
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0]) of wild17 {
                                                                                              GHC.Types.False
                                                                                              -> wild
                                                                                              GHC.Types.True
                                                                                              -> Language.PureScript.CoreImp.AST.Indexer
                                                                                                   (GHC.Base.Nothing
                                                                                                      @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                   y
                                                                                                   x } } } } } }
                                                                               : ipv ipv1
                                                                               -> wild } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
a130276efef0bc5acad9a73c7bc21d50
  inlineCommonOperators52 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafeIndex1) -}
ea89d815bfa73d89f69bb94d3a0cdc39
  inlineCommonOperators53 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataArray2) -}
defe0189108f8936641a931630c44ef0
  inlineCommonOperators54 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds17 op'1
                                                      -> case ds16 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds18 m'
                                                           -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators56 of wild9 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                              case m' of wild10 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                              case GHC.Prim.==# dt2 dt5 of lwild {
                                                                DEFAULT -> wild
                                                                1#
                                                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                                                                          dt
                                                                          (GHC.Prim.int2Word# dt1)
                                                                          dt3
                                                                          (GHC.Prim.int2Word# dt4)
                                                                          (GHC.Prim.int2Word# dt2)
                                                                          GHC.Prim.realWorld# of wild11 { (#,#) ds19 ds20 ->
                                                                   case GHC.Prim.narrow32Int#
                                                                          ds20 of wild12 {
                                                                     DEFAULT -> wild
                                                                     0#
                                                                     -> case GHC.Classes.$fEq[]_$c==
                                                                               @ GHC.Word.Word16
                                                                               GHC.Word.$fEqWord16
                                                                               Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators55
                                                                               op'1
                                                                                 `cast`
                                                                               (Language.PureScript.PSString.N:PSString[0]) of wild13 {
                                                                          GHC.Types.False -> wild
                                                                          GHC.Types.True
                                                                          -> Language.PureScript.CoreImp.AST.App
                                                                               (GHC.Base.Nothing
                                                                                  @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                               y
                                                                               (GHC.Types.:
                                                                                  @ Language.PureScript.CoreImp.AST.AST
                                                                                  x
                                                                                  (GHC.Types.[]
                                                                                     @ Language.PureScript.CoreImp.AST.AST)) } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
07379510abd7d8493c3c5ab8d82e4e5c
  inlineCommonOperators55 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.applyFlipped1) -}
bdc0a319f5ff1b3a6d02f620b7203376
  inlineCommonOperators56 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataFunction2) -}
0e571c1c54299cc6cabde85555ea598a
  inlineCommonOperators57 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds10 op' ds11
                        -> case ds11 of wild2 {
                             [] -> wild
                             : x ds12
                             -> case ds12 of wild3 {
                                  []
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : y ds13
                                       -> case ds13 of wild5 {
                                            []
                                            -> case op' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds14 ds15 ds16
                                                 -> case ds15 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds17 op'1
                                                      -> case ds16 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds18 m'
                                                           -> case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators56 of wild9 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                              case m' of wild10 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                              case GHC.Prim.==# dt2 dt5 of lwild {
                                                                DEFAULT -> wild
                                                                1#
                                                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                                                                          dt
                                                                          (GHC.Prim.int2Word# dt1)
                                                                          dt3
                                                                          (GHC.Prim.int2Word# dt4)
                                                                          (GHC.Prim.int2Word# dt2)
                                                                          GHC.Prim.realWorld# of wild11 { (#,#) ds19 ds20 ->
                                                                   case GHC.Prim.narrow32Int#
                                                                          ds20 of wild12 {
                                                                     DEFAULT -> wild
                                                                     0#
                                                                     -> case GHC.Classes.$fEq[]_$c==
                                                                               @ GHC.Word.Word16
                                                                               GHC.Word.$fEqWord16
                                                                               Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators58
                                                                               op'1
                                                                                 `cast`
                                                                               (Language.PureScript.PSString.N:PSString[0]) of wild13 {
                                                                          GHC.Types.False -> wild
                                                                          GHC.Types.True
                                                                          -> Language.PureScript.CoreImp.AST.App
                                                                               (GHC.Base.Nothing
                                                                                  @ Language.PureScript.AST.SourcePos.SourceSpan)
                                                                               x
                                                                               (GHC.Types.:
                                                                                  @ Language.PureScript.CoreImp.AST.AST
                                                                                  y
                                                                                  (GHC.Types.[]
                                                                                     @ Language.PureScript.CoreImp.AST.AST)) } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
d8fa8541b16bbba4996ba6e84d38ef9d
  inlineCommonOperators58 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.apply1) -}
3e7ab01f7ed5d6be8b898b033f6b7b00
  inlineCommonOperators59 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss fn ds7
                   -> case ds7 of wild1 {
                        [] -> wild
                        : x ds8
                        -> case ds8 of wild2 {
                             []
                             -> case fn of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Indexer ds9 ds10 ds11
                                  -> case ds10 of wild4 {
                                       DEFAULT -> wild
                                       Language.PureScript.CoreImp.AST.StringLiteral ds12 x1
                                       -> case ds11 of wild5 {
                                            DEFAULT -> wild
                                            Language.PureScript.CoreImp.AST.Var ds13 y
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      x1
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators60 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case y of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds14 ds15 ->
                                                         case GHC.Prim.narrow32Int# ds15 of wild10 {
                                                           DEFAULT -> wild
                                                           0#
                                                           -> Language.PureScript.CoreImp.AST.Unary
                                                                ss
                                                                Language.PureScript.CoreImp.AST.BitwiseNot
                                                                x } } } } } } } } }
                             : ipv ipv1 -> wild } } }) -}
c124da2d8fbd878268bc30c458f51262
  inlineCommonOperators6 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators155
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators7) -}
4513c715edb425d4f468cf900f4b4f23
  inlineCommonOperators60 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.complement1) -}
3ac3d00fab70901ca898e7ca7b205575
  inlineCommonOperators61 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators62 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ZeroFillShiftRight
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
0a7a8728b87a496cb4f0137d149bf0b5
  inlineCommonOperators62 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.zshr1) -}
8f5eb0500366cd09390f0bc84f700ef3
  inlineCommonOperators63 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators64 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ShiftRight
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
2c50adfb1fd10166ea823f7a7bb07bb5
  inlineCommonOperators64 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.shr1) -}
d9f248187855a5d62ad45e8a88d14e78
  inlineCommonOperators65 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators66 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.ShiftLeft
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
7c1ec02aff674b28a9beeb3b6ba24ae3
  inlineCommonOperators66 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.shl1) -}
f984d5c10a6616acc0aa5cdfcf0f6191
  inlineCommonOperators67 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators68 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseXor
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
9ffb29c75106e6de1a4251fce04dba67
  inlineCommonOperators68 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.xor1) -}
abdb5abffe16c8ad368f332bbf1993ef
  inlineCommonOperators69 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators70 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseAnd
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
2699355c2855d2fbaec86f5c9a0ca4e0
  inlineCommonOperators7 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators154
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators8) -}
ca0fa8c7ce97e69bdcb1a95d9c76b34c
  inlineCommonOperators70 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.and1) -}
e57b57b280f7a5a2a1a710bc0c83397f
  inlineCommonOperators71 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : x ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : y ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case fn of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y1
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators72 of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y1 of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_moduleName of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> Language.PureScript.CoreImp.AST.Binary
                                                                               ss
                                                                               Language.PureScript.CoreImp.AST.BitwiseOr
                                                                               x
                                                                               y } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
a31e1f5628184d338237ab1c869fadad
  inlineCommonOperators72 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.or1) -}
61d29c770f2903b40cfa8d655092d427
  inlineCommonOperators73 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_unary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators74
                   Language.PureScript.CoreImp.AST.Not) -}
3f4f2b9003382f615a5386086d1fc31e
  inlineCommonOperators74 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators75
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
792b951572ccf4910389fa9c6a4c247b
  inlineCommonOperators75 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.not1) -}
81b2240fb3b79d97b7001a52ea6bcfae
  inlineCommonOperators76 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataHeytingAlgebra2) -}
101456b3647e2cda765091d654f8b0e5
  inlineCommonOperators77 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators78
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
a99db54c1174ea43bd5793fed42d3387
  inlineCommonOperators78 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.heytingAlgebraBoolean1) -}
3ecc873b7d4d766dfe8d3589040ba10f
  inlineCommonOperators79 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators80
                   Language.PureScript.CoreImp.AST.Or) -}
b511ac3f73060bb2a1eb04213ac10478
  inlineCommonOperators8 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators151
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators9) -}
fb89f9a0745121d563fd54fc1866a842
  inlineCommonOperators80 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators81
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
aec056ee678cb636ee440c01cc034524
  inlineCommonOperators81 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.disj1) -}
ccfd735e1078d83c3cc2424b63d6deae
  inlineCommonOperators82 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators77
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators83
                   Language.PureScript.CoreImp.AST.And) -}
b1ea632fccfbabba2ff5d407ab29086e
  inlineCommonOperators83 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators76,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators84
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
ae49297d273cff859f1076ea445bbdf3
  inlineCommonOperators84 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.conj1) -}
49ce6be030b6635502b6da41f63348da
  inlineCommonOperators85 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators89
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators86
                   Language.PureScript.CoreImp.AST.Add) -}
cd98bd9762c01cf514e2a78cb2091a31
  inlineCommonOperators86 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators88,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators87
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
fc22fa43c404e759ca90f43141d2fa42
  inlineCommonOperators87 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.append1) -}
eb127dc5324914f692e84087487ae9c2
  inlineCommonOperators88 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataSemigroup2) -}
af9b2c1e0af9c580636517bddd9d3bc7
  inlineCommonOperators89 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators88,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators90
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
06dd86562325a53df3caf10517a09d8f
  inlineCommonOperators9 ::
    [Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.CoreImp.AST.AST
                      -> Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators150
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators10) -}
c556c770e3e6e6a6ebda940381b4fa07
  inlineCommonOperators90 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.semigroupString1) -}
95003c29f264b0386f0c72c70f782e4c
  inlineCommonOperators91 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators92
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo) -}
1b2b3c93f1aae279b5d2a2561f323ba6
  inlineCommonOperators92 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators93
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
c9291a99384d62a1152c5ab964ad6962
  inlineCommonOperators93 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.greaterThanOrEq1) -}
69a1f0de88839fd0b12169ded6444ef9
  inlineCommonOperators94 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataOrd2) -}
1c54208e3b87b6404e4d28cc901ff05b
  inlineCommonOperators95 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators96
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
0b8c5d7a01435a39b78c29973612b742
  inlineCommonOperators96 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.ordString1) -}
3f8e17139528131ede5217bb0af4a150
  inlineCommonOperators97 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_binary
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators95
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators98
                   Language.PureScript.CoreImp.AST.GreaterThan) -}
06e81102599c5a0b02f35cac19c793ae
  inlineCommonOperators98 ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators94,
                  Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators99
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])))) -}
eb22b168305822307a258abe083bbbe2
  inlineCommonOperators99 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.greaterThan1) -}
189d1666659f5174f3989a991dd276b6
  inlineCommonOperators_$sgo ::
    (Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST)
    -> [Language.PureScript.CoreImp.AST.AST
        -> Language.PureScript.CoreImp.AST.AST]
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
0c17c4efe494c1d34c76abd12c3a198a
  inlineCommonOperators_binary ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> Language.PureScript.CoreImp.AST.BinaryOperator
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U,U,U),1*U)><L,1*U(1*U(U,U,U),1*U)><L,U><S,1*U>,
     Unfolding: (\ (dict :: (Data.Text.Internal.Text,
                             Language.PureScript.PSString.PSString))
                   (fns :: (Data.Text.Internal.Text,
                            Language.PureScript.PSString.PSString))
                   (op :: Language.PureScript.CoreImp.AST.BinaryOperator)
                   (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 ds10 ds11
                        -> case ds10 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.App ds12 fn ds13
                             -> case ds13 of wild3 {
                                  [] -> wild
                                  : dict' ds14
                                  -> case ds14 of wild4 {
                                       []
                                       -> case ds11 of wild5 {
                                            [] -> wild
                                            : x ds15
                                            -> case ds15 of wild6 {
                                                 []
                                                 -> case ds8 of wild7 {
                                                      [] -> wild
                                                      : y ds16
                                                      -> case ds16 of wild8 {
                                                           []
                                                           -> case dict of ww { (,) ww1 ww2 ->
                                                              case dict' of wild9 {
                                                                DEFAULT -> wild
                                                                Language.PureScript.CoreImp.AST.Indexer ds17 ds18 ds19
                                                                -> case ds18 of wild10 {
                                                                     DEFAULT -> wild
                                                                     Language.PureScript.CoreImp.AST.StringLiteral ds20 x1
                                                                     -> case ds19 of wild11 {
                                                                          DEFAULT -> wild
                                                                          Language.PureScript.CoreImp.AST.Var ds21 y1
                                                                          -> case GHC.Classes.$fEq[]_$c==
                                                                                    @ GHC.Word.Word16
                                                                                    GHC.Word.$fEqWord16
                                                                                    x1
                                                                                      `cast`
                                                                                    (Language.PureScript.PSString.N:PSString[0])
                                                                                    ww2
                                                                                      `cast`
                                                                                    (Language.PureScript.PSString.N:PSString[0]) of wild12 {
                                                                               GHC.Types.False
                                                                               -> wild
                                                                               GHC.Types.True
                                                                               -> case y1 of wild13 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                                  case ww1 of wild14 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                                  case GHC.Prim.==#
                                                                                         dt2
                                                                                         dt5 of lwild {
                                                                                    DEFAULT -> wild
                                                                                    1#
                                                                                    -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.ByteArray#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.Word#
                                                                                                                      -> GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                      -> (# GHC.Prim.State#
                                                                                                                              GHC.Prim.RealWorld,
                                                                                                                            GHC.Prim.Int# #)}
                                                                                              dt
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt1)
                                                                                              dt3
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt4)
                                                                                              (GHC.Prim.int2Word#
                                                                                                 dt2)
                                                                                              GHC.Prim.realWorld# of wild15 { (#,#) ds22 ds23 ->
                                                                                       case GHC.Prim.narrow32Int#
                                                                                              ds23 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         0#
                                                                                         -> case fns of ww4 { (,) ww5 ww6 ->
                                                                                            case fn of wild17 {
                                                                                              DEFAULT
                                                                                              -> wild
                                                                                              Language.PureScript.CoreImp.AST.Indexer ds24 ds25 ds26
                                                                                              -> case ds25 of wild18 {
                                                                                                   DEFAULT
                                                                                                   -> wild
                                                                                                   Language.PureScript.CoreImp.AST.StringLiteral ds27 x2
                                                                                                   -> case ds26 of wild19 {
                                                                                                        DEFAULT
                                                                                                        -> wild
                                                                                                        Language.PureScript.CoreImp.AST.Var ds28 y2
                                                                                                        -> case GHC.Classes.$fEq[]_$c==
                                                                                                                  @ GHC.Word.Word16
                                                                                                                  GHC.Word.$fEqWord16
                                                                                                                  x2
                                                                                                                    `cast`
                                                                                                                  (Language.PureScript.PSString.N:PSString[0])
                                                                                                                  ww6
                                                                                                                    `cast`
                                                                                                                  (Language.PureScript.PSString.N:PSString[0]) of wild20 {
                                                                                                             GHC.Types.False
                                                                                                             -> wild
                                                                                                             GHC.Types.True
                                                                                                             -> case y2 of wild21 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                                                                                case ww5 of wild22 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                                                                                                case GHC.Prim.==#
                                                                                                                       dt9
                                                                                                                       dt12 of lwild1 {
                                                                                                                  DEFAULT
                                                                                                                  -> wild
                                                                                                                  1#
                                                                                                                  -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.ByteArray#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.Word#
                                                                                                                                                    -> GHC.Prim.State#
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                    -> (# GHC.Prim.State#
                                                                                                                                                            GHC.Prim.RealWorld,
                                                                                                                                                          GHC.Prim.Int# #)}
                                                                                                                            dt7
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt8)
                                                                                                                            dt10
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt11)
                                                                                                                            (GHC.Prim.int2Word#
                                                                                                                               dt9)
                                                                                                                            GHC.Prim.realWorld# of wild23 { (#,#) ds29 ds30 ->
                                                                                                                     case GHC.Prim.narrow32Int#
                                                                                                                            ds30 of wild24 {
                                                                                                                       DEFAULT
                                                                                                                       -> wild
                                                                                                                       0#
                                                                                                                       -> Language.PureScript.CoreImp.AST.Binary
                                                                                                                            ss
                                                                                                                            op
                                                                                                                            x
                                                                                                                            y } } } } } } } } } } } } } } } } } } } }
                                                           : ipv ipv1 -> wild } }
                                                 : ipv ipv1 -> wild } }
                                       : ipv ipv1 -> wild } } } } }) -}
d012f7548fe64910f36157d8ee6b90cb
  inlineCommonOperators_f10 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Unfolding: (Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators_$sgo
                   (GHC.Base.id @ Language.PureScript.CoreImp.AST.AST)
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonOperators3) -}
05f965f8b296bfe7774ca723c3b23aca
  inlineCommonOperators_moduleName :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.dataIntBits2) -}
ecb7e12c7ae7574e854a76a03a2240c4
  inlineCommonOperators_unary ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> Language.PureScript.CoreImp.AST.UnaryOperator
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(U,U,U),1*U)><L,1*U(1*U(U,U,U),1*U)><L,U><S,1*U>,
     Unfolding: (\ (dicts :: (Data.Text.Internal.Text,
                              Language.PureScript.PSString.PSString))
                   (fns :: (Data.Text.Internal.Text,
                            Language.PureScript.PSString.PSString))
                   (op :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.App ds9 fn ds10
                        -> case ds10 of wild2 {
                             [] -> wild
                             : dict' ds11
                             -> case ds11 of wild3 {
                                  []
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : x ds12
                                       -> case ds12 of wild5 {
                                            []
                                            -> case dicts of ww { (,) ww1 ww2 ->
                                               case dict' of wild6 {
                                                 DEFAULT -> wild
                                                 Language.PureScript.CoreImp.AST.Indexer ds13 ds14 ds15
                                                 -> case ds14 of wild7 {
                                                      DEFAULT -> wild
                                                      Language.PureScript.CoreImp.AST.StringLiteral ds16 x1
                                                      -> case ds15 of wild8 {
                                                           DEFAULT -> wild
                                                           Language.PureScript.CoreImp.AST.Var ds17 y
                                                           -> case GHC.Classes.$fEq[]_$c==
                                                                     @ GHC.Word.Word16
                                                                     GHC.Word.$fEqWord16
                                                                     x1
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0])
                                                                     ww2
                                                                       `cast`
                                                                     (Language.PureScript.PSString.N:PSString[0]) of wild9 {
                                                                GHC.Types.False -> wild
                                                                GHC.Types.True
                                                                -> case y of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                                   case ww1 of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                                   case GHC.Prim.==#
                                                                          dt2
                                                                          dt5 of lwild {
                                                                     DEFAULT -> wild
                                                                     1#
                                                                     -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.Word#
                                                                                                       -> GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld
                                                                                                       -> (# GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld,
                                                                                                             GHC.Prim.Int# #)}
                                                                               dt
                                                                               (GHC.Prim.int2Word#
                                                                                  dt1)
                                                                               dt3
                                                                               (GHC.Prim.int2Word#
                                                                                  dt4)
                                                                               (GHC.Prim.int2Word#
                                                                                  dt2)
                                                                               GHC.Prim.realWorld# of wild12 { (#,#) ds18 ds19 ->
                                                                        case GHC.Prim.narrow32Int#
                                                                               ds19 of wild13 {
                                                                          DEFAULT -> wild
                                                                          0#
                                                                          -> case fns of ww4 { (,) ww5 ww6 ->
                                                                             case fn of wild14 {
                                                                               DEFAULT -> wild
                                                                               Language.PureScript.CoreImp.AST.Indexer ds20 ds21 ds22
                                                                               -> case ds21 of wild15 {
                                                                                    DEFAULT -> wild
                                                                                    Language.PureScript.CoreImp.AST.StringLiteral ds23 x2
                                                                                    -> case ds22 of wild16 {
                                                                                         DEFAULT
                                                                                         -> wild
                                                                                         Language.PureScript.CoreImp.AST.Var ds24 y1
                                                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                                                   @ GHC.Word.Word16
                                                                                                   GHC.Word.$fEqWord16
                                                                                                   x2
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0])
                                                                                                   ww6
                                                                                                     `cast`
                                                                                                   (Language.PureScript.PSString.N:PSString[0]) of wild17 {
                                                                                              GHC.Types.False
                                                                                              -> wild
                                                                                              GHC.Types.True
                                                                                              -> case y1 of wild18 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                                                                 case ww5 of wild19 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                                                                                 case GHC.Prim.==#
                                                                                                        dt9
                                                                                                        dt12 of lwild1 {
                                                                                                   DEFAULT
                                                                                                   -> wild
                                                                                                   1#
                                                                                                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.ByteArray#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.Word#
                                                                                                                                     -> GHC.Prim.State#
                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                                           GHC.Prim.Int# #)}
                                                                                                             dt7
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt8)
                                                                                                             dt10
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt11)
                                                                                                             (GHC.Prim.int2Word#
                                                                                                                dt9)
                                                                                                             GHC.Prim.realWorld# of wild20 { (#,#) ds25 ds26 ->
                                                                                                      case GHC.Prim.narrow32Int#
                                                                                                             ds26 of wild21 {
                                                                                                        DEFAULT
                                                                                                        -> wild
                                                                                                        0#
                                                                                                        -> Language.PureScript.CoreImp.AST.Unary
                                                                                                             ss
                                                                                                             op
                                                                                                             x } } } } } } } } } } } } } } } } } } } }
                                            : ipv ipv1 -> wild } }
                                  : ipv ipv1 -> wild } } } }) -}
1546fccc0bbb9816085728b2e2878c96
  inlineCommonValues ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineCommonValues_convert) -}
7f16e84e1c75754c8c76999a875a5a32
  inlineCommonValues_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U> -}
9b208a3bb67df4eea8d35355900fee48
  inlineFnComposition ::
    Control.Monad.Supply.Class.MonadSupply m =>
    Language.PureScript.CoreImp.AST.AST
    -> m Language.PureScript.CoreImp.AST.AST
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A)><L,U> -}
43e16a7b66de9b1553b5916d932d4f93
  inlineUnsafeCoerce ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
00f31879f246d25924f6d50bc11c2ec7
  inlineUnsafeCoerce1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce_convert
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
6ef4b7cc6f8968e230a99ea6aa746b05
  inlineUnsafeCoerce2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.unsafeCoerce2) -}
31df9507b0c01d18b6c2b9ae0b2bc054
  inlineUnsafeCoerce3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafeCoerceFn1) -}
edf1bc997684fecd547639a580dcf982
  inlineUnsafeCoerce_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ds7 ds8 ds9
                   -> case ds8 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Indexer ds10 ds11 ds12
                        -> case ds11 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.StringLiteral ds13 unsafeCoerceFn
                             -> case ds12 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Var ds14 unsafeCoerce
                                  -> case ds9 of wild4 {
                                       [] -> wild
                                       : comp ds15
                                       -> case ds15 of wild5 {
                                            []
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      unsafeCoerceFn
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce3 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case unsafeCoerce of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafeCoerce2 of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds16 ds17 ->
                                                         case GHC.Prim.narrow32Int# ds17 of wild10 {
                                                           DEFAULT -> wild 0# -> comp } } } } } }
                                            : ipv ipv1 -> wild } } } } } }) -}
a0bfffd7cdaa1c458702fc8d653c0511
  inlineUnsafePartial ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
ed0f0520fff91c6a285130c848a0441c
  inlineUnsafePartial1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial_convert
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
b8f8c84336a812104dcb0a4002eb6d9c
  inlineUnsafePartial2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.partialUnsafe2) -}
1304bbd7cebd3eff5762aaaf2aa9e696
  inlineUnsafePartial3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   Language.PureScript.Constants.unsafePartial1) -}
6817b5494205581910fa4071e2151964
  inlineUnsafePartial_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.App ss ds7 ds8
                   -> case ds7 of wild1 {
                        DEFAULT -> wild
                        Language.PureScript.CoreImp.AST.Indexer ds9 ds10 ds11
                        -> case ds10 of wild2 {
                             DEFAULT -> wild
                             Language.PureScript.CoreImp.AST.StringLiteral ds12 unsafePartial
                             -> case ds11 of wild3 {
                                  DEFAULT -> wild
                                  Language.PureScript.CoreImp.AST.Var ds13 partialUnsafe
                                  -> case ds8 of wild4 {
                                       [] -> wild
                                       : comp ds14
                                       -> case ds14 of wild5 {
                                            []
                                            -> case GHC.Classes.$fEq[]_$c==
                                                      @ GHC.Word.Word16
                                                      GHC.Word.$fEqWord16
                                                      unsafePartial
                                                        `cast`
                                                      (Language.PureScript.PSString.N:PSString[0])
                                                      Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial3 of wild6 {
                                                 GHC.Types.False -> wild
                                                 GHC.Types.True
                                                 -> case partialUnsafe of wild7 { Data.Text.Internal.Text dt dt1 dt2 ->
                                                    case Language.PureScript.CoreImp.Optimizer.Inliner.inlineUnsafePartial2 of wild8 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                                    case GHC.Prim.==# dt2 dt5 of lwild {
                                                      DEFAULT -> wild
                                                      1#
                                                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.ByteArray#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.Word#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Int# #)}
                                                                dt
                                                                (GHC.Prim.int2Word# dt1)
                                                                dt3
                                                                (GHC.Prim.int2Word# dt4)
                                                                (GHC.Prim.int2Word# dt2)
                                                                GHC.Prim.realWorld# of wild9 { (#,#) ds15 ds16 ->
                                                         case GHC.Prim.narrow32Int# ds16 of wild10 {
                                                           DEFAULT -> wild
                                                           0#
                                                           -> Language.PureScript.CoreImp.AST.App
                                                                ss
                                                                comp
                                                                (GHC.Types.:
                                                                   @ Language.PureScript.CoreImp.AST.AST
                                                                   (Language.PureScript.CoreImp.AST.Var
                                                                      ss
                                                                      Language.PureScript.CoreImp.Optimizer.Inliner.evaluateIifes1)
                                                                   (GHC.Types.[]
                                                                      @ Language.PureScript.CoreImp.AST.AST)) } } } } } }
                                            : ipv ipv1 -> wild } } } } } }) -}
c018a4657d69037e6f86dd973eac77b1
  inlineVariables ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables1) -}
55e20f75a1c8023bf641acde3ebf5772
  inlineVariables1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Block ss sts
                   -> Language.PureScript.CoreImp.AST.Block
                        ss
                        (Language.PureScript.CoreImp.Optimizer.Inliner.inlineVariables_go
                           sts) }) -}
a80ea8a7f8d446958013014d322a8f09
  inlineVariables_go ::
    [Language.PureScript.CoreImp.AST.AST]
    -> [Language.PureScript.CoreImp.AST.AST]
  {- Arity: 1, Strictness: <S,1*U> -}
5f13148ab9e6a4d2e33159592625ee4e
  shouldInline ::
    Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5958d7afb9a3d44dcf7ff61b3a053aa6
  unThunk ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1,
     Unfolding: (Language.PureScript.CoreImp.AST.everywhere
                   Language.PureScript.CoreImp.Optimizer.Inliner.unThunk_convert) -}
85d42b2b8ad0ea11f7532f50c783b307
  unThunk_convert ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds6 :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds6 of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Block ss ds7
                   -> case ds7 of wild1 {
                        []
                        -> Language.PureScript.CoreImp.AST.Block
                             ss
                             (GHC.Types.[] @ Language.PureScript.CoreImp.AST.AST)
                        : ipv ipv1
                        -> let {
                             exit :: Language.PureScript.CoreImp.AST.AST
                                     -> Language.PureScript.CoreImp.AST.AST
                               <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (eta :: Language.PureScript.CoreImp.AST.AST)[OneShot] ->
                               case eta of wild2 {
                                 DEFAULT -> wild
                                 Language.PureScript.CoreImp.AST.Return ds8 ds9
                                 -> case ds9 of wild3 {
                                      DEFAULT -> wild
                                      Language.PureScript.CoreImp.AST.App ds10 ds11 ds12
                                      -> case ds11 of wild4 {
                                           DEFAULT -> wild
                                           Language.PureScript.CoreImp.AST.Function ds13 ds14 ds15 ds16
                                           -> case ds14 of wild5 {
                                                GHC.Base.Nothing
                                                -> case ds15 of wild6 {
                                                     []
                                                     -> case ds16 of wild7 {
                                                          DEFAULT -> wild
                                                          Language.PureScript.CoreImp.AST.Block ds17 body
                                                          -> case ds12 of wild8 {
                                                               []
                                                               -> Language.PureScript.CoreImp.AST.Block
                                                                    ss
                                                                    (GHC.Base.++
                                                                       @ Language.PureScript.CoreImp.AST.AST
                                                                       (GHC.List.init1
                                                                          @ Language.PureScript.CoreImp.AST.AST
                                                                          ipv
                                                                          ipv1)
                                                                       body)
                                                               : ipv2 ipv3 -> wild } }
                                                     : ipv2 ipv3 -> wild }
                                                GHC.Base.Just ipv2 -> wild } } } }
                           } in
                           letrec {
                             go4 :: [Language.PureScript.CoreImp.AST.AST]
                                    -> Language.PureScript.CoreImp.AST.AST
                                    -> Language.PureScript.CoreImp.AST.AST
                               <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                             = \ (ds8 :: [Language.PureScript.CoreImp.AST.AST])
                                 (eta :: Language.PureScript.CoreImp.AST.AST) ->
                               case ds8 of wild2 { [] -> exit eta : y ys -> go4 ys y }
                           } in
                           let {
                             $sgo :: Language.PureScript.CoreImp.AST.AST
                                     -> Language.PureScript.CoreImp.AST.AST
                                     -> [Language.PureScript.CoreImp.AST.AST]
                                     -> Language.PureScript.CoreImp.AST.AST
                               <join 3> {- Arity: 3, Strictness: <L,A><L,1*U><S,1*U> -}
                             = \ (sc :: Language.PureScript.CoreImp.AST.AST)
                                 (sc1 :: Language.PureScript.CoreImp.AST.AST)
                                 (sc2 :: [Language.PureScript.CoreImp.AST.AST]) ->
                               go4 sc2 sc1
                           } in
                           $sgo
                             (GHC.List.lastError @ Language.PureScript.CoreImp.AST.AST)
                             ipv
                             ipv1 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

