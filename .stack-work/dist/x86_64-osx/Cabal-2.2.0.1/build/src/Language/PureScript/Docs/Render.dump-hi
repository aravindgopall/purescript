
==================== FINAL INTERFACE ====================
2019-01-24 14:17:14.364069 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Render 8043
  interface hash: f1d52ca628bdabc9549933be83b6f943
  ABI hash: b831465a701583fd8a564131640eff10
  export-list hash: 86a20a5ede0ce78c161164e977c6da6a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 94f2816997904b752beedc19c412f025
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.Render.dataCtor'
  Language.PureScript.Docs.Render.ident'
  Language.PureScript.Docs.Render.notQualified
  Language.PureScript.Docs.Render.renderChildDeclaration
  Language.PureScript.Docs.Render.renderConstraint
  Language.PureScript.Docs.Render.renderConstraints
  Language.PureScript.Docs.Render.renderDeclaration
  Language.PureScript.Docs.Render.toTypeVar
  Language.PureScript.Docs.Render.typeApp
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Fixity 141f87a59136c90c1be577c19942dfd4
import  -/  Language.PureScript.Docs.RenderedCode be3d746558a5dc6cd329381776634da0
  exports: a74931cbe482565a8bfb82d89c3dabe0
import  -/  Language.PureScript.Docs.RenderedCode.RenderKind ea767ede83f6ffb0772b1daae609b227
  renderKind c21a33a96b6e6073c9bfe750f4fe955d
import  -/  Language.PureScript.Docs.RenderedCode.RenderType 135e2d86e164296954db8f4fe3c60cd8
  renderType cfdc8b51c99f166bbe136ef10f9f0f92
  renderTypeAtom adb17168dd9d13feb7cf7a6b92ec844e
import  -/  Language.PureScript.Docs.RenderedCode.Types a63cc6a5cb22a8a549b2d76ebcbc879a
  RenderedCode b76660a0424da31964a78f3df8712e5d
  alias 58d75aa2b5508cb21207566ae9a7014c
  aliasName 38fb313582a77e9ced0a064e7c1961f1
  dataCtor 0753c0f6add800bbdc0c0830b9fbbd4a
  ident b4ceceb1bb021e5dd0568321d8e35fa2
  keyword d7fff1d5203ffe3dddf7bebc09698eb7
  keywordAs a408a8f3f99d273c94351be1fbacd876
  keywordClass b4846c3ecab46e2deb0f87e39d1356de
  keywordData fcf6ac5b0d8124b4183309f8d7e09972
  keywordFixity beb4371395245f91b547e78917a46320
  keywordKind b33ba98da249373160f8e4fa4564f2c6
  keywordType 41d8e6d528ede3db6e35b727f7b45aa4
  keywordWhere c120934366a01997d07e0879393f2af0
  kind 55f997f6bd0a4fed4cedd17eba370d04
  sp 36a8eaafc38970ad0ba81b96ac1c8a6b
  syntax 56404943757616c81318673508c45bb1
  typeVar 7c8f1b67989521c64e611feb53a08c00
import  -/  Language.PureScript.Docs.Types 8ff7c3b28d1548ecbdf2d5a573cc163d
  exports: b81c2b0b69c0f139e99069fb9794db69
  AliasDeclaration 8ab2a92c39fb1d37d3db5fc6eb69e1a6
  ChildDataConstructor c02b1d1ac3554b78545d34f14e7b7513
  ChildDeclaration da36857b7ace27f106e0e32084691791
  ChildDeclaration cce819b6566f028d040fc57bb265fd8d
  ChildInstance 7016ebc136f1dd745b6b2d7bd27a686f
  ChildTypeClassMember c99514ef45785e97caa8f678f2893be0
  Constraint' d41f556fe0cc659e6458c371e15603c8
  DataDeclaration 0ad4e16c3bfc7364e959daaebda1e370
  Declaration 8d78dc6577f19e7ef0eb35e8f2e37d74
  Declaration cce819b6566f028d040fc57bb265fd8d
  ExternDataDeclaration be81664f86bcf798bf52f4767486a4ae
  ExternKindDeclaration 979e139edf667e3cd0ee1f63ef72f0ff
  Kind' 3614d14cb28596c10c2bdbdc1dd488cc
  Type' 0332397f5f9321976d4cdbfed5e9ab8f
  TypeClassDeclaration 058830b63dc57578caa5690ea9a9412c
  TypeSynonymDeclaration 633499594d549460d348b5b2ee505266
  ValueDeclaration 88df482b8e23d1ca7c68e67d2bb84c5b
  cdeclComments cce819b6566f028d040fc57bb265fd8d
  cdeclInfo cce819b6566f028d040fc57bb265fd8d
  cdeclSourceSpan cce819b6566f028d040fc57bb265fd8d
  cdeclTitle cce819b6566f028d040fc57bb265fd8d
  declChildren cce819b6566f028d040fc57bb265fd8d
  declComments cce819b6566f028d040fc57bb265fd8d
  declInfo cce819b6566f028d040fc57bb265fd8d
  declSourceSpan cce819b6566f028d040fc57bb265fd8d
  declTitle cce819b6566f028d040fc57bb265fd8d
  isTypeClassMember eb5c913ebc02ceef23bdf8425ab7ff0e
import  -/  Language.PureScript.Docs.Utils.MonoidExtras 65c3c5378ab060b062131525ba589039
  exports: fb843455bd7dfef0b5709000f4dd4cdc
  mintersperse ebfef99e90b055fb405c5b0989908293
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  showDataDeclType 26ab4bfd2e1fb0753bd864488ee00f25
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  Ident 71f167265716f619863a793fa311e198
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  coerceProperName 441cf2d4ab32b68a0b73ca234d2a628b
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeVar 9a7c02efa8540e6f48c3a672f3ebc8db
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
16128b59b7ca0272908e3cfbf818002d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.Render.$trModule3
                   Language.PureScript.Docs.Render.$trModule1) -}
5bb4b4e75d4edff3c608ce74cb13263d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.Render.$trModule2) -}
a34e6a85d4ebfb32f15063c5a9a29516
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Docs.Render"#) -}
4659999501caa6d7a7398ec01419ff8a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.Render.$trModule4) -}
7be32645cb7756be769b553ded94a3a2
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
4eb8793354c828483bba0e5de5d24e39
  $wrenderChildDeclaration ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.Types.ChildDeclarationInfo
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Language.PureScript.Docs.Types.ChildDeclarationInfo) ->
                 case ww1 of wild {
                   Language.PureScript.Docs.Types.ChildInstance constraints ty
                   -> let {
                        arg :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        = case (Language.PureScript.Docs.RenderedCode.RenderType.matchType
                                  `cast`
                                (Control.PatternArrows.N:Pattern[0]
                                     <()>_N <Language.PureScript.Pretty.Types.PrettyPrintType>_N <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N ; Control.Arrow.N:Kleisli[0]
                                                                                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                       ()
                                                                                                                                                                       GHC.Base.Maybe>_R
                                                                                                                                                                    <Language.PureScript.Pretty.Types.PrettyPrintType>_R
                                                                                                                                                                    <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                                  (Language.PureScript.Pretty.Types.convertPrettyPrintType @ () ty))
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <()>_N
                                    <GHC.Base.Maybe>_R
                                    <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                                 GHC.Tuple.() of wild1 {
                            GHC.Base.Nothing
                            -> Language.PureScript.Docs.RenderedCode.RenderType.renderRow_d
                            GHC.Base.Just x1 -> case x1 of wild2 { (,) a1 ds1 -> a1 } }
                      } in
                      case Language.PureScript.Docs.Render.renderConstraints
                             constraints of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.Docs.Utils.MonoidExtras.mintersperse_$smintersperse
                             @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                             arg
                             (GHC.Types.[]
                                @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                             Language.PureScript.Docs.RenderedCode.Types.alias5
                               `cast`
                             (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                             Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode
                        GHC.Base.Just x
                        -> Language.PureScript.Docs.Utils.MonoidExtras.mintersperse_$smintersperse
                             @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                             x
                             (GHC.Types.:
                                @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                arg
                                (GHC.Types.[]
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode))
                             Language.PureScript.Docs.RenderedCode.Types.alias5
                               `cast`
                             (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                             Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode }
                   Language.PureScript.Docs.Types.ChildDataConstructor args
                   -> Language.PureScript.Docs.Utils.MonoidExtras.mintersperse_$smintersperse
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        (GHC.Types.:
                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                           (Language.PureScript.Docs.RenderedCode.Types.Symbol
                              Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                              ww
                              Language.PureScript.Docs.Render.dataCtor'2)
                           (GHC.Types.[]
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                          `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        (GHC.Base.map
                           @ (Language.PureScript.Types.Type ())
                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                           (Language.PureScript.Docs.RenderedCode.RenderType.renderTypeAtom
                              @ ())
                           args)
                        Language.PureScript.Docs.RenderedCode.Types.alias5
                          `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode
                   Language.PureScript.Docs.Types.ChildTypeClassMember ty
                   -> Language.PureScript.Docs.Utils.MonoidExtras.mintersperse_$smintersperse
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        (GHC.Types.:
                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                           (Language.PureScript.Docs.RenderedCode.Types.Symbol
                              Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                              (Language.PureScript.Names.runIdent
                                 (Language.PureScript.Names.Ident ww))
                              Language.PureScript.Docs.Render.dataCtor'2)
                           (GHC.Types.[]
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                          `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        (GHC.Types.:
                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                           Language.PureScript.Docs.Render.renderChildDeclaration1
                             `cast`
                           (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                           (GHC.Types.:
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                              (case (Language.PureScript.Docs.RenderedCode.RenderType.matchType
                                       `cast`
                                     (Control.PatternArrows.N:Pattern[0]
                                          <()>_N <Language.PureScript.Pretty.Types.PrettyPrintType>_N <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N ; Control.Arrow.N:Kleisli[0]
                                                                                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                                            ()
                                                                                                                                                                            GHC.Base.Maybe>_R
                                                                                                                                                                         <Language.PureScript.Pretty.Types.PrettyPrintType>_R
                                                                                                                                                                         <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                                       (Language.PureScript.Pretty.Types.convertPrettyPrintType
                                          @ ()
                                          ty))
                                      `cast`
                                    (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <()>_N
                                         <GHC.Base.Maybe>_R
                                         <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                                      GHC.Tuple.() of wild1 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.Docs.RenderedCode.RenderType.renderRow_d
                                 GHC.Base.Just x1 -> case x1 of wild2 { (,) a1 ds1 -> a1 } })
                              (GHC.Types.[]
                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode)))
                        Language.PureScript.Docs.RenderedCode.Types.alias5
                          `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode }) -}
44a310824fa749bdeec9d06e9336bd88
  $wrenderConstraint ::
    ()
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> [Language.PureScript.Types.Type ()]
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 3, Strictness: <L,U><L,1*U(U,U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: ())
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                   (ww2 :: [Language.PureScript.Types.Type ()]) ->
                 case (Language.PureScript.Docs.RenderedCode.RenderType.matchType
                         `cast`
                       (Control.PatternArrows.N:Pattern[0]
                            <()>_N <Language.PureScript.Pretty.Types.PrettyPrintType>_N <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N ; Control.Arrow.N:Kleisli[0]
                                                                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                                                              ()
                                                                                                                                                              GHC.Base.Maybe>_R
                                                                                                                                                           <Language.PureScript.Pretty.Types.PrettyPrintType>_R
                                                                                                                                                           <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                         (letrec {
                            go4 :: [Language.PureScript.Types.Type ()]
                                   -> Language.PureScript.Types.Type ()
                                   -> Language.PureScript.Pretty.Types.PrettyPrintType
                              <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                            = \ (ds :: [Language.PureScript.Types.Type ()])
                                (eta :: Language.PureScript.Types.Type ()) ->
                              case ds of wild {
                                []
                                -> Language.PureScript.Pretty.Types.convertPrettyPrintType @ () eta
                                : y ys
                                -> go4 ys (Language.PureScript.Types.TypeApp @ () ww eta y) }
                          } in
                          go4
                            ww2
                            (Language.PureScript.Types.TypeConstructor
                               @ ()
                               ww
                               (case ww1 of wild { Language.PureScript.Names.Qualified a1 a2 ->
                                Language.PureScript.Names.Qualified
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                                  a1
                                  a2
                                    `cast`
                                  (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ClassName>_P ; Sym (Language.PureScript.Names.N:ProperName[0]
                                                                                           <'Language.PureScript.Names.TypeName>_P)) }))))
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <()>_N
                           <GHC.Base.Maybe>_R
                           <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)
                        GHC.Tuple.() of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Docs.RenderedCode.RenderType.renderRow_d
                   GHC.Base.Just x1 -> case x1 of wild1 { (,) a1 ds1 -> a1 } }) -}
08540ca20f069a1552381262c424027e
  $wrenderDeclaration ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.Types.ChildDeclaration]
    -> Language.PureScript.Docs.Types.DeclarationInfo
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*U><S,1*U>, Inline: [0] -}
f2cc00f54a61d235c1bc81a13d1c3aeb
  dataCtor' ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.Render.dataCtor'1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
ac650776bd470e05d7185912e7d822ac
  dataCtor'1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Symbol
                      Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                      x
                      Language.PureScript.Docs.Render.dataCtor'2)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
52f0e1d5e43035904f325e5fdc0c98da
  dataCtor'2 :: Language.PureScript.Docs.RenderedCode.Types.Link
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule) -}
9d208bba674c2da4e730dfd7cc5a39ab
  ident' ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.Render.ident'1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
523c48c3164b724f9394114cd57c6867
  ident'1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Symbol
                      Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                      (Language.PureScript.Names.runIdent
                         (Language.PureScript.Names.Ident x))
                      Language.PureScript.Docs.Render.dataCtor'2)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
ec1a4e8c25fd15af9880028d2b52b0c6
  notQualified ::
    Data.Text.Internal.Text
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName a)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Data.Text.Internal.Text) ->
                 Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName a)
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   x `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))) -}
8fe1fef69cb298ac03b6db3cd3ee525b
  renderChildDeclaration ::
    Language.PureScript.Docs.Types.ChildDeclaration
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S(LLLS),1*U(U,A,A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.Types.ChildDeclaration) ->
                 case w of ww { Language.PureScript.Docs.Types.ChildDeclaration ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Docs.Render.$wrenderChildDeclaration
                   ww1
                   ww4 }) -}
c9dec198e16894762957bbae003afeea
  renderChildDeclaration1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.Render.renderChildDeclaration2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
b444ddbfe9fb1cecbba61138cd7d8233
  renderChildDeclaration2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.Render.renderChildDeclaration3) -}
db326badd775998a4782e49b7dbc106a
  renderChildDeclaration3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.Render.renderChildDeclaration4) -}
eda0e8eb94a245b8f1efed4212fcfd03
  renderChildDeclaration4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("::"#) -}
6fd5b3a4808ee427cd2d6e558615deff
  renderConstraint ::
    Language.PureScript.Docs.Types.Constraint'
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,U),1*U,A)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.Types.Constraint') ->
                 case w of ww { Language.PureScript.Types.Constraint ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Docs.Render.$wrenderConstraint
                   ww1
                   ww2
                   ww3 }) -}
e4257dc75528a0d403413e25efbbdcab
  renderConstraints ::
    [Language.PureScript.Docs.Types.Constraint']
    -> GHC.Base.Maybe
         Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (constraints :: [Language.PureScript.Docs.Types.Constraint']) ->
                 case constraints of wild {
                   []
                   -> GHC.Base.Nothing
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                   : ds1 ds2
                   -> GHC.Base.Just
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        (GHC.Types.:
                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                           Language.PureScript.Docs.Render.renderConstraints14
                           (case GHC.Base.map
                                   @ (Language.PureScript.Types.Constraint ())
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                   Language.PureScript.Docs.Render.renderConstraint
                                   wild of wild1 {
                              [] -> Language.PureScript.Docs.Render.renderConstraints5
                              : x ds
                              -> case ds of wild2 {
                                   []
                                   -> GHC.Base.++
                                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                        x `cast`
                                        (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                                        Language.PureScript.Docs.Render.renderConstraints5
                                   : ipv ipv1
                                   -> GHC.Base.++
                                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                        x `cast`
                                        (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                                        (GHC.Base.++_$s++
                                           @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                           (GHC.Base.++
                                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                              (Language.PureScript.Docs.Utils.MonoidExtras.mintersperse_$smintersperse
                                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                                 ipv
                                                 ipv1
                                                 Language.PureScript.Docs.Render.renderConstraints4
                                                   `cast`
                                                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                                                 Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode)
                                                `cast`
                                              (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                                              Language.PureScript.Docs.Render.renderConstraints5)
                                           Language.PureScript.Docs.Render.renderConstraints1
                                           Language.PureScript.Docs.RenderedCode.Types.alias5) } }))
                          `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
c93c7d85731d4f03b651cde270fe4fbc
  renderConstraints1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.Render.renderConstraints2) -}
b07f7470f74ed5a39890bb28740ad04f
  renderConstraints10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=>"#) -}
03ae3da797e90633eac5e1fcb3b67262
  renderConstraints11 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.Render.renderConstraints12) -}
c3d0858685f67e92feb7f5f4a348b940
  renderConstraints12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.Render.renderConstraints13) -}
ad9f1f5f6c63a21f621acae0885dbb98
  renderConstraints13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
9901503ab410bba5cd2defb1118c8e9b
  renderConstraints14 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.Render.renderConstraints15) -}
81383d3485ffab1c3b92453cadf2339e
  renderConstraints15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.Render.renderConstraints16) -}
add0149ebdbd1ee730e71ca3e95debb1
  renderConstraints16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
8a35e719dbd4c6a4755351d4bdf9b1f6
  renderConstraints2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.Render.renderConstraints3) -}
307d254343f8add49f1e8b14dd74df91
  renderConstraints3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
276a476133eb95afc25cc9b9e2e4aef6
  renderConstraints4 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.Render.renderConstraints1
                   Language.PureScript.Docs.RenderedCode.Types.alias5) -}
d6de017803ca994f3f5e8e4a4da3bb01
  renderConstraints5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.Render.renderConstraints11
                   Language.PureScript.Docs.Render.renderConstraints6) -}
1714d42ed6d1eea5853ee5ed2a4e1a61
  renderConstraints6 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   Language.PureScript.Docs.Render.renderConstraints7) -}
9d20d990e85bddd723a91dc76936e9d6
  renderConstraints7 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.Render.renderConstraints8
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
b91245bb62a30baa6e085f61b6bc0d0d
  renderConstraints8 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.Render.renderConstraints9) -}
e87a761189690fc4fba5240cfc963171
  renderConstraints9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.Render.renderConstraints10) -}
1672b1f5cc640558ad5ff6f56e719d41
  renderDeclaration ::
    Language.PureScript.Docs.Types.Declaration
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S(LLLLS),1*U(U(U,U,U),A,A,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.Types.Declaration) ->
                 case w of ww { Language.PureScript.Docs.Types.Declaration ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Docs.Render.$wrenderDeclaration
                   ww1
                   ww4
                   ww5 }) -}
13d4dcacf7e4ab2430125447f56cc099
  toTypeVar ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')
    -> Language.PureScript.Docs.Types.Type'
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')) ->
                 case ds of wild { (,) s ds1 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing
                   -> Language.PureScript.Types.TypeVar @ () GHC.Tuple.() s
                   GHC.Base.Just k
                   -> Language.PureScript.Types.KindedType
                        @ ()
                        GHC.Tuple.()
                        (Language.PureScript.Types.TypeVar @ () GHC.Tuple.() s)
                        k } }) -}
c0d25b00eadac8e543590204cf0128ef
  typeApp ::
    Data.Text.Internal.Text
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')]
    -> Language.PureScript.Docs.Types.Type'
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (title :: Data.Text.Internal.Text)
                   (typeArgs :: [(Data.Text.Internal.Text,
                                  GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')]) ->
                 letrec {
                   go4 :: [(Data.Text.Internal.Text,
                            GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')]
                          -> Language.PureScript.Types.Type ()
                          -> Language.PureScript.Types.Type ()
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Docs.Types.Kind')])
                       (eta :: Language.PureScript.Types.Type ()) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go4
                            ys
                            (Language.PureScript.Types.TypeApp
                               @ ()
                               GHC.Tuple.()
                               eta
                               (Language.PureScript.Docs.Render.toTypeVar y)) }
                 } in
                 go4
                   typeArgs
                   (Language.PureScript.Types.TypeConstructor
                      @ ()
                      GHC.Tuple.()
                      (Language.PureScript.Names.Qualified
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)
                         (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                         title
                           `cast`
                         (Sym (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.TypeName>_P))))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

