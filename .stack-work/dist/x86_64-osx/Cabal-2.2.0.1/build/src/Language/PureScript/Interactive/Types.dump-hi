
==================== FINAL INTERFACE ====================
2019-01-24 14:16:42.965614 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Interactive.Types 8043
  interface hash: 6d2869b42d48cc1dee6b6c1f4ada2c99
  ABI hash: 4e19f70dd31c7d7b6ef50a08ad8425bf
  export-list hash: 1b53f4922e79c9de65e5100c6fc4ac8b
  orphan hash: 85f1352be51a4e472cda6248af38c713
  flag hash: 6b91193d6f95e3c74259a28b4bb30bdf
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.Types.initialInteractivePrint
  Language.PureScript.Interactive.Types.initialPSCiState
  Language.PureScript.Interactive.Types.parseReplQuery
  Language.PureScript.Interactive.Types.psciEnvironment
  Language.PureScript.Interactive.Types.psciExports
  Language.PureScript.Interactive.Types.psciImportedModuleNames
  Language.PureScript.Interactive.Types.psciImportedModules
  Language.PureScript.Interactive.Types.psciImports
  Language.PureScript.Interactive.Types.psciInteractivePrint
  Language.PureScript.Interactive.Types.psciLetBindings
  Language.PureScript.Interactive.Types.psciLoadedExterns
  Language.PureScript.Interactive.Types.replQueries
  Language.PureScript.Interactive.Types.replQueryStrings
  Language.PureScript.Interactive.Types.setInteractivePrint
  Language.PureScript.Interactive.Types.showReplQuery
  Language.PureScript.Interactive.Types.updateImportExports
  Language.PureScript.Interactive.Types.updateImportedModules
  Language.PureScript.Interactive.Types.updateLets
  Language.PureScript.Interactive.Types.updateLoadedExterns
  Language.PureScript.Interactive.Types.Command{Language.PureScript.Interactive.Types.BrowseModule Language.PureScript.Interactive.Types.ClearState Language.PureScript.Interactive.Types.CompleteStr Language.PureScript.Interactive.Types.Decls Language.PureScript.Interactive.Types.Expression Language.PureScript.Interactive.Types.Import Language.PureScript.Interactive.Types.KindOf Language.PureScript.Interactive.Types.PasteLines Language.PureScript.Interactive.Types.QuitPSCi Language.PureScript.Interactive.Types.ReloadState Language.PureScript.Interactive.Types.ReloadVariableState Language.PureScript.Interactive.Types.SetInteractivePrint Language.PureScript.Interactive.Types.ShowHelp Language.PureScript.Interactive.Types.ShowInfo Language.PureScript.Interactive.Types.TypeOf}
  Language.PureScript.Interactive.Types.Directive{Language.PureScript.Interactive.Types.Browse Language.PureScript.Interactive.Types.Clear Language.PureScript.Interactive.Types.Complete Language.PureScript.Interactive.Types.Help Language.PureScript.Interactive.Types.Kind Language.PureScript.Interactive.Types.Paste Language.PureScript.Interactive.Types.Print Language.PureScript.Interactive.Types.Quit Language.PureScript.Interactive.Types.Reload Language.PureScript.Interactive.Types.ReloadV Language.PureScript.Interactive.Types.Show Language.PureScript.Interactive.Types.Type}
  Language.PureScript.Interactive.Types.ImportedModule
  Language.PureScript.Interactive.Types.PSCiConfig{Language.PureScript.Interactive.Types.PSCiConfig psciFileGlobs}
  Language.PureScript.Interactive.Types.PSCiState{Language.PureScript.Interactive.Types.PSCiState}
  Language.PureScript.Interactive.Types.ReplQuery{Language.PureScript.Interactive.Types.QueryImport Language.PureScript.Interactive.Types.QueryLoaded Language.PureScript.Interactive.Types.QueryPrint}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  ImportDeclaration b98a8b3e9f19a9a91825a99d72954601
  ImportDeclarationType ee54accdb974d8b355eb58984489a7af
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  Environment 7eb61fe78108d98d82e39145869b2402
  initEnvironment 3ad13bed759e200214c30a8db150a0f5
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  applyExternsFileToEnvironment 302b0a30a60f6f9ca01301b13755ca49
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  moduleNameFromString 58dbc4d6b97c8eb6012ccda72d203acf
import  -/  Language.PureScript.Sugar.Names 07ea3fdb360ca116350b995d48cbf3db
  desugarImportsWithEnv 7236deb978d551ace461b9e7500d9b1e
import  -/  Language.PureScript.Sugar.Names.Env 97518f893bef0c5e5749cfa9e4ca9265
  exports: 1be6fa0858c130408a65d60cd8c577b4
  Env 2b6b2822bde15bda4afeb3aa3ef04e79
  Exports d2107d9c7383e14684c4687121fab2f3
  Imports 330f296cc3ed68256ee5fc6aa457fa42
  nullImports 5dfc688b52efa485e2b0285fa84553d6
  primExports 00364155181649c1121ad0babd6bb2df
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
9a76f7dd17b564fb8a5f6688bdedc91b
  $fEqDirective ::
    GHC.Classes.Eq Language.PureScript.Interactive.Types.Directive
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Directive
                  Language.PureScript.Interactive.Types.$fEqDirective_$c==
                  Language.PureScript.Interactive.Types.$fEqDirective_$c/= -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fEqDirective_$c/= ::
    Language.PureScript.Interactive.Types.Directive
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Interactive.Types.Directive)
                   (y :: Language.PureScript.Interactive.Types.Directive) ->
                 case x of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x1 of a# { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x2 of b# { DEFAULT ->
                 case GHC.Prim.==# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } }) -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fEqDirective_$c== ::
    Language.PureScript.Interactive.Types.Directive
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Interactive.Types.Directive)
                   (b :: Language.PureScript.Interactive.Types.Directive) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x1 of a# { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# a# b#) } } } }) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fEqReplQuery ::
    GHC.Classes.Eq Language.PureScript.Interactive.Types.ReplQuery
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.ReplQuery
                  Language.PureScript.Interactive.Types.$fEqReplQuery_$c==
                  Language.PureScript.Interactive.Types.$fEqReplQuery_$c/= -}
7b2f73f4cc083a478b85e05eddca17d4
  $fEqReplQuery_$c/= ::
    Language.PureScript.Interactive.Types.ReplQuery
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Interactive.Types.ReplQuery)
                   (y :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Interactive.Types.QueryLoaded
                        -> GHC.Types.False }
                   Language.PureScript.Interactive.Types.QueryImport
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.False }
                   Language.PureScript.Interactive.Types.QueryPrint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Interactive.Types.QueryPrint
                        -> GHC.Types.False } }) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fEqReplQuery_$c== ::
    Language.PureScript.Interactive.Types.ReplQuery
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.ReplQuery)
                   (ds1 :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case ds of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Interactive.Types.QueryLoaded
                        -> GHC.Types.True }
                   Language.PureScript.Interactive.Types.QueryImport
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.True }
                   Language.PureScript.Interactive.Types.QueryPrint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Interactive.Types.QueryPrint
                        -> GHC.Types.True } }) -}
dafebe94f69e69480c05be438e4778e9
  $fShowCommand ::
    GHC.Show.Show Language.PureScript.Interactive.Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Command
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshow
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshowList -}
dafebe94f69e69480c05be438e4778e9
  $fShowCommand1 ::
    Language.PureScript.Interactive.Types.Command -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2) -}
da59d4e0d19192eb24f13ca491c4110b
  $fShowCommand2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
dafebe94f69e69480c05be438e4778e9
  $fShowCommand_$cshow ::
    Language.PureScript.Interactive.Types.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.Command) ->
                 Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dafebe94f69e69480c05be438e4778e9
  $fShowCommand_$cshowList ::
    [Language.PureScript.Interactive.Types.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.Command])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.Command
                   Language.PureScript.Interactive.Types.$fShowCommand1
                   ls
                   s) -}
dafebe94f69e69480c05be438e4778e9
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.Command -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fShowDirective ::
    GHC.Show.Show Language.PureScript.Interactive.Types.Directive
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Directive
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshow
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshowList -}
fd1be4342afeb2333122bd1a3f6d1ba5
  $fShowDirective1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective2) -}
e4e1ad620558cd9c5b62f695a5b3df88
  $fShowDirective10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Show"#) -}
81fd3c873b947deb65394d9858acf892
  $fShowDirective11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective12) -}
3ef7e07e99e71a1402467f533cb0e788
  $fShowDirective12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Kind"#) -}
38fe97ec21e4249d6fff57963d789616
  $fShowDirective13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective14) -}
b9c8ce2f548adb08e280328a78891451
  $fShowDirective14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
a6cde2af5f77c843a1729df783a0ce04
  $fShowDirective15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective16) -}
b05340563e2ffc2d742a57dead2085c4
  $fShowDirective16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Browse"#) -}
6b7a008c70394d8dfcc223d833b36094
  $fShowDirective17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective18) -}
debb3093b9338a90f6ca6e88d7d0b3ed
  $fShowDirective18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Clear"#) -}
b109629b3e8f362bc4b6a2db7005a552
  $fShowDirective19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective20) -}
e13315ec9918fa3dcee246fc3c989e61
  $fShowDirective2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Print"#) -}
958fd1cc03ff7a8e11c61e5a1eb8efa1
  $fShowDirective20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Reload"#) -}
4e990ba3879be49c38ee6b4e74018f96
  $fShowDirective21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective22) -}
5d411fe3d12679bb190320de2f965685
  $fShowDirective22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quit"#) -}
cc5ad85c4647b7830326372108047aa9
  $fShowDirective23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective24) -}
1b77d10967fb9abaf41fd57b02ad3c1e
  $fShowDirective24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Help"#) -}
3db0e89968a11c0d535dbb0af199ea27
  $fShowDirective3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective4) -}
a134fdac80edb967b56717236d67533b
  $fShowDirective4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReloadV"#) -}
bb217dd662d1369f3bb59cb81209268c
  $fShowDirective5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective6) -}
38326209ba5228adcd4a1b8d53548c77
  $fShowDirective6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Complete"#) -}
f8084436dd4629d3ff65d5792d879a13
  $fShowDirective7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective8) -}
a8fa48e78a3540f632bca55f0b7cc885
  $fShowDirective8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Paste"#) -}
cea67d712efbc73078331e76832bc681
  $fShowDirective9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective10) -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fShowDirective_$cshow ::
    Language.PureScript.Interactive.Types.Directive -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Interactive.Types.Directive) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.Help
                   -> Language.PureScript.Interactive.Types.$fShowDirective23
                   Language.PureScript.Interactive.Types.Quit
                   -> Language.PureScript.Interactive.Types.$fShowDirective21
                   Language.PureScript.Interactive.Types.Reload
                   -> Language.PureScript.Interactive.Types.$fShowDirective19
                   Language.PureScript.Interactive.Types.Clear
                   -> Language.PureScript.Interactive.Types.$fShowDirective17
                   Language.PureScript.Interactive.Types.Browse
                   -> Language.PureScript.Interactive.Types.$fShowDirective15
                   Language.PureScript.Interactive.Types.Type
                   -> Language.PureScript.Interactive.Types.$fShowDirective13
                   Language.PureScript.Interactive.Types.Kind
                   -> Language.PureScript.Interactive.Types.$fShowDirective11
                   Language.PureScript.Interactive.Types.Show
                   -> Language.PureScript.Interactive.Types.$fShowDirective9
                   Language.PureScript.Interactive.Types.Paste
                   -> Language.PureScript.Interactive.Types.$fShowDirective7
                   Language.PureScript.Interactive.Types.Complete
                   -> Language.PureScript.Interactive.Types.$fShowDirective5
                   Language.PureScript.Interactive.Types.ReloadV
                   -> Language.PureScript.Interactive.Types.$fShowDirective3
                   Language.PureScript.Interactive.Types.Print
                   -> Language.PureScript.Interactive.Types.$fShowDirective1 }) -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fShowDirective_$cshowList ::
    [Language.PureScript.Interactive.Types.Directive] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.Directive])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.Directive
                   Language.PureScript.Interactive.Types.$w$cshowsPrec
                   ls
                   s) -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $fShowDirective_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.Directive)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec w1 w2) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $fShowPSCiConfig ::
    GHC.Show.Show Language.PureScript.Interactive.Types.PSCiConfig
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.PSCiConfig
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshow
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowList -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $fShowPSCiConfig1 ::
    Language.PureScript.Interactive.Types.PSCiConfig -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec1 0# w w1) -}
8a56611de0c011b0159fc6d047aa7b62
  $fShowPSCiConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
3e726bc06f160339801b89691f88f76a
  $fShowPSCiConfig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psciFileGlobs = "#) -}
c2550472a5727897cf24dbd68c001a89
  $fShowPSCiConfig4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiConfig {"#) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $fShowPSCiConfig_$cshow ::
    Language.PureScript.Interactive.Types.PSCiConfig -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.PSCiConfig) ->
                 Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $fShowPSCiConfig_$cshowList ::
    [Language.PureScript.Interactive.Types.PSCiConfig]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.PSCiConfig])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.PSCiConfig
                   Language.PureScript.Interactive.Types.$fShowPSCiConfig1
                   ls
                   s) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $fShowPSCiConfig_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.PSCiConfig
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec1
                   ww1
                   w1
                   w2 }) -}
876224c4cea1642e91e4ad0b6a812184
  $fShowPSCiState ::
    GHC.Show.Show Language.PureScript.Interactive.Types.PSCiState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.PSCiState
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshow
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowList -}
876224c4cea1642e91e4ad0b6a812184
  $fShowPSCiState1 ::
    Language.PureScript.Interactive.Types.PSCiState -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,U(U,U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
d226458681012e964cfc03144d052ea1
  $fShowPSCiState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowPSCiState3) -}
8569907a4aa12fd6aac741ab65e50831
  $fShowPSCiState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiState "#) -}
4c259a8e07c59783ee0e8af057ac9f47
  $fShowPSCiState4 ::
    (Language.PureScript.AST.Declarations.Module,
     Language.PureScript.Externs.ExternsFile)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Language.PureScript.AST.Declarations.Module,
                          Language.PureScript.Externs.ExternsFile))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Language.PureScript.Interactive.Types.$wlvl
                        ww1
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww4 ww5 } }) -}
a850c46c1f7f9528422600f0a5c1f24f
  $fShowPSCiState5 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Language.PureScript.Interactive.Types.$wlvl1
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) -}
876224c4cea1642e91e4ad0b6a812184
  $fShowPSCiState_$cshow ::
    Language.PureScript.Interactive.Types.PSCiState -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,U(U,U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.PSCiState) ->
                 Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
876224c4cea1642e91e4ad0b6a812184
  $fShowPSCiState_$cshowList ::
    [Language.PureScript.Interactive.Types.PSCiState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.PSCiState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.PSCiState
                   Language.PureScript.Interactive.Types.$fShowPSCiState1
                   ls
                   s) -}
876224c4cea1642e91e4ad0b6a812184
  $fShowPSCiState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.PSCiState
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U,U(U,U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Interactive.Types.PSCiState ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fShowReplQuery ::
    GHC.Show.Show Language.PureScript.Interactive.Types.ReplQuery
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.ReplQuery
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshow
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshowList -}
1834de471cd144719cfe52afbb2683e2
  $fShowReplQuery1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowReplQuery2) -}
748637a248a2a8a58b8473d2c12c5763
  $fShowReplQuery2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueryPrint"#) -}
5917f79eba642e3990c2c528799b7724
  $fShowReplQuery3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowReplQuery4) -}
a50466ee1ef595fc7435fd3a5ce2786a
  $fShowReplQuery4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueryImport"#) -}
8bf82f6434f31807bd360de64bbc7924
  $fShowReplQuery5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowReplQuery6) -}
ec8ae54e7272b52d8890b49b3a71a47d
  $fShowReplQuery6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueryLoaded"#) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fShowReplQuery_$cshow ::
    Language.PureScript.Interactive.Types.ReplQuery -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> Language.PureScript.Interactive.Types.$fShowReplQuery5
                   Language.PureScript.Interactive.Types.QueryImport
                   -> Language.PureScript.Interactive.Types.$fShowReplQuery3
                   Language.PureScript.Interactive.Types.QueryPrint
                   -> Language.PureScript.Interactive.Types.$fShowReplQuery1 }) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fShowReplQuery_$cshowList ::
    [Language.PureScript.Interactive.Types.ReplQuery] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.ReplQuery])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.$w$cshowsPrec3
                   ls
                   s) -}
7b2f73f4cc083a478b85e05eddca17d4
  $fShowReplQuery_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.ReplQuery)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec3 w1 w2) -}
b610c1fbf2a56c27f1cb03a4bf5144d7
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e ((->) [Language.PureScript.AST.Declarations.Module]))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fFunctorExceptT
                     @ e)
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module]))
                  (\ @ a
                     @ b
                     @ c
                     (f10 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e ((->) [Language.PureScript.AST.Declarations.Module]) a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ b
                     @ c
                     (\ (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             x1 of wild {
                        Data.Either.Left x2 -> Data.Either.Left @ e @ (b -> c) x2
                        Data.Either.Right y -> Data.Either.Right @ e @ (b -> c) (f10 y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b -> c>_N)))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e ((->) [Language.PureScript.AST.Declarations.Module]) a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ b
                     @ a
                     (\ (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             x1 of wild {
                        Data.Either.Left x2 -> Data.Either.Left @ e @ (b -> a) x2
                        Data.Either.Right y
                        -> Data.Either.Right @ e @ (b -> a) (\ (ds :: b) -> y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b -> a>_N))) -}
8523ea53a8f6cc9569f831758e7483be
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e ((->) [Language.PureScript.AST.Declarations.Module]) (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) a
    -> [Language.PureScript.AST.Declarations.Module]
    -> Data.Either.Either e b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) a)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case w1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <a -> b>_N)
                        r1 of wild {
                   Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                   Data.Either.Right k
                   -> case w2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             r1 of wild1 {
                        Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                        Data.Either.Right x -> Data.Either.Right @ e @ b (k x) } }) -}
0daaf4611853c43c46315358265622e4
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT
      e ((->) [Language.PureScript.AST.Declarations.Module]) a
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) b
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e ((->) [Language.PureScript.AST.Declarations.Module]) b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                        r1 of wild {
                   Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <b>_N)
                        r1 })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e ((->) [Language.PureScript.AST.Declarations.Module]) a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e ((->) [Language.PureScript.AST.Declarations.Module]) b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b>_N)) -}
574abcbc232daa1076f1ed77161c7a1b
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) ->
                 let {
                   x :: Data.Either.Either e a = Data.Either.Right @ e @ a a1
                 } in
                 \ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <a>_N)) -}
3c6d00b00f5ab4c89e0aca160eb41fe8
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e ((->) [Language.PureScript.AST.Declarations.Module]))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module]))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])) -}
402eafc06fcd7ac0fca7e2a36f0c939a
  $s$fApplicativeWriterT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT
                     @ Language.PureScript.Errors.MultipleErrors)
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cliftA2
                     @ Language.PureScript.Errors.MultipleErrors
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     Language.PureScript.Errors.$fMonoidMultipleErrors
                     (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT
                        @ Language.PureScript.Errors.MultipleErrors))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a)
                     (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module]))
                                b) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ Language.PureScript.Errors.MultipleErrors
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ (b, Language.PureScript.Errors.MultipleErrors)
                     @ (b, Language.PureScript.Errors.MultipleErrors)
                     (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                      case eta
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                             x of wild {
                        Data.Either.Left x1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ((b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors))
                             x1
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ((b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors))
                             (\ (ds1 :: (b, Language.PureScript.Errors.MultipleErrors)) ->
                              case y of wild1 { (,) a1 w1 ->
                              case ds1 of wild2 { (,) b1 w' ->
                              (b1,
                               (GHC.Base.augment
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  (\ @ b2
                                     (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                           -> b2 -> b2)[OneShot]
                                     (n :: b2)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b2
                                     c
                                     n
                                     w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 `cast`
                               (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } }) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors)>_N))
                     eta1
                       `cast`
                     (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                          <Language.PureScript.Errors.MultipleErrors>_N
                          <Control.Monad.Trans.Except.ExceptT
                             Language.PureScript.Errors.MultipleErrors
                             ((->) [Language.PureScript.AST.Declarations.Module])>_R
                          <b>_N))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module]))
                      a>_R
                   ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <b>_N))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a) ->
                   Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                     @ b
                     @ a
                     (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                      case eta
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                             x of wild {
                        Data.Either.Left x1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                             x1
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                             (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                                @ a
                                @ b
                                @ Language.PureScript.Errors.MultipleErrors
                                y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b -> a,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b
                                                                                            -> a>_N))) -}
1dbfbf6f1f683834b1f23356554d82da
  $s$fApplicativeWriterT_$c<* ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module]))
                             a) ->
                 Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                   @ b
                   @ a
                   (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                    case eta
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])>_R
                              <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Language.PureScript.Errors.MultipleErrors>_N
                                          <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                          <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                           x of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                           (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                              @ a
                              @ b
                              @ Language.PureScript.Errors.MultipleErrors
                              y) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(b -> a,
                               Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                         <Language.PureScript.Errors.MultipleErrors>_N
                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                            ((->)
                                                                                               [Language.PureScript.AST.Declarations.Module])>_R
                                                                                         <b
                                                                                          -> a>_N))) -}
66a932250154dc047ae1b4b759e70042
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f10 :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module]))
                             (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ ((->) [Language.PureScript.AST.Declarations.Module])
                   @ Language.PureScript.Errors.MultipleErrors
                   (GHC.Base.$fFunctor(->)
                      @ [Language.PureScript.AST.Declarations.Module])
                   (GHC.Base.$fMonad(->)
                      @ [Language.PureScript.AST.Declarations.Module])
                   @ (a, Language.PureScript.Errors.MultipleErrors)
                   @ (b, Language.PureScript.Errors.MultipleErrors)
                   (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                    case f10
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])>_R
                              <a -> b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <(->)
                                                  [Language.PureScript.AST.Declarations.Module]>_R
                                               <(a -> b,
                                                 Language.PureScript.Errors.MultipleErrors)>_N)
                           x of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ ((a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors))
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ ((a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors))
                           (\ (ds1 :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                            case y of wild1 { (,) a1 w1 ->
                            case ds1 of wild2 { (,) b1 w' ->
                            (a1 b1,
                             (GHC.Base.augment
                                @ Language.PureScript.AST.Declarations.ErrorMessage
                                (\ @ b2
                                   (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                         -> b2 -> b2)[OneShot]
                                   (n :: b2)[OneShot] ->
                                 GHC.Base.foldr
                                   @ Language.PureScript.AST.Declarations.ErrorMessage
                                   @ b2
                                   c
                                   n
                                   w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                               `cast`
                             (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } }) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors)>_N))
                   v `cast`
                   (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                        <Language.PureScript.Errors.MultipleErrors>_N
                        <Control.Monad.Trans.Except.ExceptT
                           Language.PureScript.Errors.MultipleErrors
                           ((->) [Language.PureScript.AST.Declarations.Module])>_R
                        <a>_N))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            ((->) [Language.PureScript.AST.Declarations.Module]))
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <b>_N)) -}
04ff3157853ea066464b5e8db1d3f83e
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) ->
                 let {
                   a2 :: (a, Language.PureScript.Errors.MultipleErrors)
                   = (a1,
                      (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                 } in
                 let {
                   x :: Data.Either.Either
                          Language.PureScript.Errors.MultipleErrors
                          (a, Language.PureScript.Errors.MultipleErrors)
                   = Data.Either.Right
                       @ Language.PureScript.Errors.MultipleErrors
                       @ (a, Language.PureScript.Errors.MultipleErrors)
                       a2
                 } in
                 (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                   `cast`
                 (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <a>_N)) -}
6307aa4ef366890b2ef1b3b1667a07ab
  $s$fApplicativeWriterT_$s$fFunctorWriterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ w.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       w
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap
                     @ w)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Writer.Strict.mapWriterT
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     @ b
                     @ w
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     @ a
                     @ w
                     (\ (x1 :: Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])
                                 (b, w))
                        (x2 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x1
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                <(b, w)>_N)
                             x2 of wild {
                        Data.Either.Left x3
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (a, w)
                             x3
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (a, w)
                             (case y of wild1 { (,) a1 w1 -> (x, w1) }) })
                       `cast`
                     (<Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module])
                         (b, w)>_R
                      ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                    <Language.PureScript.Errors.MultipleErrors>_N
                                    <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                    <(a, w)>_N))) -}
04d149b23d178678159f207d3c18caba
  $s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f10 :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Errors.MultipleErrors
                        ((->) [Language.PureScript.AST.Declarations.Module]))
                   @ a
                   @ w
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Errors.MultipleErrors
                        ((->) [Language.PureScript.AST.Declarations.Module]))
                   @ b
                   @ w
                   (\ (x :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])
                              (a, w))
                      (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                    case x `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <(->) [Language.PureScript.AST.Declarations.Module]>_R
                              <(a, w)>_N)
                           x1 of wild {
                      Data.Either.Left x2
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b, w)
                           x2
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b, w)
                           (case y of wild1 { (,) a1 w1 -> (f10 a1, w1) }) })
                     `cast`
                   (<Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module])
                       (a, w)>_R
                    ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Language.PureScript.Errors.MultipleErrors>_N
                                  <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                  <(b, w)>_N))) -}
d4583b9e6d5d3c3faf91a4843c92cf00
  $s$fMonadErroreWriterT ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
                  (\ @ a
                     (eta :: Language.PureScript.Errors.MultipleErrors)
                     (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                   Data.Either.Left
                     @ Language.PureScript.Errors.MultipleErrors
                     @ (a, Language.PureScript.Errors.MultipleErrors)
                     eta)
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Errors.MultipleErrors>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                ((->)
                                                                                                   [Language.PureScript.AST.Declarations.Module])>_R
                                                                                             <a>_N))
                  (\ @ a
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a)
                     (eta1 :: Language.PureScript.Errors.MultipleErrors
                              -> Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   (Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      ((->) [Language.PureScript.AST.Declarations.Module]))
                                   a)
                     (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                   case eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module])>_R
                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Language.PureScript.Errors.MultipleErrors>_N
                                         <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                          r1 of wild {
                     Data.Either.Left l
                     -> (eta1 l)
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module])>_R
                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Language.PureScript.Errors.MultipleErrors>_N
                                         <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                          r1
                     Data.Either.Right r
                     -> Data.Either.Right
                          @ Language.PureScript.Errors.MultipleErrors
                          @ (a, Language.PureScript.Errors.MultipleErrors)
                          r })
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module]))
                      a>_R
                   ->_R <Language.PureScript.Errors.MultipleErrors
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module]))
                              a>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                ((->)
                                                                                                   [Language.PureScript.AST.Declarations.Module])>_R
                                                                                             <a>_N)) -}
e559e548d66c16c90530bf5a510d3537
  $s$fMonadErroreWriterT_$s$fMonadWriterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>=
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>
                  (\ @ a (eta :: a) ->
                   let {
                     a1 :: (a, Language.PureScript.Errors.MultipleErrors)
                     = (eta,
                        (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   } in
                   let {
                     x :: Data.Either.Either
                            Language.PureScript.Errors.MultipleErrors
                            (a, Language.PureScript.Errors.MultipleErrors)
                     = Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, Language.PureScript.Errors.MultipleErrors)
                         a1
                   } in
                   (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <a>_N))
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail -}
dbabe80ca96fb8f16d0fe386a4834eb6
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (b, Language.PureScript.Errors.MultipleErrors)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      case k `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(b, Language.PureScript.Errors.MultipleErrors)>_N)
                             r1 of wild2 {
                        Data.Either.Left e1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             e1
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             (b1,
                              (GHC.Base.augment
                                 @ Language.PureScript.AST.Declarations.ErrorMessage
                                 (\ @ b2
                                    (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                          -> b2 -> b2)[OneShot]
                                    (n :: b2)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    @ b2
                                    c
                                    n
                                    w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                `cast`
                              (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            ((->) [Language.PureScript.AST.Declarations.Module]))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b>_N)) -}
de939fdd1b0b1b3a07132e3c86d8b4c9
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             Language.PureScript.Errors.MultipleErrors
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                ((->) [Language.PureScript.AST.Declarations.Module]))
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module]))
                              b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (b, Language.PureScript.Errors.MultipleErrors)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      case (k a1)
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(b, Language.PureScript.Errors.MultipleErrors)>_N)
                             r1 of wild2 {
                        Data.Either.Left e1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             e1
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             (b1,
                              (GHC.Base.augment
                                 @ Language.PureScript.AST.Declarations.ErrorMessage
                                 (\ @ b2
                                    (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                          -> b2 -> b2)[OneShot]
                                    (n :: b2)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    @ b2
                                    c
                                    n
                                    w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                `cast`
                              (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b>_N)) -}
ecf49b3aabaf426fe7604e93c8f6c5dd
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 1, Strictness: <B,U>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ ([Language.PureScript.AST.Declarations.Module]
                      -> Data.Either.Either
                           Language.PureScript.Errors.MultipleErrors
                           (a, Language.PureScript.Errors.MultipleErrors))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(a,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <a>_N)) -}
e42fed229bf691c6c49716d7086254cf
  $s$fMonadWriterwWriterT ::
    Control.Monad.Writer.Class.MonadWriter
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Errors.$fMonoidMultipleErrors
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
                  (\ @ a (x :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                   let {
                     x1 :: Data.Either.Either
                             Language.PureScript.Errors.MultipleErrors
                             (a, Language.PureScript.Errors.MultipleErrors)
                     = Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, Language.PureScript.Errors.MultipleErrors)
                         x
                   } in
                   (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x1)
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <(a, Language.PureScript.Errors.MultipleErrors)>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <a>_N))
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$stell
                     @ Language.PureScript.Errors.MultipleErrors)
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$slisten
                     @ Language.PureScript.Errors.MultipleErrors)
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$spass
                     @ Language.PureScript.Errors.MultipleErrors) -}
92c03d628ed272882b5f0ade078dcfe7
  $s$fMonadWriterwWriterT_$slisten ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         (a, w)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            w
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, w)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ ((a, w), w)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ ((a, w), w)
                        ((a1, w1), w1) } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <((a, w),
                                 w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                   <w>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      ((->)
                                                         [Language.PureScript.AST.Declarations.Module])>_R
                                                   <(a, w)>_N)) -}
0f61b116322c7e538b92db9b72f3b071
  $s$fMonadWriterwWriterT_$spass ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      (a, w -> w)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            w
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            (a, w -> w))
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <(a, w -> w)>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                 <Language.PureScript.Errors.MultipleErrors>_N
                                                 <(->)
                                                    [Language.PureScript.AST.Declarations.Module]>_R
                                                 <((a, w -> w), w)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (a, w)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) ds1 w1 ->
                      case ds1 of wild2 { (,) a1 f10 ->
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (a, w)
                        (a1, f10 w1) } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    (a, w -> w)>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(a, w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                      <w>_N
                                                      <Control.Monad.Trans.Except.ExceptT
                                                         Language.PureScript.Errors.MultipleErrors
                                                         ((->)
                                                            [Language.PureScript.AST.Declarations.Module])>_R
                                                      <a>_N)) -}
36d66ccc5990d7781d630fbd6fbbf228
  $s$fMonadWriterwWriterT_$stell ::
    w
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w (w1 :: w) ->
                 let {
                   eta :: ((), w) = (GHC.Tuple.(), w1)
                 } in
                 let {
                   x :: Data.Either.Either
                          Language.PureScript.Errors.MultipleErrors ((), w)
                   = Data.Either.Right
                       @ Language.PureScript.Errors.MultipleErrors
                       @ ((), w)
                       eta
                 } in
                 (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                   `cast`
                 (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <((), w)>_N)))
                  `cast`
                (forall (w :: <*>_N).
                 <w>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <w>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <()>_N)) -}
a6367b2f1ecb42d864c6799a774dd3a3
  $s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Interactive.Types.$s$fShow(,)_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Interactive.Types.$s$fShow(,)_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.Interactive.Types.$s$fShow(,)_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
58d39814c0b690a8807019a997ba5cb9
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
aed28ca011fc09a2f937125297b782fd
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports)
    -> (([Language.PureScript.Names.ProperName
            'Language.PureScript.Names.Namespace] :: *)
        ~R# (Language.PureScript.Names.ModuleName :: *)) =>
       GHC.Base.Maybe
         (Language.PureScript.AST.SourcePos.SourceSpan,
          Language.PureScript.Sugar.Names.Env.Imports,
          Language.PureScript.Sugar.Names.Env.Exports)
  {- Arity: 2, Strictness: <S,1*U><L,A> -}
c1c9e19846bab1e092c0306b5f38fee0
  $tc'Browse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6078319401220659782##
                   2502791393773312144##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Browse2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
4ed303ee8da137f25e1ebe9ec1d654a4
  $tc'Browse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
470ce909b30522456ae3c0e0b8fcb8bc
  $tc'Browse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Browse3) -}
11ed24bb1ed2e420d14ecb5191433766
  $tc'Browse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Browse"#) -}
bc0653f8d6d216701901a89526c949d9
  $tc'BrowseModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10889247123071601824##
                   296301615943558523##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'BrowseModule2
                   0#
                   Language.PureScript.Interactive.Types.$tc'BrowseModule1) -}
bcb187aef26c956f960ae43c393f5b8f
  $tc'BrowseModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b02bedbfd1cc83a6e45ee904647d1ca8
  $tc'BrowseModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'BrowseModule3) -}
0d96ea4e07ba630d2205c7f5c4fda646
  $tc'BrowseModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BrowseModule"#) -}
f939a3ed4f447cb0197c6a8b21783d81
  $tc'Clear :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5188477697939761191##
                   10605511154572715394##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Clear1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
899c1f093cc9c94d86f6a71cc0a6f5b7
  $tc'Clear1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Clear2) -}
2911fb3b736c5eb029c216f761420b83
  $tc'Clear2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Clear"#) -}
f3a9edd0693533f189e8428fef9dfb2c
  $tc'ClearState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8877559657542484990##
                   468780383011178745##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ClearState2
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
e10ddb91d6e98ae6fd8faaecb2cac0b0
  $tc'ClearState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
8559718152ebdd2dae8681cbeb13bb74
  $tc'ClearState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ClearState3) -}
ff8a922797e2bbeeafc4169957fab2f4
  $tc'ClearState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClearState"#) -}
a3010f6997ca70e4c9933b3d3d1f3996
  $tc'Complete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1722211346056063987##
                   18225495099237362006##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Complete1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
c050a1531177dbee0d5948387e6b5791
  $tc'Complete1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Complete2) -}
fbd6b747527d98c551648f47f704d94f
  $tc'Complete2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Complete"#) -}
2eaf11f20d5ef3a98e132ed91726af46
  $tc'CompleteStr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   208862565446075254##
                   14590814882293113104##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'CompleteStr2
                   0#
                   Language.PureScript.Interactive.Types.$tc'CompleteStr1) -}
62de8b3c333e2f0fff6c7d6caa12ac7d
  $tc'CompleteStr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2e51d82e6a266e79f01b658bae459d78
  $tc'CompleteStr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'CompleteStr3) -}
7918b9d631640d5977abec138d0c78dd
  $tc'CompleteStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompleteStr"#) -}
483985a8d37fc4f04b1b4e60659484a6
  $tc'Decls :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6640603707294669630##
                   5246947178047398777##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Decls2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Decls1) -}
b29eaea375724a507634410581a3b418
  $tc'Decls1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98fc5ecfb757a61536d92885eb698559
  $tc'Decls2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Decls3) -}
c6f08b7b9bb21ff967eaed28c0de0a64
  $tc'Decls3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Decls"#) -}
92aa36f4d69d5163729e62e833dc9cfd
  $tc'Expression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   104405177076265334##
                   14362162110764963555##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Expression2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
6600ee85c2da2960f34c6ab8ca6a5a16
  $tc'Expression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
08acb2d29526b242c6fc03afc40c19cb
  $tc'Expression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Expression3) -}
a85611413a20b6a919d894fa4f8cdb9a
  $tc'Expression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Expression"#) -}
6f8a60089f25b1ee32696ddd37cf31f4
  $tc'Help :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16817306647215529248##
                   7444523058275425449##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Help1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
7dd46cfc56bebd7d73210452cd315f94
  $tc'Help1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Help2) -}
63759d57aa13d190fe1fba467062cabd
  $tc'Help2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Help"#) -}
c729a44a015ab89e12753b34b2044d0f
  $tc'Import :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17377483040535133178##
                   17117755877200098449##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Import2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Import1) -}
e7fe59efa5bb328d4a34cc5d12f3415a
  $tc'Import1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8d572b16f4104b558776a461a89c3649
  $tc'Import2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Import3) -}
ccc72ebdd038bf3ebca90bf044b1ad01
  $tc'Import3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Import"#) -}
fcf46baec12cdc469938b9aa73c06aa5
  $tc'Kind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7550680276368501134##
                   11091557688263268824##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Kind1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
e47b473dccaabf74da1ace39dcd0c48c
  $tc'Kind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Kind2) -}
c181441ff2f70d504b92ca38fc79b932
  $tc'Kind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Kind"#) -}
0a29fc2fcd3067237ffbb44531494d51
  $tc'KindOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7792853877480402387##
                   4547704359645498795##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'KindOf2
                   0#
                   Language.PureScript.Interactive.Types.$tc'KindOf1) -}
27e2b062664b9d9a9a3637ccc80daa75
  $tc'KindOf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5373d54c7533befb7e96157b60c98115
  $tc'KindOf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'KindOf3) -}
0ee0d0c5a713c08de30b6a81f62295ff
  $tc'KindOf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindOf"#) -}
ff2ca8e69842dd5ac93ace1dc9f26f1e
  $tc'PSCiConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4783082984439393654##
                   9236443832307591107##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig2
                   0#
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig1) -}
d1b553d5d826848dada41fcf1290bcbd
  $tc'PSCiConfig1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7e45a11f8ae414b04ea1e31378a51204
  $tc'PSCiConfig2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig3) -}
7be6edb36b4c520d60ba9bd5c0546248
  $tc'PSCiConfig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSCiConfig"#) -}
de57d6fec36d03d064f7a247d4605af7
  $tc'PSCiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4009410036677039232##
                   18008627944488146145##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PSCiState2
                   0#
                   Language.PureScript.Interactive.Types.$tc'PSCiState1) -}
45709911222c1b88eadbaf1b206c5c53
  $tc'PSCiState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb8be802c384ef289fb7db70ab690ae8
  $tc'PSCiState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PSCiState3) -}
75d2cb1565cde66289e9ccfe4e44df88
  $tc'PSCiState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSCiState"#) -}
a0430b1df7aefd3ea26a5489c9751ce5
  $tc'Paste :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7452459020289864302##
                   3540376570873699190##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Paste1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
029991451c62153a35bba1b1faeef712
  $tc'Paste1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Paste2) -}
216f86ead413a3f2aa5b68a239c9c805
  $tc'Paste2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Paste"#) -}
47d32764a4ebf2d3b06b7c87b8107cd2
  $tc'PasteLines :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15421348008968016650##
                   4173671152320505539##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PasteLines1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
cad6dc42675684376adf65f14f39bdbf
  $tc'PasteLines1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PasteLines2) -}
fd66dadfebaab8c4659604414b3449fe
  $tc'PasteLines2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PasteLines"#) -}
25f0fc22c24285666187b15f94b53036
  $tc'Print :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17150378772846127782##
                   1174216505361243428##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Print1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
685c4a47728a3a4d4f70b49513e1a9ab
  $tc'Print1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Print2) -}
3494a37e0b3edd364f7e332c17a8747a
  $tc'Print2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Print"#) -}
a47fad0c727eb222e0ba533fadec6a28
  $tc'QueryImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   31508047011080664##
                   334568893077688668##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QueryImport2
                   0#
                   Language.PureScript.Interactive.Types.$tc'QueryImport1) -}
6f6dcf1c03ea25695d27e5750e2b5253
  $tc'QueryImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e259e53bbf90ce8ba3b0c131102106bd
  $tc'QueryImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QueryImport3) -}
852194d0bf28720babeb80242bd59226
  $tc'QueryImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueryImport"#) -}
0d39dd23839622794b16786316ee94dd
  $tc'QueryLoaded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9692495695740302375##
                   12529378519977999478##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QueryLoaded1
                   0#
                   Language.PureScript.Interactive.Types.$tc'QueryImport1) -}
7e64ed1b771078fa564ca387b991c43e
  $tc'QueryLoaded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QueryLoaded2) -}
0e46d4f35552c91ae74cd5e6d9891c5b
  $tc'QueryLoaded2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueryLoaded"#) -}
78370063bbd8800d9935da74f6b66121
  $tc'QueryPrint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10867425424505043141##
                   2161402724718884201##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QueryPrint1
                   0#
                   Language.PureScript.Interactive.Types.$tc'QueryImport1) -}
d864089b95b048ca403357985b6b7242
  $tc'QueryPrint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QueryPrint2) -}
6b784800655847bdc5d28a7c404e8a60
  $tc'QueryPrint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueryPrint"#) -}
3b0a483298b8b6a8686f261863274d8e
  $tc'Quit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11304003084813408645##
                   1806598610358641046##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Quit1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
8a53a7fc1a4e64183aaee6b4146520e2
  $tc'Quit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Quit2) -}
4126d8772ae7a2d12f4a6d4d5f54682e
  $tc'Quit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quit"#) -}
194c3448d2f3f21367e487e9cc315eb2
  $tc'QuitPSCi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6838338569164274887##
                   4498809698208265469##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QuitPSCi1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
9a881f2786b579ad3cd5144e78e876dd
  $tc'QuitPSCi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QuitPSCi2) -}
5eb1fe407fefc9211e637a14b1cfc87c
  $tc'QuitPSCi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QuitPSCi"#) -}
cedee59639b7111cc5e2f540d35690ca
  $tc'Reload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4502752018061827829##
                   12244159127337387091##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Reload1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
c75e10e404c03b8f12113a47d6c6ebed
  $tc'Reload1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Reload2) -}
2ff23dc122ba418fe19afcd635e65de0
  $tc'Reload2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Reload"#) -}
c1cf132089eb2a868b60c0d448220fc7
  $tc'ReloadState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17293433541559687176##
                   5593339735848115729##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadState1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
38e82b3d223b30ffac44b89386b0f6eb
  $tc'ReloadState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadState2) -}
c2c2d3914e0e978ef2c23b5117e67a1a
  $tc'ReloadState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadState"#) -}
a6b041e25e0b5525dd21c85884fb7c30
  $tc'ReloadV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5964510110237322508##
                   17518129129389747194##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadV1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
bb415b2b3f9942e535bdc978a51d5729
  $tc'ReloadV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadV2) -}
01204eae688d267433aea5c3c7d58e8f
  $tc'ReloadV2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadV"#) -}
179edec91d236004320e0ad0d8bdeeb0
  $tc'ReloadVariableState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4003871965117408689##
                   3330573992475016899##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadVariableState1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
9a9748920e4a52a8f87f6d91a3de1ebd
  $tc'ReloadVariableState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadVariableState2) -}
e130d636be2fa0ba65be1e60b6fd28f4
  $tc'ReloadVariableState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadVariableState"#) -}
d564fcec048ae69a969785632151e739
  $tc'SetInteractivePrint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2463210603367432694##
                   9924080887891515958##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'SetInteractivePrint2
                   0#
                   Language.PureScript.Interactive.Types.$tc'SetInteractivePrint1) -}
91ce4608fe0e4a49b6fd9cd85ecce612
  $tc'SetInteractivePrint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
966aee3b7619bb820b5c3a2524079bd9
  $tc'SetInteractivePrint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'SetInteractivePrint3) -}
86a451936f34b4006a0e7fe13648dbfd
  $tc'SetInteractivePrint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SetInteractivePrint"#) -}
b4beef797481fd36fddfff05507588f7
  $tc'Show :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14747623983100126563##
                   7692753903711955444##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Show1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
d2947c1b56c347b9992f3aaa498bf65e
  $tc'Show1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Show2) -}
0a075f23b912e36e9fe7b0957cd6c6bc
  $tc'Show2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Show"#) -}
71903a3d6bf65673555b7a2602e00ded
  $tc'ShowHelp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3190184810530518764##
                   4695736147136904587##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ShowHelp1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
70164a95d82920cb734ff7fac46c4292
  $tc'ShowHelp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ShowHelp2) -}
b132bf50f618a56a4bb109050d273a82
  $tc'ShowHelp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShowHelp"#) -}
3d436a436342318dca91ad6af4b69075
  $tc'ShowInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1150274914018433238##
                   17563671482088351312##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ShowInfo2
                   0#
                   Language.PureScript.Interactive.Types.$tc'ShowInfo1) -}
4c56a7f2e4308f2c18915db8a0247323
  $tc'ShowInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8470c92a4c3ccb74a13d0ab087c80068
  $tc'ShowInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ShowInfo3) -}
25fe875b3313bfff9875fec315d64bdf
  $tc'ShowInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShowInfo"#) -}
9433e6c4c87c7191c316cb26e1f0bfd1
  $tc'Type :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6999470801459763767##
                   13324427747207174479##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Type1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
2a0a817ad922bb7e5a51eff8aa1d3939
  $tc'Type1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Type2) -}
30b1c1087f17f92b588f3aa3e9436667
  $tc'Type2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Type"#) -}
3ba2091c9b7ab23cd0519e473b21b5d4
  $tc'TypeOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9181176686473597476##
                   15338023935776441416##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'TypeOf1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
17fb23cab28362a3fcb2b881f809dcef
  $tc'TypeOf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'TypeOf2) -}
2611a1644ed14f779b51921af2eb9f3a
  $tc'TypeOf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOf"#) -}
ca67af9504fa3f08139faba941e6a01d
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12316109290899176648##
                   15112105933835611381##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
cfe4984c82ab55bdb58d7e4d1193d1dd
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcCommand2) -}
0d38d923e09b026209f5c3144ea02084
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
52720b337523c74b36eed46dc7a215e2
  $tcDirective :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2320689242937980740##
                   7538008687930456062##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcDirective1
                   0#
                   GHC.Types.krep$*) -}
c4f34b7be72067fa28772278b9987664
  $tcDirective1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcDirective2) -}
ea9ebcb97456177279f5a2710b86e22b
  $tcDirective2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Directive"#) -}
d4372ce95eaf8177b4b11e70eea3762d
  $tcPSCiConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14555496078695040197##
                   7105287555023226576##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcPSCiConfig1
                   0#
                   GHC.Types.krep$*) -}
4c8b6e795d8bf8e3a451eaf3e4af9255
  $tcPSCiConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcPSCiConfig2) -}
f8e617a321629532e926e5797e0f632e
  $tcPSCiConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiConfig"#) -}
5a40b3f766acbb57f8da33df56685490
  $tcPSCiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15429330403796612838##
                   16122087331139972566##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcPSCiState1
                   0#
                   GHC.Types.krep$*) -}
ab3a5511d26da917815b44817679f8dd
  $tcPSCiState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcPSCiState2) -}
a0d1add95a25832e76c46b6de476491c
  $tcPSCiState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiState"#) -}
add4d5d1c517992aa9198787864cf8f4
  $tcReplQuery :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10121129160455233334##
                   11593933395925416776##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcReplQuery1
                   0#
                   GHC.Types.krep$*) -}
d881398474b5965b992f26b1a8547109
  $tcReplQuery1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcReplQuery2) -}
62359c8138ed1e2a0854c12722b7d8ad
  $tcReplQuery2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReplQuery"#) -}
a5373dd007f4e3978edfc14d81d8fd2d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.Types.$trModule3
                   Language.PureScript.Interactive.Types.$trModule1) -}
042ef4eef85e9b1d6a9abab9b903ee7a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$trModule2) -}
da06f897fabb858ca6d000773e9ef746
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Interactive.Types"#) -}
d0fba811201873a3267b797b0a2b808f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$trModule4) -}
2c2c8036747e1b81024681425c53426a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
9a76f7dd17b564fb8a5f6688bdedc91b
  $w$cshowsPrec ::
    Language.PureScript.Interactive.Types.Directive
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.Directive)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Interactive.Types.Help
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective23
                        w1
                   Language.PureScript.Interactive.Types.Quit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective21
                        w1
                   Language.PureScript.Interactive.Types.Reload
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective19
                        w1
                   Language.PureScript.Interactive.Types.Clear
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective17
                        w1
                   Language.PureScript.Interactive.Types.Browse
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective15
                        w1
                   Language.PureScript.Interactive.Types.Type
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective13
                        w1
                   Language.PureScript.Interactive.Types.Kind
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective11
                        w1
                   Language.PureScript.Interactive.Types.Show
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective9
                        w1
                   Language.PureScript.Interactive.Types.Paste
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective7
                        w1
                   Language.PureScript.Interactive.Types.Complete
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective5
                        w1
                   Language.PureScript.Interactive.Types.ReloadV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective3
                        w1
                   Language.PureScript.Interactive.Types.Print
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective1
                        w1 }) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Interactive.Types.PSCiConfig
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Interactive.Types.$fShowPSCiConfig4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Interactive.Types.$fShowPSCiConfig3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Interactive.Types.$fShowPSCiConfig2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Interactive.Types.N:PSCiConfig[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        x1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)3
                                           (let {
                                              lvl49 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                            } in
                                            letrec {
                                              showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ (ds2 :: [[GHC.Types.Char]]) ->
                                                case ds2 of wild1 {
                                                  [] -> lvl49
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.$fShow(,)3
                                                          (GHC.Show.showLitString
                                                             y
                                                             (GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.$fShow(,)3
                                                                (showl ys)))) }
                                            } in
                                            showl xs)))) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
e8e4cde723d1f5ca57d8c975bc7f5b78
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [Language.PureScript.Interactive.Types.ImportedModule]
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> [(Language.PureScript.AST.Declarations.Module,
         Language.PureScript.Externs.ExternsFile)]
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.Ident)
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,U><L,U><L,U><L,U(U,U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.Interactive.Types.ImportedModule])
                   (ww2 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww3 :: [(Language.PureScript.AST.Declarations.Module,
                             Language.PureScript.Externs.ExternsFile)])
                   (ww4 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.Ident))
                   (ww5 :: Language.PureScript.Sugar.Names.Env.Imports)
                   (ww6 :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 let {
                   f10 :: GHC.Base.String -> GHC.Base.String
                   = case ww5 of ww7 { Language.PureScript.Sugar.Names.Env.Imports ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                     Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                       11#
                       ww8
                       ww9
                       ww10
                       ww11
                       ww12
                       ww13
                       ww14
                       ww15
                       ww16 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww6 of ww7 { Language.PureScript.Sugar.Names.Env.Exports ww8 ww9 ww10 ww11 ww12 ww13 ->
                     Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                       11#
                       ww8
                       ww9
                       ww10
                       ww11
                       ww12
                       ww13 }
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Show.showList__
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                       Language.PureScript.Interactive.Types.$fShowPSCiState5
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Language.PureScript.AST.Declarations.Declaration
                             Language.PureScript.AST.Declarations.$fShowDeclaration1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (GHC.Show.showList__
                                   @ (Language.PureScript.AST.Declarations.Module,
                                      Language.PureScript.Externs.ExternsFile)
                                   Language.PureScript.Interactive.Types.$fShowPSCiState4
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww4 of ww7 { (,) ww8 ww9 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)4
                                         (Language.PureScript.Names.$w$cshowsPrec
                                            0#
                                            ww8
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showList__1
                                               (GHC.Show.$fShow(,)_$sgo1
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)2
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showSpace1
                                                        (f10
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showSpace1
                                                              (g x)))))
                                                  (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                                     GHC.Show.$fShow(,)1
                                                     ww9)
                                                  (GHC.Types.[] @ GHC.Show.ShowS)))) }))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowPSCiState2
                        (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Interactive.Types.$fShowPSCiState2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
7b2f73f4cc083a478b85e05eddca17d4
  $w$cshowsPrec3 ::
    Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.ReplQuery)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowReplQuery5
                        w1
                   Language.PureScript.Interactive.Types.QueryImport
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowReplQuery3
                        w1
                   Language.PureScript.Interactive.Types.QueryPrint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowReplQuery1
                        w1 }) -}
f8014d839b42d9d23a5de4f4740dcb3a
  $wgo ::
    [(Language.PureScript.AST.Declarations.Module,
      Language.PureScript.Externs.ExternsFile)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.SourceKind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.SourceType,
          [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
          Language.PureScript.Types.SourceType)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               (GHC.Base.NonEmpty
                  Language.PureScript.TypeClassDictionaries.NamedDict)))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.Types.SourceType,
             Language.PureScript.Environment.NameKind,
             Language.PureScript.Environment.NameVisibility),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            (Language.PureScript.Kinds.SourceKind,
             Language.PureScript.Environment.TypeKind),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.SourceType,
             [Language.PureScript.Names.Ident]),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
             Language.PureScript.Types.SourceType),
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName))
               (Data.Map.Internal.Map
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)
                  (GHC.Base.NonEmpty
                     Language.PureScript.TypeClassDictionaries.NamedDict))),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            Language.PureScript.Environment.TypeClassData,
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 8,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
abf6f9e298bef6369c586dfc05e00298
  $wlvl ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.Externs.ExternsFile
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 3,
     Strictness: <L,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)><L,1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Declarations.Module)
                   (ww1 :: Language.PureScript.Externs.ExternsFile)
                   (w :: GHC.Base.String) ->
                 (# GHC.Show.$fShow(,)4,
                    case ww of ww2 { Language.PureScript.AST.Declarations.Module ww3 ww4 ww5 ww6 ww7 ->
                    Language.PureScript.AST.Declarations.$w$cshowsPrec9
                      0#
                      ww3
                      ww4
                      ww5
                      ww6
                      ww7
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)
                            (\ (w2 :: GHC.Base.String)[OneShot] ->
                             case ww1 of ww8 { Language.PureScript.Externs.ExternsFile ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                             Language.PureScript.Externs.$w$cshowsPrec1
                               0#
                               ww9
                               ww10
                               ww11
                               ww12
                               ww13
                               ww14
                               ww15
                               ww16
                               w2 })
                            (GHC.Types.[] @ GHC.Show.ShowS))) } #)) -}
c9bcee645e548bb581b17f645635e39d
  $wlvl1 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (w :: GHC.Base.String) ->
                 (# GHC.Show.$fShow(,)4,
                    Language.PureScript.Names.$w$cshowsPrec
                      0#
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,,)_$sgo2
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)
                            (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                               GHC.Show.$fShow(,)1
                               ww1)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                  @ Language.PureScript.Names.ModuleName
                                  Language.PureScript.Names.$fShowModuleName
                                  GHC.Show.$fShow(,)1
                                  ww2)
                               (GHC.Types.[] @ GHC.Show.ShowS)))) #)) -}
896a3f69863805862b988fc8de11953a
  $wpsciEnvironment ::
    [(Language.PureScript.AST.Declarations.Module,
      Language.PureScript.Externs.ExternsFile)]
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.Types.SourceType,
             Language.PureScript.Environment.NameKind,
             Language.PureScript.Environment.NameVisibility),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            (Language.PureScript.Kinds.SourceKind,
             Language.PureScript.Environment.TypeKind),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.SourceType,
             [Language.PureScript.Names.Ident]),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
             Language.PureScript.Types.SourceType),
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName))
               (Data.Map.Internal.Map
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)
                  (GHC.Base.NonEmpty
                     Language.PureScript.TypeClassDictionaries.NamedDict))),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            Language.PureScript.Environment.TypeClassData,
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [(Language.PureScript.AST.Declarations.Module,
                            Language.PureScript.Externs.ExternsFile)]) ->
                 Language.PureScript.Interactive.Types.$wgo
                   ww
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (Language.PureScript.Types.SourceType,
                         Language.PureScript.Environment.NameKind,
                         Language.PureScript.Environment.NameVisibility))
                   Language.PureScript.Environment.allPrimTypes
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                      @ (Language.PureScript.Environment.DataDeclType,
                         Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName,
                         Language.PureScript.Types.SourceType,
                         [Language.PureScript.Names.Ident]))
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ ([(Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
                         Language.PureScript.Types.SourceType))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                      @ (Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
                              (GHC.Base.NonEmpty
                                 Language.PureScript.TypeClassDictionaries.NamedDict))))
                   Language.PureScript.Environment.allPrimClasses
                   Language.PureScript.Environment.allPrimKinds) -}
dafebe94f69e69480c05be438e4778e9
  data Command
    = Expression Language.PureScript.AST.Declarations.Expr
    | ShowHelp
    | Import Language.PureScript.Interactive.Types.ImportedModule
    | BrowseModule Language.PureScript.Names.ModuleName
    | QuitPSCi
    | ReloadState
    | ClearState
    | Decls [Language.PureScript.AST.Declarations.Declaration]
    | TypeOf Language.PureScript.AST.Declarations.Expr
    | KindOf Language.PureScript.Types.SourceType
    | ShowInfo Language.PureScript.Interactive.Types.ReplQuery
    | PasteLines
    | CompleteStr GHC.Base.String
    | ReloadVariableState Language.PureScript.AST.Declarations.Expr
    | SetInteractivePrint (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.Ident)
9a76f7dd17b564fb8a5f6688bdedc91b
  data Directive
    = Help
    | Quit
    | Reload
    | Clear
    | Browse
    | Type
    | Kind
    | Show
    | Paste
    | Complete
    | ReloadV
    | Print
7c1a00256946ded4523271f31684d76d
  type ImportedModule =
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
9fc6e6e06b7b62f8dfab58c0780c4f49
  newtype PSCiConfig
    = PSCiConfig {psciFileGlobs :: [GHC.Base.String]}
876224c4cea1642e91e4ad0b6a812184
  data PSCiState
    = PSCiState [Language.PureScript.Interactive.Types.ImportedModule]
                [Language.PureScript.AST.Declarations.Declaration]
                [(Language.PureScript.AST.Declarations.Module,
                  Language.PureScript.Externs.ExternsFile)]
                (Language.PureScript.Names.ModuleName,
                 Language.PureScript.Names.Ident)
                Language.PureScript.Sugar.Names.Env.Imports
                Language.PureScript.Sugar.Names.Env.Exports
7b2f73f4cc083a478b85e05eddca17d4
  data ReplQuery = QueryLoaded | QueryImport | QueryPrint
5eb1f06d06b2a08b69655916b0e838e5
  initialInteractivePrint ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.Ident)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Interactive.Types.initialInteractivePrint4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Interactive.Types.initialInteractivePrint1)) -}
dcb1ba7a4216c79d740424fe52a050fd
  initialInteractivePrint1 :: Language.PureScript.Names.Ident
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Names.Ident
                   Language.PureScript.Interactive.Types.initialInteractivePrint2) -}
03769e0e0e3b7f6ba90145325d268b6a
  initialInteractivePrint2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Interactive.Types.initialInteractivePrint3) -}
a8f42689b59b3f0831bd2bb954094ac2
  initialInteractivePrint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eval"#) -}
f2d08fbdf40614b6cdedf5b21790311b
  initialInteractivePrint4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Interactive.Types.initialInteractivePrint5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Names.$wsplitProperNames
                   @ 'Language.PureScript.Names.Namespace
                   ww1
                   ww2
                   ww3 }) -}
fbe7419ffe197f0d243203dd00d8fff9
  initialInteractivePrint5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCI.Support"#) -}
a188925673bce391a6778789dc77428c
  initialPSCiState :: Language.PureScript.Interactive.Types.PSCiState
  {- Strictness: m,
     Unfolding: (Language.PureScript.Interactive.Types.PSCiState
                   (GHC.Types.[]
                      @ Language.PureScript.Interactive.Types.ImportedModule)
                   (GHC.Types.[] @ Language.PureScript.AST.Declarations.Declaration)
                   (GHC.Types.[]
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Externs.ExternsFile))
                   Language.PureScript.Interactive.Types.initialInteractivePrint
                   Language.PureScript.Sugar.Names.Env.nullImports
                   Language.PureScript.Sugar.Names.Env.primExports) -}
5c45fe0f377e224dddee9b281e69d8f6
  parseReplQuery ::
    GHC.Base.String
    -> GHC.Base.Maybe Language.PureScript.Interactive.Types.ReplQuery
  {- Arity: 1, Strictness: <S,U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case GHC.Base.eqString
                        w
                        Language.PureScript.Interactive.Types.parseReplQuery6 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             w
                             Language.PureScript.Interactive.Types.parseReplQuery4 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  w
                                  Language.PureScript.Interactive.Types.parseReplQuery2 of wild2 {
                             GHC.Types.False
                             -> Language.PureScript.Interactive.Types.parseReplQuery1
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ Language.PureScript.Interactive.Types.ReplQuery
                                  Language.PureScript.Interactive.Types.QueryPrint }
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ Language.PureScript.Interactive.Types.ReplQuery
                             Language.PureScript.Interactive.Types.QueryLoaded }
                   GHC.Types.True
                   -> GHC.Base.Just
                        @ Language.PureScript.Interactive.Types.ReplQuery
                        Language.PureScript.Interactive.Types.QueryImport }) -}
42b93b94911178615b3a7f2e5c1f007a
  parseReplQuery1 ::
    GHC.Base.Maybe Language.PureScript.Interactive.Types.ReplQuery
  {- Strictness: x -}
0346948a47ad6d225555117742e96f4f
  parseReplQuery2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.parseReplQuery3) -}
a91a3db44b995e448857ae39f8f9cc73
  parseReplQuery3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("print"#) -}
ece1737e4de7c58e458922d46d48449a
  parseReplQuery4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.parseReplQuery5) -}
e11885b02d410ee79b81649feb6ec6d5
  parseReplQuery5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("loaded"#) -}
85b772de7c77de6f034cdf04b23fe7af
  parseReplQuery6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.parseReplQuery7) -}
92d6667aa02c966a0e867bd0ffad7d64
  parseReplQuery7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("import"#) -}
2383d12d7b05348fdd4cb17ab0f9fb72
  psciEnvironment ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Environment.Environment
  {- Arity: 1, Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case Language.PureScript.Interactive.Types.$wpsciEnvironment
                        ww3 of ww7 { (#,,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.Environment.Environment
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 } }) -}
e7c5cdfca54fb278247a2935b5e8109c
  psciExports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 ds3 ds4 ds5 x ->
                 x }) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  psciFileGlobs ::
    Language.PureScript.Interactive.Types.PSCiConfig
    -> [GHC.Base.String]
  RecSel Left Language.PureScript.Interactive.Types.PSCiConfig
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.Types.psciFileGlobs1
                  `cast`
                (<Language.PureScript.Interactive.Types.PSCiConfig>_R
                 ->_R Language.PureScript.Interactive.Types.N:PSCiConfig[0]) -}
9fc6e6e06b7b62f8dfab58c0780c4f49
  psciFileGlobs1 ::
    Language.PureScript.Interactive.Types.PSCiConfig
    -> Language.PureScript.Interactive.Types.PSCiConfig
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiConfig) ->
                 ds) -}
ccfa45734ae535856e1fe61ac9a61823
  psciImportedModuleNames ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.Names.ModuleName]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (st :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case st of wild { Language.PureScript.Interactive.Types.PSCiState x ds ds1 ds2 ds3 ds4 ->
                 GHC.Base.build
                   @ Language.PureScript.Names.ModuleName
                   (\ @ b1
                      (c :: Language.PureScript.Names.ModuleName -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.AST.Declarations.ImportDeclarationType,
                         GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                      @ b1
                      (GHC.Base.mapFB
                         @ Language.PureScript.Names.ModuleName
                         @ b1
                         @ (Language.PureScript.Names.ModuleName,
                            Language.PureScript.AST.Declarations.ImportDeclarationType,
                            GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                         c
                         Language.PureScript.Interactive.Types.psciImportedModuleNames1)
                      n
                      x) }) -}
d28f6cd22edc0b38d5e911507700af9f
  psciImportedModuleNames1 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.Declarations.ImportDeclarationType,
                           GHC.Base.Maybe Language.PureScript.Names.ModuleName)) ->
                 case ds of wild { (,,) mn ds1 ds2 -> mn }) -}
25bdeac3e73ad8d16c1f9f21e6844d71
  psciImportedModules ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.Interactive.Types.ImportedModule]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState x ds1 ds2 ds3 ds4 ds5 ->
                 x }) -}
b77ca26e50f5814901de20987c2ecb54
  psciImports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U,U,U,U,U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 ds3 ds4 x ds5 ->
                 x }) -}
ff19227c389605ef5776b3ed2ffce59b
  psciInteractivePrint ::
    Language.PureScript.Interactive.Types.PSCiState
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.Ident)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 ds3 x ds4 ds5 ->
                 x }) -}
a1d865b43424ff6cd93e21313f9fa73b
  psciLetBindings ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 x ds2 ds3 ds4 ds5 ->
                 x }) -}
33d0b537a115b20de45407a6e24b39aa
  psciLoadedExterns ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [(Language.PureScript.AST.Declarations.Module,
         Language.PureScript.Externs.ExternsFile)]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 x ds3 ds4 ds5 ->
                 x }) -}
1a935b2388a3831e6508d20bd8520b1d
  replQueries :: [Language.PureScript.Interactive.Types.ReplQuery]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryLoaded
                   Language.PureScript.Interactive.Types.replQueries1) -}
be3528de975890c104a49a1b3251db96
  replQueries1 :: [Language.PureScript.Interactive.Types.ReplQuery]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryImport
                   Language.PureScript.Interactive.Types.replQueries2) -}
58586ae49d8ddf4e245f022ad397d585
  replQueries2 :: [Language.PureScript.Interactive.Types.ReplQuery]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryPrint
                   (GHC.Types.[]
                      @ Language.PureScript.Interactive.Types.ReplQuery)) -}
aab7d48d93c897d1ca781a49489e615e
  replQueryStrings :: [GHC.Base.String]
  {- Unfolding: (GHC.Base.map
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   @ [GHC.Types.Char]
                   Language.PureScript.Interactive.Types.showReplQuery
                   Language.PureScript.Interactive.Types.replQueries) -}
5306b4e8b813c720ea2bb8a3573fc6ff
  setInteractivePrint ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.Ident)
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,A,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (iprint :: (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.Ident))
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState a b c ds1 d e ->
                 Language.PureScript.Interactive.Types.PSCiState
                   a
                   b
                   c
                   iprint
                   d
                   e }) -}
17c57e03aefd7fd6acce80ec4f6523f1
  showReplQuery ::
    Language.PureScript.Interactive.Types.ReplQuery -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case ds of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> Language.PureScript.Interactive.Types.parseReplQuery4
                   Language.PureScript.Interactive.Types.QueryImport
                   -> Language.PureScript.Interactive.Types.parseReplQuery6
                   Language.PureScript.Interactive.Types.QueryPrint
                   -> Language.PureScript.Interactive.Types.parseReplQuery2 }) -}
77aa76268f61bff2808d93c70255b3ac
  updateImportExports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ww6 ->
                 let {
                   r1 :: [Language.PureScript.AST.Declarations.Declaration]
                   = letrec {
                       go :: [(Language.PureScript.Names.ModuleName,
                               Language.PureScript.AST.Declarations.ImportDeclarationType,
                               GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                             -> [Language.PureScript.AST.Declarations.Declaration]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (ds :: [(Language.PureScript.Names.ModuleName,
                                    Language.PureScript.AST.Declarations.ImportDeclarationType,
                                    GHC.Base.Maybe Language.PureScript.Names.ModuleName)]) ->
                         case ds of wild {
                           [] -> ww2
                           : y ys
                           -> GHC.Types.:
                                @ Language.PureScript.AST.Declarations.Declaration
                                (case y of wild1 { (,,) mn declType asQ ->
                                 Language.PureScript.AST.Declarations.ImportDeclaration
                                   Language.PureScript.Interactive.Types.updateImportExports10
                                   mn
                                   declType
                                   asQ })
                                (go ys) }
                     } in
                     go
                       (GHC.Types.:
                          @ (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.ImportDeclarationType,
                             GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          Language.PureScript.Interactive.Types.updateImportExports6
                          ww1)
                 } in
                 let {
                   r2 :: Language.PureScript.AST.Declarations.Module
                   = Language.PureScript.AST.Declarations.Module
                       Language.PureScript.Interactive.Types.updateImportExports_internalSpan
                       (GHC.Types.[] @ Language.PureScript.Comments.Comment)
                       Language.PureScript.Interactive.Types.updateImportExports1
                         `cast`
                       (Sym (Language.PureScript.Names.N:ModuleName[0]))
                       r1
                       (GHC.Base.Nothing
                          @ [Language.PureScript.AST.Declarations.DeclarationRef])
                 } in
                 let {
                   r3 :: [Language.PureScript.AST.Declarations.Module]
                   = GHC.Types.:
                       @ Language.PureScript.AST.Declarations.Module
                       r2
                       (GHC.Types.[] @ Language.PureScript.AST.Declarations.Module)
                 } in
                 case (Language.PureScript.Sugar.Names.desugarImportsWithEnv
                         @ (Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])))
                         Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT
                         Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT
                         (GHC.Base.map
                            @ (Language.PureScript.AST.Declarations.Module,
                               Language.PureScript.Externs.ExternsFile)
                            @ Language.PureScript.Externs.ExternsFile
                            (Data.Tuple.snd
                               @ Language.PureScript.AST.Declarations.Module
                               @ Language.PureScript.Externs.ExternsFile)
                            ww3)
                         r3)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <(Language.PureScript.Sugar.Names.Env.Env,
                             [Language.PureScript.AST.Declarations.Module])>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                     <(->)
                                                                                        [Language.PureScript.AST.Declarations.Module]>_R
                                                                                     <((Language.PureScript.Sugar.Names.Env.Env,
                                                                                        [Language.PureScript.AST.Declarations.Module]),
                                                                                       Language.PureScript.Errors.MultipleErrors)>_N)
                        r3 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Interactive.Types.PSCiState
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                   Data.Either.Right y
                   -> case y of wild1 { (,) x ds1 ->
                      case x of wild2 { (,) env ds ->
                      case Language.PureScript.Interactive.Types.$slookup_$spoly_go13
                             env
                             @~ (Sym (Language.PureScript.Names.N:ModuleName[0])) of wild3 {
                        GHC.Base.Nothing
                        -> Language.PureScript.Interactive.Types.PSCiState
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                             ww6
                        GHC.Base.Just ds2
                        -> case ds2 of wild4 { (,,) ds3 is es ->
                           Language.PureScript.Interactive.Types.PSCiState
                             ww1
                             ww2
                             ww3
                             ww4
                             is
                             es } } } } } }) -}
ad90c6a4a427ffc99f321f218baef70f
  updateImportExports1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Interactive.Types.updateImportExports2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
f913b47e09f74c027a7d54151f5b7f56
  updateImportExports10 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     [Language.PureScript.Comments.Comment])
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Interactive.Types.updateImportExports_internalSpan,
                  GHC.Types.[] @ Language.PureScript.Comments.Comment)) -}
881714fb0ea2327eae3429b0ffbef726
  updateImportExports2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports3) -}
7d3f7d083cf404ed685c84af1b50eeda
  updateImportExports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$PSCI"#) -}
750cc6e6253551c77cfa01e01e038de8
  updateImportExports4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports5) -}
a1e8dbe8eb844502ddfd5ff9791d060e
  updateImportExports5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<internal>"#) -}
fea410924d1801d51401d59fbd2446e3
  updateImportExports6 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Interactive.Types.updateImportExports7
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.AST.Declarations.Implicit,
                  GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)) -}
7e2c291c138430be302d4e2ef6eef269
  updateImportExports7 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Interactive.Types.updateImportExports8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
1fb0c5163eb6f706f8c2601bb99151c4
  updateImportExports8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports9) -}
9d53231242d46eb77a6be2ba60db959d
  updateImportExports9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
f5bf0967a7f59f7d2412541b80ee54f3
  updateImportExports_internalSpan ::
    Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Interactive.Types.updateImportExports4
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
7ac5f45edd06dd834a35c6800801aef6
  updateImportedModules ::
    ([Language.PureScript.Interactive.Types.ImportedModule]
     -> [Language.PureScript.Interactive.Types.ImportedModule])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [Language.PureScript.Interactive.Types.ImportedModule]
                           -> [Language.PureScript.Interactive.Types.ImportedModule])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState x a b c d e ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      (f10 x)
                      a
                      b
                      c
                      d
                      e) }) -}
f49b26924128a58747f65bc3e99b8314
  updateLets ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [Language.PureScript.AST.Declarations.Declaration]
                           -> [Language.PureScript.AST.Declarations.Declaration])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState a x b c d e ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      a
                      (f10 x)
                      b
                      c
                      d
                      e) }) -}
e27d6464fd5ac509b243109140a29293
  updateLoadedExterns ::
    ([(Language.PureScript.AST.Declarations.Module,
       Language.PureScript.Externs.ExternsFile)]
     -> [(Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Externs.ExternsFile)])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [(Language.PureScript.AST.Declarations.Module,
                             Language.PureScript.Externs.ExternsFile)]
                           -> [(Language.PureScript.AST.Declarations.Module,
                                Language.PureScript.Externs.ExternsFile)])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState a b x c d e ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      a
                      b
                      (f10 x)
                      c
                      d
                      e) }) -}
instance GHC.Classes.Eq [Language.PureScript.Interactive.Types.Directive]
  = Language.PureScript.Interactive.Types.$fEqDirective
instance GHC.Classes.Eq [Language.PureScript.Interactive.Types.ReplQuery]
  = Language.PureScript.Interactive.Types.$fEqReplQuery
instance GHC.Show.Show [Language.PureScript.Interactive.Types.Command]
  = Language.PureScript.Interactive.Types.$fShowCommand
instance GHC.Show.Show [Language.PureScript.Interactive.Types.Directive]
  = Language.PureScript.Interactive.Types.$fShowDirective
instance GHC.Show.Show [Language.PureScript.Interactive.Types.PSCiConfig]
  = Language.PureScript.Interactive.Types.$fShowPSCiConfig
instance GHC.Show.Show [Language.PureScript.Interactive.Types.PSCiState]
  = Language.PureScript.Interactive.Types.$fShowPSCiState
instance GHC.Show.Show [Language.PureScript.Interactive.Types.ReplQuery]
  = Language.PureScript.Interactive.Types.$fShowReplQuery
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT @ ((->)
                                                                     [Module]) _" [orphan] forall @ e
                                                                                                                                                                           (v1 :: GHC.Base.Monad
                                                                                                                                                                                    ((->)
                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                           (v :: GHC.Base.Functor
                                                                                                                                                                                   ((->)
                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT @ ((->)
                                                       [Language.PureScript.AST.Declarations.Module])
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT_$c*> @ ((->)
                                                                          [Module]) _" [orphan] forall @ e
                                                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                     ((->)
                                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ ((->)
                                                            [Language.PureScript.AST.Declarations.Module])
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT_$cpure @ ((->)
                                                                            [Module]) _" [orphan] forall @ e
                                                                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                       ((->)
                                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                         ((->)
                                                                                                                                                                                                            [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ ((->)
                                                              [Language.PureScript.AST.Declarations.Module])
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT @ MultipleErrors @ (ExceptT
                                                                                      MultipleErrors
                                                                                      ((->)
                                                                                         [Module]))" [orphan] forall (v1 :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                               ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                  [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                   (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT @ Language.PureScript.Errors.MultipleErrors
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Errors.MultipleErrors
                                                              ((->)
                                                                 [Language.PureScript.AST.Declarations.Module]))
                                                         v
                                                         v1
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$c<* @ MultipleErrors @ (ExceptT
                                                                                           MultipleErrors
                                                                                           ((->)
                                                                                              [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                              ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<* @ Language.PureScript.Errors.MultipleErrors
                                                              @ (Control.Monad.Trans.Except.ExceptT
                                                                   Language.PureScript.Errors.MultipleErrors
                                                                   ((->)
                                                                      [Language.PureScript.AST.Declarations.Module]))
                                                              $dMonoid
                                                              $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$c<*
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$c<*> @ MultipleErrors @ (ExceptT
                                                                                            MultipleErrors
                                                                                            ((->)
                                                                                               [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                           ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ Language.PureScript.Errors.MultipleErrors
                                                               @ (Control.Monad.Trans.Except.ExceptT
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    ((->)
                                                                       [Language.PureScript.AST.Declarations.Module]))
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$cpure @ MultipleErrors @ (ExceptT
                                                                                             MultipleErrors
                                                                                             ((->)
                                                                                                [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ Language.PureScript.Errors.MultipleErrors
                                                                @ (Control.Monad.Trans.Except.ExceptT
                                                                     Language.PureScript.Errors.MultipleErrors
                                                                     ((->)
                                                                        [Language.PureScript.AST.Declarations.Module]))
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Interactive.Types $fFunctorExceptT @ ((->)
                                                                 [Module]) _" [orphan] forall @ e
                                                                                                                                                                   (v :: GHC.Base.Functor
                                                                                                                                                                           ((->)
                                                                                                                                                                              [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fFunctorExceptT @ ((->)
                                                   [Language.PureScript.AST.Declarations.Module])
                                              @ e
                                              v
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fFunctorExceptT
      @ e
"SPEC/Language.PureScript.Interactive.Types $fFunctorWriterT @ (ExceptT
                                                                 MultipleErrors ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                                            (v :: GHC.Base.Functor
                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                       ((->)
                                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT @ (Control.Monad.Trans.Except.ExceptT
                                                          Language.PureScript.Errors.MultipleErrors
                                                          ((->)
                                                             [Language.PureScript.AST.Declarations.Module]))
                                                     @ w
                                                     v
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT
      @ w
"SPEC/Language.PureScript.Interactive.Types $fFunctorWriterT_$cfmap @ (ExceptT
                                                                        MultipleErrors
                                                                        ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                                                                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                     ((->)
                                                                                                                                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 ((->)
                                                                    [Language.PureScript.AST.Declarations.Module]))
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Interactive.Types $fMonadErroreWriterT @ MultipleErrors @ MultipleErrors @ (ExceptT
                                                                                                       MultipleErrors
                                                                                                       ((->)
                                                                                                          [Module]))" [orphan] forall (v1 :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Error.Class.$fMonadErroreWriterT @ Language.PureScript.Errors.MultipleErrors
                                                 @ Language.PureScript.Errors.MultipleErrors
                                                 @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      ((->)
                                                         [Language.PureScript.AST.Declarations.Module]))
                                                 v
                                                 v1
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT @ MultipleErrors @ (ExceptT
                                                                                MultipleErrors
                                                                                ((->) [Module]))" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                    ((->)
                                                                                                                                                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                        (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        ((->)
                                                           [Language.PureScript.AST.Declarations.Module]))
                                                   v
                                                   v1
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$c>> @ MultipleErrors @ (ExceptT
                                                                                     MultipleErrors
                                                                                     ((->)
                                                                                        [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                   [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ Language.PureScript.Errors.MultipleErrors
                                                        @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             ((->)
                                                                [Language.PureScript.AST.Declarations.Module]))
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$c>>= @ MultipleErrors @ (ExceptT
                                                                                      MultipleErrors
                                                                                      ((->)
                                                                                         [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                    ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                   ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ Language.PureScript.Errors.MultipleErrors
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Errors.MultipleErrors
                                                              ((->)
                                                                 [Language.PureScript.AST.Declarations.Module]))
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$cfail @ MultipleErrors @ (ExceptT
                                                                                       MultipleErrors
                                                                                       ((->)
                                                                                          [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                        ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                           [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ Language.PureScript.Errors.MultipleErrors
                                                          @ (Control.Monad.Trans.Except.ExceptT
                                                               Language.PureScript.Errors.MultipleErrors
                                                               ((->)
                                                                  [Language.PureScript.AST.Declarations.Module]))
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterwWriterT @ MultipleErrors @ (ExceptT
                                                                                       MultipleErrors
                                                                                       ((->)
                                                                                          [Module]))" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                       (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Writer.Class.$fMonadWriterwWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        ((->)
                                                           [Language.PureScript.AST.Declarations.Module]))
                                                   v
                                                   v1
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT
"SPEC/Language.PureScript.Interactive.Types $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                         [Language.PureScript.Comments.Comment])
                                                                                                (v :: GHC.Show.Show
                                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.Interactive.Types.$s$fShow(,)
"SPEC/Language.PureScript.Interactive.Types $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.Interactive.Types.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.Interactive.Types listen @ (ExceptT
                                                       MultipleErrors ((->) [Module])) _ _" [orphan] forall @ w
                                                                                                                                                                          @ a
                                                                                                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                        (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                           ((->)
                                                                                                                                                                                              [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.listen @ (Control.Monad.Trans.Except.ExceptT
                                                Language.PureScript.Errors.MultipleErrors
                                                ((->)
                                                   [Language.PureScript.AST.Declarations.Module]))
                                           @ w
                                           @ a
                                           $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$slisten
      @ w
      @ a
"SPEC/Language.PureScript.Interactive.Types pass @ (ExceptT
                                                     MultipleErrors ((->) [Module])) _ _" [orphan] forall @ w
                                                                                                                                                                      @ a
                                                                                                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                       ((->)
                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.pass @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              ((->) [Language.PureScript.AST.Declarations.Module]))
                                         @ w
                                         @ a
                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$spass
      @ w
      @ a
"SPEC/Language.PureScript.Interactive.Types tell @ (ExceptT
                                                     MultipleErrors ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                     ((->)
                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.tell @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              ((->) [Language.PureScript.AST.Declarations.Module]))
                                         @ w
                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$stell
      @ w
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

