
==================== FINAL INTERFACE ====================
2018-11-30 20:48:03.217124 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Interactive.Types 8043
  interface hash: ecfe4e5fee36d3bf4f6068fc37714677
  ABI hash: 3ce82c8ef1b298c922daa3739e0e39a4
  export-list hash: 720882d0a070fd7ca0bf1b7bc77c153a
  orphan hash: 38cd9ee03a3d7e4df8810d4f009d0231
  flag hash: 6b91193d6f95e3c74259a28b4bb30bdf
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.Types.initialPSCiState
  Language.PureScript.Interactive.Types.parseReplQuery
  Language.PureScript.Interactive.Types.psciEnvironment
  Language.PureScript.Interactive.Types.psciExports
  Language.PureScript.Interactive.Types.psciImportedModuleNames
  Language.PureScript.Interactive.Types.psciImportedModules
  Language.PureScript.Interactive.Types.psciImports
  Language.PureScript.Interactive.Types.psciLetBindings
  Language.PureScript.Interactive.Types.psciLoadedExterns
  Language.PureScript.Interactive.Types.replQueries
  Language.PureScript.Interactive.Types.replQueryStrings
  Language.PureScript.Interactive.Types.showReplQuery
  Language.PureScript.Interactive.Types.updateImportExports
  Language.PureScript.Interactive.Types.updateImportedModules
  Language.PureScript.Interactive.Types.updateLets
  Language.PureScript.Interactive.Types.updateLoadedExterns
  Language.PureScript.Interactive.Types.Command{Language.PureScript.Interactive.Types.BrowseModule Language.PureScript.Interactive.Types.ClearState Language.PureScript.Interactive.Types.CompleteStr Language.PureScript.Interactive.Types.Decls Language.PureScript.Interactive.Types.Expression Language.PureScript.Interactive.Types.Import Language.PureScript.Interactive.Types.KindOf Language.PureScript.Interactive.Types.PasteLines Language.PureScript.Interactive.Types.QuitPSCi Language.PureScript.Interactive.Types.ReloadState Language.PureScript.Interactive.Types.ReloadVariableState Language.PureScript.Interactive.Types.ShowHelp Language.PureScript.Interactive.Types.ShowInfo Language.PureScript.Interactive.Types.TypeOf}
  Language.PureScript.Interactive.Types.Directive{Language.PureScript.Interactive.Types.Browse Language.PureScript.Interactive.Types.Clear Language.PureScript.Interactive.Types.Complete Language.PureScript.Interactive.Types.Help Language.PureScript.Interactive.Types.Kind Language.PureScript.Interactive.Types.Paste Language.PureScript.Interactive.Types.Quit Language.PureScript.Interactive.Types.Reload Language.PureScript.Interactive.Types.ReloadV Language.PureScript.Interactive.Types.Show Language.PureScript.Interactive.Types.Type}
  Language.PureScript.Interactive.Types.ImportedModule
  Language.PureScript.Interactive.Types.PSCiConfig{Language.PureScript.Interactive.Types.PSCiConfig psciFileGlobs}
  Language.PureScript.Interactive.Types.PSCiState{Language.PureScript.Interactive.Types.PSCiState}
  Language.PureScript.Interactive.Types.ReplQuery{Language.PureScript.Interactive.Types.QueryImport Language.PureScript.Interactive.Types.QueryLoaded}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  Implicit 850358a1da5071d49098050ad7d1227d
  ImportDeclaration 0c2bc2f3ca892343473f34859c93a6e3
  ImportDeclarationType f900e8c96b49d573d3e54286bc8fd980
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
  internalModuleSourceSpan 5f91a656f056fa441b3ec6940306d87a
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  Environment c291d940fae22a3f1400d8c90f26bdd4
  initEnvironment 7e43632077c77373180c2c3d6aac18ae
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
import  -/  Language.PureScript.Externs 17598d5385c46f650a2a55de08912a53
  ExternsFile b2e76f24ecba17bf3b946e078a8414b6
  applyExternsFileToEnvironment c56361d10b2931793da8568bf3fc9c13
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
import  -/  Language.PureScript.Sugar.Names 257b0a54d872bfbc841b404e407868f9
  desugarImportsWithEnv fdaa1234b6047d99f3e717eb943ef63a
import  -/  Language.PureScript.Sugar.Names.Env 86ed82ed542c248a8928297b6b346572
  exports: eac96abb84bb227ec29cea13c70276ff
  Env 5f9e6484b1f2e8e2d5b6bfcee5f814e9
  Exports 2212f1aeac86faa420eb4b44c2cc2982
  Imports b53ca872c8c47c3d8839f496fc15c222
  nullImports ce7df041a470e7796955adec9bc54637
  primExports 68893fd365ab9db7024951760d78e992
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  Type 93223f8afa90d0facc05a03f863dc72d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
6d04fdb5e26b466ffd22b01b64e3342d
  $fEqDirective ::
    GHC.Classes.Eq Language.PureScript.Interactive.Types.Directive
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Directive
                  Language.PureScript.Interactive.Types.$fEqDirective_$c==
                  Language.PureScript.Interactive.Types.$fEqDirective_$c/= -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fEqDirective_$c/= ::
    Language.PureScript.Interactive.Types.Directive
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Interactive.Types.Directive)
                   (y :: Language.PureScript.Interactive.Types.Directive) ->
                 case x of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x1 of a# { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x2 of b# { DEFAULT ->
                 case GHC.Prim.==# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } }) -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fEqDirective_$c== ::
    Language.PureScript.Interactive.Types.Directive
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Interactive.Types.Directive)
                   (b :: Language.PureScript.Interactive.Types.Directive) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x1 of a# { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.Interactive.Types.Directive
                        x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# a# b#) } } } }) -}
4484fd29d895671a056057576a9a07ef
  $fEqReplQuery ::
    GHC.Classes.Eq Language.PureScript.Interactive.Types.ReplQuery
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.ReplQuery
                  Language.PureScript.Interactive.Types.$fEqReplQuery_$c==
                  Language.PureScript.Interactive.Types.$fEqReplQuery_$c/= -}
4484fd29d895671a056057576a9a07ef
  $fEqReplQuery_$c/= ::
    Language.PureScript.Interactive.Types.ReplQuery
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Interactive.Types.ReplQuery)
                   (y :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> case y of wild1 {
                        Language.PureScript.Interactive.Types.QueryLoaded
                        -> GHC.Types.False
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.True }
                   Language.PureScript.Interactive.Types.QueryImport
                   -> case y of wild1 {
                        Language.PureScript.Interactive.Types.QueryLoaded -> GHC.Types.True
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.False } }) -}
4484fd29d895671a056057576a9a07ef
  $fEqReplQuery_$c== ::
    Language.PureScript.Interactive.Types.ReplQuery
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.ReplQuery)
                   (ds1 :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case ds of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> case ds1 of wild1 {
                        Language.PureScript.Interactive.Types.QueryLoaded -> GHC.Types.True
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.False }
                   Language.PureScript.Interactive.Types.QueryImport
                   -> case ds1 of wild1 {
                        Language.PureScript.Interactive.Types.QueryLoaded
                        -> GHC.Types.False
                        Language.PureScript.Interactive.Types.QueryImport
                        -> GHC.Types.True } }) -}
bbe66beb3be641e2ba0166b7a498957b
  $fShowCommand ::
    GHC.Show.Show Language.PureScript.Interactive.Types.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Command
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshow
                  Language.PureScript.Interactive.Types.$fShowCommand_$cshowList -}
bbe66beb3be641e2ba0166b7a498957b
  $fShowCommand1 ::
    Language.PureScript.Interactive.Types.Command -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2) -}
c56a06ea1d6dbf6e3f7c913a3e5965d8
  $fShowCommand2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
bbe66beb3be641e2ba0166b7a498957b
  $fShowCommand_$cshow ::
    Language.PureScript.Interactive.Types.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.Command) ->
                 Language.PureScript.Interactive.Types.$fShowCommand_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bbe66beb3be641e2ba0166b7a498957b
  $fShowCommand_$cshowList ::
    [Language.PureScript.Interactive.Types.Command] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.Command])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.Command
                   Language.PureScript.Interactive.Types.$fShowCommand1
                   ls
                   s) -}
bbe66beb3be641e2ba0166b7a498957b
  $fShowCommand_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.Command -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fShowDirective ::
    GHC.Show.Show Language.PureScript.Interactive.Types.Directive
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.Directive
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshow
                  Language.PureScript.Interactive.Types.$fShowDirective_$cshowList -}
98c26304a3d9575f04d9556ea0a096e2
  $fShowDirective1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective2) -}
f670481d0c5ee6b7994743f13d49eb36
  $fShowDirective10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Kind"#) -}
9dc0ed0b3a2e9987d30bbf85cdeaeee0
  $fShowDirective11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective12) -}
52521ae9f13fd6c6d4ec9f4cbb08a84b
  $fShowDirective12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
682f0207dfab1a724d46525d58472e8f
  $fShowDirective13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective14) -}
576ce27b06e960e9f6ac57a598161831
  $fShowDirective14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Browse"#) -}
2e0ebddb48ec763ba8899053bdb83d37
  $fShowDirective15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective16) -}
3a17da6d781a9d6a6fd07fd2c441ba23
  $fShowDirective16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Clear"#) -}
0c47696651d8cbcb98c28ecdf705628e
  $fShowDirective17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective18) -}
06739ac5d83128eb20663d6ddfa03768
  $fShowDirective18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Reload"#) -}
429b7695a43ff645e74ac8e2c454d05b
  $fShowDirective19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective20) -}
750113efabe4b1273e0da258a71b5a19
  $fShowDirective2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReloadV"#) -}
9f59fcae4041dc9782db76fc7955f999
  $fShowDirective20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quit"#) -}
eb1115c394b8e4964f440f2c038332f4
  $fShowDirective21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective22) -}
b8b5150c0af34be71a568e6a4dff0663
  $fShowDirective22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Help"#) -}
655842ec718c3c8a800064f34cd84dcc
  $fShowDirective3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective4) -}
8a7a450d629fedcb719d79282ef99f80
  $fShowDirective4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Complete"#) -}
a5e8d37f03401d86e820592dc75bb58a
  $fShowDirective5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective6) -}
1646374c852c55dce90df7216bab29c3
  $fShowDirective6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Paste"#) -}
4ecf99e877c2f8ddff8826ef90a03dc7
  $fShowDirective7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective8) -}
69b09adf5e4c6c5b56d7b3d75f8c3763
  $fShowDirective8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Show"#) -}
1dfca7a6cc1b4eaee374dc17a0b9e7e4
  $fShowDirective9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowDirective10) -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fShowDirective_$cshow ::
    Language.PureScript.Interactive.Types.Directive -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Interactive.Types.Directive) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.Help
                   -> Language.PureScript.Interactive.Types.$fShowDirective21
                   Language.PureScript.Interactive.Types.Quit
                   -> Language.PureScript.Interactive.Types.$fShowDirective19
                   Language.PureScript.Interactive.Types.Reload
                   -> Language.PureScript.Interactive.Types.$fShowDirective17
                   Language.PureScript.Interactive.Types.Clear
                   -> Language.PureScript.Interactive.Types.$fShowDirective15
                   Language.PureScript.Interactive.Types.Browse
                   -> Language.PureScript.Interactive.Types.$fShowDirective13
                   Language.PureScript.Interactive.Types.Type
                   -> Language.PureScript.Interactive.Types.$fShowDirective11
                   Language.PureScript.Interactive.Types.Kind
                   -> Language.PureScript.Interactive.Types.$fShowDirective9
                   Language.PureScript.Interactive.Types.Show
                   -> Language.PureScript.Interactive.Types.$fShowDirective7
                   Language.PureScript.Interactive.Types.Paste
                   -> Language.PureScript.Interactive.Types.$fShowDirective5
                   Language.PureScript.Interactive.Types.Complete
                   -> Language.PureScript.Interactive.Types.$fShowDirective3
                   Language.PureScript.Interactive.Types.ReloadV
                   -> Language.PureScript.Interactive.Types.$fShowDirective1 }) -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fShowDirective_$cshowList ::
    [Language.PureScript.Interactive.Types.Directive] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.Directive])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.Directive
                   Language.PureScript.Interactive.Types.$w$cshowsPrec
                   ls
                   s) -}
6d04fdb5e26b466ffd22b01b64e3342d
  $fShowDirective_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.Directive
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.Directive)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec w1 w2) -}
41419e455c8d61ff11d56793d4f68c48
  $fShowPSCiConfig ::
    GHC.Show.Show Language.PureScript.Interactive.Types.PSCiConfig
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.PSCiConfig
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshow
                  Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowList -}
41419e455c8d61ff11d56793d4f68c48
  $fShowPSCiConfig1 ::
    Language.PureScript.Interactive.Types.PSCiConfig -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec1 0# w w1) -}
0909163d2459a964782c63fb4709b02f
  $fShowPSCiConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
421acd3109ebbad609ac5cb8b957689f
  $fShowPSCiConfig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psciFileGlobs = "#) -}
4cf282bdf9907b2723aee1b487dcc075
  $fShowPSCiConfig4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiConfig {"#) -}
41419e455c8d61ff11d56793d4f68c48
  $fShowPSCiConfig_$cshow ::
    Language.PureScript.Interactive.Types.PSCiConfig -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.PSCiConfig) ->
                 Language.PureScript.Interactive.Types.$fShowPSCiConfig_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
41419e455c8d61ff11d56793d4f68c48
  $fShowPSCiConfig_$cshowList ::
    [Language.PureScript.Interactive.Types.PSCiConfig]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.PSCiConfig])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.PSCiConfig
                   Language.PureScript.Interactive.Types.$fShowPSCiConfig1
                   ls
                   s) -}
41419e455c8d61ff11d56793d4f68c48
  $fShowPSCiConfig_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.PSCiConfig
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec1
                   ww1
                   w1
                   w2 }) -}
f802fa09b94f8d7be8d3d7d42508ed4f
  $fShowPSCiState ::
    GHC.Show.Show Language.PureScript.Interactive.Types.PSCiState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.PSCiState
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshow
                  Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowList -}
f802fa09b94f8d7be8d3d7d42508ed4f
  $fShowPSCiState1 ::
    Language.PureScript.Interactive.Types.PSCiState -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
bd12282f02c6a3eed8e955d820de8390
  $fShowPSCiState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowPSCiState3) -}
6485d3427419e4c81248b343ab97b19c
  $fShowPSCiState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiState "#) -}
5d53b20a3961524a9daf4447876426d3
  $fShowPSCiState4 ::
    (Language.PureScript.AST.Declarations.Module,
     Language.PureScript.Externs.ExternsFile)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U),1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Language.PureScript.AST.Declarations.Module,
                          Language.PureScript.Externs.ExternsFile))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Language.PureScript.Interactive.Types.$wlvl
                        ww1
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww4 ww5 } }) -}
58a8c44ec4f4e07c2af9e7b334b825ed
  $fShowPSCiState5 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U,1*U)><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Language.PureScript.Interactive.Types.$wlvl1
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) -}
f802fa09b94f8d7be8d3d7d42508ed4f
  $fShowPSCiState_$cshow ::
    Language.PureScript.Interactive.Types.PSCiState -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U,U,U,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.PSCiState) ->
                 Language.PureScript.Interactive.Types.$fShowPSCiState_$cshowsPrec
                   Language.PureScript.Interactive.Types.$fShowCommand2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f802fa09b94f8d7be8d3d7d42508ed4f
  $fShowPSCiState_$cshowList ::
    [Language.PureScript.Interactive.Types.PSCiState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.PSCiState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.PSCiState
                   Language.PureScript.Interactive.Types.$fShowPSCiState1
                   ls
                   s) -}
f802fa09b94f8d7be8d3d7d42508ed4f
  $fShowPSCiState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.PSCiState
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Interactive.Types.PSCiState ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Interactive.Types.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
4484fd29d895671a056057576a9a07ef
  $fShowReplQuery ::
    GHC.Show.Show Language.PureScript.Interactive.Types.ReplQuery
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Types.ReplQuery
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshowsPrec
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshow
                  Language.PureScript.Interactive.Types.$fShowReplQuery_$cshowList -}
4484fd29d895671a056057576a9a07ef
  $fShowReplQuery1 ::
    Language.PureScript.Interactive.Types.ReplQuery -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.ReplQuery)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Interactive.Types.$fShowReplQuery4)
                        eta
                   Language.PureScript.Interactive.Types.QueryImport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Interactive.Types.$fShowReplQuery2)
                        eta }) -}
616594343643503718e246ead0f724a6
  $fShowReplQuery2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowReplQuery3) -}
d9124c295082c1ff73aea6a867a4bf1b
  $fShowReplQuery3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueryImport"#) -}
a04c138b261dc02dffb5d05c6b72c30d
  $fShowReplQuery4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.$fShowReplQuery5) -}
3d61f3c90e8ca02be7aa7ebcd8726aad
  $fShowReplQuery5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QueryLoaded"#) -}
4484fd29d895671a056057576a9a07ef
  $fShowReplQuery_$cshow ::
    Language.PureScript.Interactive.Types.ReplQuery -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case x of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> Language.PureScript.Interactive.Types.$fShowReplQuery4
                   Language.PureScript.Interactive.Types.QueryImport
                   -> Language.PureScript.Interactive.Types.$fShowReplQuery2 }) -}
4484fd29d895671a056057576a9a07ef
  $fShowReplQuery_$cshowList ::
    [Language.PureScript.Interactive.Types.ReplQuery] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Types.ReplQuery])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.$fShowReplQuery1
                   ls
                   s) -}
4484fd29d895671a056057576a9a07ef
  $fShowReplQuery_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Types.ReplQuery
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Interactive.Types.ReplQuery)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Interactive.Types.$fShowReplQuery4)
                        eta
                   Language.PureScript.Interactive.Types.QueryImport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Interactive.Types.$fShowReplQuery2)
                        eta }) -}
02663710c1d4c17ebdf723ec07bf26d2
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e ((->) [Language.PureScript.AST.Declarations.Module]))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fFunctorExceptT
                     @ e)
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module]))
                  (\ @ a
                     @ b
                     @ c
                     (f10 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e ((->) [Language.PureScript.AST.Declarations.Module]) a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ b
                     @ c
                     (\ (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             x1 of wild {
                        Data.Either.Left x2 -> Data.Either.Left @ e @ (b -> c) x2
                        Data.Either.Right y -> Data.Either.Right @ e @ (b -> c) (f10 y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b -> c>_N)))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e ((->) [Language.PureScript.AST.Declarations.Module]) a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ b
                     @ a
                     (\ (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             x1 of wild {
                        Data.Either.Left x2 -> Data.Either.Left @ e @ (b -> a) x2
                        Data.Either.Right y
                        -> Data.Either.Right @ e @ (b -> a) (\ (ds :: b) -> y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b -> a>_N))) -}
5e309eab1d44f0c194632cc76603c2e7
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e ((->) [Language.PureScript.AST.Declarations.Module]) (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) a
    -> [Language.PureScript.AST.Declarations.Module]
    -> Data.Either.Either e b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) a)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case w1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <a -> b>_N)
                        r1 of wild {
                   Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                   Data.Either.Right k
                   -> case w2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                             r1 of wild1 {
                        Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                        Data.Either.Right x -> Data.Either.Right @ e @ b (k x) } }) -}
ff2dfe96b211c9f37d0e4f1e01daf9b1
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT
      e ((->) [Language.PureScript.AST.Declarations.Module]) a
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) b
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT
                            e ((->) [Language.PureScript.AST.Declarations.Module]) a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e ((->) [Language.PureScript.AST.Declarations.Module]) b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <a>_N)
                        r1 of wild {
                   Data.Either.Left e1 -> Data.Either.Left @ e @ b e1
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <(->) [Language.PureScript.AST.Declarations.Module]>_R <b>_N)
                        r1 })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e ((->) [Language.PureScript.AST.Declarations.Module]) a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e ((->) [Language.PureScript.AST.Declarations.Module]) b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <b>_N)) -}
b6df9c3534697b28ec12b407d19f5e52
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]) a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) ->
                 let {
                   x :: Data.Either.Either e a = Data.Either.Right @ e @ a a1
                 } in
                 \ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <a>_N)) -}
d4cd3ddf63f0a209a1e2f7e124fbc218
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e ((->) [Language.PureScript.AST.Declarations.Module]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e ((->) [Language.PureScript.AST.Declarations.Module]))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module]))
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ e
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])) -}
b23c4f83bdd9a10d66d81e3c4a712702
  $s$fApplicativeWriterT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT
                     @ Language.PureScript.Errors.MultipleErrors)
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cliftA2
                     @ Language.PureScript.Errors.MultipleErrors
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     Language.PureScript.Errors.$fMonoidMultipleErrors
                     (Language.PureScript.Interactive.Types.$s$fApplicativeExceptT
                        @ Language.PureScript.Errors.MultipleErrors))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a)
                     (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module]))
                                b) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ ((->) [Language.PureScript.AST.Declarations.Module])
                     @ Language.PureScript.Errors.MultipleErrors
                     (GHC.Base.$fFunctor(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     (GHC.Base.$fMonad(->)
                        @ [Language.PureScript.AST.Declarations.Module])
                     @ (b, Language.PureScript.Errors.MultipleErrors)
                     @ (b, Language.PureScript.Errors.MultipleErrors)
                     (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                      case eta
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                             x of wild {
                        Data.Either.Left x1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ((b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors))
                             x1
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ((b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors))
                             (\ (ds1 :: (b, Language.PureScript.Errors.MultipleErrors)) ->
                              case y of wild1 { (,) a1 w1 ->
                              case ds1 of wild2 { (,) b1 w' ->
                              (b1,
                               (GHC.Base.augment
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  (\ @ b2
                                     (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                           -> b2 -> b2)[OneShot]
                                     (n :: b2)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b2
                                     c
                                     n
                                     w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 `cast`
                               (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } }) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b, Language.PureScript.Errors.MultipleErrors)
                                -> (b, Language.PureScript.Errors.MultipleErrors)>_N))
                     eta1
                       `cast`
                     (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                          <Language.PureScript.Errors.MultipleErrors>_N
                          <Control.Monad.Trans.Except.ExceptT
                             Language.PureScript.Errors.MultipleErrors
                             ((->) [Language.PureScript.AST.Declarations.Module])>_R
                          <b>_N))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module]))
                      a>_R
                   ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <b>_N))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a) ->
                   Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                     @ b
                     @ a
                     (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                      case eta
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                             x of wild {
                        Data.Either.Left x1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                             x1
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                             (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                                @ a
                                @ b
                                @ Language.PureScript.Errors.MultipleErrors
                                y) })
                       `cast`
                     (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b -> a,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b
                                                                                            -> a>_N))) -}
78166a535d2725b1af5214bd6f89756a
  $s$fApplicativeWriterT_$c<* ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module]))
                             a) ->
                 Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
                   @ b
                   @ a
                   (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                    case eta
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])>_R
                              <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Language.PureScript.Errors.MultipleErrors>_N
                                          <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                          <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                           x of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b -> a, Language.PureScript.Errors.MultipleErrors)
                           (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                              @ a
                              @ b
                              @ Language.PureScript.Errors.MultipleErrors
                              y) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(b -> a,
                               Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                         <Language.PureScript.Errors.MultipleErrors>_N
                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                            ((->)
                                                                                               [Language.PureScript.AST.Declarations.Module])>_R
                                                                                         <b
                                                                                          -> a>_N))) -}
bd0b80e77dc54b7442bc105006fa9da8
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f10 :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module]))
                             (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ ((->) [Language.PureScript.AST.Declarations.Module])
                   @ Language.PureScript.Errors.MultipleErrors
                   (GHC.Base.$fFunctor(->)
                      @ [Language.PureScript.AST.Declarations.Module])
                   (GHC.Base.$fMonad(->)
                      @ [Language.PureScript.AST.Declarations.Module])
                   @ (a, Language.PureScript.Errors.MultipleErrors)
                   @ (b, Language.PureScript.Errors.MultipleErrors)
                   (\ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                    case f10
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])>_R
                              <a -> b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <(->)
                                                  [Language.PureScript.AST.Declarations.Module]>_R
                                               <(a -> b,
                                                 Language.PureScript.Errors.MultipleErrors)>_N)
                           x of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ ((a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors))
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ ((a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors))
                           (\ (ds1 :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                            case y of wild1 { (,) a1 w1 ->
                            case ds1 of wild2 { (,) b1 w' ->
                            (a1 b1,
                             (GHC.Base.augment
                                @ Language.PureScript.AST.Declarations.ErrorMessage
                                (\ @ b2
                                   (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                         -> b2 -> b2)[OneShot]
                                   (n :: b2)[OneShot] ->
                                 GHC.Base.foldr
                                   @ Language.PureScript.AST.Declarations.ErrorMessage
                                   @ b2
                                   c
                                   n
                                   w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                               `cast`
                             (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } }) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)
                              -> (b, Language.PureScript.Errors.MultipleErrors)>_N))
                   v `cast`
                   (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                        <Language.PureScript.Errors.MultipleErrors>_N
                        <Control.Monad.Trans.Except.ExceptT
                           Language.PureScript.Errors.MultipleErrors
                           ((->) [Language.PureScript.AST.Declarations.Module])>_R
                        <a>_N))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            ((->) [Language.PureScript.AST.Declarations.Module]))
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <b>_N)) -}
6baf755f6191b6ffde4b7eb292a97b90
  $s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) ->
                 let {
                   a2 :: (a, Language.PureScript.Errors.MultipleErrors)
                   = (a1,
                      (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                 } in
                 let {
                   x :: Data.Either.Either
                          Language.PureScript.Errors.MultipleErrors
                          (a, Language.PureScript.Errors.MultipleErrors)
                   = Data.Either.Right
                       @ Language.PureScript.Errors.MultipleErrors
                       @ (a, Language.PureScript.Errors.MultipleErrors)
                       a2
                 } in
                 (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                   `cast`
                 (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <a>_N)) -}
f6da0ccf0e93f454c66387cedf87cc56
  $s$fApplicativeWriterT_$s$fFunctorWriterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ w.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       w
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  (Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap
                     @ w)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Writer.Strict.mapWriterT
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     @ b
                     @ w
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module]))
                     @ a
                     @ w
                     (\ (x1 :: Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])
                                 (b, w))
                        (x2 :: [Language.PureScript.AST.Declarations.Module]) ->
                      case x1
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                <(b, w)>_N)
                             x2 of wild {
                        Data.Either.Left x3
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (a, w)
                             x3
                        Data.Either.Right y
                        -> Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (a, w)
                             (case y of wild1 { (,) a1 w1 -> (x, w1) }) })
                       `cast`
                     (<Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module])
                         (b, w)>_R
                      ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                    <Language.PureScript.Errors.MultipleErrors>_N
                                    <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                    <(a, w)>_N))) -}
775d61820850ddaca2af4e256af72c5d
  $s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f10 :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Errors.MultipleErrors
                        ((->) [Language.PureScript.AST.Declarations.Module]))
                   @ a
                   @ w
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Errors.MultipleErrors
                        ((->) [Language.PureScript.AST.Declarations.Module]))
                   @ b
                   @ w
                   (\ (x :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])
                              (a, w))
                      (x1 :: [Language.PureScript.AST.Declarations.Module]) ->
                    case x `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <(->) [Language.PureScript.AST.Declarations.Module]>_R
                              <(a, w)>_N)
                           x1 of wild {
                      Data.Either.Left x2
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b, w)
                           x2
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (b, w)
                           (case y of wild1 { (,) a1 w1 -> (f10 a1, w1) }) })
                     `cast`
                   (<Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module])
                       (a, w)>_R
                    ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Language.PureScript.Errors.MultipleErrors>_N
                                  <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                  <(b, w)>_N))) -}
22d2aa7e00b7c4d384a2b9bdbc8ce998
  $s$fMonadErroreWriterT ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
                  (\ @ a
                     (eta :: Language.PureScript.Errors.MultipleErrors)
                     (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                   Data.Either.Left
                     @ Language.PureScript.Errors.MultipleErrors
                     @ (a, Language.PureScript.Errors.MultipleErrors)
                     eta)
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Errors.MultipleErrors>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                ((->)
                                                                                                   [Language.PureScript.AST.Declarations.Module])>_R
                                                                                             <a>_N))
                  (\ @ a
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module]))
                               a)
                     (eta1 :: Language.PureScript.Errors.MultipleErrors
                              -> Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   (Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      ((->) [Language.PureScript.AST.Declarations.Module]))
                                   a)
                     (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                   case eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module])>_R
                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Language.PureScript.Errors.MultipleErrors>_N
                                         <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                          r1 of wild {
                     Data.Either.Left l
                     -> (eta1 l)
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                ((->) [Language.PureScript.AST.Declarations.Module])>_R
                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Language.PureScript.Errors.MultipleErrors>_N
                                         <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                          r1
                     Data.Either.Right r
                     -> Data.Either.Right
                          @ Language.PureScript.Errors.MultipleErrors
                          @ (a, Language.PureScript.Errors.MultipleErrors)
                          r })
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         ((->) [Language.PureScript.AST.Declarations.Module]))
                      a>_R
                   ->_R <Language.PureScript.Errors.MultipleErrors
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module]))
                              a>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                ((->)
                                                                                                   [Language.PureScript.AST.Declarations.Module])>_R
                                                                                             <a>_N)) -}
9c708de9790d6d31324a6955d5102768
  $s$fMonadErroreWriterT_$s$fMonadWriterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Interactive.Types.$s$fApplicativeWriterT
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>=
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>
                  (\ @ a (eta :: a) ->
                   let {
                     a1 :: (a, Language.PureScript.Errors.MultipleErrors)
                     = (eta,
                        (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   } in
                   let {
                     x :: Data.Either.Either
                            Language.PureScript.Errors.MultipleErrors
                            (a, Language.PureScript.Errors.MultipleErrors)
                     = Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, Language.PureScript.Errors.MultipleErrors)
                         a1
                   } in
                   (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <a>_N))
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail -}
bb6005f018ea32871993138de7e6053b
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module]))
                           b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (b, Language.PureScript.Errors.MultipleErrors)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      case k `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(b, Language.PureScript.Errors.MultipleErrors)>_N)
                             r1 of wild2 {
                        Data.Either.Left e1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             e1
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             (b1,
                              (GHC.Base.augment
                                 @ Language.PureScript.AST.Declarations.ErrorMessage
                                 (\ @ b2
                                    (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                          -> b2 -> b2)[OneShot]
                                    (n :: b2)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    @ b2
                                    c
                                    n
                                    w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                `cast`
                              (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            ((->) [Language.PureScript.AST.Declarations.Module]))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b>_N)) -}
5fd6525f894502b7d89039b00e5ef176
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             Language.PureScript.Errors.MultipleErrors
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                ((->) [Language.PureScript.AST.Declarations.Module]))
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module]))
                              b)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (b, Language.PureScript.Errors.MultipleErrors)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      case (k a1)
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Errors.MultipleErrors
                                   ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                <b>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Language.PureScript.Errors.MultipleErrors>_N
                                            <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                            <(b, Language.PureScript.Errors.MultipleErrors)>_N)
                             r1 of wild2 {
                        Data.Either.Left e1
                        -> Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             e1
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           Data.Either.Right
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, Language.PureScript.Errors.MultipleErrors)
                             (b1,
                              (GHC.Base.augment
                                 @ Language.PureScript.AST.Declarations.ErrorMessage
                                 (\ @ b2
                                    (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                          -> b2 -> b2)[OneShot]
                                    (n :: b2)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    @ b2
                                    c
                                    n
                                    w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                 w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                `cast`
                              (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))) } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(b,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <b>_N)) -}
cdf6af0b17362b976579ffc279097d05
  $s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 1, Strictness: <B,U>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ ([Language.PureScript.AST.Declarations.Module]
                      -> Data.Either.Either
                           Language.PureScript.Errors.MultipleErrors
                           (a, Language.PureScript.Errors.MultipleErrors))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(a,
                                 Language.PureScript.Errors.MultipleErrors)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                              ((->)
                                                                                                 [Language.PureScript.AST.Declarations.Module])>_R
                                                                                           <a>_N)) -}
84080823a4ccaebf90268d7c29368d6e
  $s$fMonadWriterwWriterT ::
    Control.Monad.Writer.Class.MonadWriter
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module])))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          ((->) [Language.PureScript.AST.Declarations.Module])))
                  Language.PureScript.Errors.$fMonoidMultipleErrors
                  Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
                  (\ @ a (x :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                   let {
                     x1 :: Data.Either.Either
                             Language.PureScript.Errors.MultipleErrors
                             (a, Language.PureScript.Errors.MultipleErrors)
                     = Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, Language.PureScript.Errors.MultipleErrors)
                         x
                   } in
                   (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x1)
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <(->) [Language.PureScript.AST.Declarations.Module]>_R
                             <(a, Language.PureScript.Errors.MultipleErrors)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <(a, Language.PureScript.Errors.MultipleErrors)>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    ((->) [Language.PureScript.AST.Declarations.Module])>_R
                                 <a>_N))
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$stell
                     @ Language.PureScript.Errors.MultipleErrors)
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$slisten
                     @ Language.PureScript.Errors.MultipleErrors)
                  (Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$spass
                     @ Language.PureScript.Errors.MultipleErrors) -}
7e5d388c1df21754ad21cd1513d6d9eb
  $s$fMonadWriterwWriterT_$slisten ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         (a, w)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            w
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            a)
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                       <Language.PureScript.Errors.MultipleErrors>_N
                                       <(->) [Language.PureScript.AST.Declarations.Module]>_R
                                       <(a, w)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ ((a, w), w)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w1 ->
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ ((a, w), w)
                        ((a1, w1), w1) } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <((a, w),
                                 w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                   <w>_N
                                                   <Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      ((->)
                                                         [Language.PureScript.AST.Declarations.Module])>_R
                                                   <(a, w)>_N)) -}
243c700aa10f4929178c4bb95a69187c
  $s$fMonadWriterwWriterT_$spass ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         ((->) [Language.PureScript.AST.Declarations.Module]))
      (a, w -> w)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            w
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               ((->) [Language.PureScript.AST.Declarations.Module]))
                            (a, w -> w))
                   (r1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <(a, w -> w)>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                 <Language.PureScript.Errors.MultipleErrors>_N
                                                 <(->)
                                                    [Language.PureScript.AST.Declarations.Module]>_R
                                                 <((a, w -> w), w)>_N)
                        r1 of wild {
                   Data.Either.Left e1
                   -> Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (a, w)
                        e1
                   Data.Either.Right x
                   -> case x of wild1 { (,) ds1 w1 ->
                      case ds1 of wild2 { (,) a1 f10 ->
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (a, w)
                        (a1, f10 w1) } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       ((->) [Language.PureScript.AST.Declarations.Module]))
                    (a, w -> w)>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <(->) [Language.PureScript.AST.Declarations.Module]>_R
                               <(a, w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                      <w>_N
                                                      <Control.Monad.Trans.Except.ExceptT
                                                         Language.PureScript.Errors.MultipleErrors
                                                         ((->)
                                                            [Language.PureScript.AST.Declarations.Module])>_R
                                                      <a>_N)) -}
db1a070b65544a0ae8ede90ff62a5143
  $s$fMonadWriterwWriterT_$stell ::
    w
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            ((->) [Language.PureScript.AST.Declarations.Module]))
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w (w1 :: w) ->
                 let {
                   eta :: ((), w) = (GHC.Tuple.(), w1)
                 } in
                 let {
                   x :: Data.Either.Either
                          Language.PureScript.Errors.MultipleErrors ((), w)
                   = Data.Either.Right
                       @ Language.PureScript.Errors.MultipleErrors
                       @ ((), w)
                       eta
                 } in
                 (\ (ds :: [Language.PureScript.AST.Declarations.Module]) -> x)
                   `cast`
                 (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <(->) [Language.PureScript.AST.Declarations.Module]>_R
                           <((), w)>_N)))
                  `cast`
                (forall (w :: <*>_N).
                 <w>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <w>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  ((->) [Language.PureScript.AST.Declarations.Module])>_R
                               <()>_N)) -}
c89fc982c5d684e8fcc84633db10a6d0
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports)
    -> (([Language.PureScript.Names.ProperName
            'Language.PureScript.Names.Namespace] :: *)
        ~R# (Language.PureScript.Names.ModuleName :: *)) =>
       GHC.Base.Maybe
         (Language.PureScript.AST.SourcePos.SourceSpan,
          Language.PureScript.Sugar.Names.Env.Imports,
          Language.PureScript.Sugar.Names.Env.Exports)
  {- Arity: 2, Strictness: <S,1*U><L,A> -}
44981f8de62789f7830f734f400a7286
  $tc'Browse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14909237507568853604##
                   4384138815971306784##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Browse2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
2b9dc5860e15e8c1079d49e9b4b69fde
  $tc'Browse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ec1d092d46ac3b386ea80956361f044f
  $tc'Browse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Browse3) -}
c8af42013e5b69af79fb2edd027a1fed
  $tc'Browse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Browse"#) -}
6838b3f5afe2010c798e2647e47833c9
  $tc'BrowseModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4861547019680123110##
                   9471485442517939883##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'BrowseModule2
                   0#
                   Language.PureScript.Interactive.Types.$tc'BrowseModule1) -}
aaca1a8b4a35388ff4b6c4a240ab904d
  $tc'BrowseModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98494a3f306b8dfc609abfa1f6fe0ac3
  $tc'BrowseModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'BrowseModule3) -}
0748f8d65f4643dc53c5246b7f5887f2
  $tc'BrowseModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BrowseModule"#) -}
07168213ac909a83b87e68172aa6a2d0
  $tc'Clear :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8892987872644632385##
                   9589232752619050299##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Clear1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
2d57ca8ead11814288af004b498eeab9
  $tc'Clear1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Clear2) -}
4d7fe2259c6f05b71bb716d68a71f4d9
  $tc'Clear2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Clear"#) -}
1944889f36f77856db3e61d6d6a91339
  $tc'ClearState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10484175455632211436##
                   17672096940909510159##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ClearState2
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
bc46c2a59d05a4b6746c627dcbdadac7
  $tc'ClearState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
34f5c7e702674c1be59b7165d956f77e
  $tc'ClearState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ClearState3) -}
e17855fd2ee3e330e5a25c8ba15e7ad9
  $tc'ClearState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClearState"#) -}
6e1f153b9fa71f1bd6e7c95f60d9cfd3
  $tc'Complete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14487097609929967735##
                   18095927817532094940##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Complete1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
f52fe447cce271ec9d225da962676831
  $tc'Complete1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Complete2) -}
f8abddc70db2056d27fc1a448dbb2f43
  $tc'Complete2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Complete"#) -}
e86a0fa043a8b222f811197386dfa7ca
  $tc'CompleteStr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6942342723025436373##
                   15304346683016356657##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'CompleteStr2
                   0#
                   Language.PureScript.Interactive.Types.$tc'CompleteStr1) -}
db5927677a0c59d5beec24a0263af5b6
  $tc'CompleteStr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7c3d73ccb6edec85ab12535a9bad59d4
  $tc'CompleteStr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'CompleteStr3) -}
6bc5732b1c3927f05db6944b48efd6f8
  $tc'CompleteStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompleteStr"#) -}
74fc27c4902407815abab9ced68a3db1
  $tc'Decls :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10424119318680802929##
                   15295238018227288440##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Decls2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Decls1) -}
8724bec8f0e8f6a6a174065feaf637fe
  $tc'Decls1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c4c7f648a82776e1cc8e7a6e022f3bc8
  $tc'Decls2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Decls3) -}
2892521e136f8baedbfadbb6a1273e98
  $tc'Decls3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Decls"#) -}
e9d058221712c298a624dc728fa2f42b
  $tc'Expression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6325554443812696389##
                   5561513507928239440##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Expression2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
b1eec8779ffbb4a624899db5c7ed3c4f
  $tc'Expression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a3c72fc538a394e19551bb37bdc60b1a
  $tc'Expression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Expression3) -}
e534eb4a5959d642c262e3d0cc806dca
  $tc'Expression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Expression"#) -}
e5e70cc0ebd2bcdffd9e1ec7ea0f9de4
  $tc'Help :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   754731499623739010##
                   5551699157958673532##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Help1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
9a35debe1f0e3d7d273395eccf20effd
  $tc'Help1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Help2) -}
e67b585f2b73aa11c1a08c469743602c
  $tc'Help2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Help"#) -}
ea1a26274b3a148af2b5b4e2eaaf869e
  $tc'Import :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16487977788491220938##
                   3960735543870356365##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Import2
                   0#
                   Language.PureScript.Interactive.Types.$tc'Import1) -}
3d1ab2514226b2d98a4b8023a8214197
  $tc'Import1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a1ed70589cfe3ebe576730aea1992f18
  $tc'Import2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Import3) -}
ea129c0e03c1855d6e53ad3e2d8ef671
  $tc'Import3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Import"#) -}
6578e5271bf27bca6b070b241492a985
  $tc'Kind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6250635010293525450##
                   7443489618497012642##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Kind1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
76bea265b5c7634ac08117777da44c09
  $tc'Kind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Kind2) -}
5fece0ee9e236f8e939a379342015c26
  $tc'Kind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Kind"#) -}
42d836e000e91fef2ceb7cef564c0cae
  $tc'KindOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9741718367609902271##
                   1360191308490166029##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'KindOf2
                   0#
                   Language.PureScript.Interactive.Types.$tc'KindOf1) -}
25a1c7a6e19534ca70fe39aad151ccd6
  $tc'KindOf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
879a22bde09d455ac9f95aab8c120e57
  $tc'KindOf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'KindOf3) -}
62f56de51732bea2dbcc8585981e1939
  $tc'KindOf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindOf"#) -}
1fc258b0cf846758cb82386e829f953c
  $tc'PSCiConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4799463863212712126##
                   4925351795830819975##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig2
                   0#
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig1) -}
e7512c5658052e402cb854bb5df63013
  $tc'PSCiConfig1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a56dde9e32d44af65f232dba605db233
  $tc'PSCiConfig2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PSCiConfig3) -}
b0a79aaca02634a0c181c4a7d1e66c36
  $tc'PSCiConfig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSCiConfig"#) -}
0cc003fcaa4d81a5e349033e3db4b735
  $tc'PSCiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11474753061992790957##
                   3967348290228489178##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PSCiState2
                   0#
                   Language.PureScript.Interactive.Types.$tc'PSCiState1) -}
58a910b95356142eb474d48895c7d967
  $tc'PSCiState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3694a1d9e83ec80ce19c0aa0b621f00
  $tc'PSCiState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PSCiState3) -}
a774ceb8404701093eccb9a5361e2e2b
  $tc'PSCiState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSCiState"#) -}
03f9b3a1f21b4f39d83e04422d120c2c
  $tc'Paste :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14543046639629174896##
                   8457958687184436823##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Paste1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
0177360f1ff330e69035d5175dd4c5ef
  $tc'Paste1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Paste2) -}
30cad4b5db2276741c931e9ca6b134c0
  $tc'Paste2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Paste"#) -}
90760a5ef54dc75fc1a07aff8d7e873b
  $tc'PasteLines :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15486841760111620922##
                   14625538565919184229##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'PasteLines1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
d508b85b9c051c3f13e5cce897785e32
  $tc'PasteLines1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'PasteLines2) -}
21dd5363972052115b7128df5f3591ea
  $tc'PasteLines2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PasteLines"#) -}
60d2afa1ccaa2ee4b3ae6202af2b324c
  $tc'QueryImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18066435831409035610##
                   18159191745432234662##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QueryImport2
                   0#
                   Language.PureScript.Interactive.Types.$tc'QueryImport1) -}
e0b60758eb992667363af97d0af8ed95
  $tc'QueryImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
22b78770d2b7ecee1b8440b750d7165f
  $tc'QueryImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QueryImport3) -}
4a99d46f54598625ef74918bee3506bf
  $tc'QueryImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueryImport"#) -}
fdd357109233a009568046dd982cdb6e
  $tc'QueryLoaded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8085280575217897662##
                   14440444625663913101##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QueryLoaded1
                   0#
                   Language.PureScript.Interactive.Types.$tc'QueryImport1) -}
dc20985c401b919a39f09d8855196e6e
  $tc'QueryLoaded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QueryLoaded2) -}
ca0c7743791babe7e06a60a90a87b1e5
  $tc'QueryLoaded2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QueryLoaded"#) -}
58901bca477919c6152af1e8ace3cc55
  $tc'Quit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18342447756250595794##
                   6839020169994362797##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Quit1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
286e6ad9094ac42335ee049a82bee345
  $tc'Quit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Quit2) -}
ba18aaa3e4abf504cc953b1d93881890
  $tc'Quit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quit"#) -}
080487cccd94a25238cba69b7b3e2b11
  $tc'QuitPSCi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12928170587574373418##
                   16836435712181058010##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'QuitPSCi1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
2d4fa33ad96e4d528ca76c8b97741852
  $tc'QuitPSCi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'QuitPSCi2) -}
c360aeab447c0703a61698965a794858
  $tc'QuitPSCi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'QuitPSCi"#) -}
a571f2f6a2c060732321112e37d92854
  $tc'Reload :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4732242644703308953##
                   13871446672083056281##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Reload1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
814dec3da729004bf27101a2f513b712
  $tc'Reload1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Reload2) -}
d8669b9ad56cbeb4a22af2ad5812faae
  $tc'Reload2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Reload"#) -}
6a3aff0554beaae9877db85cd635848f
  $tc'ReloadState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6892098975649382260##
                   13607464563645599287##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadState1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
4b6c7ad57769060106886ba82773a9b0
  $tc'ReloadState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadState2) -}
e27627e77c9929b94211b5e1e6682c53
  $tc'ReloadState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadState"#) -}
658c98ab35dbd2da417938834c3ce589
  $tc'ReloadV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4697616676150388001##
                   15040868308745145166##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadV1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
319bd0230d11cf08494b05035cb5e88a
  $tc'ReloadV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadV2) -}
c828e28f7fc79ff0aa973a9b8b4b9cba
  $tc'ReloadV2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadV"#) -}
df024d54a7c4bb191ae6e87c10516b26
  $tc'ReloadVariableState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14660431962306075509##
                   7689695775527825001##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ReloadVariableState1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
8471241635136667caef5b0171a171b6
  $tc'ReloadVariableState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ReloadVariableState2) -}
7eff225a2efcd0a12d36dfca87bbf77d
  $tc'ReloadVariableState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReloadVariableState"#) -}
29aa068a8844720e162cccf0c3a08e7b
  $tc'Show :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12379948948903622546##
                   2135449888213667089##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Show1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
29a5862d34c8d9327ddbb5e2208521d9
  $tc'Show1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Show2) -}
10fe7668ea048027f888e9eb2d007a77
  $tc'Show2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Show"#) -}
533c824d7eaeea212a36c4a0a1a1dbdb
  $tc'ShowHelp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4167654432772598259##
                   1493248604678654232##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ShowHelp1
                   0#
                   Language.PureScript.Interactive.Types.$tc'ClearState1) -}
2806c78c3797b262e9419a75af555b13
  $tc'ShowHelp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ShowHelp2) -}
eeb9ee666d9097e225d39d8cef594b2b
  $tc'ShowHelp2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShowHelp"#) -}
fa5c10b5498ce63021cebe3bf6f8f8fd
  $tc'ShowInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5202866064740029671##
                   6381203767401458208##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'ShowInfo2
                   0#
                   Language.PureScript.Interactive.Types.$tc'ShowInfo1) -}
b6dd1d974a32c338743527ee350f864b
  $tc'ShowInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ebdbb76a24bffe18f142682e28c13f20
  $tc'ShowInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'ShowInfo3) -}
e223edcb8c6726d739fc4fd0bee0a9ac
  $tc'ShowInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShowInfo"#) -}
4620783f387d32f0aad9ddfbd6edc32f
  $tc'Type :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13047567344308281648##
                   614514527846186211##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'Type1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Browse1) -}
436167002b9a5e5404e39079db69d968
  $tc'Type1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'Type2) -}
7dbba516d9566e04d95b12fb11d3b17c
  $tc'Type2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Type"#) -}
83ba0aa1f32687168ee83a69da213467
  $tc'TypeOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13177668143457666475##
                   290369852888169208##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tc'TypeOf1
                   0#
                   Language.PureScript.Interactive.Types.$tc'Expression1) -}
1e3b3b7c33eb4912a5a5a9607ffe065f
  $tc'TypeOf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tc'TypeOf2) -}
b989227bb5606839706ce0ef57490bf9
  $tc'TypeOf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOf"#) -}
6eb40228e37eec3a45f465e5caf3440e
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1090084528056343893##
                   16383494145685521534##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
9f64608c6e408dc40a5008525058c992
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcCommand2) -}
195dddf1e42c670cfa0210526d3fed95
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
2c573c00aa830e6faacb0776ec3246a1
  $tcDirective :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6136129241287034874##
                   3339435688236006436##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcDirective1
                   0#
                   GHC.Types.krep$*) -}
a5efd59b3cf59b159785bf16938278f3
  $tcDirective1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcDirective2) -}
27feed7ae20a40302697e01981e8d2fc
  $tcDirective2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Directive"#) -}
ec510ffaa977f3912ff7217107ff41b9
  $tcPSCiConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12580722038117090253##
                   10710372994112910388##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcPSCiConfig1
                   0#
                   GHC.Types.krep$*) -}
8131d676c920eafbbdd37884312233ef
  $tcPSCiConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcPSCiConfig2) -}
f1a09f725d76b40c29ba04ba6cbf4d84
  $tcPSCiConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiConfig"#) -}
9eb27dd772e316e310bb348bbb470301
  $tcPSCiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6599128591112327685##
                   11095463130854921821##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcPSCiState1
                   0#
                   GHC.Types.krep$*) -}
5a1c46736ad687d8be6c10fd9075e5ff
  $tcPSCiState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcPSCiState2) -}
d91b43d908bfd0d850ff5387966e7f86
  $tcPSCiState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiState"#) -}
5c9a6e4daa0f113b3547229455bbdb51
  $tcReplQuery :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12673633502883511158##
                   2326940701204077627##
                   Language.PureScript.Interactive.Types.$trModule
                   Language.PureScript.Interactive.Types.$tcReplQuery1
                   0#
                   GHC.Types.krep$*) -}
2253af3b2e4b493a41822b74afd88e3d
  $tcReplQuery1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$tcReplQuery2) -}
1da5569b39371f098ddf0e385e689994
  $tcReplQuery2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReplQuery"#) -}
50e8b4f3a5440d17edb58d4bf114140c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.Types.$trModule3
                   Language.PureScript.Interactive.Types.$trModule1) -}
9b8f6dee1544bf68f2e7eacd98f61c86
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$trModule2) -}
20bedbd292562d6e82a32db7d3ff2bd9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Interactive.Types"#) -}
970ffdf87058f27305fcf6ba04061961
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Types.$trModule4) -}
a68cc4e070bb8203c755a0e9c6ec3985
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
6d04fdb5e26b466ffd22b01b64e3342d
  $w$cshowsPrec ::
    Language.PureScript.Interactive.Types.Directive
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Interactive.Types.Directive)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Interactive.Types.Help
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective21
                        w1
                   Language.PureScript.Interactive.Types.Quit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective19
                        w1
                   Language.PureScript.Interactive.Types.Reload
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective17
                        w1
                   Language.PureScript.Interactive.Types.Clear
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective15
                        w1
                   Language.PureScript.Interactive.Types.Browse
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective13
                        w1
                   Language.PureScript.Interactive.Types.Type
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective11
                        w1
                   Language.PureScript.Interactive.Types.Kind
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective9
                        w1
                   Language.PureScript.Interactive.Types.Show
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective7
                        w1
                   Language.PureScript.Interactive.Types.Paste
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective5
                        w1
                   Language.PureScript.Interactive.Types.Complete
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective3
                        w1
                   Language.PureScript.Interactive.Types.ReloadV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowDirective1
                        w1 }) -}
41419e455c8d61ff11d56793d4f68c48
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Interactive.Types.PSCiConfig
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Interactive.Types.PSCiConfig)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Interactive.Types.$fShowPSCiConfig4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Interactive.Types.$fShowPSCiConfig3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Interactive.Types.$fShowPSCiConfig2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Interactive.Types.N:PSCiConfig[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        x1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)3
                                           (let {
                                              lvl43 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                            } in
                                            letrec {
                                              showl :: [[GHC.Types.Char]] -> GHC.Base.String
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ (ds2 :: [[GHC.Types.Char]]) ->
                                                case ds2 of wild1 {
                                                  [] -> lvl43
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.$fShow(,)3
                                                          (GHC.Show.showLitString
                                                             y
                                                             (GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.$fShow(,)3
                                                                (showl ys)))) }
                                            } in
                                            showl xs)))) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
678bcac4864a537e5355bb7b52d5ef49
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [Language.PureScript.Interactive.Types.ImportedModule]
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> [(Language.PureScript.AST.Declarations.Module,
         Language.PureScript.Externs.ExternsFile)]
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U><L,U><L,U><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.Interactive.Types.ImportedModule])
                   (ww2 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww3 :: [(Language.PureScript.AST.Declarations.Module,
                             Language.PureScript.Externs.ExternsFile)])
                   (ww4 :: Language.PureScript.Sugar.Names.Env.Imports)
                   (ww5 :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 let {
                   f10 :: GHC.Base.String -> GHC.Base.String
                   = case ww4 of ww6 { Language.PureScript.Sugar.Names.Env.Imports ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                     Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                       11#
                       ww7
                       ww8
                       ww9
                       ww10
                       ww11
                       ww12
                       ww13
                       ww14
                       ww15 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww5 of ww6 { Language.PureScript.Sugar.Names.Env.Exports ww7 ww8 ww9 ww10 ww11 ww12 ->
                     Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                       11#
                       ww7
                       ww8
                       ww9
                       ww10
                       ww11
                       ww12 }
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Show.showList__
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                       Language.PureScript.Interactive.Types.$fShowPSCiState5
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Language.PureScript.AST.Declarations.Declaration
                             Language.PureScript.AST.Declarations.$fShowDeclaration1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (GHC.Show.showList__
                                   @ (Language.PureScript.AST.Declarations.Module,
                                      Language.PureScript.Externs.ExternsFile)
                                   Language.PureScript.Interactive.Types.$fShowPSCiState4
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (f10
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (g x))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Interactive.Types.$fShowPSCiState2
                        (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Interactive.Types.$fShowPSCiState2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
1fb85e3dc148613b6b645223c7f77a99
  $wgo ::
    [(Language.PureScript.AST.Declarations.Module,
      Language.PureScript.Externs.ExternsFile)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.Types.Type,
             Language.PureScript.Environment.NameKind,
             Language.PureScript.Environment.NameVisibility),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            (Language.PureScript.Kinds.Kind,
             Language.PureScript.Environment.TypeKind),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
             Language.PureScript.Types.Type),
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName))
               (Data.Map.Internal.Map
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)
                  Language.PureScript.TypeClassDictionaries.NamedDict)),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            Language.PureScript.Environment.TypeClassData,
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 8,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
8f7f5bb2228f4a209f73e4022d2c92c1
  $wlvl ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.Externs.ExternsFile
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 3,
     Strictness: <L,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)><L,1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Declarations.Module)
                   (ww1 :: Language.PureScript.Externs.ExternsFile)
                   (w :: GHC.Base.String) ->
                 (# GHC.Show.$fShow(,)4,
                    case ww of ww2 { Language.PureScript.AST.Declarations.Module ww3 ww4 ww5 ww6 ww7 ->
                    Language.PureScript.AST.Declarations.$w$cshowsPrec9
                      0#
                      ww3
                      ww4
                      ww5
                      ww6
                      ww7
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)
                            (\ (w2 :: GHC.Base.String)[OneShot] ->
                             case ww1 of ww8 { Language.PureScript.Externs.ExternsFile ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                             Language.PureScript.Externs.$w$cshowsPrec1
                               0#
                               ww9
                               ww10
                               ww11
                               ww12
                               ww13
                               ww14
                               ww15
                               ww16
                               w2 })
                            (GHC.Types.[] @ GHC.Show.ShowS))) } #)) -}
9656edd77adb8fac71182952a779e866
  $wlvl1 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (w :: GHC.Base.String) ->
                 (# GHC.Show.$fShow(,)4,
                    Language.PureScript.Names.$w$cshowsPrec
                      0#
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,,)_$sgo2
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)
                            (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                               GHC.Show.$fShow(,)1
                               ww1)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                  @ Language.PureScript.Names.ModuleName
                                  Language.PureScript.Names.$fShowModuleName
                                  GHC.Show.$fShow(,)1
                                  ww2)
                               (GHC.Types.[] @ GHC.Show.ShowS)))) #)) -}
a38e45524a6fc51c5d437c51ce152452
  $wpsciEnvironment ::
    [(Language.PureScript.AST.Declarations.Module,
      Language.PureScript.Externs.ExternsFile)]
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.Types.Type,
             Language.PureScript.Environment.NameKind,
             Language.PureScript.Environment.NameVisibility),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            (Language.PureScript.Kinds.Kind,
             Language.PureScript.Environment.TypeKind),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
             Language.PureScript.Types.Type),
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName))
               (Data.Map.Internal.Map
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)
                  Language.PureScript.TypeClassDictionaries.NamedDict)),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            Language.PureScript.Environment.TypeClassData,
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [(Language.PureScript.AST.Declarations.Module,
                            Language.PureScript.Externs.ExternsFile)]) ->
                 Language.PureScript.Interactive.Types.$wgo
                   ww
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (Language.PureScript.Types.Type,
                         Language.PureScript.Environment.NameKind,
                         Language.PureScript.Environment.NameVisibility))
                   Language.PureScript.Environment.allPrimTypes
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                      @ (Language.PureScript.Environment.DataDeclType,
                         Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName,
                         Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]))
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ ([(Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                         Language.PureScript.Types.Type))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                      @ (Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
                              Language.PureScript.TypeClassDictionaries.NamedDict)))
                   Language.PureScript.Environment.allPrimClasses
                   Language.PureScript.Environment.allPrimKinds) -}
bbe66beb3be641e2ba0166b7a498957b
  data Command
    = Expression Language.PureScript.AST.Declarations.Expr
    | ShowHelp
    | Import Language.PureScript.Interactive.Types.ImportedModule
    | BrowseModule Language.PureScript.Names.ModuleName
    | QuitPSCi
    | ReloadState
    | ClearState
    | Decls [Language.PureScript.AST.Declarations.Declaration]
    | TypeOf Language.PureScript.AST.Declarations.Expr
    | KindOf Language.PureScript.Types.Type
    | ShowInfo Language.PureScript.Interactive.Types.ReplQuery
    | PasteLines
    | CompleteStr GHC.Base.String
    | ReloadVariableState Language.PureScript.AST.Declarations.Expr
6d04fdb5e26b466ffd22b01b64e3342d
  data Directive
    = Help
    | Quit
    | Reload
    | Clear
    | Browse
    | Type
    | Kind
    | Show
    | Paste
    | Complete
    | ReloadV
3f1b4508dee4fbba31a4a64cf09c98ba
  type ImportedModule =
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
41419e455c8d61ff11d56793d4f68c48
  newtype PSCiConfig
    = PSCiConfig {psciFileGlobs :: [GHC.Base.String]}
f802fa09b94f8d7be8d3d7d42508ed4f
  data PSCiState
    = PSCiState [Language.PureScript.Interactive.Types.ImportedModule]
                [Language.PureScript.AST.Declarations.Declaration]
                [(Language.PureScript.AST.Declarations.Module,
                  Language.PureScript.Externs.ExternsFile)]
                Language.PureScript.Sugar.Names.Env.Imports
                Language.PureScript.Sugar.Names.Env.Exports
4484fd29d895671a056057576a9a07ef
  data ReplQuery = QueryLoaded | QueryImport
a43dd1376bf837a7220312dcde88b9b3
  initialPSCiState :: Language.PureScript.Interactive.Types.PSCiState
  {- Strictness: m,
     Unfolding: (Language.PureScript.Interactive.Types.PSCiState
                   (GHC.Types.[]
                      @ Language.PureScript.Interactive.Types.ImportedModule)
                   (GHC.Types.[] @ Language.PureScript.AST.Declarations.Declaration)
                   (GHC.Types.[]
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Externs.ExternsFile))
                   Language.PureScript.Sugar.Names.Env.nullImports
                   Language.PureScript.Sugar.Names.Env.primExports) -}
5fc5f100d81eff2319a25228310423fa
  parseReplQuery ::
    GHC.Base.String
    -> GHC.Base.Maybe Language.PureScript.Interactive.Types.ReplQuery
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (ds :: GHC.Base.String) ->
                 case GHC.Base.eqString
                        ds
                        Language.PureScript.Interactive.Types.parseReplQuery5 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ds
                             Language.PureScript.Interactive.Types.parseReplQuery3 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing
                             @ Language.PureScript.Interactive.Types.ReplQuery
                        GHC.Types.True
                        -> Language.PureScript.Interactive.Types.parseReplQuery2 }
                   GHC.Types.True
                   -> Language.PureScript.Interactive.Types.parseReplQuery1 }) -}
7516bdbca771844acddbe92d0b322dff
  parseReplQuery1 ::
    GHC.Base.Maybe Language.PureScript.Interactive.Types.ReplQuery
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryImport) -}
5f203f4ab59476bdec4d50052bced9fb
  parseReplQuery2 ::
    GHC.Base.Maybe Language.PureScript.Interactive.Types.ReplQuery
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryLoaded) -}
76f7d456a2638d886ea4b3fa8f318708
  parseReplQuery3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.parseReplQuery4) -}
49daeed2e5b5bfecf34eca89cf727293
  parseReplQuery4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("loaded"#) -}
8517cc8d9d5baac910fb290da40cf14b
  parseReplQuery5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.parseReplQuery6) -}
dcdfb1134c9ca7c5be42861cd27dfb2f
  parseReplQuery6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("import"#) -}
a688d138fbb7c78a73eb16625b8cc41c
  psciEnvironment ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Environment.Environment
  {- Arity: 1, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ->
                 case Language.PureScript.Interactive.Types.$wpsciEnvironment
                        ww3 of ww6 { (#,,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Language.PureScript.Environment.Environment
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13 } }) -}
49de8076178644440a52845dfb56ea90
  psciExports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 ds3 ds4 x ->
                 x }) -}
41419e455c8d61ff11d56793d4f68c48
  psciFileGlobs ::
    Language.PureScript.Interactive.Types.PSCiConfig
    -> [GHC.Base.String]
  RecSel Left Language.PureScript.Interactive.Types.PSCiConfig
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.Types.psciFileGlobs1
                  `cast`
                (<Language.PureScript.Interactive.Types.PSCiConfig>_R
                 ->_R Language.PureScript.Interactive.Types.N:PSCiConfig[0]) -}
41419e455c8d61ff11d56793d4f68c48
  psciFileGlobs1 ::
    Language.PureScript.Interactive.Types.PSCiConfig
    -> Language.PureScript.Interactive.Types.PSCiConfig
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiConfig) ->
                 ds) -}
0adad9e249da2668eccac3a42f0de2d5
  psciImportedModuleNames ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.Names.ModuleName]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (st :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case st of wild { Language.PureScript.Interactive.Types.PSCiState x ds ds1 ds2 ds3 ->
                 GHC.Base.build
                   @ Language.PureScript.Names.ModuleName
                   (\ @ b1
                      (c :: Language.PureScript.Names.ModuleName -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.AST.Declarations.ImportDeclarationType,
                         GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                      @ b1
                      (GHC.Base.mapFB
                         @ Language.PureScript.Names.ModuleName
                         @ b1
                         @ (Language.PureScript.Names.ModuleName,
                            Language.PureScript.AST.Declarations.ImportDeclarationType,
                            GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                         c
                         Language.PureScript.Interactive.Types.psciImportedModuleNames1)
                      n
                      x) }) -}
80377d45d62304ef0261328ae459e973
  psciImportedModuleNames1 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.Declarations.ImportDeclarationType,
                           GHC.Base.Maybe Language.PureScript.Names.ModuleName)) ->
                 case ds of wild { (,,) mn ds1 ds2 -> mn }) -}
5289f97505947f7480177aa803abfb88
  psciImportedModules ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.Interactive.Types.ImportedModule]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState x ds1 ds2 ds3 ds4 ->
                 x }) -}
89b802f8a95122de853dd26c101509bd
  psciImports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 ds3 x ds4 ->
                 x }) -}
46ab95524e195448e830b5f2c5671ccb
  psciLetBindings ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 x ds2 ds3 ds4 ->
                 x }) -}
3e2267ddb1449aa03ec020531a8a9e91
  psciLoadedExterns ::
    Language.PureScript.Interactive.Types.PSCiState
    -> [(Language.PureScript.AST.Declarations.Module,
         Language.PureScript.Externs.ExternsFile)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState ds1 ds2 x ds3 ds4 ->
                 x }) -}
763d44e99c4db04000346335479c40b1
  replQueries :: [Language.PureScript.Interactive.Types.ReplQuery]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryLoaded
                   Language.PureScript.Interactive.Types.replQueries1) -}
1d486874971b68c2b1837d56d2f3df2a
  replQueries1 :: [Language.PureScript.Interactive.Types.ReplQuery]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   Language.PureScript.Interactive.Types.QueryImport
                   (GHC.Types.[]
                      @ Language.PureScript.Interactive.Types.ReplQuery)) -}
5e2085733802f5d9257bec4ae11aaa0e
  replQueryStrings :: [GHC.Base.String]
  {- Unfolding: (GHC.Base.map
                   @ Language.PureScript.Interactive.Types.ReplQuery
                   @ [GHC.Types.Char]
                   Language.PureScript.Interactive.Types.showReplQuery
                   Language.PureScript.Interactive.Types.replQueries) -}
3463f95633ec65d5979ebaf498d96b8e
  showReplQuery ::
    Language.PureScript.Interactive.Types.ReplQuery -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Interactive.Types.ReplQuery) ->
                 case ds of wild {
                   Language.PureScript.Interactive.Types.QueryLoaded
                   -> Language.PureScript.Interactive.Types.parseReplQuery3
                   Language.PureScript.Interactive.Types.QueryImport
                   -> Language.PureScript.Interactive.Types.parseReplQuery5 }) -}
02190740b8a4d82fa6f5538bff831cbc
  updateImportExports ::
    Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case w of ww { Language.PureScript.Interactive.Types.PSCiState ww1 ww2 ww3 ww4 ww5 ->
                 let {
                   r1 :: [Language.PureScript.AST.Declarations.Declaration]
                   = letrec {
                       go :: [(Language.PureScript.Names.ModuleName,
                               Language.PureScript.AST.Declarations.ImportDeclarationType,
                               GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                             -> [Language.PureScript.AST.Declarations.Declaration]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (ds :: [(Language.PureScript.Names.ModuleName,
                                    Language.PureScript.AST.Declarations.ImportDeclarationType,
                                    GHC.Base.Maybe Language.PureScript.Names.ModuleName)]) ->
                         case ds of wild {
                           [] -> ww2
                           : y ys
                           -> GHC.Types.:
                                @ Language.PureScript.AST.Declarations.Declaration
                                (case y of wild1 { (,,) mn declType asQ ->
                                 Language.PureScript.AST.Declarations.ImportDeclaration
                                   Language.PureScript.Interactive.Types.updateImportExports10
                                   mn
                                   declType
                                   asQ })
                                (go ys) }
                     } in
                     go
                       (GHC.Types.:
                          @ (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.ImportDeclarationType,
                             GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          Language.PureScript.Interactive.Types.updateImportExports6
                          ww1)
                 } in
                 let {
                   r2 :: Language.PureScript.AST.Declarations.Module
                   = Language.PureScript.AST.Declarations.Module
                       Language.PureScript.Interactive.Types.updateImportExports_internalSpan
                       (GHC.Types.[] @ Language.PureScript.Comments.Comment)
                       Language.PureScript.Interactive.Types.updateImportExports1
                         `cast`
                       (Sym (Language.PureScript.Names.N:ModuleName[0]))
                       r1
                       (GHC.Base.Nothing
                          @ [Language.PureScript.AST.Declarations.DeclarationRef])
                 } in
                 let {
                   r3 :: [Language.PureScript.AST.Declarations.Module]
                   = GHC.Types.:
                       @ Language.PureScript.AST.Declarations.Module
                       r2
                       (GHC.Types.[] @ Language.PureScript.AST.Declarations.Module)
                 } in
                 case (Language.PureScript.Sugar.Names.desugarImportsWithEnv
                         @ (Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 ((->) [Language.PureScript.AST.Declarations.Module])))
                         Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT
                         Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT
                         (GHC.Base.map
                            @ (Language.PureScript.AST.Declarations.Module,
                               Language.PureScript.Externs.ExternsFile)
                            @ Language.PureScript.Externs.ExternsFile
                            (Data.Tuple.snd
                               @ Language.PureScript.AST.Declarations.Module
                               @ Language.PureScript.Externs.ExternsFile)
                            ww3)
                         r3)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              ((->) [Language.PureScript.AST.Declarations.Module])>_R
                           <(Language.PureScript.Sugar.Names.Env.Env,
                             [Language.PureScript.AST.Declarations.Module])>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                     <(->)
                                                                                        [Language.PureScript.AST.Declarations.Module]>_R
                                                                                     <((Language.PureScript.Sugar.Names.Env.Env,
                                                                                        [Language.PureScript.AST.Declarations.Module]),
                                                                                       Language.PureScript.Errors.MultipleErrors)>_N)
                        r3 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Interactive.Types.PSCiState
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                   Data.Either.Right y
                   -> case y of wild1 { (,) x ds1 ->
                      case x of wild2 { (,) env ds ->
                      case Language.PureScript.Interactive.Types.$slookup_$spoly_go13
                             env
                             @~ (Sym (Language.PureScript.Names.N:ModuleName[0])) of wild3 {
                        GHC.Base.Nothing
                        -> Language.PureScript.Interactive.Types.PSCiState
                             ww1
                             ww2
                             ww3
                             ww4
                             ww5
                        GHC.Base.Just ds2
                        -> case ds2 of wild4 { (,,) ds3 is es ->
                           Language.PureScript.Interactive.Types.PSCiState
                             ww1
                             ww2
                             ww3
                             is
                             es } } } } } }) -}
aa5e2395dc7b6ba5085243816b9bd0a2
  updateImportExports1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Interactive.Types.updateImportExports2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
634ef0c6ad38c76958f9477b61500f07
  updateImportExports10 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     [Language.PureScript.Comments.Comment])
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Interactive.Types.updateImportExports_internalSpan,
                  GHC.Types.[] @ Language.PureScript.Comments.Comment)) -}
96c0f092bf41349f5293dabe44ec9088
  updateImportExports2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports3) -}
d2524344f88a9ec927f7ada558b0dc97
  updateImportExports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$PSCI"#) -}
fd604fad02ba8382a39842172d20a986
  updateImportExports4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports5) -}
5f8c26a3ce779085488f9a7ece6deadc
  updateImportExports5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<internal>"#) -}
63aa15e1b93b9d26d4482e23fa5761e1
  updateImportExports6 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Interactive.Types.updateImportExports7
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.AST.Declarations.Implicit,
                  GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)) -}
c282f1717b4f78a3d3a564cabbce6b6e
  updateImportExports7 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Interactive.Types.updateImportExports8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
1a3d1c00d09869dd398f4e01255c05c7
  updateImportExports8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Interactive.Types.updateImportExports9) -}
a7135eccf8b2fd5351334243004ae424
  updateImportExports9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
941ffadf0580da8dfac49a6268680a8f
  updateImportExports_internalSpan ::
    Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Interactive.Types.updateImportExports4
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
b6bb88dfe20b799585c531431a2c15c8
  updateImportedModules ::
    ([Language.PureScript.Interactive.Types.ImportedModule]
     -> [Language.PureScript.Interactive.Types.ImportedModule])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [Language.PureScript.Interactive.Types.ImportedModule]
                           -> [Language.PureScript.Interactive.Types.ImportedModule])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState x a b c d ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      (f10 x)
                      a
                      b
                      c
                      d) }) -}
3c15e42143916163f9fe3813579781ee
  updateLets ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [Language.PureScript.AST.Declarations.Declaration]
                           -> [Language.PureScript.AST.Declarations.Declaration])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState a x b c d ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      a
                      (f10 x)
                      b
                      c
                      d) }) -}
679f29e7353ca0632fecdeb8ee60ea47
  updateLoadedExterns ::
    ([(Language.PureScript.AST.Declarations.Module,
       Language.PureScript.Externs.ExternsFile)]
     -> [(Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Externs.ExternsFile)])
    -> Language.PureScript.Interactive.Types.PSCiState
    -> Language.PureScript.Interactive.Types.PSCiState
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: [(Language.PureScript.AST.Declarations.Module,
                             Language.PureScript.Externs.ExternsFile)]
                           -> [(Language.PureScript.AST.Declarations.Module,
                                Language.PureScript.Externs.ExternsFile)])
                   (ds :: Language.PureScript.Interactive.Types.PSCiState) ->
                 case ds of wild { Language.PureScript.Interactive.Types.PSCiState a b x c d ->
                 Language.PureScript.Interactive.Types.updateImportExports
                   (Language.PureScript.Interactive.Types.PSCiState
                      a
                      b
                      (f10 x)
                      c
                      d) }) -}
instance GHC.Classes.Eq [Language.PureScript.Interactive.Types.Directive]
  = Language.PureScript.Interactive.Types.$fEqDirective
instance GHC.Classes.Eq [Language.PureScript.Interactive.Types.ReplQuery]
  = Language.PureScript.Interactive.Types.$fEqReplQuery
instance GHC.Show.Show [Language.PureScript.Interactive.Types.Command]
  = Language.PureScript.Interactive.Types.$fShowCommand
instance GHC.Show.Show [Language.PureScript.Interactive.Types.Directive]
  = Language.PureScript.Interactive.Types.$fShowDirective
instance GHC.Show.Show [Language.PureScript.Interactive.Types.PSCiConfig]
  = Language.PureScript.Interactive.Types.$fShowPSCiConfig
instance GHC.Show.Show [Language.PureScript.Interactive.Types.PSCiState]
  = Language.PureScript.Interactive.Types.$fShowPSCiState
instance GHC.Show.Show [Language.PureScript.Interactive.Types.ReplQuery]
  = Language.PureScript.Interactive.Types.$fShowReplQuery
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT @ ((->)
                                                                     [Module]) _" [orphan] forall @ e
                                                                                                                                                                           (v1 :: GHC.Base.Monad
                                                                                                                                                                                    ((->)
                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                           (v :: GHC.Base.Functor
                                                                                                                                                                                   ((->)
                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT @ ((->)
                                                       [Language.PureScript.AST.Declarations.Module])
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT_$c*> @ ((->)
                                                                          [Module]) _" [orphan] forall @ e
                                                                                                                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                     ((->)
                                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ ((->)
                                                            [Language.PureScript.AST.Declarations.Module])
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeExceptT_$cpure @ ((->)
                                                                            [Module]) _" [orphan] forall @ e
                                                                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                       ((->)
                                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module]))
                                                                                                                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                         ((->)
                                                                                                                                                                                                            [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ ((->)
                                                              [Language.PureScript.AST.Declarations.Module])
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT @ MultipleErrors @ (ExceptT
                                                                                      MultipleErrors
                                                                                      ((->)
                                                                                         [Module]))" [orphan] forall (v1 :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                               ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                  [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                   (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT @ Language.PureScript.Errors.MultipleErrors
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Errors.MultipleErrors
                                                              ((->)
                                                                 [Language.PureScript.AST.Declarations.Module]))
                                                         v
                                                         v1
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$c<* @ MultipleErrors @ (ExceptT
                                                                                           MultipleErrors
                                                                                           ((->)
                                                                                              [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                              ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<* @ Language.PureScript.Errors.MultipleErrors
                                                              @ (Control.Monad.Trans.Except.ExceptT
                                                                   Language.PureScript.Errors.MultipleErrors
                                                                   ((->)
                                                                      [Language.PureScript.AST.Declarations.Module]))
                                                              $dMonoid
                                                              $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$c<*
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$c<*> @ MultipleErrors @ (ExceptT
                                                                                            MultipleErrors
                                                                                            ((->)
                                                                                               [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                           ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ Language.PureScript.Errors.MultipleErrors
                                                               @ (Control.Monad.Trans.Except.ExceptT
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    ((->)
                                                                       [Language.PureScript.AST.Declarations.Module]))
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Interactive.Types $fApplicativeWriterT_$cpure @ MultipleErrors @ (ExceptT
                                                                                             MultipleErrors
                                                                                             ((->)
                                                                                                [Module]))" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ Language.PureScript.Errors.MultipleErrors
                                                                @ (Control.Monad.Trans.Except.ExceptT
                                                                     Language.PureScript.Errors.MultipleErrors
                                                                     ((->)
                                                                        [Language.PureScript.AST.Declarations.Module]))
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Interactive.Types $fFunctorExceptT @ ((->)
                                                                 [Module]) _" [orphan] forall @ e
                                                                                                                                                                   (v :: GHC.Base.Functor
                                                                                                                                                                           ((->)
                                                                                                                                                                              [Language.PureScript.AST.Declarations.Module]))
  Control.Monad.Trans.Except.$fFunctorExceptT @ ((->)
                                                   [Language.PureScript.AST.Declarations.Module])
                                              @ e
                                              v
  = Language.PureScript.Interactive.Types.$s$fApplicativeExceptT_$s$fFunctorExceptT
      @ e
"SPEC/Language.PureScript.Interactive.Types $fFunctorWriterT @ (ExceptT
                                                                 MultipleErrors ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                                            (v :: GHC.Base.Functor
                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                       ((->)
                                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT @ (Control.Monad.Trans.Except.ExceptT
                                                          Language.PureScript.Errors.MultipleErrors
                                                          ((->)
                                                             [Language.PureScript.AST.Declarations.Module]))
                                                     @ w
                                                     v
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT
      @ w
"SPEC/Language.PureScript.Interactive.Types $fFunctorWriterT_$cfmap @ (ExceptT
                                                                        MultipleErrors
                                                                        ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                                                                                                                                  ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                     ((->)
                                                                                                                                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 ((->)
                                                                    [Language.PureScript.AST.Declarations.Module]))
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Interactive.Types.$s$fApplicativeWriterT_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Interactive.Types $fMonadErroreWriterT @ MultipleErrors @ MultipleErrors @ (ExceptT
                                                                                                       MultipleErrors
                                                                                                       ((->)
                                                                                                          [Module]))" [orphan] forall (v1 :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Error.Class.$fMonadErroreWriterT @ Language.PureScript.Errors.MultipleErrors
                                                 @ Language.PureScript.Errors.MultipleErrors
                                                 @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      ((->)
                                                         [Language.PureScript.AST.Declarations.Module]))
                                                 v
                                                 v1
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT @ MultipleErrors @ (ExceptT
                                                                                MultipleErrors
                                                                                ((->) [Module]))" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                    ((->)
                                                                                                                                                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                        (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        ((->)
                                                           [Language.PureScript.AST.Declarations.Module]))
                                                   v
                                                   v1
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$c>> @ MultipleErrors @ (ExceptT
                                                                                     MultipleErrors
                                                                                     ((->)
                                                                                        [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                   [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ Language.PureScript.Errors.MultipleErrors
                                                        @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             ((->)
                                                                [Language.PureScript.AST.Declarations.Module]))
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$c>>= @ MultipleErrors @ (ExceptT
                                                                                      MultipleErrors
                                                                                      ((->)
                                                                                         [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                    ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                       [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                   ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ Language.PureScript.Errors.MultipleErrors
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Errors.MultipleErrors
                                                              ((->)
                                                                 [Language.PureScript.AST.Declarations.Module]))
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterT_$cfail @ MultipleErrors @ (ExceptT
                                                                                       MultipleErrors
                                                                                       ((->)
                                                                                          [Module]))" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                        ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                           [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ Language.PureScript.Errors.MultipleErrors
                                                          @ (Control.Monad.Trans.Except.ExceptT
                                                               Language.PureScript.Errors.MultipleErrors
                                                               ((->)
                                                                  [Language.PureScript.AST.Declarations.Module]))
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadErroreWriterT_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Interactive.Types $fMonadWriterwWriterT @ MultipleErrors @ (ExceptT
                                                                                       MultipleErrors
                                                                                       ((->)
                                                                                          [Module]))" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                                   ((->)
                                                                                                                                                                                                                                                                                                                                                                                                                                      [Language.PureScript.AST.Declarations.Module])))
                                                                                                                                                                                                                                                                                                                                                                                                                       (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Writer.Class.$fMonadWriterwWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        ((->)
                                                           [Language.PureScript.AST.Declarations.Module]))
                                                   v
                                                   v1
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT
"SPEC/Language.PureScript.Interactive.Types listen @ (ExceptT
                                                       MultipleErrors ((->) [Module])) _ _" [orphan] forall @ w
                                                                                                                                                                          @ a
                                                                                                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                        (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                           ((->)
                                                                                                                                                                                              [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.listen @ (Control.Monad.Trans.Except.ExceptT
                                                Language.PureScript.Errors.MultipleErrors
                                                ((->)
                                                   [Language.PureScript.AST.Declarations.Module]))
                                           @ w
                                           @ a
                                           $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$slisten
      @ w
      @ a
"SPEC/Language.PureScript.Interactive.Types pass @ (ExceptT
                                                     MultipleErrors ((->) [Module])) _ _" [orphan] forall @ w
                                                                                                                                                                      @ a
                                                                                                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                       ((->)
                                                                                                                                                                                          [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.pass @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              ((->) [Language.PureScript.AST.Declarations.Module]))
                                         @ w
                                         @ a
                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$spass
      @ w
      @ a
"SPEC/Language.PureScript.Interactive.Types tell @ (ExceptT
                                                     MultipleErrors ((->) [Module])) _" [orphan] forall @ w
                                                                                                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                     ((->)
                                                                                                                                                                                        [Language.PureScript.AST.Declarations.Module])))
  Control.Monad.Trans.Writer.Strict.tell @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              ((->) [Language.PureScript.AST.Declarations.Module]))
                                         @ w
                                         $dMonad
  = Language.PureScript.Interactive.Types.$s$fMonadWriterwWriterT_$stell
      @ w
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

