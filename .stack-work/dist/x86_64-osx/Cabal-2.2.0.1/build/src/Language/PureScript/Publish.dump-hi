
==================== FINAL INTERFACE ====================
2019-01-24 14:18:02.200022 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Publish 8043
  interface hash: b23835b39ceeef304d6e2c51e66c85d5
  ABI hash: 24eef4f0715eeea40e24f1da97ef1fa4
  export-list hash: f55033c1638aa606c9941cfbdaba41d3
  orphan hash: 7b478a5e07ffd2de60efea72e74f7920
  flag hash: a40e7d965651c14c9306a25622d2600d
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Publish.checkCleanWorkingTree
  Language.PureScript.Publish.defaultPublishOptions
  Language.PureScript.Publish.getGitWorkingTreeStatus
  Language.PureScript.Publish.getManifestRepositoryInfo
  Language.PureScript.Publish.getModules
  Language.PureScript.Publish.getResolvedDependencies
  Language.PureScript.Publish.getVersionFromGitTag
  Language.PureScript.Publish.internalError
  Language.PureScript.Publish.otherError
  Language.PureScript.Publish.preparePackage
  Language.PureScript.Publish.preparePackage'
  Language.PureScript.Publish.runPrepareM
  Language.PureScript.Publish.unsafePreparePackage
  Language.PureScript.Publish.userError
  Language.PureScript.Publish.warn
  Language.PureScript.Publish.PrepareM
  Language.PureScript.Publish.PublishOptions{Language.PureScript.Publish.PublishOptions publishGetTagTime publishGetVersion publishWorkingTreeDirty}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs
                     Language.PureScript.Docs.Convert
                     Language.PureScript.Docs.Convert.ReExports
                     Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.Css
                     Language.PureScript.Docs.ParseInPackage
                     Language.PureScript.Docs.Prim Language.PureScript.Docs.Render
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Tags Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Publish.ErrorsWarnings
                     Language.PureScript.Publish.Utils Language.PureScript.Renamer
                     Language.PureScript.Sugar Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: Cabal-2.2.0.1 Glob-0.9.2 aeson-1.3.1.1
                      aeson-better-errors-0.9.1.0 ansi-terminal-0.8.0.4 array-0.5.2.0
                      async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4
                      binary-0.8.5.1 blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 file-embed-0.0.10.1 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 process-1.6.3.0 protolude-0.2.2
                      random-1.1 safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: colour-2.3.4:Data.Colour syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Cabal-2.2.0.1:Distribution.CabalSpecVersion
                         Cabal-2.2.0.1:Distribution.Compat.Semigroup
                         Cabal-2.2.0.1:Distribution.Parsec.Common
                         Cabal-2.2.0.1:Distribution.SPDX.License
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseExceptionId
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseExpression
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseId
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseReference
                         aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Cabal-2.2.0.1:Distribution.Parsec.Class 4cb4f0dc5e9a58183e1a5663d9d149fc
import  -/  Cabal-2.2.0.1:Distribution.SPDX 56185959f6af55bc8c414cb16e9ca674
import  -/  Cabal-2.2.0.1:Distribution.SPDX.License 08564fbea48930f4be7ee6668d296553
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors ff0e80615ece0f0dd064c946f929132c
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors.Internal 066898b2dd92d5d1cfd1d0f21692c75d
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta 762fc9d54b3452d3ab89a9561af46cd3
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal 2e82adc50425e6a0d9ef6a12e29999f7
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  process-1.6.3.0:System.Process 17a215e760465e01e09a5bb6ca1a6adb
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.Bool cdac0e1e4ccf4064999c851029bcfcb2
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
  version 340cbf275db4649c75aa4914e549ba5b
import  -/  Language.PureScript.Docs 1cb55721db11cb5667401ecaaa3dbc11
  exports: 9dd7a3ec2e4b78711241ba5e1c5c9b02
import  -/  Language.PureScript.Docs.Convert 18435db02a56362a919e921e545058eb
  convertModulesInPackage 1e1dbbcdc5fa4fe8184128d2e86bb4b5
import  -/  Language.PureScript.Docs.ParseInPackage 19b78e5cc34d77ef5bb8b4cbb355de33
  parseFilesInPackages b98090b1668530fcc0b454f06e76a28b
import  -/  Language.PureScript.Docs.Types 8ff7c3b28d1548ecbdf2d5a573cc163d
  GithubRepo 2979b079ffe960be39c7b87b1a349f20
  GithubRepo fa1efe58f4e6215e05effe0c7820d641
  GithubUser c807f1ff148c576f230cf230fc9f5636
  GithubUser 614d849a4354c290b33f6ef62142889d
  ManifestError 5e79e380ec99b3359162843125394c03
  Module cce819b6566f028d040fc57bb265fd8d
  NotYetKnown a74c301f2c4a7755cec3c9f930e78650
  Package 86804c3b253f5cbc387d036d60ca82f5
  UploadedPackage 5b6080dbdff0f21912cb417b68e5d249
  parseVersion' 40ff81d59b28800db08807063f09e503
  pkgCompilerVersion fa1efe58f4e6215e05effe0c7820d641
  pkgGithub fa1efe58f4e6215e05effe0c7820d641
  pkgMeta fa1efe58f4e6215e05effe0c7820d641
  pkgModuleMap fa1efe58f4e6215e05effe0c7820d641
  pkgModules fa1efe58f4e6215e05effe0c7820d641
  pkgResolvedDependencies fa1efe58f4e6215e05effe0c7820d641
  pkgTagTime fa1efe58f4e6215e05effe0c7820d641
  pkgUploader fa1efe58f4e6215e05effe0c7820d641
  pkgVersion fa1efe58f4e6215e05effe0c7820d641
  pkgVersionTag fa1efe58f4e6215e05effe0c7820d641
  runGithubRepo fa1efe58f4e6215e05effe0c7820d641
  runGithubUser 614d849a4354c290b33f6ef62142889d
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
import  -/  Language.PureScript.Publish.ErrorsWarnings 7d546205d690a0da40e24149d14f7d25
  exports: 7579dc41fced80fecb7e0315ed8178db
  AmbiguousVersions 2839a8aa012d64e1c57b7eea364f9f1b
  BadRepositoryField c06fc2be5571e08f1920111ad39eafe5
  BadRepositoryType d2c764b1576955a1c6e4bd30f0081249
  CompileError 790d05f67199690c4d8c9aebb7323e06
  CouldntDecodePackageManifest b81ceea44f111871c1760f0e792c601e
  CouldntParseGitTagDate 6e23d540bca8aacde41b54a894de6f52
  DirtyWorkingTree e7b58ffc227004e48e85bd5a0de05042
  FromResolutions e7779b02296bc96bffc9cf6f555cba48
  IOExceptionThrown fc03c09f6209f5016ba372ae38c0d1f9
  InternalError 07c1815e7027aa5623d1fc98141b1568
  InternalError 5e973a545718f4f3981022f329c601b7
  InvalidLicense 494734322518691a43f1b09fe959a58c
  JSONError 323910159c3e84520b8810d1ef8d3b6d
  MissingDependencies fcde04e784235ee6931ada1ea50faf97
  MissingPath 0f80699405fd044c64e056795664c521
  NoLicenseSpecified 0e812aede1ca1a536de4e2cd4857e48d
  NoResolvedVersion 0084ddf6ea87d7485888adb72dd74b30
  NotOnGithub fd4c01eef65c96c2f06e03f0a9a6eeb0
  OtherError 929da6a8460ecefc0bf98e5f56e19025
  OtherError bad63923c98c3a650ad6daa5516c3f32
  PackageError 4e47d9cd49beef62ae325c7b8025d205
  PackageManifestNotFound b26e39040aa7d2fcfe05d1e8f8181449
  PackageWarning de5a6964f55844f07dde0054868445de
  ProcessFailed d376ae58df367344e007d1817963d096
  RepositoryFieldMissing 01bd055f4dc51ad530f8d360047981b7
  ResolutionsFileNotFound 61a5341ec178f6a9ace9f12550d85b85
  TagMustBeCheckedOut d5f53aa3ed8ab08c1466dc5e66cf3ed8
  UnacceptableVersion a830be6827f433292b94fc919452220e
  UndeclaredDependency 204894f07358f5c7283ccc5325d42c43
  UserError e3e30c1628b98be70d7538019f5bd7fb
  UserError d0118f6600c2f7f43b51a8353e7ee66e
  printError 735ca3147c4b455e4c7351e72c979f5a
  printWarnings e055a2eff3c4b003f5242b4151e19240
import  -/  Language.PureScript.Publish.Utils 927c7d9f809ab54101990815b0e76c4f
  exports: 62f591754b5a1c888f385d45697c6bc0
  globRelative 47d182ff568212003b71d1cd271c2851
  purescriptSourceFiles 55e4e1637c0a0cf0a8bc440341435dcc
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  time-1.8.0.2:Data.Time.Clock 38823c785626821df1f9ec84dba1c4d7
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime 509e80f9ead2e875ca9536acb5e422cc
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 99d43d3f2db488fcbee82dc4781c8d1c
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fApplicativePrepareM ::
    GHC.Base.Applicative Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fFunctorPrepareM
                  Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$cpure
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)
                  Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$c<*>
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a -> b>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  (\ @ a @ b @ c ->
                   Language.PureScript.Publish.$fApplicativePrepareM3 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (c,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(c,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <c>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <c>_N)))
                  (\ @ a @ b ->
                   Language.PureScript.Publish.$fApplicativePrepareM2 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(b,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <b>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)))
                  Language.PureScript.Publish.$fApplicativePrepareM1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
56688792b00807d9b75840e250a32143
  $fApplicativePrepareM1 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x -> ds1
                   Data.Either.Right y
                   -> case eta1
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (a1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
f683eec4afc25f7a3fe001dae5eeae09
  $fApplicativePrepareM2 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x #)
                   Data.Either.Right y
                   -> case eta1
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> ds2
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (b1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
131acc99164f8e3d4746abd366ee3bd5
  $fApplicativePrepareM3 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ c
                   @ b
                   @ a
                   (eta :: a -> b -> c)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              a)
                   (eta2 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x #)
                   Data.Either.Right y
                   -> case eta2
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (eta a1 b1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
f2b795d0c33595ef37b68e9fc0368b7a
  $fApplicativePrepareM_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                               GHC.Types.IO)
                            (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO)
                           a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ GHC.Types.IO
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case f1
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO>_R
                              <a -> b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                <GHC.Types.IO>_R
                                                <(a -> b,
                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                        <Data.Either.Either
                                                                                                                           Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                           (a
                                                                                                                            -> b,
                                                                                                                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                              x
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                              (\ (ds2 :: (a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])) ->
                               case y of wild1 { (,) a1 w10 ->
                               case ds2 of wild2 { (,) b1 w' ->
                               (a1 b1,
                                GHC.Base.augment
                                  @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                  (\ @ b2
                                     (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                           -> b2 -> b2)[OneShot]
                                     (n :: b2)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                     @ b2
                                     c
                                     n
                                     w10)
                                  w') } }) } #) })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                                                                                                   -> (b,
                                                                                                                       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N))
                   v `cast`
                   (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                        <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                        <Control.Monad.Trans.Except.ExceptT
                           Language.PureScript.Publish.ErrorsWarnings.PackageError
                           GHC.Types.IO>_R
                        <a>_N))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                            GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  GHC.Types.IO>_R
                               <b>_N)) -}
b7f0c3febbc03dd969c27b2ba1b6abbf
  $fApplicativePrepareM_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (a1,
                       GHC.Types.[]
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <a>_N))) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus ::
    GHC.Enum.Enum Language.PureScript.Publish.TreeStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEnumTreeStatus_$csucc
                  Language.PureScript.Publish.$fEnumTreeStatus_$cpred
                  Language.PureScript.Publish.$fEnumTreeStatus_$ctoEnum
                  Language.PureScript.Publish.$fEnumTreeStatus_$cfromEnum
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFrom
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromThen
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromTo
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromThenTo -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus1 :: [Language.PureScript.Publish.TreeStatus]
  {- Unfolding: (Language.PureScript.Publish.$fEnumTreeStatus_go2
                   1#) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus2 :: [Language.PureScript.Publish.TreeStatus]
  {- Unfolding: (Language.PureScript.Publish.$fEnumTreeStatus_go2
                   0#) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus3 :: Language.PureScript.Publish.TreeStatus
  {- Strictness: x -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus4 :: Language.PureScript.Publish.TreeStatus
  {- Strictness: x -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cenumFrom ::
    Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fEnumTreeStatus2
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fEnumTreeStatus1 }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cenumFromThen ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cenumFromThenTo ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cenumFromTo ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 let {
                   $j2 :: GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Language.PureScript.Publish.Clean
                       -> case GHC.Prim.># x1 0# of lwild {
                            DEFAULT -> Language.PureScript.Publish.$fEnumTreeStatus_go1 x1
                            1# -> GHC.Types.[] @ Language.PureScript.Publish.TreeStatus }
                       Language.PureScript.Publish.Dirty
                       -> case GHC.Prim.># x1 1# of lwild {
                            DEFAULT -> Language.PureScript.Publish.$fEnumTreeStatus_go x1
                            1# -> GHC.Types.[] @ Language.PureScript.Publish.TreeStatus } }
                 } in
                 case x of wild {
                   Language.PureScript.Publish.Clean -> $j2 0#
                   Language.PureScript.Publish.Dirty -> $j2 1# }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cfromEnum ::
    Language.PureScript.Publish.TreeStatus -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean -> GHC.Types.I# 0#
                   Language.PureScript.Publish.Dirty -> GHC.Types.I# 1# }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$cpred ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fEnumTreeStatus3
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.Clean }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$csucc ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.Dirty
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fEnumTreeStatus4 }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_$ctoEnum ::
    GHC.Types.Int -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Publish.$w$ctoEnum ww1 }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_go ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <L,U>m2 -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_go1 ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <L,U>m2 -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEnumTreeStatus_go2 ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fEqDependencyStatus ::
    GHC.Classes.Eq Language.PureScript.Publish.DependencyStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.DependencyStatus
                  Language.PureScript.Publish.$fEqDependencyStatus_$c==
                  Language.PureScript.Publish.$fEqDependencyStatus_$c/= -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fEqDependencyStatus_$c/= ::
    Language.PureScript.Publish.DependencyStatus
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Publish.DependencyStatus)
                   (y :: Language.PureScript.Publish.DependencyStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Missing
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.Missing -> GHC.Types.False }
                   Language.PureScript.Publish.NoResolution
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.NoResolution -> GHC.Types.False }
                   Language.PureScript.Publish.ResolvedOther a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.ResolvedOther b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Publish.ResolvedVersion a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.ResolvedVersion b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fEqDependencyStatus_$c== ::
    Language.PureScript.Publish.DependencyStatus
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Language.PureScript.Publish.DependencyStatus)
                   (ds2 :: Language.PureScript.Publish.DependencyStatus) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Missing
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.Missing -> GHC.Types.True }
                   Language.PureScript.Publish.NoResolution
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.NoResolution -> GHC.Types.True }
                   Language.PureScript.Publish.ResolvedOther a1
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.ResolvedOther b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Publish.ResolvedVersion a1
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.ResolvedVersion b1
                        -> Data.Text.$fEqText_$c== a1 b1 } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEqTreeStatus ::
    GHC.Classes.Eq Language.PureScript.Publish.TreeStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEqTreeStatus_$c==
                  Language.PureScript.Publish.$fEqTreeStatus_$c/= -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEqTreeStatus_$c/= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Clean
                   -> case y of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True }
                   Language.PureScript.Publish.Dirty
                   -> case y of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fEqTreeStatus_$c== ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: Language.PureScript.Publish.TreeStatus)
                   (ds2 :: Language.PureScript.Publish.TreeStatus) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Clean
                   -> case ds2 of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case ds2 of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True } }) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fFunctorPrepareM ::
    GHC.Base.Functor Language.PureScript.Publish.PrepareM
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  (Language.PureScript.Publish.$fFunctorPrepareM_$s$fFunctorWriterT_$cfmap
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fFunctorPrepareM1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
3e86da2de5418c0314dd7bec17b7fa2b
  $fFunctorPrepareM1 ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (x :: a)
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(b,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (b,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (case y of wild1 { (,) a1 w10 -> (x, w10) }) } #) }) -}
06fef81285a3a229e0a8cef8a5d43937
  $fFunctorPrepareM_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f1 :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        GHC.Types.IO)
                   @ a
                   @ w
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        GHC.Types.IO)
                   @ b
                   @ w
                   (\ (x :: GHC.Types.IO
                              (Data.Either.Either
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError (a, w)))
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case x `cast`
                         (GHC.Types.N:IO[0]
                              <Data.Either.Either
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError (a, w)>_R)
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x1
                         -> Data.Either.Left
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ (b, w)
                              x1
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ (b, w)
                              (case y of wild1 { (,) a1 w10 -> (f1 a1, w10) }) } #) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                             <GHC.Types.IO>_R
                             <(a, w)>_N)
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     (b, w)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                           <GHC.Types.IO>_R
                                                           <(b, w)>_N))) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fMonadErrorPrepareM ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadErrorPrepareM2
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Publish.ErrorsWarnings.PackageError>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  Language.PureScript.Publish.$fMonadErrorPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R (<Language.PureScript.Publish.ErrorsWarnings.PackageError>_R
                         ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
607d5ee24bce2ac5d02fcc6e147204fd
  $fMonadErrorPrepareM1 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> (Language.PureScript.Publish.ErrorsWarnings.PackageError
        -> Control.Monad.Trans.Writer.Strict.WriterT
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Publish.ErrorsWarnings.PackageError
                GHC.Types.IO)
             a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Language.PureScript.Publish.ErrorsWarnings.PackageError
                            -> Control.Monad.Trans.Writer.Strict.WriterT
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                 (Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    GHC.Types.IO)
                                 a)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (eta1 l)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        ipv
                   Data.Either.Right r
                   -> (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           r #) } }) -}
a217ea7c526ddf8a519e3c92c9277539
  $fMonadErrorPrepareM2 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (eta :: Language.PureScript.Publish.ErrorsWarnings.PackageError)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      eta #)) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fMonadIOPrepareM ::
    Control.Monad.IO.Class.MonadIO Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadIOPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
b0806c0e47bda89eb5b1ea461b0df702
  $fMonadIOPrepareM1 ::
    GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ @ a
                   (act :: GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException a)
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case act `cast` (GHC.Types.N:IO[0] <a>_R)
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv,
                            Data.Either.Right @ GHC.IO.Exception.IOException @ a ipv1 #) })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2 @ a)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (y,
                            GHC.Types.[]
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } }) -}
ec2416164e9a12131ec0a51dc6a854f6
  $fMonadIOPrepareM2 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException a #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ @ a
                   (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e2
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case GHC.IO.Exception.$fExceptionIOException4 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException a)
                        wild
                        eta1
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (Data.Either.Either GHC.IO.Exception.IOException a)
                             wild
                             eta1
                        1#
                        -> (# eta1,
                              Data.Either.Left
                                @ GHC.IO.Exception.IOException
                                @ a
                                e3
                                  `cast`
                                (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } } } } }) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fMonadPrepareM ::
    GHC.Base.Monad Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fApplicativePrepareM
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>=
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R (<a>_R
                         ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fMonadPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$cfail
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N) -}
c7607dfd814f037c1897b24a63f91e1b
  $fMonadPrepareM1 ::
    a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (a1,
                       GHC.Types.[]
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)) -}
603cbc79fb8d40cf6b9a76da35c08635
  $fMonadPrepareM_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO)
                           b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case k `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (b1,
                                 GHC.Base.augment
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                   (\ @ b2
                                      (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                            -> b2 -> b2)[OneShot]
                                      (n :: b2)[OneShot] ->
                                    GHC.Base.foldr
                                      @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                      @ b2
                                      c
                                      n
                                      w10)
                                   w') #) } } } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                            GHC.Types.IO)
                         b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (b,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(b,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <b>_N))) -}
59af1ea0c0488f2e37bb272aaf3e8510
  $fMonadPrepareM_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Publish.ErrorsWarnings.PackageError
                GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case (k a1)
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (b1,
                                 GHC.Base.augment
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                   (\ @ b2
                                      (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                            -> b2 -> b2)[OneShot]
                                      (n :: b2)[OneShot] ->
                                    GHC.Base.foldr
                                      @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                      @ b2
                                      c
                                      n
                                      w10)
                                   w') #) } } } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                               GHC.Types.IO)
                            b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (b,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(b,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <b>_N))) -}
91d6a7bbbf042e94048f92d583c1149d
  $fMonadPrepareM_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Magic.noinline
                   @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a1 :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                   @ (Data.Either.Either
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                               <GHC.Types.IO>_R
                               <(a,
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N)) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  $fMonadWriterPrepareM ::
    Control.Monad.Writer.Class.MonadWriter
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                  @ Language.PureScript.Publish.PrepareM
                  (GHC.Base.$fMonoid[]
                     @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadWriterPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <(a,
                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$stell
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (<[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N)
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$slisten
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <(a,
                                                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N)
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$spass
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <(a,
                                                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                                     -> [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N) -}
32d71c57e5deec76b8eb6f39f3ce0f5a
  $fMonadWriterPrepareM1 ::
    (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: (a,
                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      x #)) -}
845e090057fa825157760e8665ed3b34
  $fMonadWriterPrepareM_$slisten ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         (a, w)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             w
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a, w)>_N ; GHC.Types.N:IO[0]
                                                         <Data.Either.Either
                                                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                            (a, w)>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((a, w), w)
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((a, w), w)
                           ((a1, w10), w10) #) } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((a, w), w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                              <GHC.Types.IO>_R
                                                              <((a, w),
                                                                w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                  <w>_N
                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                     GHC.Types.IO>_R
                                                                                  <(a, w)>_N))) -}
3961ec0dbd2a803b35e1214714de999d
  $fMonadWriterPrepareM_$spass ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      (a, w -> w)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             w
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             (a, w -> w))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <(a, w -> w)>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                  <GHC.Types.IO>_R
                                                  <((a, w -> w), w)>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                ((a, w -> w),
                                                                                 w)>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, w)
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) ds2 w10 ->
                      case ds2 of wild2 { (,) a1 f1 ->
                      (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, w)
                           (a1, f1 w10) #) } } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    (a, w -> w)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a, w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                         <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                         <GHC.Types.IO>_R
                                                         <(a,
                                                           w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                             <w>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                GHC.Types.IO>_R
                                                                             <a>_N))) -}
f613c1e27de9ad6fbd75f1f78d24da84
  $fMonadWriterPrepareM_$stell ::
    w
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w (w10 :: w) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), w)
                      (GHC.Tuple.(), w10) #))
                  `cast`
                (forall (w :: <*>_N).
                 <w>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((), w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                          <GHC.Types.IO>_R
                                                          <((),
                                                            w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                              <w>_N
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                 GHC.Types.IO>_R
                                                                              <()>_N))) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus ::
    GHC.Classes.Ord Language.PureScript.Publish.TreeStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEqTreeStatus
                  Language.PureScript.Publish.$fOrdTreeStatus_$ccompare
                  Language.PureScript.Publish.$fOrdTreeStatus_$c<
                  Language.PureScript.Publish.$fOrdTreeStatus_$c<=
                  Language.PureScript.Publish.$fOrdTreeStatus_$c>
                  Language.PureScript.Publish.$fOrdTreeStatus_$c>=
                  Language.PureScript.Publish.$fOrdTreeStatus_$cmax
                  Language.PureScript.Publish.$fOrdTreeStatus_$cmin -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$c< ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$c<= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case b of wild {
                   Language.PureScript.Publish.Clean
                   -> case a of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$c> ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 Language.PureScript.Publish.$fOrdTreeStatus_$c< b a) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$c>= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$ccompare ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.EQ
                        Language.PureScript.Publish.Dirty -> GHC.Types.LT }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.GT
                        Language.PureScript.Publish.Dirty -> GHC.Types.EQ } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$cmax ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case y of wild {
                   Language.PureScript.Publish.Clean -> x
                   Language.PureScript.Publish.Dirty
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Publish.Dirty } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fOrdTreeStatus_$cmin ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case y of wild {
                   Language.PureScript.Publish.Clean
                   -> case x of wild1 { DEFAULT -> Language.PureScript.Publish.Clean }
                   Language.PureScript.Publish.Dirty -> x }) -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fShowDependencyStatus ::
    GHC.Show.Show Language.PureScript.Publish.DependencyStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.DependencyStatus
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshowsPrec
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshow
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshowList -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fShowDependencyStatus1 ::
    Language.PureScript.Publish.DependencyStatus -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Publish.$fShowDependencyStatus_$cshowsPrec
                   Language.PureScript.Publish.$fShowDependencyStatus2) -}
0821301f3f610b5a8f15e6f1a3cce09e
  $fShowDependencyStatus2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8cdce858ea521cbcd38780df39e87aa2
  $fShowDependencyStatus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ResolvedVersion "#) -}
660b3565ec3bac3ee90f3508409f7f9e
  $fShowDependencyStatus4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ResolvedOther "#) -}
ef59c5b92d4078d969a7b6a39cbd91e7
  $fShowDependencyStatus5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowDependencyStatus6) -}
4fd9a71623a2ded74728377714f9177c
  $fShowDependencyStatus6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoResolution"#) -}
82b1cfc6b544b62fa0f61150a9af0065
  $fShowDependencyStatus7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowDependencyStatus8) -}
cd314f86c44ddb238465de9f37f64bf2
  $fShowDependencyStatus8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Missing"#) -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fShowDependencyStatus_$cshow ::
    Language.PureScript.Publish.DependencyStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Publish.DependencyStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Missing
                   -> Language.PureScript.Publish.$fShowDependencyStatus7
                   Language.PureScript.Publish.NoResolution
                   -> Language.PureScript.Publish.$fShowDependencyStatus5
                   Language.PureScript.Publish.ResolvedOther b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Publish.$fShowDependencyStatus4
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Language.PureScript.Publish.ResolvedVersion b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Publish.$fShowDependencyStatus3
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fShowDependencyStatus_$cshowList ::
    [Language.PureScript.Publish.DependencyStatus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Publish.DependencyStatus])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Publish.DependencyStatus
                   Language.PureScript.Publish.$fShowDependencyStatus1
                   ls
                   s) -}
c31fd17945ddc1fc73877c2dd12a91e2
  $fShowDependencyStatus_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds1 :: GHC.Types.Int)
                   (ds2 :: Language.PureScript.Publish.DependencyStatus)
                   (eta :: GHC.Base.String) ->
                 case ds2 of wild {
                   Language.PureScript.Publish.Missing
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Publish.$fShowDependencyStatus7
                        eta
                   Language.PureScript.Publish.NoResolution
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Publish.$fShowDependencyStatus5
                        eta
                   Language.PureScript.Publish.ResolvedOther b1
                   -> case ds1 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Publish.$fShowDependencyStatus4
                             (case Data.Text.Show.$w$cshowsPrec b1 eta of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Publish.$fShowDependencyStatus4
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } }
                   Language.PureScript.Publish.ResolvedVersion b1
                   -> case ds1 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Publish.$fShowDependencyStatus3
                             (case Data.Text.Show.$w$cshowsPrec b1 eta of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Publish.$fShowDependencyStatus3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fShowTreeStatus ::
    GHC.Show.Show Language.PureScript.Publish.TreeStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fShowTreeStatus_$cshowsPrec
                  Language.PureScript.Publish.$fShowTreeStatus_$cshow
                  Language.PureScript.Publish.$fShowTreeStatus_$cshowList -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fShowTreeStatus1 ::
    Language.PureScript.Publish.TreeStatus -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: Language.PureScript.Publish.TreeStatus)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Clean
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus4)
                        eta
                   Language.PureScript.Publish.Dirty
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus2)
                        eta }) -}
4596c51f3fc51d43110a504af62a2437
  $fShowTreeStatus2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowTreeStatus3) -}
a5baac1366d7e3e44cc0f9ce06678b87
  $fShowTreeStatus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dirty"#) -}
47d638e62fa7ba381d3359e96fae576d
  $fShowTreeStatus4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowTreeStatus5) -}
fc0212c0bf7c85276e094a42c366f5a3
  $fShowTreeStatus5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Clean"#) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fShowTreeStatus_$cshow ::
    Language.PureScript.Publish.TreeStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fShowTreeStatus4
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fShowTreeStatus2 }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fShowTreeStatus_$cshowList ::
    [Language.PureScript.Publish.TreeStatus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Publish.TreeStatus])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Publish.TreeStatus
                   Language.PureScript.Publish.$fShowTreeStatus1
                   ls
                   s) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $fShowTreeStatus_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Publish.TreeStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (ds2 :: Language.PureScript.Publish.TreeStatus)
                   (eta :: GHC.Base.String) ->
                 case ds2 of wild {
                   Language.PureScript.Publish.Clean
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus4)
                        eta
                   Language.PureScript.Publish.Dirty
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus2)
                        eta }) -}
e65f3daf8051790a3d2b20b763de38d6
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT
                     @ e)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ c
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Data.Either.$fApplicativeEither_$cfmap
                           @ e
                           @ a
                           @ (b -> c)
                           f1
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> c>_N)))
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ a
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Control.Monad.Trans.Except.$fApplicativeExceptT1
                           @ a
                           @ b
                           @ e
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> a>_N))) -}
52aa66be92542c73f09023a71e7fab7a
  $s$fApplicativeExceptT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT1
                     @ e)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity
                     @ b
                     @ c
                     (Data.Either.$fApplicativeEither_$cfmap
                        @ e
                        @ a
                        @ (b -> c)
                        f1
                        x `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either e a>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <b -> c>_N)))
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity
                     @ b
                     @ a
                     (Control.Monad.Trans.Except.$fApplicativeExceptT1
                        @ a
                        @ b
                        @ e
                        x `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either e a>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <b -> a>_N))) -}
5dd951c1f9683ec4d339f834c73cc1c3
  $s$fApplicativeExceptT_$c<*1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ e
                   @ a
                   @ b
                   (x :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ Data.Functor.Identity.Identity
                   @ e
                   Data.Functor.Identity.$fFunctorIdentity
                   Data.Functor.Identity.$fMonadIdentity
                   @ b
                   @ a
                   (Control.Monad.Trans.Except.$fApplicativeExceptT1
                      @ a
                      @ b
                      @ e
                      x `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <Data.Either.Either
                                e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <e>_N
                                                          <Data.Functor.Identity.Identity>_R
                                                          <b -> a>_N))) -}
0a8d71843d5f04ee17d84dc408872595
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Either.Either e b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w10 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b))
                   (w11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w10
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a -> b>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either
                                                                      e (a -> b)>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right k
                   -> case w11
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> (# ipv2, Data.Either.Left @ e @ b e1 #)
                        Data.Either.Right x
                        -> (# ipv2, Data.Either.Right @ e @ b (k x) #) } } } }) -}
dbff92385f009b76f73f3e72ad2a2900
  $s$fApplicativeExceptT_$c<*>_$s$w$c<*> ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   @ a
                   @ b
                   (w10 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity (a -> b))
                   (w11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                 case w10
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a -> b>_N ; Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either e (a -> b)>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e>_N
                                                      <Data.Functor.Identity.Identity>_R
                                                      <b>_N))
                   Data.Either.Right k
                   -> case w11
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N
                                <Data.Functor.Identity.Identity>_R
                                <a>_N ; Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either e a>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left @ e @ b e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <e>_N
                                                           <Data.Functor.Identity.Identity>_R
                                                           <b>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right @ e @ b (k x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <e>_N
                                                           <Data.Functor.Identity.Identity>_R
                                                           <b>_N)) } }) -}
55c77de0ba1898d6ee324ab526a53706
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
9192595b57a7b38aa2bdc22b14b2b192
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
0f10918e4054397f4ee4252c9e94e4b0
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ e @ a a1 #))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <a>_N)) -}
155e2e5e80d423e4c19f7d5f9a46a2df
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1 ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.Either.Right
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Data.Functor.Identity.Identity>_R
                                                     <a>_N)) -}
c5a2972c0e599ae06ccfd79cd1af19d0
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO) -}
9cc641650a9e01d1ea13340de2637b46
  $s$fApplicativeExceptT_$s$fFunctorExceptT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity) -}
e0a9e2e2eb802580397e0bfcb8243672
  $s$fMonadErroreExceptT ::
    Control.Monad.Error.Class.MonadError
      e (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
                     @ e)
                  (\ @ a (x :: e) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Left @ e @ a x #))
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a ->
                   Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE
                     @ e
                     @ a
                     @ e) -}
b34f59e8ed3f03c268347c3a7b5bea97
  $s$fMonadErroreExceptT1 ::
    Control.Monad.Error.Class.MonadError
      e
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT1
                     @ e)
                  (Data.Either.Left @ e)
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Data.Functor.Identity.Identity>_R
                                                       <a>_N))
                  (\ @ a ->
                   Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE1
                     @ e
                     @ a
                     @ e) -}
99d0fd839fb6e128f1b7d46e6917f113
  $s$fMonadErroreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=
                     @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
                     @ e)
                  (\ @ a (eta :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Right @ e @ a eta #))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a (x :: GHC.Base.String) ->
                   GHC.Magic.noinline
                     @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                     GHC.IO.failIO1
                       `cast`
                     (forall (a1 :: <*>_N).
                      <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                     @ (Data.Either.Either e a)
                     x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <GHC.Types.IO>_R <a>_N)) -}
a5361a5034fe96cf9e07ea294a78fc93
  $s$fMonadErroreExceptT_$s$fMonadExceptT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT1 @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1
                     @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1
                     @ e)
                  (Data.Either.Right @ e)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Data.Functor.Identity.Identity>_R
                                                       <a>_N))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Functor.Identity.Identity (Data.Either.Either e a)))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
16b4aeccab038887a6b6471bee119db3
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
7d55fc69b31c05879f8c8abbe2d56827
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
25a99597b6665317eb55144dfb901c40
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
a46ffb4242c63203e9a07e42b37bb1ce
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> (a
        -> Control.Monad.Trans.Except.ExceptT
             e Data.Functor.Identity.Identity b)
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: a
                         -> Control.Monad.Trans.Except.ExceptT
                              e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Except.ExceptT
                            e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
af552335eacd0a2ea1da89809ce85672
  $s$fMonadErroreExceptT_$scatchE ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
    -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (h :: e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                               <Data.Either.Either e' a>_R)
                        ipv
                   Data.Either.Right r -> (# ipv, Data.Either.Right @ e' @ a r #) } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e' a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e'>_N <GHC.Types.IO>_R <a>_N)) -}
c4fc000a454915a4231125ef0cfb76f9
  $s$fMonadErroreExceptT_$scatchE1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> (e
        -> Control.Monad.Trans.Except.ExceptT
             e' Data.Functor.Identity.Identity a)
    -> Control.Monad.Trans.Except.ExceptT
         e' Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (h :: e
                         -> Control.Monad.Trans.Except.ExceptT
                              e' Data.Functor.Identity.Identity a) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <Data.Functor.Identity.Identity>_R <a>_N)
                   Data.Either.Right r
                   -> (Data.Either.Right @ e' @ a r)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e' a>_R)) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <e
                       -> Control.Monad.Trans.Except.ExceptT
                            e' Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e'>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
d4bc29c3b45ef4515648c116184f9f30
  $s$fMonadIOExceptT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
                     @ e)
                  (\ @ a
                     (x :: GHC.Types.IO a)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case x `cast` (GHC.Types.N:IO[0] <a>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, Data.Either.Right @ e @ a ipv1 #) })
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N)) -}
cab850c3bb2d5d279dceaeba6160373d
  $tc'Clean :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13707748673812511171##
                   8741560809640223758##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Clean2
                   0#
                   Language.PureScript.Publish.$tc'Clean1) -}
80caa26ac33842042b5d06c3e11fb30a
  $tc'Clean1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ddcb43903d2f7e2f912c5416c0eb4402
  $tc'Clean2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Clean3) -}
f6c5b800841f3ce74fe1f890c8d5ed70
  $tc'Clean3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Clean"#) -}
6217a74b57b6adff496cd382840a600c
  $tc'Dirty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17904547949705583916##
                   12866601862635583545##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Dirty1
                   0#
                   Language.PureScript.Publish.$tc'Clean1) -}
ef0608e6daa696578537fa0db7a42dd6
  $tc'Dirty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Dirty2) -}
4883c5f70d6b3e8d474f88b90311aee4
  $tc'Dirty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dirty"#) -}
814c48b4805776addec5b224e8eaf47b
  $tc'Missing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1417603555011716600##
                   1194627206858010183##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Missing2
                   0#
                   Language.PureScript.Publish.$tc'Missing1) -}
06bd85a6b69c2197f55ba24df0842dcc
  $tc'Missing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
867b52d1e4186cd9fd83d51819d94220
  $tc'Missing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Missing3) -}
60c74ee7715d010510a77217a2934a68
  $tc'Missing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Missing"#) -}
bb59b08f768c7ca6067466ee7f06e224
  $tc'NoResolution :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18254002607257107963##
                   15208750635467338504##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'NoResolution1
                   0#
                   Language.PureScript.Publish.$tc'Missing1) -}
513d50b4bdd6e9523e10db1b842cd72e
  $tc'NoResolution1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'NoResolution2) -}
1445029e21fbe130cafffeb59b8acd37
  $tc'NoResolution2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoResolution"#) -}
59d3b9a3b6ea1171ba15bbcb4a14cc1c
  $tc'PrepareM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4027284993959734449##
                   13158901140877742659##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'PrepareM2
                   1#
                   Language.PureScript.Publish.$tc'PrepareM1) -}
64fdc0b2738fbac9f6d26bc4eb8b8ac7
  $tc'PrepareM1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a0c1e8150b502b267a6ecb7fd2b81cc
  $tc'PrepareM2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'PrepareM3) -}
23528f798971a95e9711e60e74101b3f
  $tc'PrepareM3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PrepareM"#) -}
dc26c9285edcd270fba4c3ca7f20e6cf
  $tc'PublishOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6643446991560920246##
                   15607216285596615711##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'PublishOptions2
                   0#
                   Language.PureScript.Publish.$tc'PublishOptions1) -}
e5ae0da990313ca8d1ba76350d8d692f
  $tc'PublishOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c4069dd1296344ad880d29a6a2c3820b
  $tc'PublishOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'PublishOptions3) -}
46c28f80e9b4666fe430b85c3965665c
  $tc'PublishOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishOptions"#) -}
c2f232f4418d4f16c89fc2f623fdbc19
  $tc'ResolvedOther :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18240936173599398552##
                   10614192871369464597##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'ResolvedOther2
                   0#
                   Language.PureScript.Publish.$tc'ResolvedOther1) -}
175d188172623fcedd49d90b83c6ed26
  $tc'ResolvedOther1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f218be2b6e457acee20df7cb64a178b1
  $tc'ResolvedOther2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'ResolvedOther3) -}
c82d4712a1ed54478df4420ba909060f
  $tc'ResolvedOther3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ResolvedOther"#) -}
306d9e2c77088dd8b980c853b9457ecb
  $tc'ResolvedVersion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12492724977310236887##
                   9382339318852519264##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'ResolvedVersion1
                   0#
                   Language.PureScript.Publish.$tc'ResolvedOther1) -}
53885e8f8f026ff621310fc3049662c6
  $tc'ResolvedVersion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'ResolvedVersion2) -}
e5fe6eb092235237ebfc1364a3e50fca
  $tc'ResolvedVersion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ResolvedVersion"#) -}
a735c86e84f5019c6f569dead57ce279
  $tcDependencyStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16396707544539481738##
                   2973534549425638090##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcDependencyStatus1
                   0#
                   GHC.Types.krep$*) -}
dcfe81d1f6faaf44113412d6cba0408d
  $tcDependencyStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcDependencyStatus2) -}
7af45aafc7735c2f723d05bcc067c21f
  $tcDependencyStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DependencyStatus"#) -}
d3485fb472ade375749077467a40387f
  $tcPrepareM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3429663660899791192##
                   12731489105265233753##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcPrepareM1
                   0#
                   GHC.Types.krep$*Arr*) -}
7030d37164cc428065bd95fd20018f58
  $tcPrepareM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcPrepareM2) -}
e348ffcda7378c73d13c6a0b35cf29ec
  $tcPrepareM2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrepareM"#) -}
5c1eb76e7d7fdef55ded9d2d285635b8
  $tcPublishOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18143830943199217428##
                   12188680792790539446##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcPublishOptions1
                   0#
                   GHC.Types.krep$*) -}
b6e38cf6ff3556fee62f91ffbf857159
  $tcPublishOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcPublishOptions2) -}
c49178eca5c32173397cfcd319e1a66d
  $tcPublishOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishOptions"#) -}
fc20ed2b7782a393246ed4505ac15ef4
  $tcTreeStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6654781295465684568##
                   7954992221908049600##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcTreeStatus1
                   0#
                   GHC.Types.krep$*) -}
66683e153e08db06418359b11009dfb0
  $tcTreeStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcTreeStatus2) -}
1136f78f8b32f6cb05aa5a5cd3c9ee33
  $tcTreeStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TreeStatus"#) -}
37af747105fbd8e4bb3f8f68c04e0f91
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Publish.$trModule3
                   Language.PureScript.Publish.$trModule1) -}
d73ffb3511eabfe1e35cc4235267d97d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$trModule2) -}
227ffb313d61688b065afc51daed1232
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Publish"#) -}
ef7f93bbaabe67c3bda4f7279a4d2a9d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$trModule4) -}
3a169cca8db140b46b33da6b683b3271
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $w$ctoEnum ::
    GHC.Prim.Int# -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww 0# of lwild {
                   DEFAULT -> Language.PureScript.Publish.$wlvl ww
                   1#
                   -> case GHC.Prim.<=# ww 1# of lwild1 {
                        DEFAULT -> Language.PureScript.Publish.$wlvl ww
                        1#
                        -> GHC.Prim.tagToEnum#
                             @ Language.PureScript.Publish.TreeStatus
                             ww } }) -}
b9b5a2cf49a5569ad7ab0719914c7012
  $w$j ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0] -}
d8f39e4c97a95885fe1d483642c38cca
  $wextractGithub ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Language.PureScript.Publish.getManifestRepositoryInfo9 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case Data.Text.$wstripPrefix ww4 ww5 ww6 ww ww1 ww2 of wild {
                   GHC.Base.Nothing
                   -> case Language.PureScript.Publish.getManifestRepositoryInfo7 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case Data.Text.$wstripPrefix ww8 ww9 ww10 ww ww1 ww2 of wild1 {
                        GHC.Base.Nothing
                        -> case Language.PureScript.Publish.getManifestRepositoryInfo5 of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           case Data.Text.$wstripPrefix ww12 ww13 ww14 ww ww1 ww2 of wild2 {
                             GHC.Base.Nothing
                             -> GHC.Base.Nothing
                                  @ (Language.PureScript.Docs.Types.GithubUser,
                                     Language.PureScript.Docs.Types.GithubRepo)
                             GHC.Base.Just ipv
                             -> case ipv of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                                Language.PureScript.Publish.$w$j ww16 ww17 ww18 } } }
                        GHC.Base.Just ipv
                        -> case ipv of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           Language.PureScript.Publish.$w$j ww12 ww13 ww14 } } }
                   GHC.Base.Just ipv
                   -> case ipv of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      Language.PureScript.Publish.$w$j ww8 ww9 ww10 } } }) -}
39ba467a544ef44c2fceff1982d83d89
  $wgetManifestRepositoryInfo ::
    GHC.Base.Maybe Web.Bower.PackageMeta.Internal.Repository
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Web.Bower.PackageMeta.Internal.Repository)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case GHC.Prim.catch#
                             @ (Data.Either.Either
                                  GHC.IO.Exception.IOException
                                  (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                             @ GHC.Exception.SomeException
                             Language.PureScript.Publish.getManifestRepositoryInfo19
                             (Language.PureScript.Publish.$fMonadIOPrepareM2
                                @ (Data.Either.Either
                                     GHC.IO.Exception.IOException GHC.Base.String))
                             w of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 {
                        Data.Either.Left x
                        -> Language.PureScript.Publish.getManifestRepositoryInfo18
                             ipv
                             (Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                      x)))
                        Data.Either.Right y
                        -> case y of wild2 {
                             Data.Either.Left x
                             -> Language.PureScript.Publish.getManifestRepositoryInfo18
                                  ipv
                                  (Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (GHC.Base.String,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                        (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                           Language.PureScript.Publish.checkCleanWorkingTree_prog
                                           Language.PureScript.Publish.getManifestRepositoryInfo12
                                           x)))
                             Data.Either.Right y1
                             -> Language.PureScript.Publish.getManifestRepositoryInfo18
                                  ipv
                                  (Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (GHC.Base.String,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (y1,
                                      GHC.Types.[]
                                        @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } } }
                   GHC.Base.Just ds1
                   -> case ds1 of wild1 { Web.Bower.PackageMeta.Internal.Repository ds2 ds3 ->
                      case ds3 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Publish.getManifestRepositoryInfo11 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT
                        -> (# w,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ ((Language.PureScript.Docs.Types.GithubUser,
                                    Language.PureScript.Docs.Types.GithubRepo),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.UserError
                                   (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                                      (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryType
                                         wild2))) #)
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds4 ds5 ->
                           case GHC.Prim.narrow32Int# ds5 of wild4 {
                             DEFAULT
                             -> (# w,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Language.PureScript.Docs.Types.GithubUser,
                                         Language.PureScript.Docs.Types.GithubRepo),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                                           (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryType
                                              wild2))) #)
                             0#
                             -> case ds2 of ww1 { Data.Text.Internal.Text ww2 ww3 ww4 ->
                                case Language.PureScript.Publish.$wextractGithub
                                       ww2
                                       ww3
                                       ww4 of wild6 {
                                  GHC.Base.Nothing
                                  -> (# w, Language.PureScript.Publish.getManifestRepositoryInfo2 #)
                                  GHC.Base.Just x
                                  -> (# w,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ ((Language.PureScript.Docs.Types.GithubUser,
                                              Language.PureScript.Docs.Types.GithubRepo),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (x,
                                           GHC.Types.[]
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } } } } } } } } }) -}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  $wlvl :: GHC.Prim.Int# -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
83d2346dd950969ade68a31e76929f2b
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
c31fd17945ddc1fc73877c2dd12a91e2
  data DependencyStatus
    = Missing
    | NoResolution
    | ResolvedOther Data.Text.Internal.Text
    | ResolvedVersion Data.Text.Internal.Text
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  type role PrepareM nominal
  newtype PrepareM a
    = PrepareM {unPrepareM :: Control.Monad.Trans.Writer.Strict.WriterT
                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                (Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO)
                                a}
8f9d342e85f93dbfc483b25c9e76c8e2
  data PublishOptions
    = PublishOptions {publishGetVersion :: Language.PureScript.Publish.PrepareM
                                             (Data.Text.Internal.Text, Data.Version.Version),
                      publishGetTagTime :: Data.Text.Internal.Text
                                           -> Language.PureScript.Publish.PrepareM
                                                Data.Time.Clock.Internal.UTCTime.UTCTime,
                      publishWorkingTreeDirty :: Language.PureScript.Publish.PrepareM ()}
5f2eaa4e4a24cdf2ff54c61a53fd701d
  data TreeStatus = Clean | Dirty
644fc34e0c6ec825aa8eabcfdc182f76
  checkCleanWorkingTree ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM ()
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.checkCleanWorkingTree1
                  `cast`
                (<Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N))) -}
abfefee51cb340194b3a86c28aac3d42
  checkCleanWorkingTree1 ::
    Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U(U,U)))><S,U>,
     Unfolding: (\ (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree8
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.checkCleanWorkingTree_args
                                      x)) #)
                        Data.Either.Right y1
                        -> case Language.PureScript.Publish.checkCleanWorkingTree_go
                                  (Data.OldList.lines y1) of wild2 {
                             Language.PureScript.Publish.Clean
                             -> (# ipv,
                                   Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (GHC.Tuple.(),
                                      GHC.Types.[]
                                        @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)
                             Language.PureScript.Publish.Dirty
                             -> case opts of wild3 { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                                case ds4
                                       `cast`
                                     (Language.PureScript.Publish.N:PrepareM[0] <()>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                 GHC.Types.IO>_R
                                                                                              <()>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                            <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                            <GHC.Types.IO>_R
                                                                                                            <((),
                                                                                                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                                                                                    <Data.Either.Either
                                                                                                                                                                                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                       ((),
                                                                                                                                                                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R)))
                                       ipv of ds5 { (#,#) ipv2 ipv3 ->
                                case ipv3 of wild4 {
                                  Data.Either.Left e1 -> ds5
                                  Data.Either.Right x
                                  -> case x of wild5 { (,) b1 w' ->
                                     (# ipv2,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ ((),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (b1,
                                           GHC.Base.++
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                             (GHC.Types.[]
                                                @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                                             w') #) } } } } } } } }) -}
feedb70172f19a4afc4cdf1797a4267f
  checkCleanWorkingTree10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.checkCleanWorkingTree11
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
c26eb829c384f8f7d99425d11102dd51
  checkCleanWorkingTree11 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.checkCleanWorkingTree12
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
4aa651826c638d136d00248236950695
  checkCleanWorkingTree12 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.checkCleanWorkingTree_args) -}
fcfda4baeb7a59ee7ab43a7e0b830806
  checkCleanWorkingTree2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.checkCleanWorkingTree3
                   (GHC.Types.[] @ GHC.Base.String)) -}
3030f6b8b97d431e3e83e7c872006ba8
  checkCleanWorkingTree3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree4) -}
81684c4748edd64322732a6138073a71
  checkCleanWorkingTree4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--porcelain"#) -}
2d68699d2d51e6b106f424e80dfe54b3
  checkCleanWorkingTree5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree6) -}
c0c4e5620aa6dfd7ef99c7f8b75dd3b8
  checkCleanWorkingTree6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("status"#) -}
6fc6bb46dd60b0453c5b407b7c686830
  checkCleanWorkingTree7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git"#) -}
df3ac28c1dd359925e72aa35b944bbe8
  checkCleanWorkingTree8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree10
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
51eaa39350a5b577d5930e45f41742af
  checkCleanWorkingTree9 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e2
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case GHC.IO.Exception.$fExceptionIOException4 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        wild
                        eta
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                             wild
                             eta
                        1#
                        -> (# eta,
                              Data.Either.Left
                                @ GHC.IO.Exception.IOException
                                @ GHC.Base.String
                                e3
                                  `cast`
                                (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } } } } }) -}
c2f8c88b7c5c36117b38572527fcac84
  checkCleanWorkingTree_args :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.checkCleanWorkingTree5
                   Language.PureScript.Publish.checkCleanWorkingTree2) -}
b4b6cbb6deeb532424aec187bc9adfb3
  checkCleanWorkingTree_go ::
    [[GHC.Types.Char]] -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d6c69ca5bc4318145af6ca45ec3e52e2
  checkCleanWorkingTree_prog :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree7) -}
12c038a20a054e952c1f2f3c608731ed
  defaultPublishOptions :: Language.PureScript.Publish.PublishOptions
  {- Strictness: m,
     Unfolding: (Language.PureScript.Publish.PublishOptions
                   Language.PureScript.Publish.defaultPublishOptions11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((Data.Text.Internal.Text, Data.Version.Version),
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                              <GHC.Types.IO>_R
                                                                                                              <((Data.Text.Internal.Text,
                                                                                                                 Data.Version.Version),
                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                GHC.Types.IO>_R
                                                                                                                                                                                             <(Data.Text.Internal.Text,
                                                                                                                                                                                               Data.Version.Version)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Data.Text.Internal.Text,
                                                                                                                                                                                                                                                                             Data.Version.Version)>_N)))
                   Language.PureScript.Publish.defaultPublishOptions2
                     `cast`
                   (<Data.Text.Internal.Text>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                   <GHC.Types.IO>_R
                                                                                                                   <(Data.Time.Clock.Internal.UTCTime.UTCTime,
                                                                                                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                  <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                     GHC.Types.IO>_R
                                                                                                                                                                                                  <Data.Time.Clock.Internal.UTCTime.UTCTime>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Data.Time.Clock.Internal.UTCTime.UTCTime>_N)))
                   Language.PureScript.Publish.defaultPublishOptions1
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((),
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                              <GHC.Types.IO>_R
                                                                                                              <((),
                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                GHC.Types.IO>_R
                                                                                                                                                                                             <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N)))) -}
72c84b72dbbccded084d9338a1a52437
  defaultPublishOptions1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.UserError
                         Language.PureScript.Publish.ErrorsWarnings.DirtyWorkingTree) #)) -}
89002ae6ca19419ecb759b06af8bf09b
  defaultPublishOptions10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--format=%ct"#) -}
cf5db3b118be42133f8c475b4ffa0ac2
  defaultPublishOptions11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Data.Text.Internal.Text, Data.Version.Version),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.defaultPublishOptions26
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Publish.defaultPublishOptions23
                        ipv
                        (Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (GHC.Base.String,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown x)))
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> Language.PureScript.Publish.defaultPublishOptions23
                             ipv
                             (Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.defaultPublishOptions_args
                                      x)))
                        Data.Either.Right y1
                        -> Language.PureScript.Publish.defaultPublishOptions23
                             ipv
                             (Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (y1,
                                 GHC.Types.[]
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } } }) -}
09a0e484af1c8f0e920cafe50b88641a
  defaultPublishOptions12 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions19
                   Language.PureScript.Publish.defaultPublishOptions13) -}
cf0a8388b399bf49e50ce4a002b924d8
  defaultPublishOptions13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions17
                   Language.PureScript.Publish.defaultPublishOptions14) -}
435935b797519cefc76dbb5e007c2c1e
  defaultPublishOptions14 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions15
                   (GHC.Types.[] @ GHC.Base.String)) -}
abe5be0372bf963c611505e0a37c2bb3
  defaultPublishOptions15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions16) -}
58e44a09953df08eeae9e50b91553f2d
  defaultPublishOptions16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HEAD"#) -}
256e761e353c31b2a8e11a62f2d90007
  defaultPublishOptions17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions18) -}
6c09a24548a6e1ed484d2377175627a2
  defaultPublishOptions18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--points-at"#) -}
b0a194077fbbee9758c3514a355410fd
  defaultPublishOptions19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions20) -}
bbb48ca1af73ca10727967130d35294a
  defaultPublishOptions2 ::
    Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Data.Time.Clock.Internal.UTCTime.UTCTime,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,U>,
     Unfolding: (\ (tag :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   args :: [GHC.Types.Char]
                   = case tag of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.>=# ww end of lwild {
                           DEFAULT
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.geWord# r# 55296## of lwild1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                1#
                                -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                     DEFAULT
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     1#
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)))
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                           1# -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   args1 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       args
                       (GHC.Types.[] @ GHC.Base.String)
                 } in
                 let {
                   args2 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions9
                       args1
                 } in
                 let {
                   args3 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions7
                       args2
                 } in
                 let {
                   args4 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions5
                       args3
                 } in
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.catch#
                                @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                                @ GHC.Exception.SomeException
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case System.Process.readCreateProcess1
                                        (System.Process.Common.CreateProcess
                                           (System.Process.Common.RawCommand
                                              Language.PureScript.Publish.checkCleanWorkingTree_prog
                                              args4)
                                           (GHC.Base.Nothing @ GHC.IO.FilePath)
                                           (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                                           System.Process.Common.Inherit
                                           System.Process.Common.Inherit
                                           System.Process.Common.Inherit
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                                           (GHC.Base.Nothing @ System.Posix.Types.UserID)
                                           GHC.Types.False)
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        s1 of ds1 { (#,#) ipv ipv1 ->
                                 (# ipv,
                                    Data.Either.Right
                                      @ GHC.IO.Exception.IOException
                                      @ GHC.Base.String
                                      ipv1 #) })
                                Language.PureScript.Publish.checkCleanWorkingTree9
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv,
                            Data.Either.Right
                              @ GHC.IO.Exception.IOException
                              @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                              ipv1 #) })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      args4
                                      x)) #)
                        Data.Either.Right y1
                        -> case Data.Maybe.mapMaybe
                                  @ [GHC.Types.Char]
                                  @ GHC.Integer.Type.Integer
                                  Language.PureScript.Publish.defaultPublishOptions3
                                  (Data.OldList.lines y1) of wild2 {
                             []
                             -> (# ipv,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.InternalError
                                        (Language.PureScript.Publish.ErrorsWarnings.CouldntParseGitTagDate
                                           tag)) #)
                             : t ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> (# ipv,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                                  (Data.Time.Clock.Internal.NominalDiffTime.$fNumNominalDiffTime1
                                                     t)
                                                    `cast`
                                                  (Sym (Data.Fixed.N:Fixed[0]
                                                            <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])) of ww { (#,#) ww1 ww2 ->
                                           Data.Time.Clock.Internal.UTCTime.UTCTime ww1 ww2 },
                                           GHC.Types.[]
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)
                                  : ipv2 ipv3
                                  -> (# ipv,
                                        Data.Either.Left
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (Language.PureScript.Publish.ErrorsWarnings.InternalError
                                             (Language.PureScript.Publish.ErrorsWarnings.CouldntParseGitTagDate
                                                tag)) #) } } } } }) -}
695ff4a3a8153481ff509cc1c7ecab6a
  defaultPublishOptions20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--list"#) -}
9d3a1940fe75402c8bfb32caed047634
  defaultPublishOptions21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions22) -}
276eb2429d817db7adccf972d67bf767
  defaultPublishOptions22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tag"#) -}
58fd0f614112fa841f7be635a58c3fce
  defaultPublishOptions23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (GHC.Base.String,
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Data.Text.Internal.Text, Data.Version.Version),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Data.Either.Either
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              (GHC.Base.String,
                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((Data.Text.Internal.Text, Data.Version.Version),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case Language.PureScript.Publish.defaultPublishOptions_go
                             (Data.OldList.lines a1) of wild2 {
                        []
                        -> (# ipv, Language.PureScript.Publish.defaultPublishOptions24 #)
                        : x1 ds1
                        -> case ds1 of wild3 {
                             []
                             -> (# ipv,
                                   Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Data.Text.Internal.Text, Data.Version.Version),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     ((case x1 of wild4 { (,) a2 b1 ->
                                       case GHC.Magic.runRW#
                                              @ ('GHC.Types.TupleRep
                                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                              @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Text.Internal.Text #)
                                              (\ (s1 :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                               case GHC.Prim.newByteArray#
                                                      @ GHC.Prim.RealWorld
                                                      10#
                                                      s1 of ds2 { (#,#) ipv2 ipv3 ->
                                               Language.PureScript.Publish.$wouter
                                                 ipv3
                                                 4#
                                                 a2
                                                 0#
                                                 ipv2 }) of ds2 { (#,#) ipv2 ipv3 ->
                                       ipv3 } },
                                       case x1 of wild4 { (,) a2 b1 -> b1 }),
                                      w10) #)
                             : ipv2 ipv3
                             -> (# ipv,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Data.Text.Internal.Text, Data.Version.Version),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.AmbiguousVersions
                                           (GHC.Base.map
                                              @ ([GHC.Types.Char], Data.Version.Version)
                                              @ Data.Version.Version
                                              (Data.Tuple.snd
                                                 @ [GHC.Types.Char]
                                                 @ Data.Version.Version)
                                              wild2))) #) } } } }) -}
f744784757941b17f357fe5993fd96e6
  defaultPublishOptions24 ::
    Data.Either.Either
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      ((Data.Text.Internal.Text, Data.Version.Version),
       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   @ ((Data.Text.Internal.Text, Data.Version.Version),
                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   Language.PureScript.Publish.defaultPublishOptions25) -}
8ba81d7c53d341f113e28252ec744c70
  defaultPublishOptions25 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.UserError
                   Language.PureScript.Publish.ErrorsWarnings.TagMustBeCheckedOut) -}
d0c36cd0e89aa2af1703912189bd28b0
  defaultPublishOptions26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.defaultPublishOptions27
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
cee5ecd4452208af984d7ed639f1c5e3
  defaultPublishOptions27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.defaultPublishOptions28
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
216a642a6a2ee93cfbbb4c9aa190f260
  defaultPublishOptions28 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.defaultPublishOptions29
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
da127a4b9afdbb66896e8915fa7604b2
  defaultPublishOptions29 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.defaultPublishOptions_args) -}
5ba994067c9fa6995609038a9b11da0b
  defaultPublishOptions3 ::
    GHC.Base.String -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Language.PureScript.Publish.defaultPublishOptions4
                           s) of wild {
                   [] -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Just @ GHC.Integer.Type.Integer x
                        : ipv ipv1 -> GHC.Base.Nothing @ GHC.Integer.Type.Integer } }) -}
4d0c9501aa45ed4054979e621621e430
  defaultPublishOptions4 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger_$sreadNumber
                   GHC.Read.$fReadInteger2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither7 @ GHC.Integer.Type.Integer)) -}
c76d9fa38a3897d0ad65565c3d8e6a1c
  defaultPublishOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions6) -}
3de6dd3aa7d5b407aba3d1474c69ac2c
  defaultPublishOptions6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("log"#) -}
e382fa32a72514a40ae58a6a00a7cc08
  defaultPublishOptions7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions8) -}
798b27bb05d504af9fd7914bc651bc1a
  defaultPublishOptions8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-1"#) -}
aef5c20c6464b47d4c17f101801a61c9
  defaultPublishOptions9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions10) -}
0cfb15f81ba5e7a6d0d67b5daa5b185e
  defaultPublishOptions_args :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions21
                   Language.PureScript.Publish.defaultPublishOptions12) -}
45fc492bf031dfd41b40924dd4a2bc3e
  defaultPublishOptions_go ::
    [[GHC.Types.Char]] -> [([GHC.Types.Char], Data.Version.Version)]
  {- Arity: 1, Strictness: <S,1*U> -}
eed0ef44c0b9c085013a2a8971248941
  getGitWorkingTreeStatus ::
    Language.PureScript.Publish.PrepareM
      Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getGitWorkingTreeStatus1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                             (Language.PureScript.Publish.TreeStatus,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                           <GHC.Types.IO>_R
                                                                                                           <(Language.PureScript.Publish.TreeStatus,
                                                                                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                          <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                          <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                             GHC.Types.IO>_R
                                                                                                                                                                                          <Language.PureScript.Publish.TreeStatus>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Language.PureScript.Publish.TreeStatus>_N))) -}
05b9212701c7049c4b84393eddbe0e4e
  getGitWorkingTreeStatus1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Language.PureScript.Publish.TreeStatus,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree8
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (Language.PureScript.Publish.TreeStatus,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Language.PureScript.Publish.TreeStatus,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.checkCleanWorkingTree_args
                                      x)) #)
                        Data.Either.Right y1
                        -> (# ipv,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Language.PureScript.Publish.TreeStatus,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.checkCleanWorkingTree_go
                                   (Data.OldList.lines y1),
                                 GHC.Types.[]
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } } }) -}
eca00182a02cec70b30e4dbe744a3eed
  getManifestRepositoryInfo ::
    Web.Bower.PackageMeta.Internal.PackageMeta
    -> Language.PureScript.Publish.PrepareM
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getManifestRepositoryInfo1
                  `cast`
                (<Web.Bower.PackageMeta.Internal.PackageMeta>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((Language.PureScript.Docs.Types.GithubUser,
                                    Language.PureScript.Docs.Types.GithubRepo),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((Language.PureScript.Docs.Types.GithubUser,
                                                                                                                   Language.PureScript.Docs.Types.GithubRepo),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <(Language.PureScript.Docs.Types.GithubUser,
                                                                                                                                                                                                 Language.PureScript.Docs.Types.GithubRepo)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Language.PureScript.Docs.Types.GithubUser,
                                                                                                                                                                                                                                                                                                    Language.PureScript.Docs.Types.GithubRepo)>_N))) -}
be48c5e9f90af8b601e8b3dbe81e6fe6
  getManifestRepositoryInfo1 ::
    Web.Bower.PackageMeta.Internal.PackageMeta
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Web.Bower.PackageMeta.Internal.PackageMeta)
                   (w10 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Web.Bower.PackageMeta.Internal.PackageMeta ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.Publish.$wgetManifestRepositoryInfo
                   ww10
                   w10 }) -}
42e1dd876a30f4ce3d2685e380203014
  getManifestRepositoryInfo10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git://github.com/"#) -}
0b6ef3881fcc113b8358f375897a63c4
  getManifestRepositoryInfo11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree7) -}
fb350dfdcf9a0d3befc2de370950806b
  getManifestRepositoryInfo12 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.getManifestRepositoryInfo16
                   Language.PureScript.Publish.getManifestRepositoryInfo13) -}
3b48acd6154a2188dd1df4933de383dc
  getManifestRepositoryInfo13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.getManifestRepositoryInfo14
                   (GHC.Types.[] @ GHC.Base.String)) -}
b2911e36f11d712398ecc7e7c3317a75
  getManifestRepositoryInfo14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo15) -}
62eee0ca374c0b61fe8b178e5ede5e20
  getManifestRepositoryInfo15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("remote.origin.url"#) -}
899f40aa7fbd664805c1f13dfb0aa2d0
  getManifestRepositoryInfo16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo17) -}
44aa09d3882cccc8d359788986d89ee1
  getManifestRepositoryInfo17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("config"#) -}
29610657e67746986ed38743ea564ad2
  getManifestRepositoryInfo18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (GHC.Base.String,
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
7e61a24fff20f924a3fcd825e8066b2a
  getManifestRepositoryInfo19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.getManifestRepositoryInfo20
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
bf2e255858daa0cbf984b226f36f6639
  getManifestRepositoryInfo2 ::
    Data.Either.Either
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      ((Language.PureScript.Docs.Types.GithubUser,
        Language.PureScript.Docs.Types.GithubRepo),
       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   @ ((Language.PureScript.Docs.Types.GithubUser,
                       Language.PureScript.Docs.Types.GithubRepo),
                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   Language.PureScript.Publish.getManifestRepositoryInfo3) -}
9b001acb2442bd1e5aa2ca422d91600d
  getManifestRepositoryInfo20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.getManifestRepositoryInfo21
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
dcacd9c1a8074709e60926c6a2fb7fa8
  getManifestRepositoryInfo21 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.getManifestRepositoryInfo22
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
729051d1617d854f430dcd0be61a3dae
  getManifestRepositoryInfo22 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.getManifestRepositoryInfo12) -}
abc04fa117beefad6e362e6f39356309
  getManifestRepositoryInfo3 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.UserError
                   Language.PureScript.Publish.getManifestRepositoryInfo4) -}
1822cb112eaec4cb715d0f86ae4a3a68
  getManifestRepositoryInfo4 ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                   Language.PureScript.Publish.ErrorsWarnings.NotOnGithub) -}
5020ae8a42e0778008d6524513277a24
  getManifestRepositoryInfo5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo6) -}
017a1d61003cf3cd7294969aefbf5545
  getManifestRepositoryInfo6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git@github.com:"#) -}
58d51abee9d047cd16fc3d2f3584e30e
  getManifestRepositoryInfo7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo8) -}
e73f1b3411a68c2a298f2e0ae3ec4357
  getManifestRepositoryInfo8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("https://github.com/"#) -}
eb94b4af5c1288cd012c6fe2085334b9
  getManifestRepositoryInfo9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo10) -}
3884871163430f11632fe167d4c62f2b
  getModules ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> Language.PureScript.Publish.PrepareM
         ([Language.PureScript.Docs.Types.Module],
          Data.Map.Internal.Map
            Language.PureScript.Names.ModuleName
            Web.Bower.PackageMeta.Internal.PackageName)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getModules1
                  `cast`
                (<[(Web.Bower.PackageMeta.Internal.PackageName,
                    GHC.IO.FilePath)]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (([Language.PureScript.Docs.Types.Module],
                                    Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      Web.Bower.PackageMeta.Internal.PackageName),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(([Language.PureScript.Docs.Types.Module],
                                                                                                                   Data.Map.Internal.Map
                                                                                                                     Language.PureScript.Names.ModuleName
                                                                                                                     Web.Bower.PackageMeta.Internal.PackageName),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <([Language.PureScript.Docs.Types.Module],
                                                                                                                                                                                                 Data.Map.Internal.Map
                                                                                                                                                                                                   Language.PureScript.Names.ModuleName
                                                                                                                                                                                                   Web.Bower.PackageMeta.Internal.PackageName)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <([Language.PureScript.Docs.Types.Module],
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                         Language.PureScript.Names.ModuleName
                                                                                                                                                                                                                                                                                                         Web.Bower.PackageMeta.Internal.PackageName)>_N))) -}
1955c4cd1adfc944d5af22bff9116f9a
  getModules1 ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (([Language.PureScript.Docs.Types.Module],
              Data.Map.Internal.Map
                Language.PureScript.Names.ModuleName
                Web.Bower.PackageMeta.Internal.PackageName),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (paths :: [(Web.Bower.PackageMeta.Internal.PackageName,
                               GHC.IO.FilePath)])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             ([GHC.IO.FilePath],
                              [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]))
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case System.IO.Error.modifyIOError1
                                @ GHC.IO.FilePath
                                System.Directory.Internal.Common.getCurrentDirectory6
                                System.Directory.Internal.Common.getCurrentDirectory2
                                  `cast`
                                (Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R))
                                s of ds1 { (#,#) ipv ipv1 ->
                         case System.FilePath.Glob.Directory.glob2
                                System.FilePath.Glob.Directory.globDefault
                                Language.PureScript.Publish.getModules4
                                ipv1
                                ipv of ds2 { (#,#) ipv2 ipv3 ->
                         case Language.PureScript.Publish.getModules3
                                paths
                                ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                         (# ipv4,
                            Data.Either.Right
                              @ GHC.IO.Exception.IOException
                              @ ([GHC.IO.FilePath],
                                 [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)])
                              (case ipv3 of wild { (,) x ds4 ->
                               GHC.List.head @ [GHC.IO.FilePath] x },
                               Language.PureScript.Publish.getModules_go ipv5) #) } } })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ ([GHC.IO.FilePath],
                              [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Publish.getModules2
                        ipv
                        (Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([GHC.IO.FilePath],
                               [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown x)))
                   Data.Either.Right y
                   -> Language.PureScript.Publish.getModules2
                        ipv
                        (Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([GHC.IO.FilePath],
                               [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (y,
                            GHC.Types.[]
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } }) -}
efb45800b32cce2351e48f36c5a7d58c
  getModules2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (([GHC.IO.FilePath],
           [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (([Language.PureScript.Docs.Types.Module],
              Data.Map.Internal.Map
                Language.PureScript.Names.ModuleName
                Web.Bower.PackageMeta.Internal.PackageName),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Data.Either.Either
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              (([GHC.IO.FilePath],
                                [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([Language.PureScript.Docs.Types.Module],
                               Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 Web.Bower.PackageMeta.Internal.PackageName),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case a1 of wild2 { (,) inputFiles depsFiles ->
                      case GHC.Prim.catch#
                             @ (Data.Either.Either
                                  GHC.IO.Exception.IOException
                                  (Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([(GHC.IO.FilePath,
                                        Language.PureScript.AST.Declarations.Module)],
                                      Data.Map.Internal.Map
                                        Language.PureScript.Names.ModuleName
                                        Web.Bower.PackageMeta.Internal.PackageName)))
                             @ GHC.Exception.SomeException
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case (Language.PureScript.Docs.ParseInPackage.parseFilesInPackages
                                      @ (Control.Monad.Trans.Except.ExceptT
                                           Language.PureScript.Errors.MultipleErrors GHC.Types.IO)
                                      (Language.PureScript.Publish.$s$fMonadErroreExceptT
                                         @ Language.PureScript.Errors.MultipleErrors)
                                      (Language.PureScript.Publish.$s$fMonadIOExceptT
                                         @ Language.PureScript.Errors.MultipleErrors)
                                      inputFiles
                                      depsFiles)
                                     `cast`
                                   (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Errors.MultipleErrors>_N
                                        <GHC.Types.IO>_R
                                        <([(GHC.IO.FilePath,
                                            Language.PureScript.AST.Declarations.Module)],
                                          Data.Map.Internal.Map
                                            Language.PureScript.Names.ModuleName
                                            Web.Bower.PackageMeta.Internal.PackageName)>_N ; GHC.Types.N:IO[0]
                                                                                                 <Data.Either.Either
                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                    ([(GHC.IO.FilePath,
                                                                                                       Language.PureScript.AST.Declarations.Module)],
                                                                                                     Data.Map.Internal.Map
                                                                                                       Language.PureScript.Names.ModuleName
                                                                                                       Web.Bower.PackageMeta.Internal.PackageName)>_R)
                                     s of ds1 { (#,#) ipv2 ipv3 ->
                              (# ipv2,
                                 Data.Either.Right
                                   @ GHC.IO.Exception.IOException
                                   @ (Data.Either.Either
                                        Language.PureScript.Errors.MultipleErrors
                                        ([(GHC.IO.FilePath,
                                           Language.PureScript.AST.Declarations.Module)],
                                         Data.Map.Internal.Map
                                           Language.PureScript.Names.ModuleName
                                           Web.Bower.PackageMeta.Internal.PackageName))
                                   ipv3 #) })
                             (Language.PureScript.Publish.$fMonadIOPrepareM2
                                @ (Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([(GHC.IO.FilePath,
                                        Language.PureScript.AST.Declarations.Module)],
                                      Data.Map.Internal.Map
                                        Language.PureScript.Names.ModuleName
                                        Web.Bower.PackageMeta.Internal.PackageName)))
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild3 {
                        Data.Either.Left x1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (([Language.PureScript.Docs.Types.Module],
                                    Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      Web.Bower.PackageMeta.Internal.PackageName),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                      x1)) #)
                        Data.Either.Right y
                        -> case y of wild4 {
                             Data.Either.Left err
                             -> (# ipv2,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (([Language.PureScript.Docs.Types.Module],
                                         Data.Map.Internal.Map
                                           Language.PureScript.Names.ModuleName
                                           Web.Bower.PackageMeta.Internal.PackageName),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.CompileError
                                           err)) #)
                             Data.Either.Right r'
                             -> case r' of wild5 { (,) modules' moduleMap ->
                                case (Language.PureScript.Docs.Convert.convertModulesInPackageWithEnv
                                        @ (Control.Monad.Trans.Except.ExceptT
                                             Language.PureScript.Errors.MultipleErrors
                                             Data.Functor.Identity.Identity)
                                        (Language.PureScript.Publish.$s$fMonadErroreExceptT1
                                           @ Language.PureScript.Errors.MultipleErrors)
                                        (GHC.Base.map
                                           @ (GHC.IO.FilePath,
                                              Language.PureScript.AST.Declarations.Module)
                                           @ Language.PureScript.AST.Declarations.Module
                                           (Data.Tuple.snd
                                              @ GHC.IO.FilePath
                                              @ Language.PureScript.AST.Declarations.Module)
                                           modules')
                                        moduleMap)
                                       `cast`
                                     (Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Language.PureScript.Errors.MultipleErrors>_N
                                          <Data.Functor.Identity.Identity>_R
                                          <([Language.PureScript.Docs.Types.Module],
                                            Language.PureScript.Sugar.Names.Env.Env)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                              <Data.Either.Either
                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                 ([Language.PureScript.Docs.Types.Module],
                                                                                                  Language.PureScript.Sugar.Names.Env.Env)>_R) of wild6 {
                                  Data.Either.Left x1
                                  -> (# ipv2,
                                        Data.Either.Left
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (([Language.PureScript.Docs.Types.Module],
                                              Data.Map.Internal.Map
                                                Language.PureScript.Names.ModuleName
                                                Web.Bower.PackageMeta.Internal.PackageName),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (Language.PureScript.Publish.ErrorsWarnings.UserError
                                             (Language.PureScript.Publish.ErrorsWarnings.CompileError
                                                x1)) #)
                                  Data.Either.Right y1
                                  -> (# ipv2,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (([Language.PureScript.Docs.Types.Module],
                                              Data.Map.Internal.Map
                                                Language.PureScript.Names.ModuleName
                                                Web.Bower.PackageMeta.Internal.PackageName),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          ((Data.Tuple.fst
                                              @ [Language.PureScript.Docs.Types.Module]
                                              @ Language.PureScript.Sugar.Names.Env.Env
                                              y1,
                                            moduleMap),
                                           GHC.Base.++
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                             w10
                                             (GHC.Base.++
                                                @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                                (GHC.Types.[]
                                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                                                (GHC.Types.[]
                                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning))) #) } } } } } } } }) -}
17842fddec6cf38c3511bfedb9c5f7e3
  getModules3 ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [[(Web.Bower.PackageMeta.Internal.PackageName,
             GHC.IO.FilePath)]] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
6391e0e6b3bd0e966ddbcc3f399f7c55
  getModules4 :: [System.FilePath.Glob.Base.Pattern]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.FilePath.Glob.Base.Pattern
                   Language.PureScript.Publish.Utils.purescriptSourceFiles
                   (GHC.Types.[] @ System.FilePath.Glob.Base.Pattern)) -}
26d571ed51d4d64b832d565f00a978ec
  getModules_go ::
    [[(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]]
    -> [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0247a67416bbb78bcb895b580672b34f
  getResolvedDependencies ::
    GHC.IO.FilePath
    -> [Web.Bower.PackageMeta.Internal.PackageName]
    -> Language.PureScript.Publish.PrepareM
         [(Web.Bower.PackageMeta.Internal.PackageName,
           (GHC.IO.FilePath, Data.Version.Version))]
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getResolvedDependencies1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <[Web.Bower.PackageMeta.Internal.PackageName]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ([(Web.Bower.PackageMeta.Internal.PackageName,
                                     (GHC.IO.FilePath, Data.Version.Version))],
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <([(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                    (GHC.IO.FilePath,
                                                                                                                     Data.Version.Version))],
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <[(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                                                                                                  (GHC.IO.FilePath,
                                                                                                                                                                                                   Data.Version.Version))]>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <[(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                                                                                                                                                                                    (GHC.IO.FilePath,
                                                                                                                                                                                                                                                                                     Data.Version.Version))]>_N))) -}
405ea5d377d533dae9dce54095791259
  getResolvedDependencies1 ::
    GHC.IO.FilePath
    -> [Web.Bower.PackageMeta.Internal.PackageName]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ([(Web.Bower.PackageMeta.Internal.PackageName,
               (GHC.IO.FilePath, Data.Version.Version))],
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U> -}
2deed7e1eb26507336431eddb401fa94
  getVersionFromGitTag ::
    Language.PureScript.Publish.PrepareM
      (Data.Text.Internal.Text, Data.Version.Version)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.defaultPublishOptions11
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                             ((Data.Text.Internal.Text, Data.Version.Version),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                           <GHC.Types.IO>_R
                                                                                                           <((Data.Text.Internal.Text,
                                                                                                              Data.Version.Version),
                                                                                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                          <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                          <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                             GHC.Types.IO>_R
                                                                                                                                                                                          <(Data.Text.Internal.Text,
                                                                                                                                                                                            Data.Version.Version)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Data.Text.Internal.Text,
                                                                                                                                                                                                                                                                          Data.Version.Version)>_N))) -}
42645a802bf7c219348dfec76bdf7e61
  internalError ::
    Language.PureScript.Publish.ErrorsWarnings.InternalError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.internalError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.InternalError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
eddef1c49f672f49e65a938f5bc2a4a9
  internalError1 ::
    Language.PureScript.Publish.ErrorsWarnings.InternalError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.InternalError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.InternalError x) #)) -}
3937f3e8718ab78c50d0e76852fd9291
  otherError ::
    Language.PureScript.Publish.ErrorsWarnings.OtherError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.otherError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.OtherError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
e4ce8d8d15eb3671d4b393112ebc8d53
  otherError1 ::
    Language.PureScript.Publish.ErrorsWarnings.OtherError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.OtherError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.OtherError x) #)) -}
369b00c43baf0ebbf416a80171e04a01
  preparePackage ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Types.IO
         (Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            Language.PureScript.Docs.Types.UploadedPackage)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.preparePackage1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  Language.PureScript.Docs.Types.UploadedPackage>_R)) -}
d9e150b0bf9721a8b9c03e64f60e1d54
  preparePackage' ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM
         Language.PureScript.Docs.Types.UploadedPackage
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),1*C1(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.preparePackage2
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (Language.PureScript.Docs.Types.UploadedPackage,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(Language.PureScript.Docs.Types.UploadedPackage,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <Language.PureScript.Docs.Types.UploadedPackage>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Language.PureScript.Docs.Types.UploadedPackage>_N))) -}
6b8b5d77a372886fb3468b752d7d69c1
  preparePackage1 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            Language.PureScript.Docs.Types.UploadedPackage #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: (\ (manifestFile :: GHC.IO.FilePath)
                   (resolutionsFile :: GHC.IO.FilePath)
                   (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.PureScript.Publish.preparePackage2
                        manifestFile
                        resolutionsFile
                        opts
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ Language.PureScript.Docs.Types.UploadedPackage
                           x #)
                   Data.Either.Right y
                   -> case y of wild1 { (,) result warns ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stderr
                             (case Language.PureScript.Publish.ErrorsWarnings.$wrenderWarnings
                                     warns of ww { (#,,#) ww1 ww2 ww3 ->
                              Data.OldList.unlines
                                (Text.PrettyPrint.Boxes.$wrenderBox ww1 ww2 ww3) })
                             GHC.Types.False
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ Language.PureScript.Docs.Types.UploadedPackage
                           result #) } } } }) -}
b810fe444fc9fc219144ab2f1c5eafeb
  preparePackage2 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Language.PureScript.Docs.Types.UploadedPackage,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),1*C1(U(U,1*U)))><S,U> -}
8f9d342e85f93dbfc483b25c9e76c8e2
  publishGetTagTime ::
    Language.PureScript.Publish.PublishOptions
    -> Data.Text.Internal.Text
    -> Language.PureScript.Publish.PrepareM
         Data.Time.Clock.Internal.UTCTime.UTCTime
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds3 }) -}
8f9d342e85f93dbfc483b25c9e76c8e2
  publishGetVersion ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM
         (Data.Text.Internal.Text, Data.Version.Version)
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds2 }) -}
8f9d342e85f93dbfc483b25c9e76c8e2
  publishWorkingTreeDirty ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM ()
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds4 }) -}
f2492a5fd96920f3fafc7409ca3cf83d
  runPrepareM ::
    Language.PureScript.Publish.PrepareM a
    -> GHC.Types.IO
         (Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.runPrepareM1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.PrepareM a>_R
                 ->_R Language.PureScript.Publish.N:PrepareM[0] <a>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                GHC.Types.IO>_R
                                                                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                         <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <(a,
                                                                                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N)) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  runPrepareM1 ::
    Language.PureScript.Publish.PrepareM a
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds1 :: Language.PureScript.Publish.PrepareM a) -> ds1) -}
bd8a6b7fc044e184c7d4e7a20b0ecd8d
  unPrepareM ::
    Language.PureScript.Publish.PrepareM a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  RecSel Left Language.PureScript.Publish.PrepareM
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.runPrepareM1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.PrepareM a>_R
                 ->_R Language.PureScript.Publish.N:PrepareM[0] <a>_N) -}
677a59189bbc6de0d580321b1fc365d3
  unsafePreparePackage ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Types.IO Language.PureScript.Docs.Types.UploadedPackage
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.unsafePreparePackage1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Language.PureScript.Docs.Types.UploadedPackage>_R)) -}
5c45e1732f58811198681c14a203bac1
  unsafePreparePackage1 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.PureScript.Docs.Types.UploadedPackage #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: (\ (manifestFile :: GHC.IO.FilePath)
                   (resolutionsFile :: GHC.IO.FilePath)
                   (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.PureScript.Publish.preparePackage1
                        manifestFile
                        resolutionsFile
                        opts
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stderr
                             (case Language.PureScript.Publish.ErrorsWarnings.$wrenderError
                                     x of ww { (#,,#) ww1 ww2 ww3 ->
                              Data.OldList.unlines
                                (Text.PrettyPrint.Boxes.$wrenderBox ww1 ww2 ww3) })
                             GHC.Types.False
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitFailure1
                        @ Language.PureScript.Docs.Types.UploadedPackage
                        ipv2 }
                   Data.Either.Right y -> (# ipv, y #) } }) -}
6c7c062f7871654858d127aa8aa52003
  userError ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.userError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.UserError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
927eb084ce663f2607255c90e7e42cd2
  userError1 ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.UserError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.UserError x) #)) -}
f00e65854f06f2bbeaaab0c2f0714dac
  warn ::
    Language.PureScript.Publish.ErrorsWarnings.PackageWarning
    -> Language.PureScript.Publish.PrepareM ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.warn1
                  `cast`
                (<Language.PureScript.Publish.ErrorsWarnings.PackageWarning>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N))) -}
8de0b39bfb4cc66c848d9f2ec87f072d
  warn1 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageWarning
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (GHC.Tuple.(),
                       GHC.Types.:
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                         w
                         (GHC.Types.[]
                            @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) #)) -}
instance GHC.Base.Applicative [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fApplicativePrepareM
instance GHC.Enum.Enum [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fEnumTreeStatus
instance GHC.Classes.Eq [Language.PureScript.Publish.DependencyStatus]
  = Language.PureScript.Publish.$fEqDependencyStatus
instance GHC.Classes.Eq [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fEqTreeStatus
instance GHC.Base.Functor [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fFunctorPrepareM
instance Control.Monad.Error.Class.MonadError [Language.PureScript.Publish.ErrorsWarnings.PackageError,
                                               Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadErrorPrepareM
instance Control.Monad.IO.Class.MonadIO [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadIOPrepareM
instance GHC.Base.Monad [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadPrepareM
instance Control.Monad.Writer.Class.MonadWriter [[],
                                                 Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadWriterPrepareM
instance GHC.Classes.Ord [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fOrdTreeStatus
instance GHC.Show.Show [Language.PureScript.Publish.DependencyStatus]
  = Language.PureScript.Publish.$fShowDependencyStatus
instance GHC.Show.Show [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fShowTreeStatus
"SPEC/Language.PureScript.Publish $fApplicativeExceptT @ IO _" [orphan] forall @ e
                                                                               (v1 :: GHC.Base.Monad
                                                                                        GHC.Types.IO)
                                                                               (v :: GHC.Base.Functor
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ GHC.Types.IO
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Publish.$s$fApplicativeExceptT @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT @ Identity _" [orphan] forall @ e
                                                                                     (v1 :: GHC.Base.Monad
                                                                                              Data.Functor.Identity.Identity)
                                                                                     (v :: GHC.Base.Functor
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ Data.Functor.Identity.Identity
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Publish.$s$fApplicativeExceptT1 @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c*> @ IO _" [orphan] forall @ e
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  GHC.Types.IO)
                                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ GHC.Types.IO
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c*> @ Identity _" [orphan] forall @ e
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ Data.Functor.Identity.Identity
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c<* @ Identity _" [orphan] forall @ e
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c<* @ Data.Functor.Identity.Identity
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$c<*1 @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$cpure @ IO _" [orphan] forall @ e
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    GHC.Types.IO)
                                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$cpure @ Identity _" [orphan] forall @ e
                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                          Data.Functor.Identity.Identity)
                                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                                            Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ Data.Functor.Identity.Identity
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeWriterT_$c<*> @ [PackageWarning] @ (ExceptT
                                                                                    PackageError IO)" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                                        GHC.Types.IO))
                                                                                                                                                                                                                 ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                               @ (Control.Monad.Trans.Except.ExceptT
                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                    GHC.Types.IO)
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Publish $fApplicativeWriterT_$cpure @ [PackageWarning] @ (ExceptT
                                                                                     PackageError
                                                                                     IO)" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                                                                                                                               GHC.Types.IO))
                                                                                                                                                                                                                                                                                                        ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                                @ (Control.Monad.Trans.Except.ExceptT
                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                     GHC.Types.IO)
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Publish $fFunctorExceptT @ IO _" [orphan] forall @ e
                                                                           (v :: GHC.Base.Functor
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.$fFunctorExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT
      @ e
"SPEC/Language.PureScript.Publish $fFunctorExceptT @ Identity _" [orphan] forall @ e
                                                                                 (v :: GHC.Base.Functor
                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fFunctorExceptT @ Data.Functor.Identity.Identity
                                              @ e
                                              v
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT1
      @ e
"SPEC/Language.PureScript.Publish $fFunctorWriterT_$cfmap @ (ExceptT
                                                              PackageError IO) _" [orphan] forall @ w
                                                                                                                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                          Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                          GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                 GHC.Types.IO)
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Publish.$fFunctorPrepareM_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Publish $fMonadErroreExceptT @ IO _" [orphan] forall @ e
                                                                               (v :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT @ e
"SPEC/Language.PureScript.Publish $fMonadErroreExceptT @ Identity _" [orphan] forall @ e
                                                                                     (v :: GHC.Base.Monad
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ Data.Functor.Identity.Identity
                                                 @ e
                                                 v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT1 @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT @ IO _" [orphan] forall @ e
                                                                         (v :: GHC.Base.Monad
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT @ Identity _" [orphan] forall @ e
                                                                               (v :: GHC.Base.Monad
                                                                                       Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT @ Data.Functor.Identity.Identity
                                            @ e
                                            v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT1
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>> @ IO _" [orphan] forall @ e
                                                                              ($dMonad :: GHC.Base.Monad
                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>> @ Identity _" [orphan] forall @ e
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ Data.Functor.Identity.Identity
                                                 @ e
                                                 $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>>= @ IO _" [orphan] forall @ e
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>>= @ Identity _" [orphan] forall @ e
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ Data.Functor.Identity.Identity
                                                  @ e
                                                  $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1
      @ e
"SPEC/Language.PureScript.Publish $fMonadIOExceptT @ IO _" [orphan] forall @ e
                                                                           (v :: Control.Monad.IO.Class.MonadIO
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadIOExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadIOExceptT @ e
"SPEC/Language.PureScript.Publish $fMonadWriterT_$c>> @ [PackageWarning] @ (ExceptT
                                                                             PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                    GHC.Types.IO))
                                                                                                                                                                                                   ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                        @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                             GHC.Types.IO)
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Publish $fMonadWriterT_$c>>= @ [PackageWarning] @ (ExceptT
                                                                              PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                      Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                      GHC.Types.IO))
                                                                                                                                                                                                     ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                              GHC.Types.IO)
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Publish $fMonadWriterT_$cfail @ [PackageWarning] @ (ExceptT
                                                                               PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                        GHC.Types.IO))
                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                          @ (Control.Monad.Trans.Except.ExceptT
                                                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                               GHC.Types.IO)
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Publish $w$c<*> @ Identity _" [orphan] [0] forall @ e
                                                                            (w :: GHC.Base.Monad
                                                                                    Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$w$c<*> @ Data.Functor.Identity.Identity
                                     @ e
                                     w
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$c<*>_$s$w$c<*>
      @ e
"SPEC/Language.PureScript.Publish catchE @ IO _ _ _" [orphan] forall @ e
                                                                     @ a
                                                                     @ e'
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.catchE @ GHC.Types.IO
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE
      @ e
      @ a
      @ e'
"SPEC/Language.PureScript.Publish catchE @ Identity _ _ _" [orphan] forall @ e
                                                                           @ a
                                                                           @ e'
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.catchE @ Data.Functor.Identity.Identity
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE1
      @ e
      @ a
      @ e'
"SPEC/Language.PureScript.Publish listen @ (ExceptT
                                             PackageError IO) _ _" [orphan] forall @ w
                                                                                                                                       @ a
                                                                                                                                       ($dMonad :: GHC.Base.Monad
                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.listen @ (Control.Monad.Trans.Except.ExceptT
                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                GHC.Types.IO)
                                           @ w
                                           @ a
                                           $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$slisten
      @ w
      @ a
"SPEC/Language.PureScript.Publish pass @ (ExceptT
                                           PackageError IO) _ _" [orphan] forall @ w
                                                                                                                                   @ a
                                                                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.pass @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                              GHC.Types.IO)
                                         @ w
                                         @ a
                                         $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$spass @ w @ a
"SPEC/Language.PureScript.Publish tell @ (ExceptT PackageError IO) _" [orphan] forall @ w
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.tell @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                              GHC.Types.IO)
                                         @ w
                                         $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$stell @ w
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

