
==================== FINAL INTERFACE ====================
2018-11-30 20:48:40.54043 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Publish 8043
  interface hash: 04a3e68658b20276b58ac557764fd77a
  ABI hash: 7f9a8efa8b7da2b9e6a9e1f513691a7d
  export-list hash: 2670a96ddb41a4e9e1fe5acc538b1234
  orphan hash: 6c817f209afbd96d6c3925c17bc07820
  flag hash: a40e7d965651c14c9306a25622d2600d
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Publish.checkCleanWorkingTree
  Language.PureScript.Publish.defaultPublishOptions
  Language.PureScript.Publish.getGitWorkingTreeStatus
  Language.PureScript.Publish.getManifestRepositoryInfo
  Language.PureScript.Publish.getModules
  Language.PureScript.Publish.getResolvedDependencies
  Language.PureScript.Publish.getVersionFromGitTag
  Language.PureScript.Publish.internalError
  Language.PureScript.Publish.otherError
  Language.PureScript.Publish.preparePackage
  Language.PureScript.Publish.preparePackage'
  Language.PureScript.Publish.runPrepareM
  Language.PureScript.Publish.unsafePreparePackage
  Language.PureScript.Publish.userError
  Language.PureScript.Publish.warn
  Language.PureScript.Publish.PrepareM
  Language.PureScript.Publish.PublishOptions{Language.PureScript.Publish.PublishOptions publishGetTagTime publishGetVersion publishWorkingTreeDirty}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs
                     Language.PureScript.Docs.Convert
                     Language.PureScript.Docs.Convert.ReExports
                     Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.Css
                     Language.PureScript.Docs.ParseInPackage
                     Language.PureScript.Docs.Prim Language.PureScript.Docs.Render
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Tags Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Publish.ErrorsWarnings
                     Language.PureScript.Publish.Utils Language.PureScript.Renamer
                     Language.PureScript.Sugar Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: Cabal-2.2.0.1 Glob-0.9.2 aeson-1.3.1.1
                      aeson-better-errors-0.9.1.0 ansi-terminal-0.8.0.4 array-0.5.2.0
                      async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4
                      binary-0.8.5.1 blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 file-embed-0.0.10.1 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 process-1.6.3.0 protolude-0.2.2
                      random-1.1 safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: colour-2.3.4:Data.Colour
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Cabal-2.2.0.1:Distribution.CabalSpecVersion
                         Cabal-2.2.0.1:Distribution.Compat.Semigroup
                         Cabal-2.2.0.1:Distribution.Parsec.Common
                         Cabal-2.2.0.1:Distribution.SPDX.License
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseExceptionId
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseExpression
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseId
                         Cabal-2.2.0.1:Distribution.SPDX.LicenseReference
                         aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.Types
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Cabal-2.2.0.1:Distribution.Parsec.Class 4cb4f0dc5e9a58183e1a5663d9d149fc
import  -/  Cabal-2.2.0.1:Distribution.SPDX 56185959f6af55bc8c414cb16e9ca674
import  -/  Cabal-2.2.0.1:Distribution.SPDX.License 08564fbea48930f4be7ee6668d296553
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors ff0e80615ece0f0dd064c946f929132c
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors.Internal 066898b2dd92d5d1cfd1d0f21692c75d
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta 762fc9d54b3452d3ab89a9561af46cd3
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal 2e82adc50425e6a0d9ef6a12e29999f7
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  process-1.6.3.0:System.Process 17a215e760465e01e09a5bb6ca1a6adb
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.Bool cdac0e1e4ccf4064999c851029bcfcb2
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
  version 60671cce5d1f57bd25291c665c13273e
import  -/  Language.PureScript.Docs 46c76393ed10ce047f1ff7fc97c85af9
  exports: b76173161093495fd5785e5d52a9b586
import  -/  Language.PureScript.Docs.Convert 0ff3b576d52bae937ee4df90e8c7a003
  convertModulesInPackage 9e189efe10a9328298622b99d84b216c
import  -/  Language.PureScript.Docs.ParseInPackage 28a8e168a234e16d9ea50ede2ce2984f
  parseFilesInPackages 8641d60bc172ca80afc005164d7ca17f
import  -/  Language.PureScript.Docs.Types f3dabfa61d83d3270ed9cf5a3f1e8614
  GithubRepo 6db546b29a907bf27f3c063afdaa5471
  GithubRepo 15392606004557971f6394abf491a56b
  GithubUser 5f8b2e7c6448696cbad65b3207243914
  GithubUser 4213a1bc98ac6d8eac5be06f7fb2cdec
  ManifestError a8ccfa1bdca7e352c2670454697bb27a
  Module 8e63d40d255dc7777120ed694edffc05
  NotYetKnown fd5527426c466e4971789b1563c19d6c
  Package 97a760e09dac571b5eea2ffcf22dc007
  UploadedPackage deaee72aa25c8f2cc2cdad218d4aad3d
  parseVersion' 05ef671ed5e31de32ac1ab5e8680a891
  pkgCompilerVersion 15392606004557971f6394abf491a56b
  pkgGithub 15392606004557971f6394abf491a56b
  pkgMeta 15392606004557971f6394abf491a56b
  pkgModuleMap 15392606004557971f6394abf491a56b
  pkgModules 15392606004557971f6394abf491a56b
  pkgResolvedDependencies 15392606004557971f6394abf491a56b
  pkgTagTime 15392606004557971f6394abf491a56b
  pkgUploader 15392606004557971f6394abf491a56b
  pkgVersion 15392606004557971f6394abf491a56b
  pkgVersionTag 15392606004557971f6394abf491a56b
  runGithubRepo 15392606004557971f6394abf491a56b
  runGithubUser 4213a1bc98ac6d8eac5be06f7fb2cdec
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
import  -/  Language.PureScript.Publish.ErrorsWarnings 4023aa29c27481d4884110bdf92187be
  exports: 31c297e21bb6fac61d66885ea232c963
  AmbiguousVersions ce36527d00c76c79ce9f448f0fe3f991
  BadRepositoryField bfd50e15dd697aaac11ed2d484ede0d8
  BadRepositoryType c017eeacd464106f38ec38107db5a8fe
  CompileError 51907d39d68566d35a99e831042a9d0d
  CouldntDecodePackageManifest 1c0ea4fcd66043fc780fe017e73eb920
  CouldntParseGitTagDate 1e276ab210caf169cd471cec8dbb4802
  DirtyWorkingTree e948c3eed0521e0bd46de5866999b442
  FromResolutions 1a1329ff08393668ad000156fc562c5d
  IOExceptionThrown 6635383cf0faf6d46552975ef926f6a2
  InternalError 6354e86ab2104eae4e1f78b3c8e2e05d
  InternalError 9f2f45a8e213d1899c236c95177783af
  InvalidLicense 3ae9d9f18baf7365a07839ddf69bab1c
  JSONError 208ec8a93da2b8a2c49adc7aba8be55c
  MissingDependencies c84d13bcf95ce01633221fb78b98e657
  MissingPath e44c13a7399781264e403420120292f8
  NoLicenseSpecified c3de61c232391bad2746fbfbe8fb6f0b
  NoResolvedVersion 9877ce9afec7ae6dd1fe1655597c0e3c
  NotOnGithub 57e109203e2df5da63f92bcd66388cd9
  OtherError df17eb53aa0915ae4cbea07c04b55692
  OtherError a03ba57b8ba8d954b9bffaa31c75a3b4
  PackageError c3ae6a50ef0d7cdceedca8b70b56988d
  PackageManifestNotFound 8150ef9a303493a1dbdb6d54cfd62e90
  PackageWarning e7661e9e973a95b6e75622ad011f440f
  ProcessFailed 51dac9ec83513e9dfa45dd9324c92973
  RepositoryFieldMissing 9a951d2fa755eff72382a4cb104f57ad
  ResolutionsFileNotFound 38952d1822d8efd3ec00c8c3ed7674ff
  TagMustBeCheckedOut 433a07b0a4c59b62d557fa2dc634b121
  UnacceptableVersion 720c01fc476a7ed5efbe01bd12a87f4e
  UndeclaredDependency 050d4aaa3efc331ecf5ae49f3147ceee
  UserError cac9df7b725ef44c2a65f18579c9c3c8
  UserError dc9821c099e0f6cb216d2fdbdaf2fabd
  printError 824d421bd98ce18320bbdcaee9d1153a
  printWarnings 4287250db485365e151c03eb818afffc
import  -/  Language.PureScript.Publish.Utils 0a4c97793e667fa5d30f38088d82f4a1
  exports: bb49a4a60796f8293ab049e414647db2
  globRelative 16507c4c52bbf8b935f13acc154a013c
  purescriptSourceFiles 753c6d610d0179acef4b17d83544a8ab
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  time-1.8.0.2:Data.Time.Clock 38823c785626821df1f9ec84dba1c4d7
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime 509e80f9ead2e875ca9536acb5e422cc
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX 99d43d3f2db488fcbee82dc4781c8d1c
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
d105eab161d744a00e3102be0c4e2afe
  $fApplicativePrepareM ::
    GHC.Base.Applicative Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fFunctorPrepareM
                  Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$cpure
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)
                  Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$c<*>
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a -> b>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  (\ @ a @ b @ c ->
                   Language.PureScript.Publish.$fApplicativePrepareM3 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (c,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(c,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <c>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <c>_N)))
                  (\ @ a @ b ->
                   Language.PureScript.Publish.$fApplicativePrepareM2 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(b,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <b>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)))
                  Language.PureScript.Publish.$fApplicativePrepareM1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
9b409c770c176823ce72a4245ae60120
  $fApplicativePrepareM1 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x -> ds1
                   Data.Either.Right y
                   -> case eta1
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (a1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
6ee74d9c5e90a07b80f595c1f44ddc45
  $fApplicativePrepareM2 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x #)
                   Data.Either.Right y
                   -> case eta1
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> ds2
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (b1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
4781f3aa7fa222c026d8933657687aee
  $fApplicativePrepareM3 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ c
                   @ b
                   @ a
                   (eta :: a -> b -> c)
                   (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              a)
                   (eta2 :: Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x #)
                   Data.Either.Right y
                   -> case eta2
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x
                        -> (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (c, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (case y of wild2 { (,) a1 w10 ->
                                 case x of wild3 { (,) b1 w' ->
                                 (eta a1 b1,
                                  GHC.Base.++
                                    @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                    w10
                                    w') } }) #) } } } }) -}
050a07b964d1ed27167715a6ae6da084
  $fApplicativePrepareM_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                               GHC.Types.IO)
                            (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO)
                           a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ GHC.Types.IO
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case f1
                           `cast`
                         (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO>_R
                              <a -> b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                <GHC.Types.IO>_R
                                                <(a -> b,
                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                        <Data.Either.Either
                                                                                                                           Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                           (a
                                                                                                                            -> b,
                                                                                                                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x
                         -> Data.Either.Left
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                              x
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                              (\ (ds2 :: (a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])) ->
                               case y of wild1 { (,) a1 w10 ->
                               case ds2 of wild2 { (,) b1 w' ->
                               (a1 b1,
                                GHC.Base.augment
                                  @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                  (\ @ b2
                                     (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                           -> b2 -> b2)[OneShot]
                                     (n :: b2)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                     @ b2
                                     c
                                     n
                                     w10)
                                  w') } }) } #) })
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                 -> (b,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                                                                                                   -> (b,
                                                                                                                       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N))
                   v `cast`
                   (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                        <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                        <Control.Monad.Trans.Except.ExceptT
                           Language.PureScript.Publish.ErrorsWarnings.PackageError
                           GHC.Types.IO>_R
                        <a>_N))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                            GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  GHC.Types.IO>_R
                               <b>_N)) -}
5639b73626f6bf3f43affc84738e0ac2
  $fApplicativePrepareM_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (a1,
                       GHC.Types.[]
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <a>_N))) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus ::
    GHC.Enum.Enum Language.PureScript.Publish.TreeStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEnumTreeStatus_$csucc
                  Language.PureScript.Publish.$fEnumTreeStatus_$cpred
                  Language.PureScript.Publish.$fEnumTreeStatus_$ctoEnum
                  Language.PureScript.Publish.$fEnumTreeStatus_$cfromEnum
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFrom
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromThen
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromTo
                  Language.PureScript.Publish.$fEnumTreeStatus_$cenumFromThenTo -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus1 :: [Language.PureScript.Publish.TreeStatus]
  {- Unfolding: (Language.PureScript.Publish.$fEnumTreeStatus_go2
                   1#) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus2 :: [Language.PureScript.Publish.TreeStatus]
  {- Unfolding: (Language.PureScript.Publish.$fEnumTreeStatus_go2
                   0#) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus3 :: Language.PureScript.Publish.TreeStatus
  {- Strictness: x -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus4 :: Language.PureScript.Publish.TreeStatus
  {- Strictness: x -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cenumFrom ::
    Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fEnumTreeStatus2
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fEnumTreeStatus1 }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cenumFromThen ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cenumFromThenTo ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cenumFromTo ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 let {
                   $j2 :: GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Language.PureScript.Publish.Clean
                       -> case GHC.Prim.># x1 0# of lwild {
                            DEFAULT -> Language.PureScript.Publish.$fEnumTreeStatus_go1 x1
                            1# -> GHC.Types.[] @ Language.PureScript.Publish.TreeStatus }
                       Language.PureScript.Publish.Dirty
                       -> case GHC.Prim.># x1 1# of lwild {
                            DEFAULT -> Language.PureScript.Publish.$fEnumTreeStatus_go x1
                            1# -> GHC.Types.[] @ Language.PureScript.Publish.TreeStatus } }
                 } in
                 case x of wild {
                   Language.PureScript.Publish.Clean -> $j2 0#
                   Language.PureScript.Publish.Dirty -> $j2 1# }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cfromEnum ::
    Language.PureScript.Publish.TreeStatus -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean -> GHC.Types.I# 0#
                   Language.PureScript.Publish.Dirty -> GHC.Types.I# 1# }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$cpred ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fEnumTreeStatus3
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.Clean }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$csucc ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.Dirty
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fEnumTreeStatus4 }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_$ctoEnum ::
    GHC.Types.Int -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Publish.$w$ctoEnum ww1 }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_go ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <L,U>m2 -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_go1 ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, Strictness: <L,U>m2 -}
06228ae0631510f9f0080a3ed8bb1894
  $fEnumTreeStatus_go2 ::
    GHC.Prim.Int# -> [Language.PureScript.Publish.TreeStatus]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
d10e0fd1191783926d2e3db38a8a77d4
  $fEqDependencyStatus ::
    GHC.Classes.Eq Language.PureScript.Publish.DependencyStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.DependencyStatus
                  Language.PureScript.Publish.$fEqDependencyStatus_$c==
                  Language.PureScript.Publish.$fEqDependencyStatus_$c/= -}
d10e0fd1191783926d2e3db38a8a77d4
  $fEqDependencyStatus_$c/= ::
    Language.PureScript.Publish.DependencyStatus
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Publish.DependencyStatus)
                   (y :: Language.PureScript.Publish.DependencyStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Missing
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.Missing -> GHC.Types.False }
                   Language.PureScript.Publish.NoResolution
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.NoResolution -> GHC.Types.False }
                   Language.PureScript.Publish.ResolvedOther a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.ResolvedOther b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Publish.ResolvedVersion a1
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Publish.ResolvedVersion b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
d10e0fd1191783926d2e3db38a8a77d4
  $fEqDependencyStatus_$c== ::
    Language.PureScript.Publish.DependencyStatus
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Language.PureScript.Publish.DependencyStatus)
                   (ds2 :: Language.PureScript.Publish.DependencyStatus) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Missing
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.Missing -> GHC.Types.True }
                   Language.PureScript.Publish.NoResolution
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.NoResolution -> GHC.Types.True }
                   Language.PureScript.Publish.ResolvedOther a1
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.ResolvedOther b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Publish.ResolvedVersion a1
                   -> case ds2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Publish.ResolvedVersion b1
                        -> Data.Text.$fEqText_$c== a1 b1 } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEqTreeStatus ::
    GHC.Classes.Eq Language.PureScript.Publish.TreeStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEqTreeStatus_$c==
                  Language.PureScript.Publish.$fEqTreeStatus_$c/= -}
06228ae0631510f9f0080a3ed8bb1894
  $fEqTreeStatus_$c/= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Clean
                   -> case y of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True }
                   Language.PureScript.Publish.Dirty
                   -> case y of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fEqTreeStatus_$c== ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: Language.PureScript.Publish.TreeStatus)
                   (ds2 :: Language.PureScript.Publish.TreeStatus) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Clean
                   -> case ds2 of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case ds2 of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True } }) -}
d105eab161d744a00e3102be0c4e2afe
  $fFunctorPrepareM ::
    GHC.Base.Functor Language.PureScript.Publish.PrepareM
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  (Language.PureScript.Publish.$fFunctorPrepareM_$s$fFunctorWriterT_$cfmap
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fFunctorPrepareM1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
faa24fdfe2c54a6f69182561b713f528
  $fFunctorPrepareM1 ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (x :: a)
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(b,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (b,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (case y of wild1 { (,) a1 w10 -> (x, w10) }) } #) }) -}
c36ed6449047334759c18a89094a8176
  $fFunctorPrepareM_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f1 :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        GHC.Types.IO)
                   @ a
                   @ w
                   @ (Control.Monad.Trans.Except.ExceptT
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        GHC.Types.IO)
                   @ b
                   @ w
                   (\ (x :: GHC.Types.IO
                              (Data.Either.Either
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError (a, w)))
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case x `cast`
                         (GHC.Types.N:IO[0]
                              <Data.Either.Either
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError (a, w)>_R)
                           s of ds1 { (#,#) ipv ipv1 ->
                    (# ipv,
                       case ipv1 of wild {
                         Data.Either.Left x1
                         -> Data.Either.Left
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ (b, w)
                              x1
                         Data.Either.Right y
                         -> Data.Either.Right
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                              @ (b, w)
                              (case y of wild1 { (,) a1 w10 -> (f1 a1, w10) }) } #) })
                     `cast`
                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                             <GHC.Types.IO>_R
                             <(a, w)>_N)
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     (b, w)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                           <GHC.Types.IO>_R
                                                           <(b, w)>_N))) -}
d105eab161d744a00e3102be0c4e2afe
  $fMonadErrorPrepareM ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadErrorPrepareM2
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Publish.ErrorsWarnings.PackageError>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  Language.PureScript.Publish.$fMonadErrorPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R (<Language.PureScript.Publish.ErrorsWarnings.PackageError>_R
                         ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
611c2c3bd6a740e8b1c067e6c8575249
  $fMonadErrorPrepareM1 ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> (Language.PureScript.Publish.ErrorsWarnings.PackageError
        -> Control.Monad.Trans.Writer.Strict.WriterT
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Publish.ErrorsWarnings.PackageError
                GHC.Types.IO)
             a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,U))><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (eta1 :: Language.PureScript.Publish.ErrorsWarnings.PackageError
                            -> Control.Monad.Trans.Writer.Strict.WriterT
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                 (Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    GHC.Types.IO)
                                 a)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (eta1 l)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        ipv
                   Data.Either.Right r
                   -> (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           r #) } }) -}
449ef03a1711ef2e5472d239b0740915
  $fMonadErrorPrepareM2 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (eta :: Language.PureScript.Publish.ErrorsWarnings.PackageError)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      eta #)) -}
d105eab161d744a00e3102be0c4e2afe
  $fMonadIOPrepareM ::
    Control.Monad.IO.Class.MonadIO Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadIOPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
ec874b6703ab5be6a1c3f1c56b1af533
  $fMonadIOPrepareM1 ::
    GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ @ a
                   (act :: GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException a)
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case act `cast` (GHC.Types.N:IO[0] <a>_R)
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv,
                            Data.Either.Right @ GHC.IO.Exception.IOException @ a ipv1 #) })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2 @ a)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (y,
                            GHC.Types.[]
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } }) -}
3bbb7d223352144833868bf6c66f3d86
  $fMonadIOPrepareM2 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException a #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ @ a
                   (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e2
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case GHC.IO.Exception.$fExceptionIOException4 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException a)
                        wild
                        eta1
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (Data.Either.Either GHC.IO.Exception.IOException a)
                             wild
                             eta1
                        1#
                        -> (# eta1,
                              Data.Either.Left
                                @ GHC.IO.Exception.IOException
                                @ a
                                e3
                                  `cast`
                                (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } } } } }) -}
d105eab161d744a00e3102be0c4e2afe
  $fMonadPrepareM ::
    GHC.Base.Monad Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.PrepareM
                  Language.PureScript.Publish.$fApplicativePrepareM
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>=
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R (<a>_R
                         ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <b>_N)
                  Language.PureScript.Publish.$fMonadPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$cfail
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N) -}
0c6b626a6a2aba2cd557b41d5780c8de
  $fMonadPrepareM1 ::
    a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (a1,
                       GHC.Types.[]
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)) -}
581d79367ed40c98d71bb48d0886d903
  $fMonadPrepareM_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO)
                           b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case k `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (b1,
                                 GHC.Base.augment
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                   (\ @ b2
                                      (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                            -> b2 -> b2)[OneShot]
                                      (n :: b2)[OneShot] ->
                                    GHC.Base.foldr
                                      @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                      @ b2
                                      c
                                      n
                                      w10)
                                   w') #) } } } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                            GHC.Types.IO)
                         b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (b,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(b,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <b>_N))) -}
365cb1f818ef42652c6d62001d1c22c4
  $fMonadPrepareM_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Publish.ErrorsWarnings.PackageError
                GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                 GHC.Types.IO)
                              b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a,
                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                <Data.Either.Either
                                                                                                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                   (a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case (k a1)
                             `cast`
                           (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                <Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO>_R
                                <b>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                             <GHC.Types.IO>_R
                                             <(b,
                                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                     <Data.Either.Either
                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                        (b,
                                                                                                                         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R))
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild2 {
                        Data.Either.Left e1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                e1 #)
                        Data.Either.Right x1
                        -> case x1 of wild3 { (,) b1 w' ->
                           (# ipv2,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (b, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (b1,
                                 GHC.Base.augment
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                   (\ @ b2
                                      (c :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                            -> b2 -> b2)[OneShot]
                                      (n :: b2)[OneShot] ->
                                    GHC.Base.foldr
                                      @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                      @ b2
                                      c
                                      n
                                      w10)
                                   w') #) } } } } } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                               GHC.Types.IO)
                            b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (b,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(b,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                 GHC.Types.IO>_R
                                                                                                                                                                                              <b>_N))) -}
f9e444cb77312a0cc6bfb12617002de2
  $fMonadPrepareM_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Magic.noinline
                   @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a1 :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                   @ (Data.Either.Either
                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                        (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                               <GHC.Types.IO>_R
                               <(a,
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N)) -}
d105eab161d744a00e3102be0c4e2afe
  $fMonadWriterPrepareM ::
    Control.Monad.Writer.Class.MonadWriter
      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
      Language.PureScript.Publish.PrepareM
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                  @ Language.PureScript.Publish.PrepareM
                  (GHC.Base.$fMonoid[]
                     @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                  Language.PureScript.Publish.$fMonadPrepareM
                  Language.PureScript.Publish.$fMonadWriterPrepareM1
                    `cast`
                  (forall (a :: <*>_N).
                   <(a,
                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                    (a,
                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                  <GHC.Types.IO>_R
                                                                                                                  <(a,
                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                 <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                    GHC.Types.IO>_R
                                                                                                                                                                                                 <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N)))
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$stell
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (<[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_R
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N)
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$slisten
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <(a,
                                                                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N)
                  (Language.PureScript.Publish.$fMonadWriterPrepareM_$spass
                     @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Language.PureScript.Publish.N:PrepareM[0]) <(a,
                                                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                                     -> [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N
                   ->_R Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N) -}
26359c1ead189017f5a4115f5be62ba2
  $fMonadWriterPrepareM1 ::
    (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: (a,
                          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      x #)) -}
1478b7e78fa089ff22ee7e096fb4d60d
  $fMonadWriterPrepareM_$slisten ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         (a, w)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             w
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <a>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                        <GHC.Types.IO>_R
                                        <(a, w)>_N ; GHC.Types.N:IO[0]
                                                         <Data.Either.Either
                                                            Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                            (a, w)>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((a, w), w)
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((a, w), w)
                           ((a1, w10), w10) #) } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((a, w), w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                              <GHC.Types.IO>_R
                                                              <((a, w),
                                                                w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                  <w>_N
                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                     GHC.Types.IO>_R
                                                                                  <(a, w)>_N))) -}
fb4e19e3024c9251d48ee4c86b5e7331
  $fMonadWriterPrepareM_$spass ::
    Control.Monad.Trans.Writer.Strict.WriterT
      w
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         GHC.Types.IO)
      (a, w -> w)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w
                   @ a
                   (m11 :: Control.Monad.Trans.Writer.Strict.WriterT
                             w
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                GHC.Types.IO)
                             (a, w -> w))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <w>_N
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              GHC.Types.IO>_R
                           <(a, w -> w)>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                  <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                  <GHC.Types.IO>_R
                                                  <((a, w -> w), w)>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                ((a, w -> w),
                                                                                 w)>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, w)
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) ds2 w10 ->
                      case ds2 of wild2 { (,) a1 f1 ->
                      (# ipv,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (a, w)
                           (a1, f1 w10) #) } } } })
                  `cast`
                (forall (w :: <*>_N) (a :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    w
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                       GHC.Types.IO)
                    (a, w -> w)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a, w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                         <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                         <GHC.Types.IO>_R
                                                         <(a,
                                                           w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                             <w>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                GHC.Types.IO>_R
                                                                             <a>_N))) -}
8b202e218848e31f9991b0f329e8f2af
  $fMonadWriterPrepareM_$stell ::
    w
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w (w10 :: w) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), w)
                      (GHC.Tuple.(), w10) #))
                  `cast`
                (forall (w :: <*>_N).
                 <w>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((), w)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                          <GHC.Types.IO>_R
                                                          <((),
                                                            w)>_N) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                              <w>_N
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                 GHC.Types.IO>_R
                                                                              <()>_N))) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus ::
    GHC.Classes.Ord Language.PureScript.Publish.TreeStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fEqTreeStatus
                  Language.PureScript.Publish.$fOrdTreeStatus_$ccompare
                  Language.PureScript.Publish.$fOrdTreeStatus_$c<
                  Language.PureScript.Publish.$fOrdTreeStatus_$c<=
                  Language.PureScript.Publish.$fOrdTreeStatus_$c>
                  Language.PureScript.Publish.$fOrdTreeStatus_$c>=
                  Language.PureScript.Publish.$fOrdTreeStatus_$cmax
                  Language.PureScript.Publish.$fOrdTreeStatus_$cmin -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$c< ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.False
                        Language.PureScript.Publish.Dirty -> GHC.Types.True }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$c<= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case b of wild {
                   Language.PureScript.Publish.Clean
                   -> case a of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$c> ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 Language.PureScript.Publish.$fOrdTreeStatus_$c< b a) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$c>= ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.True
                        Language.PureScript.Publish.Dirty -> GHC.Types.False }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$ccompare ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Publish.TreeStatus)
                   (b :: Language.PureScript.Publish.TreeStatus) ->
                 case a of wild {
                   Language.PureScript.Publish.Clean
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.EQ
                        Language.PureScript.Publish.Dirty -> GHC.Types.LT }
                   Language.PureScript.Publish.Dirty
                   -> case b of wild1 {
                        Language.PureScript.Publish.Clean -> GHC.Types.GT
                        Language.PureScript.Publish.Dirty -> GHC.Types.EQ } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$cmax ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case y of wild {
                   Language.PureScript.Publish.Clean -> x
                   Language.PureScript.Publish.Dirty
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Publish.Dirty } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fOrdTreeStatus_$cmin ::
    Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
    -> Language.PureScript.Publish.TreeStatus
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus)
                   (y :: Language.PureScript.Publish.TreeStatus) ->
                 case y of wild {
                   Language.PureScript.Publish.Clean
                   -> case x of wild1 { DEFAULT -> Language.PureScript.Publish.Clean }
                   Language.PureScript.Publish.Dirty -> x }) -}
d10e0fd1191783926d2e3db38a8a77d4
  $fShowDependencyStatus ::
    GHC.Show.Show Language.PureScript.Publish.DependencyStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.DependencyStatus
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshowsPrec
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshow
                  Language.PureScript.Publish.$fShowDependencyStatus_$cshowList -}
d10e0fd1191783926d2e3db38a8a77d4
  $fShowDependencyStatus1 ::
    Language.PureScript.Publish.DependencyStatus -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Publish.$fShowDependencyStatus_$cshowsPrec
                   Language.PureScript.Publish.$fShowDependencyStatus2) -}
ba0c184403816f2c80ff7a9f19e9fb38
  $fShowDependencyStatus2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
165672f7841eb7883a26b2022c2c643e
  $fShowDependencyStatus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ResolvedVersion "#) -}
21fa47e37fa156181d6dae369a1a5796
  $fShowDependencyStatus4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ResolvedOther "#) -}
1c9cb91af6efd7590475e473a582cf80
  $fShowDependencyStatus5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowDependencyStatus6) -}
6d04c309161e695b0c66d3c64119e865
  $fShowDependencyStatus6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoResolution"#) -}
2f1954234d9c53fe6972e7daf968291f
  $fShowDependencyStatus7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowDependencyStatus8) -}
befde40c1f4ceb3d11dc9d30cde81763
  $fShowDependencyStatus8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Missing"#) -}
d10e0fd1191783926d2e3db38a8a77d4
  $fShowDependencyStatus_$cshow ::
    Language.PureScript.Publish.DependencyStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Publish.DependencyStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Missing
                   -> Language.PureScript.Publish.$fShowDependencyStatus7
                   Language.PureScript.Publish.NoResolution
                   -> Language.PureScript.Publish.$fShowDependencyStatus5
                   Language.PureScript.Publish.ResolvedOther b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Publish.$fShowDependencyStatus4
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Language.PureScript.Publish.ResolvedVersion b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Publish.$fShowDependencyStatus3
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
d10e0fd1191783926d2e3db38a8a77d4
  $fShowDependencyStatus_$cshowList ::
    [Language.PureScript.Publish.DependencyStatus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Publish.DependencyStatus])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Publish.DependencyStatus
                   Language.PureScript.Publish.$fShowDependencyStatus1
                   ls
                   s) -}
d10e0fd1191783926d2e3db38a8a77d4
  $fShowDependencyStatus_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Publish.DependencyStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds1 :: GHC.Types.Int)
                   (ds2 :: Language.PureScript.Publish.DependencyStatus)
                   (eta :: GHC.Base.String) ->
                 case ds2 of wild {
                   Language.PureScript.Publish.Missing
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Publish.$fShowDependencyStatus7
                        eta
                   Language.PureScript.Publish.NoResolution
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Publish.$fShowDependencyStatus5
                        eta
                   Language.PureScript.Publish.ResolvedOther b1
                   -> case ds1 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Publish.$fShowDependencyStatus4
                             (case Data.Text.Show.$w$cshowsPrec b1 eta of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Publish.$fShowDependencyStatus4
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } }
                   Language.PureScript.Publish.ResolvedVersion b1
                   -> case ds1 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Publish.$fShowDependencyStatus3
                             (case Data.Text.Show.$w$cshowsPrec b1 eta of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Publish.$fShowDependencyStatus3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fShowTreeStatus ::
    GHC.Show.Show Language.PureScript.Publish.TreeStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Publish.TreeStatus
                  Language.PureScript.Publish.$fShowTreeStatus_$cshowsPrec
                  Language.PureScript.Publish.$fShowTreeStatus_$cshow
                  Language.PureScript.Publish.$fShowTreeStatus_$cshowList -}
06228ae0631510f9f0080a3ed8bb1894
  $fShowTreeStatus1 ::
    Language.PureScript.Publish.TreeStatus -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: Language.PureScript.Publish.TreeStatus)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Publish.Clean
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus4)
                        eta
                   Language.PureScript.Publish.Dirty
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus2)
                        eta }) -}
259675b1fa7278210f3532e5d1781871
  $fShowTreeStatus2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowTreeStatus3) -}
b047445d63d9bc86bd02ea077e1521ad
  $fShowTreeStatus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dirty"#) -}
ebe5a92dd1a27b783e64c1e3da956b3b
  $fShowTreeStatus4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.$fShowTreeStatus5) -}
86ecf42c2dec985cfe358e3ca463c8cb
  $fShowTreeStatus5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Clean"#) -}
06228ae0631510f9f0080a3ed8bb1894
  $fShowTreeStatus_$cshow ::
    Language.PureScript.Publish.TreeStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Publish.TreeStatus) ->
                 case x of wild {
                   Language.PureScript.Publish.Clean
                   -> Language.PureScript.Publish.$fShowTreeStatus4
                   Language.PureScript.Publish.Dirty
                   -> Language.PureScript.Publish.$fShowTreeStatus2 }) -}
06228ae0631510f9f0080a3ed8bb1894
  $fShowTreeStatus_$cshowList ::
    [Language.PureScript.Publish.TreeStatus] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Publish.TreeStatus])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Publish.TreeStatus
                   Language.PureScript.Publish.$fShowTreeStatus1
                   ls
                   s) -}
06228ae0631510f9f0080a3ed8bb1894
  $fShowTreeStatus_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Publish.TreeStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds1 :: GHC.Types.Int)
                   (ds2 :: Language.PureScript.Publish.TreeStatus)
                   (eta :: GHC.Base.String) ->
                 case ds2 of wild {
                   Language.PureScript.Publish.Clean
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus4)
                        eta
                   Language.PureScript.Publish.Dirty
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Publish.$fShowTreeStatus2)
                        eta }) -}
ef374d026022b227d49fe64dc9ba3218
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT
                     @ e)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ c
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Data.Either.$fApplicativeEither_$cfmap
                           @ e
                           @ a
                           @ (b -> c)
                           f1
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> c>_N)))
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ a
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds1 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Control.Monad.Trans.Except.$fApplicativeExceptT1
                           @ a
                           @ b
                           @ e
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> a>_N))) -}
e86c050b542cd207e8c2e6c7e7002578
  $s$fApplicativeExceptT1 ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT1
                     @ e)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity
                     @ b
                     @ c
                     (Data.Either.$fApplicativeEither_$cfmap
                        @ e
                        @ a
                        @ (b -> c)
                        f1
                        x `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either e a>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <b -> c>_N)))
                  (Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity
                     @ b
                     @ a
                     (Control.Monad.Trans.Except.$fApplicativeExceptT1
                        @ a
                        @ b
                        @ e
                        x `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <e>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either e a>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <b -> a>_N))) -}
4da5f159ad138510dd897a51c18e26d1
  $s$fApplicativeExceptT_$c<*1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ e
                   @ a
                   @ b
                   (x :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity a) ->
                 Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                   @ Data.Functor.Identity.Identity
                   @ e
                   Data.Functor.Identity.$fFunctorIdentity
                   Data.Functor.Identity.$fMonadIdentity
                   @ b
                   @ a
                   (Control.Monad.Trans.Except.$fApplicativeExceptT1
                      @ a
                      @ b
                      @ e
                      x `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <Data.Either.Either
                                e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <e>_N
                                                          <Data.Functor.Identity.Identity>_R
                                                          <b -> a>_N))) -}
7dc84816e7fd41b2400df653133b9644
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Either.Either e b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w10 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b))
                   (w11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w10
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a -> b>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either
                                                                      e (a -> b)>_R)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right k
                   -> case w11
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> (# ipv2, Data.Either.Left @ e @ b e1 #)
                        Data.Either.Right x
                        -> (# ipv2, Data.Either.Right @ e @ b (k x) #) } } } }) -}
242b4bfaacbb8e013fa8c0ca299d26e1
  $s$fApplicativeExceptT_$c<*>_$s$w$c<*> ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   @ a
                   @ b
                   (w10 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity (a -> b))
                   (w11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a) ->
                 case w10
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a -> b>_N ; Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either e (a -> b)>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e>_N
                                                      <Data.Functor.Identity.Identity>_R
                                                      <b>_N))
                   Data.Either.Right k
                   -> case w11
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N
                                <Data.Functor.Identity.Identity>_R
                                <a>_N ; Data.Functor.Identity.N:Identity[0]
                                            <Data.Either.Either e a>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left @ e @ b e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <e>_N
                                                           <Data.Functor.Identity.Identity>_R
                                                           <b>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right @ e @ b (k x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <e>_N
                                                           <Data.Functor.Identity.Identity>_R
                                                           <b>_N)) } }) -}
092e807ea382890aae755a9dcb25073a
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
f9a1ca4cdb03c4d63b4d67bcad3fb538
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
bbb8818fc4e0dbaffdcee5ba2198ba1d
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ e @ a a1 #))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <a>_N)) -}
cc1a3272cc9231baeb76b0e3bf6c75d2
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1 ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.Either.Right
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N
                                                     <Data.Functor.Identity.Identity>_R
                                                     <a>_N)) -}
61c05ca9f984b2277061a113fb699ca9
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO) -}
872a810e0ec794d04ffb0d52805b221d
  $s$fApplicativeExceptT_$s$fFunctorExceptT1 ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ Data.Functor.Identity.Identity
                     @ e
                     Data.Functor.Identity.$fFunctorIdentity) -}
9c3b66c14ac55b3ce7d79670ad41db3f
  $s$fMonadErroreExceptT ::
    Control.Monad.Error.Class.MonadError
      e (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
                     @ e)
                  (\ @ a (x :: e) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Left @ e @ a x #))
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a ->
                   Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE
                     @ e
                     @ a
                     @ e) -}
a84ad7ae5e1781e25a3896e5e625fe4a
  $s$fMonadErroreExceptT1 ::
    Control.Monad.Error.Class.MonadError
      e
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT1
                     @ e)
                  (Data.Either.Left @ e)
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Data.Functor.Identity.Identity>_R
                                                       <a>_N))
                  (\ @ a ->
                   Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE1
                     @ e
                     @ a
                     @ e) -}
9333a0e3e3a7ea34fb9fa1d4e2a93f2f
  $s$fMonadErroreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=
                     @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
                     @ e)
                  (\ @ a (eta :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Right @ e @ a eta #))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a (x :: GHC.Base.String) ->
                   GHC.Magic.noinline
                     @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                     GHC.IO.failIO1
                       `cast`
                     (forall (a1 :: <*>_N).
                      <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                     @ (Data.Either.Either e a)
                     x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <GHC.Types.IO>_R <a>_N)) -}
ad3ff6d7aee582bd4a1ce60db9c17fa3
  $s$fMonadErroreExceptT_$s$fMonadExceptT1 ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e Data.Functor.Identity.Identity)
                  (Language.PureScript.Publish.$s$fApplicativeExceptT1 @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1
                     @ e)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1
                     @ e)
                  (Data.Either.Right @ e)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Data.Functor.Identity.Identity>_R
                                                       <a>_N))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Functor.Identity.Identity (Data.Either.Either e a)))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
37dd8f48b74a2966e27b3ead3af57b70
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
333ca8c266b9cb13a9f6c7d707685b33
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.Except.ExceptT
                           e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT
                         e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
1609c5d33d284eadbe1bed1e60131272
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
fa9ad5b9ca14036f13701f113c1fd653
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> (a
        -> Control.Monad.Trans.Except.ExceptT
             e Data.Functor.Identity.Identity b)
    -> Control.Monad.Trans.Except.ExceptT
         e Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (k :: a
                         -> Control.Monad.Trans.Except.ExceptT
                              e Data.Functor.Identity.Identity b) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left @ e @ b e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e b>_R))
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <Data.Functor.Identity.Identity>_R <b>_N) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Except.ExceptT
                            e Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
095840bab47dc57fb075bc4242ba49b9
  $s$fMonadErroreExceptT_$scatchE ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
    -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m11 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (h :: e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                               <Data.Either.Either e' a>_R)
                        ipv
                   Data.Either.Right r -> (# ipv, Data.Either.Right @ e' @ a r #) } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e' a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e'>_N <GHC.Types.IO>_R <a>_N)) -}
f5b4ff8fd445e9c21b65a15768eab8d1
  $s$fMonadErroreExceptT_$scatchE1 ::
    Control.Monad.Trans.Except.ExceptT
      e Data.Functor.Identity.Identity a
    -> (e
        -> Control.Monad.Trans.Except.ExceptT
             e' Data.Functor.Identity.Identity a)
    -> Control.Monad.Trans.Except.ExceptT
         e' Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*C1(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m11 :: Control.Monad.Trans.Except.ExceptT
                             e Data.Functor.Identity.Identity a)
                   (h :: e
                         -> Control.Monad.Trans.Except.ExceptT
                              e' Data.Functor.Identity.Identity a) ->
                 case m11
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <Data.Either.Either e a>_R) of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <Data.Functor.Identity.Identity>_R <a>_N)
                   Data.Either.Right r
                   -> (Data.Either.Right @ e' @ a r)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either e' a>_R)) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT
                    e Data.Functor.Identity.Identity a>_R
                 ->_R <e
                       -> Control.Monad.Trans.Except.ExceptT
                            e' Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e'>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
ae4f6ebfbcd7de79451e382bdf9e07de
  $s$fMonadIOExceptT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
                     @ e)
                  (\ @ a
                     (x :: GHC.Types.IO a)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case x `cast` (GHC.Types.N:IO[0] <a>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv, Data.Either.Right @ e @ a ipv1 #) })
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N)) -}
4143bdb5ac02d238b517a13ab68c57e2
  $tc'Clean :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   187712627898063764##
                   10028472315647946770##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Clean2
                   0#
                   Language.PureScript.Publish.$tc'Clean1) -}
a0b5cfaac5105da853f9a2cd474ad0ad
  $tc'Clean1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
80e5974d0611e54a0b4c9207cb1179cb
  $tc'Clean2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Clean3) -}
c19669e371a3fc008e809e0d18a8fea1
  $tc'Clean3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Clean"#) -}
4910facb8e873036710e8f984afdf8d3
  $tc'Dirty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8859595626961564422##
                   7995184876065848465##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Dirty1
                   0#
                   Language.PureScript.Publish.$tc'Clean1) -}
4778a748ac4ec2ec559e9f7fa797b1a5
  $tc'Dirty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Dirty2) -}
0a50d5b567706b836dc15d296ba0641d
  $tc'Dirty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Dirty"#) -}
41f83d3642c10a108d96f07e164e1149
  $tc'Missing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15325336392060172624##
                   16393828690020995841##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'Missing2
                   0#
                   Language.PureScript.Publish.$tc'Missing1) -}
727a56c44573a4dcd38206570b45a57e
  $tc'Missing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e70f4c6861683f4b03ae49783778abce
  $tc'Missing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'Missing3) -}
99ebfbdc3d98487f3e3819dc0be680bf
  $tc'Missing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Missing"#) -}
a9cb31caa028ef879bfee939d22364a8
  $tc'NoResolution :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8565086022517155294##
                   6232717977688049276##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'NoResolution1
                   0#
                   Language.PureScript.Publish.$tc'Missing1) -}
f571dab39e5775cd8d457c4b5d852950
  $tc'NoResolution1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'NoResolution2) -}
1b690f0695e071d69811ab59581d0919
  $tc'NoResolution2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoResolution"#) -}
21856a2a38d0bb524db3f7ad12aa900f
  $tc'PrepareM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8715409249017684940##
                   1336076522523382596##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'PrepareM2
                   1#
                   Language.PureScript.Publish.$tc'PrepareM1) -}
e2765fc3cc338846ce28d38af69804a8
  $tc'PrepareM1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9e3fb1374c1451bc1fb9ce66de854f32
  $tc'PrepareM2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'PrepareM3) -}
20758ec7ea800dcc337864f265ea33fb
  $tc'PrepareM3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PrepareM"#) -}
d783584671916264dfe1b810ab4294bf
  $tc'PublishOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5118294765395618767##
                   6814298770262955342##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'PublishOptions2
                   0#
                   Language.PureScript.Publish.$tc'PublishOptions1) -}
7c7e8d36237f78f20c2dbaf09a569ff0
  $tc'PublishOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
88c7d183ef8bc188e57e9c6eaa0b9163
  $tc'PublishOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'PublishOptions3) -}
829e9dbaaca0f2ec98fdb345c3a44390
  $tc'PublishOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PublishOptions"#) -}
47b8e713630925634b2b2bd52fc9f01e
  $tc'ResolvedOther :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   165101510195760100##
                   16651935530386925486##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'ResolvedOther2
                   0#
                   Language.PureScript.Publish.$tc'ResolvedOther1) -}
9b499b49b8f8f57aa4cd4a577f418c77
  $tc'ResolvedOther1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5971ecf1212a11373c9a193d1df9311d
  $tc'ResolvedOther2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'ResolvedOther3) -}
ebffb42f4b596d03a874958cbff5bb07
  $tc'ResolvedOther3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ResolvedOther"#) -}
5266e5e56c714a88c9daf05d147adf0c
  $tc'ResolvedVersion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5809053081063874917##
                   13364651900150136319##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tc'ResolvedVersion1
                   0#
                   Language.PureScript.Publish.$tc'ResolvedOther1) -}
b63b52f7ff4dc56b6ffd760be2a25756
  $tc'ResolvedVersion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tc'ResolvedVersion2) -}
87427613689d1005e311308930aad6a6
  $tc'ResolvedVersion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ResolvedVersion"#) -}
09c5c78c5bbf114c474af971c28c702f
  $tcDependencyStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2549044590818947843##
                   162877922652901605##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcDependencyStatus1
                   0#
                   GHC.Types.krep$*) -}
76a15b39c80dc02a7589a690acb48df4
  $tcDependencyStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcDependencyStatus2) -}
3b52d3f8bb20e1e61db98586755045f9
  $tcDependencyStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DependencyStatus"#) -}
acf301761d4643f92785455c57bb3970
  $tcPrepareM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9549129391091100286##
                   15619787822874121833##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcPrepareM1
                   0#
                   GHC.Types.krep$*Arr*) -}
2b864a949267d1f6d1e390193ed9ec72
  $tcPrepareM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcPrepareM2) -}
ace27546fb1ee67ae5df060fe9575972
  $tcPrepareM2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrepareM"#) -}
afc7b674d9fc78b74d4f53870e397734
  $tcPublishOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15574833066597425822##
                   13797644883213647674##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcPublishOptions1
                   0#
                   GHC.Types.krep$*) -}
0d1cb9c9b9639d83ab552e45794412f7
  $tcPublishOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcPublishOptions2) -}
4a6be092a012b6b265d56dbef2cfc85c
  $tcPublishOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PublishOptions"#) -}
6787c734e3c21527913d417f084a35f5
  $tcTreeStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6157199193036708430##
                   16566884852315423684##
                   Language.PureScript.Publish.$trModule
                   Language.PureScript.Publish.$tcTreeStatus1
                   0#
                   GHC.Types.krep$*) -}
8b8c181ef91b70929f7be77509f3d942
  $tcTreeStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$tcTreeStatus2) -}
52a45670a91e458482acf5fbf388b83c
  $tcTreeStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TreeStatus"#) -}
fbd73c397487b416582811869184eef4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Publish.$trModule3
                   Language.PureScript.Publish.$trModule1) -}
cc80c92cf3dfe93743c0af205c7c1716
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$trModule2) -}
2bff695eded8cff78fe43e9cbbd29ef8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Publish"#) -}
dc13df540864717db5b0a245290414e8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Publish.$trModule4) -}
cea32880704b2b323ab471305eabe3d9
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
06228ae0631510f9f0080a3ed8bb1894
  $w$ctoEnum ::
    GHC.Prim.Int# -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww 0# of lwild {
                   DEFAULT -> Language.PureScript.Publish.$wlvl ww
                   1#
                   -> case GHC.Prim.<=# ww 1# of lwild1 {
                        DEFAULT -> Language.PureScript.Publish.$wlvl ww
                        1#
                        -> GHC.Prim.tagToEnum#
                             @ Language.PureScript.Publish.TreeStatus
                             ww } }) -}
dcfd689148a68c9ab88174aa01513337
  $w$j ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0] -}
f388ed28d8b25f9b4a6cc7e979a73612
  $wextractGithub ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Language.PureScript.Publish.getManifestRepositoryInfo9 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case Data.Text.$wstripPrefix ww4 ww5 ww6 ww ww1 ww2 of wild {
                   GHC.Base.Nothing
                   -> case Language.PureScript.Publish.getManifestRepositoryInfo7 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case Data.Text.$wstripPrefix ww8 ww9 ww10 ww ww1 ww2 of wild1 {
                        GHC.Base.Nothing
                        -> case Language.PureScript.Publish.getManifestRepositoryInfo5 of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           case Data.Text.$wstripPrefix ww12 ww13 ww14 ww ww1 ww2 of wild2 {
                             GHC.Base.Nothing
                             -> GHC.Base.Nothing
                                  @ (Language.PureScript.Docs.Types.GithubUser,
                                     Language.PureScript.Docs.Types.GithubRepo)
                             GHC.Base.Just ipv
                             -> case ipv of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                                Language.PureScript.Publish.$w$j ww16 ww17 ww18 } } }
                        GHC.Base.Just ipv
                        -> case ipv of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           Language.PureScript.Publish.$w$j ww12 ww13 ww14 } } }
                   GHC.Base.Just ipv
                   -> case ipv of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      Language.PureScript.Publish.$w$j ww8 ww9 ww10 } } }) -}
0e409b3eb3a9f0213321cf17e454a1c0
  $wgetManifestRepositoryInfo ::
    GHC.Base.Maybe Web.Bower.PackageMeta.Internal.Repository
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Web.Bower.PackageMeta.Internal.Repository)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case GHC.Prim.catch#
                             @ (Data.Either.Either
                                  GHC.IO.Exception.IOException
                                  (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                             @ GHC.Exception.SomeException
                             Language.PureScript.Publish.getManifestRepositoryInfo19
                             (Language.PureScript.Publish.$fMonadIOPrepareM2
                                @ (Data.Either.Either
                                     GHC.IO.Exception.IOException GHC.Base.String))
                             w of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 {
                        Data.Either.Left x
                        -> Language.PureScript.Publish.getManifestRepositoryInfo18
                             ipv
                             (Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                      x)))
                        Data.Either.Right y
                        -> case y of wild2 {
                             Data.Either.Left x
                             -> Language.PureScript.Publish.getManifestRepositoryInfo18
                                  ipv
                                  (Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (GHC.Base.String,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                        (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                           Language.PureScript.Publish.checkCleanWorkingTree_prog
                                           Language.PureScript.Publish.getManifestRepositoryInfo12
                                           x)))
                             Data.Either.Right y1
                             -> Language.PureScript.Publish.getManifestRepositoryInfo18
                                  ipv
                                  (Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (GHC.Base.String,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (y1,
                                      GHC.Types.[]
                                        @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } } }
                   GHC.Base.Just ds1
                   -> case ds1 of wild1 { Web.Bower.PackageMeta.Internal.Repository ds2 ds3 ->
                      case ds3 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Publish.getManifestRepositoryInfo11 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT
                        -> (# w,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ ((Language.PureScript.Docs.Types.GithubUser,
                                    Language.PureScript.Docs.Types.GithubRepo),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.UserError
                                   (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                                      (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryType
                                         wild2))) #)
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds4 ds5 ->
                           case GHC.Prim.narrow32Int# ds5 of wild4 {
                             DEFAULT
                             -> (# w,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Language.PureScript.Docs.Types.GithubUser,
                                         Language.PureScript.Docs.Types.GithubRepo),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                                           (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryType
                                              wild2))) #)
                             0#
                             -> case ds2 of ww1 { Data.Text.Internal.Text ww2 ww3 ww4 ->
                                case Language.PureScript.Publish.$wextractGithub
                                       ww2
                                       ww3
                                       ww4 of wild6 {
                                  GHC.Base.Nothing
                                  -> (# w, Language.PureScript.Publish.getManifestRepositoryInfo2 #)
                                  GHC.Base.Just x
                                  -> (# w,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ ((Language.PureScript.Docs.Types.GithubUser,
                                              Language.PureScript.Docs.Types.GithubRepo),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (x,
                                           GHC.Types.[]
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } } } } } } } } }) -}
06228ae0631510f9f0080a3ed8bb1894
  $wlvl :: GHC.Prim.Int# -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
8b0b7e28060e140cce660ba5fbd80054
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d10e0fd1191783926d2e3db38a8a77d4
  data DependencyStatus
    = Missing
    | NoResolution
    | ResolvedOther Data.Text.Internal.Text
    | ResolvedVersion Data.Text.Internal.Text
d105eab161d744a00e3102be0c4e2afe
  type role PrepareM nominal
  newtype PrepareM a
    = PrepareM {unPrepareM :: Control.Monad.Trans.Writer.Strict.WriterT
                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                (Control.Monad.Trans.Except.ExceptT
                                   Language.PureScript.Publish.ErrorsWarnings.PackageError
                                   GHC.Types.IO)
                                a}
bdcb73ffefe37aff677e5542dd4d4e9c
  data PublishOptions
    = PublishOptions {publishGetVersion :: Language.PureScript.Publish.PrepareM
                                             (Data.Text.Internal.Text, Data.Version.Version),
                      publishGetTagTime :: Data.Text.Internal.Text
                                           -> Language.PureScript.Publish.PrepareM
                                                Data.Time.Clock.Internal.UTCTime.UTCTime,
                      publishWorkingTreeDirty :: Language.PureScript.Publish.PrepareM ()}
06228ae0631510f9f0080a3ed8bb1894
  data TreeStatus = Clean | Dirty
3a51e349e5fb1bc59d078cb30198008e
  checkCleanWorkingTree ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM ()
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.checkCleanWorkingTree1
                  `cast`
                (<Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N))) -}
169611379a7e959cecb94a3bf79b8a57
  checkCleanWorkingTree1 ::
    Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U(U,U)))><S,U>,
     Unfolding: (\ (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree8
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.checkCleanWorkingTree_args
                                      x)) #)
                        Data.Either.Right y1
                        -> case Language.PureScript.Publish.checkCleanWorkingTree_go
                                  (Data.OldList.lines y1) of wild2 {
                             Language.PureScript.Publish.Clean
                             -> (# ipv,
                                   Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (GHC.Tuple.(),
                                      GHC.Types.[]
                                        @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)
                             Language.PureScript.Publish.Dirty
                             -> case opts of wild3 { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                                case ds4
                                       `cast`
                                     (Language.PureScript.Publish.N:PrepareM[0] <()>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                              <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                 GHC.Types.IO>_R
                                                                                              <()>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                            <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                            <GHC.Types.IO>_R
                                                                                                            <((),
                                                                                                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N ; GHC.Types.N:IO[0]
                                                                                                                                                                                    <Data.Either.Either
                                                                                                                                                                                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                       ((),
                                                                                                                                                                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R)))
                                       ipv of ds5 { (#,#) ipv2 ipv3 ->
                                case ipv3 of wild4 {
                                  Data.Either.Left e1 -> ds5
                                  Data.Either.Right x
                                  -> case x of wild5 { (,) b1 w' ->
                                     (# ipv2,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ ((),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (b1,
                                           GHC.Base.++
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                             (GHC.Types.[]
                                                @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                                             w') #) } } } } } } } }) -}
1fce34e5195ec6788b1a7c646701df8b
  checkCleanWorkingTree10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.checkCleanWorkingTree11
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
96bb0e932eb4e7b9f61147879d629a27
  checkCleanWorkingTree11 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.checkCleanWorkingTree12
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
e744e09fa02a65b9cdc06a869b2129cf
  checkCleanWorkingTree12 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.checkCleanWorkingTree_args) -}
f5a96fffea493b422e02b05ced11015a
  checkCleanWorkingTree2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.checkCleanWorkingTree3
                   (GHC.Types.[] @ GHC.Base.String)) -}
259d9f2a50798c107c6042ab093d0d37
  checkCleanWorkingTree3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree4) -}
883b85d0381408a0b972f5d7a2665887
  checkCleanWorkingTree4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--porcelain"#) -}
6e69090cae39a431b2284514e7d0aba7
  checkCleanWorkingTree5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree6) -}
349576f5294b4eebc326f580d0688d4e
  checkCleanWorkingTree6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("status"#) -}
761e41a8bb943d4622ff2777accb7283
  checkCleanWorkingTree7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git"#) -}
baff7910cfbd78108df8f3f3263c2a1a
  checkCleanWorkingTree8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree10
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
3bea2c6ae0674b2e07db1380bc64084c
  checkCleanWorkingTree9 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.typeRepFingerprint
                        @ *
                        @ e2
                        (GHC.Exception.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N) of wild1 { GHC.Fingerprint.Type.Fingerprint dt dt1 ->
                 case GHC.IO.Exception.$fExceptionIOException4 of wild2 { GHC.Fingerprint.Type.Fingerprint dt2 dt3 ->
                 case GHC.Prim.eqWord# dt dt2 of lwild {
                   DEFAULT
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        wild
                        eta
                   1#
                   -> case GHC.Prim.eqWord# dt1 dt3 of lwild1 {
                        DEFAULT
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                             wild
                             eta
                        1#
                        -> (# eta,
                              Data.Either.Left
                                @ GHC.IO.Exception.IOException
                                @ GHC.Base.String
                                e3
                                  `cast`
                                (UnsafeCo representational e2 GHC.IO.Exception.IOException) #) } } } } }) -}
d678c6fa42f30682d2bb8eb2ab8ff426
  checkCleanWorkingTree_args :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.checkCleanWorkingTree5
                   Language.PureScript.Publish.checkCleanWorkingTree2) -}
1cedb01cfa28fe9867f0ed4effc4090b
  checkCleanWorkingTree_go ::
    [[GHC.Types.Char]] -> Language.PureScript.Publish.TreeStatus
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
dd4f3141fea71a384e1e1d35f03d7bfb
  checkCleanWorkingTree_prog :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree7) -}
1e5eb57b72245f4b4c002724be1ec67e
  defaultPublishOptions :: Language.PureScript.Publish.PublishOptions
  {- Strictness: m,
     Unfolding: (Language.PureScript.Publish.PublishOptions
                   Language.PureScript.Publish.defaultPublishOptions11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((Data.Text.Internal.Text, Data.Version.Version),
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                              <GHC.Types.IO>_R
                                                                                                              <((Data.Text.Internal.Text,
                                                                                                                 Data.Version.Version),
                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                GHC.Types.IO>_R
                                                                                                                                                                                             <(Data.Text.Internal.Text,
                                                                                                                                                                                               Data.Version.Version)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Data.Text.Internal.Text,
                                                                                                                                                                                                                                                                             Data.Version.Version)>_N)))
                   Language.PureScript.Publish.defaultPublishOptions2
                     `cast`
                   (<Data.Text.Internal.Text>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                   <GHC.Types.IO>_R
                                                                                                                   <(Data.Time.Clock.Internal.UTCTime.UTCTime,
                                                                                                                     [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                                  <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                     GHC.Types.IO>_R
                                                                                                                                                                                                  <Data.Time.Clock.Internal.UTCTime.UTCTime>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Data.Time.Clock.Internal.UTCTime.UTCTime>_N)))
                   Language.PureScript.Publish.defaultPublishOptions1
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                ((),
                                 [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                              <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                              <GHC.Types.IO>_R
                                                                                                              <((),
                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                GHC.Types.IO>_R
                                                                                                                                                                                             <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N)))) -}
c2e41c3e5657b8f984176305644c352e
  defaultPublishOptions1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.UserError
                         Language.PureScript.Publish.ErrorsWarnings.DirtyWorkingTree) #)) -}
8f101572b1ba864e5ca71ae211419ab2
  defaultPublishOptions10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--format=%ct"#) -}
66cb715c83a842db4a06a0afe11dcafa
  defaultPublishOptions11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Data.Text.Internal.Text, Data.Version.Version),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.defaultPublishOptions26
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Publish.defaultPublishOptions23
                        ipv
                        (Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (GHC.Base.String,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown x)))
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> Language.PureScript.Publish.defaultPublishOptions23
                             ipv
                             (Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.defaultPublishOptions_args
                                      x)))
                        Data.Either.Right y1
                        -> Language.PureScript.Publish.defaultPublishOptions23
                             ipv
                             (Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (GHC.Base.String,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (y1,
                                 GHC.Types.[]
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } } }) -}
7fc52059d4d513c6e0c6e6dfdc9326c4
  defaultPublishOptions12 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions19
                   Language.PureScript.Publish.defaultPublishOptions13) -}
e32ca0ba8b00d3d7a5d05dd2f276c910
  defaultPublishOptions13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions17
                   Language.PureScript.Publish.defaultPublishOptions14) -}
8eba5117e7a7a5aa4a7a3e7726997c3c
  defaultPublishOptions14 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions15
                   (GHC.Types.[] @ GHC.Base.String)) -}
1e6a7d54056fef8ad9917e29130c5fe8
  defaultPublishOptions15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions16) -}
b15ecfd3bdb4f018a72392f000a50827
  defaultPublishOptions16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HEAD"#) -}
3b2e9cf5abd87454ef729228bec0296e
  defaultPublishOptions17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions18) -}
44b4f986fd49cfad1cf4abd1e30d283d
  defaultPublishOptions18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--points-at"#) -}
dcb917bb397f288707106cd64a5fba4a
  defaultPublishOptions19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions20) -}
c828a1e1f395f8487204c0972e1080ea
  defaultPublishOptions2 ::
    Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Data.Time.Clock.Internal.UTCTime.UTCTime,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,U>,
     Unfolding: (\ (tag :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   args :: [GHC.Types.Char]
                   = case tag of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.>=# ww end of lwild {
                           DEFAULT
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.geWord# r# 55296## of lwild1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                1#
                                -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                     DEFAULT
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     1#
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)))
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                           1# -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   args1 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       args
                       (GHC.Types.[] @ GHC.Base.String)
                 } in
                 let {
                   args2 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions9
                       args1
                 } in
                 let {
                   args3 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions7
                       args2
                 } in
                 let {
                   args4 :: [GHC.Base.String]
                   = GHC.Types.:
                       @ GHC.Base.String
                       Language.PureScript.Publish.defaultPublishOptions5
                       args3
                 } in
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.catch#
                                @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                                @ GHC.Exception.SomeException
                                (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case System.Process.readCreateProcess1
                                        (System.Process.Common.CreateProcess
                                           (System.Process.Common.RawCommand
                                              Language.PureScript.Publish.checkCleanWorkingTree_prog
                                              args4)
                                           (GHC.Base.Nothing @ GHC.IO.FilePath)
                                           (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                                           System.Process.Common.Inherit
                                           System.Process.Common.Inherit
                                           System.Process.Common.Inherit
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           GHC.Types.False
                                           (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                                           (GHC.Base.Nothing @ System.Posix.Types.UserID)
                                           GHC.Types.False)
                                        (GHC.Types.[] @ GHC.Types.Char)
                                        s1 of ds1 { (#,#) ipv ipv1 ->
                                 (# ipv,
                                    Data.Either.Right
                                      @ GHC.IO.Exception.IOException
                                      @ GHC.Base.String
                                      ipv1 #) })
                                Language.PureScript.Publish.checkCleanWorkingTree9
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv,
                            Data.Either.Right
                              @ GHC.IO.Exception.IOException
                              @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                              ipv1 #) })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      args4
                                      x)) #)
                        Data.Either.Right y1
                        -> case Data.Maybe.mapMaybe
                                  @ [GHC.Types.Char]
                                  @ GHC.Integer.Type.Integer
                                  Language.PureScript.Publish.defaultPublishOptions3
                                  (Data.OldList.lines y1) of wild2 {
                             []
                             -> (# ipv,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.InternalError
                                        (Language.PureScript.Publish.ErrorsWarnings.CouldntParseGitTagDate
                                           tag)) #)
                             : t ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> (# ipv,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (case Data.Time.Clock.POSIX.$wposixSecondsToUTCTime
                                                  (Data.Time.Clock.Internal.NominalDiffTime.$fNumNominalDiffTime1
                                                     t)
                                                    `cast`
                                                  (Sym (Data.Fixed.N:Fixed[0]
                                                            <Data.Fixed.E12>_P) ; Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])) of ww { (#,#) ww1 ww2 ->
                                           Data.Time.Clock.Internal.UTCTime.UTCTime ww1 ww2 },
                                           GHC.Types.[]
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #)
                                  : ipv2 ipv3
                                  -> (# ipv,
                                        Data.Either.Left
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (Data.Time.Clock.Internal.UTCTime.UTCTime,
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (Language.PureScript.Publish.ErrorsWarnings.InternalError
                                             (Language.PureScript.Publish.ErrorsWarnings.CouldntParseGitTagDate
                                                tag)) #) } } } } }) -}
f5a10e6d7737d1eb343cf3bed4e4fca6
  defaultPublishOptions20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("--list"#) -}
e3944dcd0b1163bae53599da8c5c46f6
  defaultPublishOptions21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions22) -}
299dad5413e905d1c8d4dd00a898bcee
  defaultPublishOptions22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tag"#) -}
6d91a132a51e4866a4e855058b8e3264
  defaultPublishOptions23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (GHC.Base.String,
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Data.Text.Internal.Text, Data.Version.Version),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Data.Either.Either
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              (GHC.Base.String,
                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ ((Data.Text.Internal.Text, Data.Version.Version),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case Language.PureScript.Publish.defaultPublishOptions_go
                             (Data.OldList.lines a1) of wild2 {
                        []
                        -> (# ipv, Language.PureScript.Publish.defaultPublishOptions24 #)
                        : x1 ds1
                        -> case ds1 of wild3 {
                             []
                             -> (# ipv,
                                   Data.Either.Right
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Data.Text.Internal.Text, Data.Version.Version),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     ((case x1 of wild4 { (,) a2 b1 ->
                                       case GHC.Magic.runRW#
                                              @ ('GHC.Types.TupleRep
                                                   '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                              @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   Data.Text.Internal.Text #)
                                              (\ (s1 :: GHC.Prim.State#
                                                          GHC.Prim.RealWorld)[OneShot] ->
                                               case GHC.Prim.newByteArray#
                                                      @ GHC.Prim.RealWorld
                                                      10#
                                                      s1 of ds2 { (#,#) ipv2 ipv3 ->
                                               Language.PureScript.Publish.$wouter
                                                 ipv3
                                                 4#
                                                 a2
                                                 0#
                                                 ipv2 }) of ds2 { (#,#) ipv2 ipv3 ->
                                       ipv3 } },
                                       case x1 of wild4 { (,) a2 b1 -> b1 }),
                                      w10) #)
                             : ipv2 ipv3
                             -> (# ipv,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ ((Data.Text.Internal.Text, Data.Version.Version),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.AmbiguousVersions
                                           (GHC.Base.map
                                              @ ([GHC.Types.Char], Data.Version.Version)
                                              @ Data.Version.Version
                                              (Data.Tuple.snd
                                                 @ [GHC.Types.Char]
                                                 @ Data.Version.Version)
                                              wild2))) #) } } } }) -}
b7914ae8152611056b79096e16192873
  defaultPublishOptions24 ::
    Data.Either.Either
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      ((Data.Text.Internal.Text, Data.Version.Version),
       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   @ ((Data.Text.Internal.Text, Data.Version.Version),
                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   Language.PureScript.Publish.defaultPublishOptions25) -}
241c94e40dfe85c79953dbfecba93144
  defaultPublishOptions25 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.UserError
                   Language.PureScript.Publish.ErrorsWarnings.TagMustBeCheckedOut) -}
f4052dd290111d0a364fe54a9b567915
  defaultPublishOptions26 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.defaultPublishOptions27
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
d655deee52346b3f4894e96ad982deed
  defaultPublishOptions27 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.defaultPublishOptions28
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
d56958f24eab1a7d1445154d87f65428
  defaultPublishOptions28 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.defaultPublishOptions29
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
fa613032d2bf94676ed39c977cb85486
  defaultPublishOptions29 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.defaultPublishOptions_args) -}
4b80b4de2aa015e36155740b6ce675a5
  defaultPublishOptions3 ::
    GHC.Base.String -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Integer.Type.Integer
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Integer.Type.Integer
                           Language.PureScript.Publish.defaultPublishOptions4
                           s) of wild {
                   [] -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Just @ GHC.Integer.Type.Integer x
                        : ipv ipv1 -> GHC.Base.Nothing @ GHC.Integer.Type.Integer } }) -}
0b52dda3cbb0ebb847487a54d998f30e
  defaultPublishOptions4 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger_$sreadNumber
                   GHC.Read.$fReadInteger2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither7 @ GHC.Integer.Type.Integer)) -}
1ff776d6e5c57fd7d2a1816ddeda293d
  defaultPublishOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions6) -}
9ec256c451f3b76600019173621bd9a1
  defaultPublishOptions6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("log"#) -}
f4794c4ee795fa1656604c0fa0c82944
  defaultPublishOptions7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions8) -}
531e6a9921dcdc801abbcc0a7028b325
  defaultPublishOptions8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-1"#) -}
59bdefb93d20eacc9f147df9ad46a000
  defaultPublishOptions9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.defaultPublishOptions10) -}
155de186ded7ec0fdd786ed4a041a5ba
  defaultPublishOptions_args :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.defaultPublishOptions21
                   Language.PureScript.Publish.defaultPublishOptions12) -}
effa1c074fd1830b1d49265932c120bb
  defaultPublishOptions_go ::
    [[GHC.Types.Char]] -> [([GHC.Types.Char], Data.Version.Version)]
  {- Arity: 1, Strictness: <S,1*U> -}
553ed0737d7759acc0025d7f3c31d55f
  getGitWorkingTreeStatus ::
    Language.PureScript.Publish.PrepareM
      Language.PureScript.Publish.TreeStatus
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getGitWorkingTreeStatus1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                             (Language.PureScript.Publish.TreeStatus,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                           <GHC.Types.IO>_R
                                                                                                           <(Language.PureScript.Publish.TreeStatus,
                                                                                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                          <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                          <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                             GHC.Types.IO>_R
                                                                                                                                                                                          <Language.PureScript.Publish.TreeStatus>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Language.PureScript.Publish.TreeStatus>_N))) -}
fb023099120975a51ba1950bfe8d53e1
  getGitWorkingTreeStatus1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Language.PureScript.Publish.TreeStatus,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String))
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.checkCleanWorkingTree8
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ (Data.Either.Either
                                GHC.IO.Exception.IOException GHC.Base.String))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (Language.PureScript.Publish.TreeStatus,
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                 x)) #)
                   Data.Either.Right y
                   -> case y of wild1 {
                        Data.Either.Left x
                        -> (# ipv,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Language.PureScript.Publish.TreeStatus,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.ProcessFailed
                                      Language.PureScript.Publish.checkCleanWorkingTree_prog
                                      Language.PureScript.Publish.checkCleanWorkingTree_args
                                      x)) #)
                        Data.Either.Right y1
                        -> (# ipv,
                              Data.Either.Right
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (Language.PureScript.Publish.TreeStatus,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.checkCleanWorkingTree_go
                                   (Data.OldList.lines y1),
                                 GHC.Types.[]
                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning) #) } } }) -}
4a0d1ffb1661d88e5ae037fa9f59ed0c
  getManifestRepositoryInfo ::
    Web.Bower.PackageMeta.Internal.PackageMeta
    -> Language.PureScript.Publish.PrepareM
         (Language.PureScript.Docs.Types.GithubUser,
          Language.PureScript.Docs.Types.GithubRepo)
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getManifestRepositoryInfo1
                  `cast`
                (<Web.Bower.PackageMeta.Internal.PackageMeta>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((Language.PureScript.Docs.Types.GithubUser,
                                    Language.PureScript.Docs.Types.GithubRepo),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((Language.PureScript.Docs.Types.GithubUser,
                                                                                                                   Language.PureScript.Docs.Types.GithubRepo),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <(Language.PureScript.Docs.Types.GithubUser,
                                                                                                                                                                                                 Language.PureScript.Docs.Types.GithubRepo)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Language.PureScript.Docs.Types.GithubUser,
                                                                                                                                                                                                                                                                                                    Language.PureScript.Docs.Types.GithubRepo)>_N))) -}
c55407e962cf3244d3f76e7861fa3cca
  getManifestRepositoryInfo1 ::
    Web.Bower.PackageMeta.Internal.PackageMeta
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Web.Bower.PackageMeta.Internal.PackageMeta)
                   (w10 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Web.Bower.PackageMeta.Internal.PackageMeta ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.Publish.$wgetManifestRepositoryInfo
                   ww10
                   w10 }) -}
39c707691400f6424cb08ae5ce30e56e
  getManifestRepositoryInfo10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git://github.com/"#) -}
543488fa01f69d69f2aed2b0698c3ed5
  getManifestRepositoryInfo11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.checkCleanWorkingTree7) -}
17d3ce74a3b5918c445b58e5d4f44116
  getManifestRepositoryInfo12 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.getManifestRepositoryInfo16
                   Language.PureScript.Publish.getManifestRepositoryInfo13) -}
b71f87e4cc8edf5039c8f729036a2eac
  getManifestRepositoryInfo13 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Publish.getManifestRepositoryInfo14
                   (GHC.Types.[] @ GHC.Base.String)) -}
80573eb68edbf260c4cf1a8810784395
  getManifestRepositoryInfo14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo15) -}
556afdb206dd9e2fe7167626d3f85718
  getManifestRepositoryInfo15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("remote.origin.url"#) -}
7a45b23f5cd3722a6c81df73e46967aa
  getManifestRepositoryInfo16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo17) -}
2160f2bd8051884ab027b173dbc710e4
  getManifestRepositoryInfo17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("config"#) -}
c6ac18927dbeae1f1c3d63f0dcb54ab9
  getManifestRepositoryInfo18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (GHC.Base.String,
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((Language.PureScript.Docs.Types.GithubUser,
              Language.PureScript.Docs.Types.GithubRepo),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
21e4a048b830fbab4ab3156a1f778c18
  getManifestRepositoryInfo19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            GHC.IO.Exception.IOException
            (Data.Either.Either
               GHC.IO.Exception.IOException GHC.Base.String) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                        @ GHC.Exception.SomeException
                        Language.PureScript.Publish.getManifestRepositoryInfo20
                        Language.PureScript.Publish.checkCleanWorkingTree9
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ (Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String)
                      ipv1 #) }) -}
9f3663949852dfc890eb69b1d7a43e63
  getManifestRepositoryInfo2 ::
    Data.Either.Either
      Language.PureScript.Publish.ErrorsWarnings.PackageError
      ((Language.PureScript.Docs.Types.GithubUser,
        Language.PureScript.Docs.Types.GithubRepo),
       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                   @ ((Language.PureScript.Docs.Types.GithubUser,
                       Language.PureScript.Docs.Types.GithubRepo),
                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                   Language.PureScript.Publish.getManifestRepositoryInfo3) -}
60ae3ffea10996aa5d4e22e5a1fbd6dd
  getManifestRepositoryInfo20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either GHC.IO.Exception.IOException GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Process.readCreateProcess1
                        Language.PureScript.Publish.getManifestRepositoryInfo21
                        (GHC.Types.[] @ GHC.Types.Char)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ GHC.IO.Exception.IOException
                      @ GHC.Base.String
                      ipv1 #) }) -}
6ef292348cb4eebf5b28715826600260
  getManifestRepositoryInfo21 :: System.Process.Common.CreateProcess
  {- Unfolding: (System.Process.Common.CreateProcess
                   Language.PureScript.Publish.getManifestRepositoryInfo22
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   System.Process.Common.Inherit
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                   (GHC.Base.Nothing @ System.Posix.Types.UserID)
                   GHC.Types.False) -}
0c605c1a836713fd27c30e89bcaad21a
  getManifestRepositoryInfo22 :: System.Process.Common.CmdSpec
  {- Strictness: m2,
     Unfolding: (System.Process.Common.RawCommand
                   Language.PureScript.Publish.checkCleanWorkingTree_prog
                   Language.PureScript.Publish.getManifestRepositoryInfo12) -}
db7ffb93617e4c049149d6aba4a431d6
  getManifestRepositoryInfo3 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageError
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.UserError
                   Language.PureScript.Publish.getManifestRepositoryInfo4) -}
e464c7eccf4b87f0ddd130be710b8987
  getManifestRepositoryInfo4 ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (Language.PureScript.Publish.ErrorsWarnings.BadRepositoryField
                   Language.PureScript.Publish.ErrorsWarnings.NotOnGithub) -}
cf204214aa25e9a0608e218c9f6d34df
  getManifestRepositoryInfo5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo6) -}
89f9dae64fcae3b0f4aea38b62d48d0a
  getManifestRepositoryInfo6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("git@github.com:"#) -}
9a9f55a7fbf3a2a5ba7e9ddbb1825e34
  getManifestRepositoryInfo7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo8) -}
a989819cc4ed646de96ac5f9d9e3c142
  getManifestRepositoryInfo8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("https://github.com/"#) -}
a2c2cc7565dbf835024ad94fec90379d
  getManifestRepositoryInfo9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Publish.getManifestRepositoryInfo10) -}
4143934692f02ec73266e683882d2f32
  getModules ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> Language.PureScript.Publish.PrepareM
         ([Language.PureScript.Docs.Types.Module],
          Data.Map.Internal.Map
            Language.PureScript.Names.ModuleName
            Web.Bower.PackageMeta.Internal.PackageName)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getModules1
                  `cast`
                (<[(Web.Bower.PackageMeta.Internal.PackageName,
                    GHC.IO.FilePath)]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (([Language.PureScript.Docs.Types.Module],
                                    Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      Web.Bower.PackageMeta.Internal.PackageName),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(([Language.PureScript.Docs.Types.Module],
                                                                                                                   Data.Map.Internal.Map
                                                                                                                     Language.PureScript.Names.ModuleName
                                                                                                                     Web.Bower.PackageMeta.Internal.PackageName),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <([Language.PureScript.Docs.Types.Module],
                                                                                                                                                                                                 Data.Map.Internal.Map
                                                                                                                                                                                                   Language.PureScript.Names.ModuleName
                                                                                                                                                                                                   Web.Bower.PackageMeta.Internal.PackageName)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <([Language.PureScript.Docs.Types.Module],
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                         Language.PureScript.Names.ModuleName
                                                                                                                                                                                                                                                                                                         Web.Bower.PackageMeta.Internal.PackageName)>_N))) -}
3eef059fada86e2816c9b880d17c3da5
  getModules1 ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (([Language.PureScript.Docs.Types.Module],
              Data.Map.Internal.Map
                Language.PureScript.Names.ModuleName
                Web.Bower.PackageMeta.Internal.PackageName),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (paths :: [(Web.Bower.PackageMeta.Internal.PackageName,
                               GHC.IO.FilePath)])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ (Data.Either.Either
                             GHC.IO.Exception.IOException
                             ([GHC.IO.FilePath],
                              [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]))
                        @ GHC.Exception.SomeException
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case System.IO.Error.modifyIOError1
                                @ GHC.IO.FilePath
                                System.Directory.Internal.Common.getCurrentDirectory6
                                System.Directory.Internal.Common.getCurrentDirectory2
                                  `cast`
                                (Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R))
                                s of ds1 { (#,#) ipv ipv1 ->
                         case System.FilePath.Glob.Directory.glob2
                                System.FilePath.Glob.Directory.globDefault
                                Language.PureScript.Publish.getModules4
                                ipv1
                                ipv of ds2 { (#,#) ipv2 ipv3 ->
                         case Language.PureScript.Publish.getModules3
                                paths
                                ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                         (# ipv4,
                            Data.Either.Right
                              @ GHC.IO.Exception.IOException
                              @ ([GHC.IO.FilePath],
                                 [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)])
                              (case ipv3 of wild { (,) x ds4 ->
                               GHC.List.head @ [GHC.IO.FilePath] x },
                               Language.PureScript.Publish.getModules_go ipv5) #) } } })
                        (Language.PureScript.Publish.$fMonadIOPrepareM2
                           @ ([GHC.IO.FilePath],
                              [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.Publish.getModules2
                        ipv
                        (Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([GHC.IO.FilePath],
                               [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (Language.PureScript.Publish.ErrorsWarnings.OtherError
                              (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown x)))
                   Data.Either.Right y
                   -> Language.PureScript.Publish.getModules2
                        ipv
                        (Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([GHC.IO.FilePath],
                               [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           (y,
                            GHC.Types.[]
                              @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) } }) -}
4efa9f3b151851fa0b0c480beea7fb4c
  getModules2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Either.Either
         Language.PureScript.Publish.ErrorsWarnings.PackageError
         (([GHC.IO.FilePath],
           [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
          [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (([Language.PureScript.Docs.Types.Module],
              Data.Map.Internal.Map
                Language.PureScript.Names.ModuleName
                Web.Bower.PackageMeta.Internal.PackageName),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: Data.Either.Either
                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                              (([GHC.IO.FilePath],
                                [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]),
                               [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))[OneShot] ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ (([Language.PureScript.Docs.Types.Module],
                               Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 Web.Bower.PackageMeta.Internal.PackageName),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                           e1 #)
                   Data.Either.Right x
                   -> case x of wild1 { (,) a1 w10 ->
                      case a1 of wild2 { (,) inputFiles depsFiles ->
                      case GHC.Prim.catch#
                             @ (Data.Either.Either
                                  GHC.IO.Exception.IOException
                                  (Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([(GHC.IO.FilePath,
                                        Language.PureScript.AST.Declarations.Module)],
                                      Data.Map.Internal.Map
                                        Language.PureScript.Names.ModuleName
                                        Web.Bower.PackageMeta.Internal.PackageName)))
                             @ GHC.Exception.SomeException
                             (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case (Language.PureScript.Docs.ParseInPackage.parseFilesInPackages
                                      @ (Control.Monad.Trans.Except.ExceptT
                                           Language.PureScript.Errors.MultipleErrors GHC.Types.IO)
                                      (Language.PureScript.Publish.$s$fMonadErroreExceptT
                                         @ Language.PureScript.Errors.MultipleErrors)
                                      (Language.PureScript.Publish.$s$fMonadIOExceptT
                                         @ Language.PureScript.Errors.MultipleErrors)
                                      inputFiles
                                      depsFiles)
                                     `cast`
                                   (Control.Monad.Trans.Except.N:ExceptT[0]
                                        <Language.PureScript.Errors.MultipleErrors>_N
                                        <GHC.Types.IO>_R
                                        <([(GHC.IO.FilePath,
                                            Language.PureScript.AST.Declarations.Module)],
                                          Data.Map.Internal.Map
                                            Language.PureScript.Names.ModuleName
                                            Web.Bower.PackageMeta.Internal.PackageName)>_N ; GHC.Types.N:IO[0]
                                                                                                 <Data.Either.Either
                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                    ([(GHC.IO.FilePath,
                                                                                                       Language.PureScript.AST.Declarations.Module)],
                                                                                                     Data.Map.Internal.Map
                                                                                                       Language.PureScript.Names.ModuleName
                                                                                                       Web.Bower.PackageMeta.Internal.PackageName)>_R)
                                     s of ds1 { (#,#) ipv2 ipv3 ->
                              (# ipv2,
                                 Data.Either.Right
                                   @ GHC.IO.Exception.IOException
                                   @ (Data.Either.Either
                                        Language.PureScript.Errors.MultipleErrors
                                        ([(GHC.IO.FilePath,
                                           Language.PureScript.AST.Declarations.Module)],
                                         Data.Map.Internal.Map
                                           Language.PureScript.Names.ModuleName
                                           Web.Bower.PackageMeta.Internal.PackageName))
                                   ipv3 #) })
                             (Language.PureScript.Publish.$fMonadIOPrepareM2
                                @ (Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([(GHC.IO.FilePath,
                                        Language.PureScript.AST.Declarations.Module)],
                                      Data.Map.Internal.Map
                                        Language.PureScript.Names.ModuleName
                                        Web.Bower.PackageMeta.Internal.PackageName)))
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild3 {
                        Data.Either.Left x1
                        -> (# ipv2,
                              Data.Either.Left
                                @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                @ (([Language.PureScript.Docs.Types.Module],
                                    Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      Web.Bower.PackageMeta.Internal.PackageName),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                (Language.PureScript.Publish.ErrorsWarnings.OtherError
                                   (Language.PureScript.Publish.ErrorsWarnings.IOExceptionThrown
                                      x1)) #)
                        Data.Either.Right y
                        -> case y of wild4 {
                             Data.Either.Left err
                             -> (# ipv2,
                                   Data.Either.Left
                                     @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                     @ (([Language.PureScript.Docs.Types.Module],
                                         Data.Map.Internal.Map
                                           Language.PureScript.Names.ModuleName
                                           Web.Bower.PackageMeta.Internal.PackageName),
                                        [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                     (Language.PureScript.Publish.ErrorsWarnings.UserError
                                        (Language.PureScript.Publish.ErrorsWarnings.CompileError
                                           err)) #)
                             Data.Either.Right r'
                             -> case r' of wild5 { (,) modules' moduleMap ->
                                case (Language.PureScript.Docs.Convert.convertModulesInPackageWithEnv
                                        @ (Control.Monad.Trans.Except.ExceptT
                                             Language.PureScript.Errors.MultipleErrors
                                             Data.Functor.Identity.Identity)
                                        (Language.PureScript.Publish.$s$fMonadErroreExceptT1
                                           @ Language.PureScript.Errors.MultipleErrors)
                                        (GHC.Base.map
                                           @ (GHC.IO.FilePath,
                                              Language.PureScript.AST.Declarations.Module)
                                           @ Language.PureScript.AST.Declarations.Module
                                           (Data.Tuple.snd
                                              @ GHC.IO.FilePath
                                              @ Language.PureScript.AST.Declarations.Module)
                                           modules')
                                        moduleMap)
                                       `cast`
                                     (Control.Monad.Trans.Except.N:ExceptT[0]
                                          <Language.PureScript.Errors.MultipleErrors>_N
                                          <Data.Functor.Identity.Identity>_R
                                          <([Language.PureScript.Docs.Types.Module],
                                            Language.PureScript.Sugar.Names.Env.Env)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                              <Data.Either.Either
                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                 ([Language.PureScript.Docs.Types.Module],
                                                                                                  Language.PureScript.Sugar.Names.Env.Env)>_R) of wild6 {
                                  Data.Either.Left x1
                                  -> (# ipv2,
                                        Data.Either.Left
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (([Language.PureScript.Docs.Types.Module],
                                              Data.Map.Internal.Map
                                                Language.PureScript.Names.ModuleName
                                                Web.Bower.PackageMeta.Internal.PackageName),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          (Language.PureScript.Publish.ErrorsWarnings.UserError
                                             (Language.PureScript.Publish.ErrorsWarnings.CompileError
                                                x1)) #)
                                  Data.Either.Right y1
                                  -> (# ipv2,
                                        Data.Either.Right
                                          @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                                          @ (([Language.PureScript.Docs.Types.Module],
                                              Data.Map.Internal.Map
                                                Language.PureScript.Names.ModuleName
                                                Web.Bower.PackageMeta.Internal.PackageName),
                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                                          ((Data.Tuple.fst
                                              @ [Language.PureScript.Docs.Types.Module]
                                              @ Language.PureScript.Sugar.Names.Env.Env
                                              y1,
                                            moduleMap),
                                           GHC.Base.++
                                             @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                             w10
                                             (GHC.Base.++
                                                @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                                                (GHC.Types.[]
                                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                                                (GHC.Types.[]
                                                   @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning))) #) } } } } } } } }) -}
c381d881dbd06778d49731d18ca85bf3
  getModules3 ::
    [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [[(Web.Bower.PackageMeta.Internal.PackageName,
             GHC.IO.FilePath)]] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
3c74be8f0c15abc6ed6f317b23dc8aaf
  getModules4 :: [System.FilePath.Glob.Base.Pattern]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.FilePath.Glob.Base.Pattern
                   Language.PureScript.Publish.Utils.purescriptSourceFiles
                   (GHC.Types.[] @ System.FilePath.Glob.Base.Pattern)) -}
ac57fc1a3cf587004e869135a5ed4720
  getModules_go ::
    [[(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]]
    -> [(Web.Bower.PackageMeta.Internal.PackageName, GHC.IO.FilePath)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bb6d9c090ef8697b4d678e163152f3e4
  getResolvedDependencies ::
    GHC.IO.FilePath
    -> [Web.Bower.PackageMeta.Internal.PackageName]
    -> Language.PureScript.Publish.PrepareM
         [(Web.Bower.PackageMeta.Internal.PackageName,
           (GHC.IO.FilePath, Data.Version.Version))]
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.getResolvedDependencies1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <[Web.Bower.PackageMeta.Internal.PackageName]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ([(Web.Bower.PackageMeta.Internal.PackageName,
                                     (GHC.IO.FilePath, Data.Version.Version))],
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <([(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                    (GHC.IO.FilePath,
                                                                                                                     Data.Version.Version))],
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <[(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                                                                                                  (GHC.IO.FilePath,
                                                                                                                                                                                                   Data.Version.Version))]>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <[(Web.Bower.PackageMeta.Internal.PackageName,
                                                                                                                                                                                                                                                                                    (GHC.IO.FilePath,
                                                                                                                                                                                                                                                                                     Data.Version.Version))]>_N))) -}
cd212b996f4278bf4e01ef00ada26319
  getResolvedDependencies1 ::
    GHC.IO.FilePath
    -> [Web.Bower.PackageMeta.Internal.PackageName]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ([(Web.Bower.PackageMeta.Internal.PackageName,
               (GHC.IO.FilePath, Data.Version.Version))],
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U> -}
b194e5f05eee3d31de2bd17d570e4c6b
  getVersionFromGitTag ::
    Language.PureScript.Publish.PrepareM
      (Data.Text.Internal.Text, Data.Version.Version)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.defaultPublishOptions11
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <Data.Either.Either
                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                             ((Data.Text.Internal.Text, Data.Version.Version),
                              [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                           <GHC.Types.IO>_R
                                                                                                           <((Data.Text.Internal.Text,
                                                                                                              Data.Version.Version),
                                                                                                             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                          <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                          <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                             GHC.Types.IO>_R
                                                                                                                                                                                          <(Data.Text.Internal.Text,
                                                                                                                                                                                            Data.Version.Version)>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <(Data.Text.Internal.Text,
                                                                                                                                                                                                                                                                          Data.Version.Version)>_N))) -}
59ed0d65304c343157c94b87295f4155
  internalError ::
    Language.PureScript.Publish.ErrorsWarnings.InternalError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.internalError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.InternalError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
888e7085ca1640d6ddaacc78405a788d
  internalError1 ::
    Language.PureScript.Publish.ErrorsWarnings.InternalError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.InternalError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.InternalError x) #)) -}
ee1764d803056187e3e6823f76d7e8b8
  otherError ::
    Language.PureScript.Publish.ErrorsWarnings.OtherError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.otherError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.OtherError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
456695f4b61b5338adfe92043cb07a17
  otherError1 ::
    Language.PureScript.Publish.ErrorsWarnings.OtherError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.OtherError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.OtherError x) #)) -}
a6260a08100f5dc3e09142caa57de05a
  preparePackage ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Types.IO
         (Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            Language.PureScript.Docs.Types.UploadedPackage)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.preparePackage1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  Language.PureScript.Docs.Types.UploadedPackage>_R)) -}
0b7fdeace749c56ad47fd1217afd0c2b
  preparePackage' ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM
         Language.PureScript.Docs.Types.UploadedPackage
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),1*C1(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.preparePackage2
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (Language.PureScript.Docs.Types.UploadedPackage,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(Language.PureScript.Docs.Types.UploadedPackage,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <Language.PureScript.Docs.Types.UploadedPackage>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <Language.PureScript.Docs.Types.UploadedPackage>_N))) -}
a5dd759b72c3263711982abf0f70c9f0
  preparePackage1 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            Language.PureScript.Docs.Types.UploadedPackage #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: (\ (manifestFile :: GHC.IO.FilePath)
                   (resolutionsFile :: GHC.IO.FilePath)
                   (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.PureScript.Publish.preparePackage2
                        manifestFile
                        resolutionsFile
                        opts
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> (# ipv,
                         Data.Either.Left
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ Language.PureScript.Docs.Types.UploadedPackage
                           x #)
                   Data.Either.Right y
                   -> case y of wild1 { (,) result warns ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stderr
                             (case Language.PureScript.Publish.ErrorsWarnings.$wrenderWarnings
                                     warns of ww { (#,,#) ww1 ww2 ww3 ->
                              Data.OldList.unlines
                                (Text.PrettyPrint.Boxes.$wrenderBox ww1 ww2 ww3) })
                             GHC.Types.False
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         Data.Either.Right
                           @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                           @ Language.PureScript.Docs.Types.UploadedPackage
                           result #) } } } }) -}
0f24b32943b4d1f180b38ead905820fb
  preparePackage2 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (Language.PureScript.Docs.Types.UploadedPackage,
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),1*C1(U(U,1*U)))><S,U> -}
bdcb73ffefe37aff677e5542dd4d4e9c
  publishGetTagTime ::
    Language.PureScript.Publish.PublishOptions
    -> Data.Text.Internal.Text
    -> Language.PureScript.Publish.PrepareM
         Data.Time.Clock.Internal.UTCTime.UTCTime
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds3 }) -}
bdcb73ffefe37aff677e5542dd4d4e9c
  publishGetVersion ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM
         (Data.Text.Internal.Text, Data.Version.Version)
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds2 }) -}
bdcb73ffefe37aff677e5542dd4d4e9c
  publishWorkingTreeDirty ::
    Language.PureScript.Publish.PublishOptions
    -> Language.PureScript.Publish.PrepareM ()
  RecSel Left Language.PureScript.Publish.PublishOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.Publish.PublishOptions) ->
                 case ds1 of wild { Language.PureScript.Publish.PublishOptions ds2 ds3 ds4 ->
                 ds4 }) -}
6fb9e3e76da68347dffda61f6e4c3eee
  runPrepareM ::
    Language.PureScript.Publish.PrepareM a
    -> GHC.Types.IO
         (Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.runPrepareM1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.PrepareM a>_R
                 ->_R Language.PureScript.Publish.N:PrepareM[0] <a>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                             <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                GHC.Types.IO>_R
                                                                             <a>_N ; Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                         <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <(a,
                                                                                           [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N)) -}
d105eab161d744a00e3102be0c4e2afe
  runPrepareM1 ::
    Language.PureScript.Publish.PrepareM a
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds1 :: Language.PureScript.Publish.PrepareM a) -> ds1) -}
d105eab161d744a00e3102be0c4e2afe
  unPrepareM ::
    Language.PureScript.Publish.PrepareM a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            GHC.Types.IO)
         a
  RecSel Left Language.PureScript.Publish.PrepareM
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.runPrepareM1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.PrepareM a>_R
                 ->_R Language.PureScript.Publish.N:PrepareM[0] <a>_N) -}
41332516ec5ca59f420bc3c68f89aa57
  unsafePreparePackage ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Types.IO Language.PureScript.Docs.Types.UploadedPackage
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.unsafePreparePackage1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R <Language.PureScript.Publish.PublishOptions>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Language.PureScript.Docs.Types.UploadedPackage>_R)) -}
ad4dc7a2b00019d57fba47bd1eac589f
  unsafePreparePackage1 ::
    GHC.IO.FilePath
    -> GHC.IO.FilePath
    -> Language.PureScript.Publish.PublishOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Language.PureScript.Docs.Types.UploadedPackage #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(C(U(U,1*U)),C(C1(U(U,1*U))),C(U(U,1*U)))><S,U>,
     Unfolding: (\ (manifestFile :: GHC.IO.FilePath)
                   (resolutionsFile :: GHC.IO.FilePath)
                   (opts :: Language.PureScript.Publish.PublishOptions)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Language.PureScript.Publish.preparePackage1
                        manifestFile
                        resolutionsFile
                        opts
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stderr
                             (case Language.PureScript.Publish.ErrorsWarnings.$wrenderError
                                     x of ww { (#,,#) ww1 ww2 ww3 ->
                              Data.OldList.unlines
                                (Text.PrettyPrint.Boxes.$wrenderBox ww1 ww2 ww3) })
                             GHC.Types.False
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      System.Exit.exitFailure1
                        @ Language.PureScript.Docs.Types.UploadedPackage
                        ipv2 }
                   Data.Either.Right y -> (# ipv, y #) } }) -}
95aeb296132c2dca5ae8cad71fcb45ce
  userError ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
    -> Language.PureScript.Publish.PrepareM a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.userError1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Publish.ErrorsWarnings.UserError>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  (a,
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <(a,
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <a>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <a>_N))) -}
a95bd06206f9d16688bf268771225933
  userError1 ::
    Language.PureScript.Publish.ErrorsWarnings.UserError
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x :: Language.PureScript.Publish.ErrorsWarnings.UserError)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta,
                    Data.Either.Left
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ (a, [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (Language.PureScript.Publish.ErrorsWarnings.UserError x) #)) -}
3a12549b67c6e5345ab67f50647e86c0
  warn ::
    Language.PureScript.Publish.ErrorsWarnings.PackageWarning
    -> Language.PureScript.Publish.PrepareM ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Publish.warn1
                  `cast`
                (<Language.PureScript.Publish.ErrorsWarnings.PackageWarning>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                  ((),
                                   [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Publish.ErrorsWarnings.PackageError>_N
                                                                                                                <GHC.Types.IO>_R
                                                                                                                <((),
                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])>_N) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                                                                                                               <[Language.PureScript.Publish.ErrorsWarnings.PackageWarning]>_N
                                                                                                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                  Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                  GHC.Types.IO>_R
                                                                                                                                                                                               <()>_N) ; Sym (Language.PureScript.Publish.N:PrepareM[0]) <()>_N))) -}
6c65dbd6a66cfdcb1d5af6888b419cf0
  warn1 ::
    Language.PureScript.Publish.ErrorsWarnings.PackageWarning
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            Language.PureScript.Publish.ErrorsWarnings.PackageError
            ((),
             [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Publish.ErrorsWarnings.PackageWarning)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    Data.Either.Right
                      @ Language.PureScript.Publish.ErrorsWarnings.PackageError
                      @ ((), [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
                      (GHC.Tuple.(),
                       GHC.Types.:
                         @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning
                         w
                         (GHC.Types.[]
                            @ Language.PureScript.Publish.ErrorsWarnings.PackageWarning)) #)) -}
instance GHC.Base.Applicative [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fApplicativePrepareM
instance GHC.Enum.Enum [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fEnumTreeStatus
instance GHC.Classes.Eq [Language.PureScript.Publish.DependencyStatus]
  = Language.PureScript.Publish.$fEqDependencyStatus
instance GHC.Classes.Eq [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fEqTreeStatus
instance GHC.Base.Functor [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fFunctorPrepareM
instance Control.Monad.Error.Class.MonadError [Language.PureScript.Publish.ErrorsWarnings.PackageError,
                                               Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadErrorPrepareM
instance Control.Monad.IO.Class.MonadIO [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadIOPrepareM
instance GHC.Base.Monad [Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadPrepareM
instance Control.Monad.Writer.Class.MonadWriter [[],
                                                 Language.PureScript.Publish.PrepareM]
  = Language.PureScript.Publish.$fMonadWriterPrepareM
instance GHC.Classes.Ord [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fOrdTreeStatus
instance GHC.Show.Show [Language.PureScript.Publish.DependencyStatus]
  = Language.PureScript.Publish.$fShowDependencyStatus
instance GHC.Show.Show [Language.PureScript.Publish.TreeStatus]
  = Language.PureScript.Publish.$fShowTreeStatus
"SPEC/Language.PureScript.Publish $fApplicativeExceptT @ IO _" [orphan] forall @ e
                                                                               (v1 :: GHC.Base.Monad
                                                                                        GHC.Types.IO)
                                                                               (v :: GHC.Base.Functor
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ GHC.Types.IO
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Publish.$s$fApplicativeExceptT @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT @ Identity _" [orphan] forall @ e
                                                                                     (v1 :: GHC.Base.Monad
                                                                                              Data.Functor.Identity.Identity)
                                                                                     (v :: GHC.Base.Functor
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ Data.Functor.Identity.Identity
                                                  @ e
                                                  v
                                                  v1
  = Language.PureScript.Publish.$s$fApplicativeExceptT1 @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c*> @ IO _" [orphan] forall @ e
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  GHC.Types.IO)
                                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ GHC.Types.IO
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c*> @ Identity _" [orphan] forall @ e
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ Data.Functor.Identity.Identity
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>1
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$c<* @ Identity _" [orphan] forall @ e
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c<* @ Data.Functor.Identity.Identity
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$c<*1 @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$cpure @ IO _" [orphan] forall @ e
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    GHC.Types.IO)
                                                                                      ($dFunctor :: GHC.Base.Functor
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeExceptT_$cpure @ Identity _" [orphan] forall @ e
                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                          Data.Functor.Identity.Identity)
                                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                                            Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ Data.Functor.Identity.Identity
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure1
      @ e
"SPEC/Language.PureScript.Publish $fApplicativeWriterT_$c<*> @ [PackageWarning] @ (ExceptT
                                                                                    PackageError IO)" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                                        GHC.Types.IO))
                                                                                                                                                                                                                 ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                               @ (Control.Monad.Trans.Except.ExceptT
                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                    GHC.Types.IO)
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Publish $fApplicativeWriterT_$cpure @ [PackageWarning] @ (ExceptT
                                                                                     PackageError
                                                                                     IO)" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                                                                                                                               GHC.Types.IO))
                                                                                                                                                                                                                                                                                                        ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                                                       [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                                @ (Control.Monad.Trans.Except.ExceptT
                                                                     Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                     GHC.Types.IO)
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Publish.$fApplicativePrepareM_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Publish $fFunctorExceptT @ IO _" [orphan] forall @ e
                                                                           (v :: GHC.Base.Functor
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.$fFunctorExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT
      @ e
"SPEC/Language.PureScript.Publish $fFunctorExceptT @ Identity _" [orphan] forall @ e
                                                                                 (v :: GHC.Base.Functor
                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fFunctorExceptT @ Data.Functor.Identity.Identity
                                              @ e
                                              v
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$s$fFunctorExceptT1
      @ e
"SPEC/Language.PureScript.Publish $fFunctorWriterT_$cfmap @ (ExceptT
                                                              PackageError IO) _" [orphan] forall @ w
                                                                                                                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                          Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                          GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                 GHC.Types.IO)
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Publish.$fFunctorPrepareM_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Publish $fMonadErroreExceptT @ IO _" [orphan] forall @ e
                                                                               (v :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT @ e
"SPEC/Language.PureScript.Publish $fMonadErroreExceptT @ Identity _" [orphan] forall @ e
                                                                                     (v :: GHC.Base.Monad
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ Data.Functor.Identity.Identity
                                                 @ e
                                                 v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT1 @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT @ IO _" [orphan] forall @ e
                                                                         (v :: GHC.Base.Monad
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT @ Identity _" [orphan] forall @ e
                                                                               (v :: GHC.Base.Monad
                                                                                       Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT @ Data.Functor.Identity.Identity
                                            @ e
                                            v
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT1
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>> @ IO _" [orphan] forall @ e
                                                                              ($dMonad :: GHC.Base.Monad
                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>> @ Identity _" [orphan] forall @ e
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ Data.Functor.Identity.Identity
                                                 @ e
                                                 $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>1
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>>= @ IO _" [orphan] forall @ e
                                                                               ($dMonad :: GHC.Base.Monad
                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=
      @ e
"SPEC/Language.PureScript.Publish $fMonadExceptT_$c>>= @ Identity _" [orphan] forall @ e
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ Data.Functor.Identity.Identity
                                                  @ e
                                                  $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>=1
      @ e
"SPEC/Language.PureScript.Publish $fMonadIOExceptT @ IO _" [orphan] forall @ e
                                                                           (v :: Control.Monad.IO.Class.MonadIO
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadIOExceptT @ GHC.Types.IO @ e v
  = Language.PureScript.Publish.$s$fMonadIOExceptT @ e
"SPEC/Language.PureScript.Publish $fMonadWriterT_$c>> @ [PackageWarning] @ (ExceptT
                                                                             PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                    GHC.Types.IO))
                                                                                                                                                                                                   ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                  [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                        @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                             GHC.Types.IO)
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Publish $fMonadWriterT_$c>>= @ [PackageWarning] @ (ExceptT
                                                                              PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                   (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                      Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                      GHC.Types.IO))
                                                                                                                                                                                                     ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                    [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                         @ (Control.Monad.Trans.Except.ExceptT
                                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                              GHC.Types.IO)
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Publish $fMonadWriterT_$cfail @ [PackageWarning] @ (ExceptT
                                                                               PackageError IO)" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                                                                                        GHC.Types.IO))
                                                                                                                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                                                                                                                      [Language.PureScript.Publish.ErrorsWarnings.PackageWarning])
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ [Language.PureScript.Publish.ErrorsWarnings.PackageWarning]
                                                          @ (Control.Monad.Trans.Except.ExceptT
                                                               Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                               GHC.Types.IO)
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Publish.$fMonadPrepareM_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Publish $w$c<*> @ Identity _" [orphan] [0] forall @ e
                                                                            (w :: GHC.Base.Monad
                                                                                    Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.$w$c<*> @ Data.Functor.Identity.Identity
                                     @ e
                                     w
  = Language.PureScript.Publish.$s$fApplicativeExceptT_$c<*>_$s$w$c<*>
      @ e
"SPEC/Language.PureScript.Publish catchE @ IO _ _ _" [orphan] forall @ e
                                                                     @ a
                                                                     @ e'
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Except.catchE @ GHC.Types.IO
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE
      @ e
      @ a
      @ e'
"SPEC/Language.PureScript.Publish catchE @ Identity _ _ _" [orphan] forall @ e
                                                                           @ a
                                                                           @ e'
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.Except.catchE @ Data.Functor.Identity.Identity
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Language.PureScript.Publish.$s$fMonadErroreExceptT_$scatchE1
      @ e
      @ a
      @ e'
"SPEC/Language.PureScript.Publish listen @ (ExceptT
                                             PackageError IO) _ _" [orphan] forall @ w
                                                                                                                                       @ a
                                                                                                                                       ($dMonad :: GHC.Base.Monad
                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                        Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.listen @ (Control.Monad.Trans.Except.ExceptT
                                                Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                GHC.Types.IO)
                                           @ w
                                           @ a
                                           $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$slisten
      @ w
      @ a
"SPEC/Language.PureScript.Publish pass @ (ExceptT
                                           PackageError IO) _ _" [orphan] forall @ w
                                                                                                                                   @ a
                                                                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                    Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.pass @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                              GHC.Types.IO)
                                         @ w
                                         @ a
                                         $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$spass @ w @ a
"SPEC/Language.PureScript.Publish tell @ (ExceptT PackageError IO) _" [orphan] forall @ w
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                       Language.PureScript.Publish.ErrorsWarnings.PackageError
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Writer.Strict.tell @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Publish.ErrorsWarnings.PackageError
                                              GHC.Types.IO)
                                         @ w
                                         $dMonad
  = Language.PureScript.Publish.$fMonadWriterPrepareM_$stell @ w
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

