
==================== FINAL INTERFACE ====================
2018-11-30 20:48:10.922369 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Ide.Types [family instance module] 8043
  interface hash: b65a08f7d8b0e8e37022d35a49504da9
  ABI hash: d9d9fd4c2b6a1fdeece731a5e8479937
  export-list hash: dd47afbd66baea5bbcdd5e2641556a91
  orphan hash: 50c9290d0bc11168713fb36e3808f333
  flag hash: c99236fac219a84a4c92ac3fc18f3a5f
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Ide.Types._IdeDeclDataConstructor
  Language.PureScript.Ide.Types._IdeDeclKind
  Language.PureScript.Ide.Types._IdeDeclType
  Language.PureScript.Ide.Types._IdeDeclTypeClass
  Language.PureScript.Ide.Types._IdeDeclTypeOperator
  Language.PureScript.Ide.Types._IdeDeclTypeSynonym
  Language.PureScript.Ide.Types._IdeDeclValue
  Language.PureScript.Ide.Types._IdeDeclValueOperator
  Language.PureScript.Ide.Types.annDocumentation
  Language.PureScript.Ide.Types.annExportedFrom
  Language.PureScript.Ide.Types.annLocation
  Language.PureScript.Ide.Types.annTypeAnnotation
  Language.PureScript.Ide.Types.anyOf
  Language.PureScript.Ide.Types.emptyAnn
  Language.PureScript.Ide.Types.emptyFileState
  Language.PureScript.Ide.Types.emptyIdeState
  Language.PureScript.Ide.Types.emptyVolatileState
  Language.PureScript.Ide.Types.encodeImport
  Language.PureScript.Ide.Types.encodeSuccess
  Language.PureScript.Ide.Types.idaAnnotation
  Language.PureScript.Ide.Types.idaDeclaration
  Language.PureScript.Ide.Types.ideDtorName
  Language.PureScript.Ide.Types.ideDtorType
  Language.PureScript.Ide.Types.ideDtorTypeName
  Language.PureScript.Ide.Types.ideInstanceConstraints
  Language.PureScript.Ide.Types.ideInstanceModule
  Language.PureScript.Ide.Types.ideInstanceName
  Language.PureScript.Ide.Types.ideInstanceTypes
  Language.PureScript.Ide.Types.ideSynonymKind
  Language.PureScript.Ide.Types.ideSynonymName
  Language.PureScript.Ide.Types.ideSynonymType
  Language.PureScript.Ide.Types.ideTCInstances
  Language.PureScript.Ide.Types.ideTCKind
  Language.PureScript.Ide.Types.ideTCName
  Language.PureScript.Ide.Types.ideTypeDtors
  Language.PureScript.Ide.Types.ideTypeKind
  Language.PureScript.Ide.Types.ideTypeName
  Language.PureScript.Ide.Types.ideTypeOpAlias
  Language.PureScript.Ide.Types.ideTypeOpAssociativity
  Language.PureScript.Ide.Types.ideTypeOpKind
  Language.PureScript.Ide.Types.ideTypeOpName
  Language.PureScript.Ide.Types.ideTypeOpPrecedence
  Language.PureScript.Ide.Types.ideValueIdent
  Language.PureScript.Ide.Types.ideValueOpAlias
  Language.PureScript.Ide.Types.ideValueOpAssociativity
  Language.PureScript.Ide.Types.ideValueOpName
  Language.PureScript.Ide.Types.ideValueOpPrecedence
  Language.PureScript.Ide.Types.ideValueOpType
  Language.PureScript.Ide.Types.ideValueType
  Language.PureScript.Ide.Types.identifierFromDeclarationRef
  Language.PureScript.Ide.Types.Annotation{Language.PureScript.Ide.Types.Annotation _annDocumentation _annExportedFrom _annLocation _annTypeAnnotation}
  Language.PureScript.Ide.Types.AstData{Language.PureScript.Ide.Types.AstData}
  Language.PureScript.Ide.Types.Completion{Language.PureScript.Ide.Types.Completion complDocumentation complExpandedType complExportedFrom complIdentifier complLocation complModule complType}
  Language.PureScript.Ide.Types.DefinitionSites
  Language.PureScript.Ide.Types.Ide
  Language.PureScript.Ide.Types.IdeConfiguration{Language.PureScript.Ide.Types.IdeConfiguration confEditorMode confGlobs confLogLevel confOutputPath}
  Language.PureScript.Ide.Types.IdeDataConstructor{Language.PureScript.Ide.Types.IdeDataConstructor _ideDtorName _ideDtorType _ideDtorTypeName}
  Language.PureScript.Ide.Types.IdeDeclaration{Language.PureScript.Ide.Types.IdeDeclDataConstructor Language.PureScript.Ide.Types.IdeDeclKind Language.PureScript.Ide.Types.IdeDeclType Language.PureScript.Ide.Types.IdeDeclTypeClass Language.PureScript.Ide.Types.IdeDeclTypeOperator Language.PureScript.Ide.Types.IdeDeclTypeSynonym Language.PureScript.Ide.Types.IdeDeclValue Language.PureScript.Ide.Types.IdeDeclValueOperator}
  Language.PureScript.Ide.Types.IdeDeclarationAnn{Language.PureScript.Ide.Types.IdeDeclarationAnn _idaAnnotation _idaDeclaration}
  Language.PureScript.Ide.Types.IdeEnvironment{Language.PureScript.Ide.Types.IdeEnvironment ideConfiguration ideStateVar}
  Language.PureScript.Ide.Types.IdeFileState{Language.PureScript.Ide.Types.IdeFileState fsExterns fsModules}
  Language.PureScript.Ide.Types.IdeInstance{Language.PureScript.Ide.Types.IdeInstance _ideInstanceConstraints _ideInstanceModule _ideInstanceName _ideInstanceTypes}
  Language.PureScript.Ide.Types.IdeLogLevel{Language.PureScript.Ide.Types.LogAll Language.PureScript.Ide.Types.LogDebug Language.PureScript.Ide.Types.LogDefault Language.PureScript.Ide.Types.LogNone Language.PureScript.Ide.Types.LogPerf}
  Language.PureScript.Ide.Types.IdeNamespace{Language.PureScript.Ide.Types.IdeNSKind Language.PureScript.Ide.Types.IdeNSType Language.PureScript.Ide.Types.IdeNSValue}
  Language.PureScript.Ide.Types.IdeNamespaced{Language.PureScript.Ide.Types.IdeNamespaced}
  Language.PureScript.Ide.Types.IdeState{Language.PureScript.Ide.Types.IdeState ideFileState ideVolatileState}
  Language.PureScript.Ide.Types.IdeType{Language.PureScript.Ide.Types.IdeType _ideTypeDtors _ideTypeKind _ideTypeName}
  Language.PureScript.Ide.Types.IdeTypeClass{Language.PureScript.Ide.Types.IdeTypeClass _ideTCInstances _ideTCKind _ideTCName}
  Language.PureScript.Ide.Types.IdeTypeOperator{Language.PureScript.Ide.Types.IdeTypeOperator _ideTypeOpAlias _ideTypeOpAssociativity _ideTypeOpKind _ideTypeOpName _ideTypeOpPrecedence}
  Language.PureScript.Ide.Types.IdeTypeSynonym{Language.PureScript.Ide.Types.IdeTypeSynonym _ideSynonymKind _ideSynonymName _ideSynonymType}
  Language.PureScript.Ide.Types.IdeValue{Language.PureScript.Ide.Types.IdeValue _ideValueIdent _ideValueType}
  Language.PureScript.Ide.Types.IdeValueOperator{Language.PureScript.Ide.Types.IdeValueOperator _ideValueOpAlias _ideValueOpAssociativity _ideValueOpName _ideValueOpPrecedence _ideValueOpType}
  Language.PureScript.Ide.Types.IdeVolatileState{Language.PureScript.Ide.Types.IdeVolatileState vsAstData vsCachedRebuild vsDeclarations}
  Language.PureScript.Ide.Types.Match{Language.PureScript.Ide.Types.Match}
  Language.PureScript.Ide.Types.ModuleIdent
  Language.PureScript.Ide.Types.ModuleMap
  Language.PureScript.Ide.Types.Success{Language.PureScript.Ide.Types.CompletionResult Language.PureScript.Ide.Types.ImportList Language.PureScript.Ide.Types.ModuleList Language.PureScript.Ide.Types.MultilineTextResult Language.PureScript.Ide.Types.RebuildSuccess Language.PureScript.Ide.Types.TextResult Language.PureScript.Ide.Types.UsagesResult}
  Language.PureScript.Ide.Types.TypeAnnotations
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Const c37ed085532438faa7612a939a2608be
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Semigroup.Internal 3e64145a879c21fc4c6fc83e5d8ca93b
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Lazy 04768812a57695fe69782cd0014b0c7b
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  microlens-0.4.9.1:Lens.Micro.Type 60377ed102f710af0bf94059aa466f74
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  microlens-th-0.4.2.1:Lens.Micro.TH e87f12cb78633ea9c00a5d8b513ea0c6
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  Explicit b1c38eaf46155af7f2da52da8f5861c4
  Hiding 8116598858a7036038611cde115d4da3
  Implicit 850358a1da5071d49098050ad7d1227d
  ImportDeclarationType f900e8c96b49d573d3e54286bc8fd980
  KindRef 8245863d9321690e594853e7ff0fdb63
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeOpRef 9ae3d7bbee64a9887c8d95defd65b0b0
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  ValueOpRef 340c88beba94c802cc00b112ca1ce8ae
  ValueRef 984b564c7d121e5297a91fc424d0970b
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Associativity 17f2097426b72eb751701f86cd97792c
  Precedence bcd61162407eaf77832b70b749dfb2a6
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  Warning 874db2f6cb9d179a771d20fb20e37d17
import  -/  Language.PureScript.Errors.JSON 4e9b93194a2c68c4b730a06cb8e4e206
  exports: e5af02e2b945f5768c6030f3334aadfd
  toJSONErrors f8a9dd495752e3a41b414ae7c0db03cb
import  -/  Language.PureScript.Externs 17598d5385c46f650a2a55de08912a53
  ExternsFile b2e76f24ecba17bf3b946e078a8414b6
import  -/  Language.PureScript.Kinds bf1fc2fd18b06658330fcf93fe50e737
  Kind 3e1e213eb647453235d33b0d1b36ec59
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident ab98a56ffa88760dad1380079e8ee35a
  KindName 681d490d18bc7da009f3503010a994f8
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 29f101e190cc99df85623423972e606f
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  ValueOpName 1d06f91abd827e7b0c072b254546708a
  runIdent bc5cc3d3ba9d105c169eb6038c65d1a8
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runProperName 29f101e190cc99df85623423972e606f
  showOp 6a554085bb7bff6e6a827b374081272a
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  Constraint 93223f8afa90d0facc05a03f863dc72d
  Type 93223f8afa90d0facc05a03f863dc72d
import  -/  stm-2.4.5.0:Control.Concurrent.STM 5ec97830246fb15a85b4d8cd8209f698
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
9e61215f32f4caed313e4d158f96dea0
  $fEqAnnotation ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                  Language.PureScript.Ide.Types.$fEqAnnotation_$c/= -}
9e61215f32f4caed313e4d158f96dea0
  $fEqAnnotation_$c/= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9e61215f32f4caed313e4d158f96dea0
  $fEqAnnotation_$c== ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fEqAstData ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fEqAstData2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fEqAstData1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R) -}
a7562843f9979ab1a2b8c8bbdfc480e1
  $fEqAstData1 ::
    GHC.Classes.Eq a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 Data.Map.Internal.$fEqMap_$c/=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fEqModuleName
                   (GHC.Classes.$fEq(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fEqMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fEqIdeNamespaced
                         $dEq)
                      Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap)) -}
f9ccd36cbe083d4d145ac322c5a721e9
  $fEqAstData2 ::
    GHC.Classes.Eq a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 Data.Map.Internal.$fEqMap_$c==
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fEqModuleName
                   (GHC.Classes.$fEq(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fEqMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fEqIdeNamespaced
                         $dEq)
                      Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap)) -}
39cbbbf59b47edf78085761426a82cf2
  $fEqAstData_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                  (Data.Map.Internal.$fEqMap_$c==
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fEqIdent
                     Language.PureScript.Types.$fEqType)
                  Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap_$c/= -}
e350a74819a230c23422a4606c1a59e8
  $fEqAstData_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident Language.PureScript.Types.Type
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                   (y :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ Language.PureScript.Names.Ident
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Names.$fEqIdent
                        Language.PureScript.Types.$fEqType
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1dc8499524dd705daadd896960727d73
  $fEqCompletion ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.Completion
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fEqCompletion_$c==
                  Language.PureScript.Ide.Types.$fEqCompletion_$c/= -}
1dc8499524dd705daadd896960727d73
  $fEqCompletion_$c/= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fEqCompletion_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1dc8499524dd705daadd896960727d73
  $fEqCompletion_$c== ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDataConstructor ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c/= -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDataConstructor_$c/= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDataConstructor_$c== ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDeclaration ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c/= -}
9e61215f32f4caed313e4d158f96dea0
  $fEqIdeDeclarationAnn ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn_$c/= -}
9e61215f32f4caed313e4d158f96dea0
  $fEqIdeDeclarationAnn_$c/= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (y :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Types.IdeDeclarationAnn b1 b2 ->
                 case Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fEqIdeDeclarationAnn_$c== ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==8
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDeclaration_$c/= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fEqIdeDeclaration_$c== ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ds1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclValue b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==6 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclType a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclType b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeClass a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeClass b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclValueOperator a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclValueOperator b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclKind a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclKind b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
e9355acde24ce9532399166de62e3470
  $fEqIdeDeclaration_$c==1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (ds1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case ds1 of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt2 dt5 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild4 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                           case b2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                           let {
                             $j :: GHC.Types.Bool <join 0>
                             = case GHC.Integer.Type.eqInteger# a3 b3 of wild6 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> let {
                                      $j1 :: GHC.Types.Bool <join 0>
                                      = case a5 of wild7 {
                                          GHC.Base.Nothing
                                          -> case b5 of wild8 {
                                               GHC.Base.Nothing -> GHC.Types.True
                                               GHC.Base.Just ipv -> GHC.Types.False }
                                          GHC.Base.Just a7
                                          -> case b5 of wild8 {
                                               GHC.Base.Nothing -> GHC.Types.False
                                               GHC.Base.Just b7
                                               -> Language.PureScript.Kinds.$fEqKind_$c== a7 b7 } }
                                    } in
                                    case a4 of wild7 {
                                      Language.PureScript.AST.Operators.Infixl
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infixl -> $j1 }
                                      Language.PureScript.AST.Operators.Infixr
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infixr -> $j1 }
                                      Language.PureScript.AST.Operators.Infix
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infix -> $j1 } } }
                           } in
                           case ww1 of wild6 {
                             GHC.Base.Nothing
                             -> case ww4 of wild7 {
                                  GHC.Base.Nothing
                                  -> case ww2
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild8 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild9 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild10 { (#,#) ds5 ds6 ->
                                          case GHC.Prim.narrow32Int# ds6 of wild11 {
                                            DEFAULT -> GHC.Types.False 0# -> $j } } } } }
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a7
                             -> case ww4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b7
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b7
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild9 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case ww5
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild10 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild11 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild12 {
                                                 DEFAULT -> GHC.Types.False
                                                 0# -> $j } } } } } } } } } } } } } } } } }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fEqIdeDeclaration_$c==2 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeDeclaration_$c==3 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==3
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fEqIdeDeclaration_$c==4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fEqIdeDeclaration_$c==5 ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fEqIdeDeclaration_$c==6 ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==7 ww1 ww2 ww4 ww5 } }) -}
8d0fda4069101758261b3ab71862ac65
  $fEqIdeDeclaration_$s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName,
       Language.PureScript.Types.Type)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName,
                     Language.PureScript.Types.Type)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fEqType)
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)_$c/= -}
7e7c6236ce7b5caac4ccbe90e881e0c7
  $fEqIdeDeclaration_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName,
     Language.PureScript.Types.Type)
    -> (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName,
        Language.PureScript.Types.Type)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          Language.PureScript.Types.Type))
                   (y :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          Language.PureScript.Types.Type)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Classes.eqInt
                        (GHC.Types.I# dt2)
                        (GHC.Types.I# dt5) of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Int.eqInt32
                             (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                             (GHC.Int.I32# 0#) of wild6 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Language.PureScript.Types.$fEqType_$c== a2 b2 of wild7 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeInstance ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fEqIdeInstance_$c==
                  Language.PureScript.Ide.Types.$fEqIdeInstance_$c/= -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeInstance_$c/= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fEqIdeInstance_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeInstance_$c== ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c==4
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fEqIdeLogLevel ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeLogLevel
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeLogLevel
                  Language.PureScript.Ide.Types.$fEqIdeLogLevel_$c==
                  Language.PureScript.Ide.Types.$fEqIdeLogLevel_$c/= -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fEqIdeLogLevel_$c/= ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (y :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogDebug -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogPerf
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogPerf -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogAll
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogAll -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogDefault
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogDefault -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogNone
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogNone -> GHC.Types.False } }) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fEqIdeLogLevel_$c== ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (ds1 :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogDebug -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogPerf
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogPerf -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogAll
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogAll -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogDefault
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogDefault -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogNone
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogNone -> GHC.Types.True } }) -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespace ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fEqIdeNamespace_$c==
                  Language.PureScript.Ide.Types.$fEqIdeNamespace_$c/= -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespace_$c/= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False } }) -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespace_$c== ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ds1 :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True } }) -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespaced ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c==
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c/= -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespaced_$c/= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (y :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf12ce78c741411b8db21a537727174e
  $fEqIdeNamespaced_$c== ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fEqIdeType :: GHC.Classes.Eq Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5
                  Language.PureScript.Ide.Types.$fEqIdeType_$c/= -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeTypeClass ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3
                  Language.PureScript.Ide.Types.$fEqIdeTypeClass_$c/= -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fEqIdeTypeClass_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e9355acde24ce9532399166de62e3470
  $fEqIdeTypeOperator ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1
                  Language.PureScript.Ide.Types.$fEqIdeTypeOperator_$c/= -}
e9355acde24ce9532399166de62e3470
  $fEqIdeTypeOperator_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fEqIdeTypeSynonym ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4
                  Language.PureScript.Ide.Types.$fEqIdeTypeSynonym_$c/= -}
8e0134581e8be26d8a7975aa0f57a68f
  $fEqIdeTypeSynonym_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fEqIdeType_$c/= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0059d9277c215835eaca5d4dd78e716a
  $fEqIdeValue ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==6
                  Language.PureScript.Ide.Types.$fEqIdeValue_$c/= -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fEqIdeValueOperator ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2
                  Language.PureScript.Ide.Types.$fEqIdeValueOperator_$c/= -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fEqIdeValueOperator_$c/= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0059d9277c215835eaca5d4dd78e716a
  $fEqIdeValue_$c/= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValue)
                   (y :: Language.PureScript.Ide.Types.IdeValue) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeValue a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Types.IdeValue b1 b2 ->
                 case Language.PureScript.Names.$fEqIdent_$c== a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.Types.$fEqType_$c== a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
d599e8d66b83cee61665ee06fcb20991
  $fEqMatch ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.Match a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Types.Match a)
                  (Language.PureScript.Ide.Types.$fEqMatch2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fEqMatch1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R <GHC.Types.Bool>_R) -}
c71b31465d50b57daa9b6a3a65c928ba
  $fEqMatch1 ::
    GHC.Classes.Eq a =>
    (Language.PureScript.Names.ModuleName, a)
    -> (Language.PureScript.Names.ModuleName, a) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 GHC.Classes.$fEq(,)_$c/=
                   @ Language.PureScript.Names.ModuleName
                   @ a
                   Language.PureScript.Names.$fEqModuleName
                   $dEq) -}
cb8f4974c5a705e20288ccc6a70636a3
  $fEqMatch2 ::
    GHC.Classes.Eq a =>
    (Language.PureScript.Names.ModuleName, a)
    -> (Language.PureScript.Names.ModuleName, a) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: (Language.PureScript.Names.ModuleName, a))
                   (w2 :: (Language.PureScript.Names.ModuleName, a)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case w2 of ww3 { (,) ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==9 @ a w ww1 ww2 ww4 ww5 } }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData ::
    Data.Foldable.Foldable Language.PureScript.Ide.Types.AstData
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.AstData
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfold
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr'
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl'
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr1
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl1
                  Language.PureScript.Ide.Types.$fFoldableAstData_$ctoList
                  Language.PureScript.Ide.Types.$fFoldableAstData9
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:All[0])
                  Language.PureScript.Ide.Types.$fFoldableAstData_$clength
                  Language.PureScript.Ide.Types.$fFoldableAstData6
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Classes.Eq a>_R
                   ->_R <a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Any[0])
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cmaximum
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cminimum
                  Language.PureScript.Ide.Types.$fFoldableAstData3
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.Ide.Types.$fFoldableAstData1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData1 ::
    GHC.Num.Num a =>
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ (Data.Semigroup.Internal.Product a)
                   @ a
                   (Data.Semigroup.Internal.$fMonoidProduct @ a $dNum)
                   (Language.PureScript.Ide.Types.$fFoldableAstData2 @ a)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))) -}
6c0212ac3d5cc1dcd99a3bf3446926ea
  $fFoldableAstData10 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ff3deebfed3de969deec2d11f3b24904
  $fFoldableAstData11 :: a
  {- Strictness: x -}
c6bf1aea663b29fde1d09c610eda501a
  $fFoldableAstData12 :: a
  {- Strictness: x -}
7fcc64ea99c44665161c86e278cbca29
  $fFoldableAstData2 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData3 ::
    GHC.Num.Num a =>
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ (Data.Semigroup.Internal.Sum a)
                   @ a
                   (Data.Semigroup.Internal.$fMonoidSum @ a $dNum)
                   (Language.PureScript.Ide.Types.$fFoldableAstData2 @ a)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))) -}
1bbf8fa0209049c02cee1bc7fe718216
  $fFoldableAstData4 :: a
  {- Strictness: x -}
ad11fb84aa3fd8084cb98683a683fb1a
  $fFoldableAstData5 :: a
  {- Strictness: x -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData6 ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$s$cfoldMap
                   @ a
                   (GHC.Classes.== @ a $dEq eta)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))) -}
da641d6eece1431242129d873070cabb
  $fFoldableAstData7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7a314542fa6b5c0e1e424e0861a5427c
  $fFoldableAstData8 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData9 ::
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData10
                   @ a
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfold ::
    GHC.Base.Monoid m => Language.PureScript.Ide.Types.AstData m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,U,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.Ide.Types.AstData a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f14 :: a -> m)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 let {
                   lvl124 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced a
                           -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> GHC.Base.mappend
                                 @ m
                                 $dMonoid
                                 (go13 ds3)
                                 (GHC.Base.mappend @ m $dMonoid (f14 v) (go13 ds4))
                            1# -> f14 v }
                       Data.Map.Internal.Tip -> lvl124 }
                 } in
                 letrec {
                   go1 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            (Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced a,
                             Language.PureScript.Ide.Types.TypeAnnotations)
                          -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> GHC.Base.mappend
                                 @ m
                                 $dMonoid
                                 (go1 ds3)
                                 (GHC.Base.mappend
                                    @ m
                                    $dMonoid
                                    (case v of wild1 { (,) a1 a2 -> go13 a1 })
                                    (go1 ds4))
                            1# -> case v of wild1 { (,) a1 a2 -> go13 a1 } }
                       Data.Map.Internal.Tip -> lvl124 }
                 } in
                 go1
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldl ::
    (b -> a -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f14 :: b -> a -> b)
                   (z :: b)
                   (t1 :: Language.PureScript.Ide.Types.AstData a) ->
                 (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
                    @ a
                    (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid @ b)
                    (\ (x :: a) (y :: b) -> f14 y x)
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                    t1)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                   z) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldl' ::
    (b -> a -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f14 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x :: a) (k :: b -> b)[OneShot] (z :: b) ->
                    case f14 z x of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldl1 ::
    (a -> a -> a) -> Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> a -> a)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (GHC.Base.Maybe a)))
                         @ a
                         (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid
                            @ (GHC.Base.Maybe a))
                         (\ (x :: a) (y :: GHC.Base.Maybe a) ->
                          GHC.Base.Just
                            @ a
                            (case y of wild {
                               GHC.Base.Nothing -> x GHC.Base.Just x1 -> f14 x1 x }))
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         xs)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData11 @ a
                   GHC.Base.Just v -> v }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldr ::
    (a -> b -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b -> b)
                   (z :: b)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: b
                           -> Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a
                           -> b
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: b)
                       (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 x l r -> go13 (f14 x (go13 z' r)) l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 letrec {
                   go1 :: b
                          -> Data.Map.Internal.Map
                               Language.PureScript.Names.ModuleName
                               (Data.Map.Internal.Map
                                  Language.PureScript.Ide.Types.IdeNamespaced a,
                                Language.PureScript.Ide.Types.TypeAnnotations)
                          -> b
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: b)
                       (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 x l r
                       -> go1 (case x of wild1 { (,) a1 a2 -> go13 (go1 z' r) a1 }) l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 go1
                   z
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldr' ::
    (a -> b -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo (b -> b)))
                    @ a
                    (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid
                       @ (b -> b))
                    (\ (x :: a) (y :: b -> b) (z :: b) ->
                     case f14 x z of vx { DEFAULT -> y vx })
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R)))
                    xs)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   z0) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cfoldr1 ::
    (a -> a -> a) -> Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> a -> a)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 case Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x GHC.Base.Just y -> f14 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData12 @ a
                   GHC.Base.Just v -> v }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$clength ::
    Language.PureScript.Ide.Types.AstData a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Language.PureScript.Ide.Types.$fFoldableAstData8 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   xs
                   Language.PureScript.Ide.Types.$fFoldableAstData7) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cmaximum ::
    GHC.Classes.Ord a => Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Functor.Utils.Max a)
                         @ a
                         g
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                         x)
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData5 @ a
                   GHC.Base.Just v -> v }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$cminimum ::
    GHC.Classes.Ord a => Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Functor.Utils.Min a)
                         @ a
                         g
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                         x)
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData4 @ a
                   GHC.Base.Just v -> v }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$ctoList ::
    Language.PureScript.Ide.Types.AstData a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.Ide.Types.AstData a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
e6ec870f24dbec2b70a9e1cb74ef36d6
  $fFoldableAstData_$dMonoid ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
  {- Unfolding: (\ @ b ->
                 Data.Semigroup.Internal.$fMonoidDual
                   @ (Data.Semigroup.Internal.Endo b)
                   (Data.Semigroup.Internal.$fMonoidEndo @ b)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFoldableAstData_$s$cfoldMap ::
    (a -> Data.Semigroup.Internal.Any)
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> Data.Semigroup.Internal.Any)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced a
                           -> Data.Semigroup.Internal.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> case (go13 ds3)
                                      `cast`
                                    (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                                 GHC.Types.False
                                 -> case (f14 v)
                                           `cast`
                                         (Data.Semigroup.Internal.N:Any[0]) of wild2 {
                                      GHC.Types.False -> go13 ds4
                                      GHC.Types.True
                                      -> GHC.Types.True
                                           `cast`
                                         (Sym (Data.Semigroup.Internal.N:Any[0])) }
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) }
                            1# -> f14 v }
                       Data.Map.Internal.Tip
                       -> GHC.Types.False
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Any[0])) }
                 } in
                 letrec {
                   go1 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            (Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced a,
                             Language.PureScript.Ide.Types.TypeAnnotations)
                          -> Data.Semigroup.Internal.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> case (go1 ds3)
                                      `cast`
                                    (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                                 GHC.Types.False
                                 -> case v of wild2 { (,) a1 a2 ->
                                    case (go13 a1)
                                           `cast`
                                         (Data.Semigroup.Internal.N:Any[0]) of wild3 {
                                      GHC.Types.False -> go1 ds4
                                      GHC.Types.True
                                      -> GHC.Types.True
                                           `cast`
                                         (Sym (Data.Semigroup.Internal.N:Any[0])) } }
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) }
                            1# -> case v of wild1 { (,) a1 a2 -> go13 a1 } }
                       Data.Map.Internal.Tip
                       -> GHC.Types.False
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Any[0])) }
                 } in
                 go1
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_$cparseJSON
                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_$cparseJSONList -}
2182b5627e60cd170bb57948b197f9c1
  $fFromJSONIdeNamespace1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
882b90ed842235f32cb5249b661b6b21
  $fFromJSONIdeNamespace10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("type"#) -}
d6b139dd81c03c914bf4510a6045188e
  $fFromJSONIdeNamespace11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace12) -}
26f2a221de96343dcc042abd768ebd85
  $fFromJSONIdeNamespace12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("value"#) -}
d4df60cc582ce872be409d6ec2c9c543
  $fFromJSONIdeNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
c218b8164d38a5675c7e9d0dc6325fb0
  $fFromJSONIdeNamespace3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace4 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSValue) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace5 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSType) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace6 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSKind) -}
0ebf3e1aeddb3959993beee460dd93bd
  $fFromJSONIdeNamespace7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace8) -}
dd6b9e0259734b3d0a2e34c0d72173e1
  $fFromJSONIdeNamespace8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kind"#) -}
d00795e02ac8a470e8e303693ad45f1c
  $fFromJSONIdeNamespace9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace10) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                        @ Language.PureScript.Ide.Types.IdeNamespace
                   Data.Aeson.Types.Internal.String s
                   -> case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace11 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      let {
                        $j :: Data.Aeson.Types.Internal.Parser
                                Language.PureScript.Ide.Types.IdeNamespace
                          <join 0>
                        = case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace9 of wild3 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                          let {
                            $j1 :: Data.Aeson.Types.Internal.Parser
                                     Language.PureScript.Ide.Types.IdeNamespace
                              <join 0>
                            = case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace7 of wild4 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                              case GHC.Prim.==# dt2 dt12 of lwild {
                                DEFAULT
                                -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                                     @ Language.PureScript.Ide.Types.IdeNamespace
                                1#
                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                          dt
                                          (GHC.Prim.int2Word# dt1)
                                          dt10
                                          (GHC.Prim.int2Word# dt11)
                                          (GHC.Prim.int2Word# dt2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                   case GHC.Prim.narrow32Int# ds3 of wild6 {
                                     DEFAULT
                                     -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                                          @ Language.PureScript.Ide.Types.IdeNamespace
                                     0#
                                     -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace6
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } }
                          } in
                          case GHC.Prim.==# dt2 dt9 of lwild {
                            DEFAULT -> $j1
                            1#
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt7
                                      (GHC.Prim.int2Word# dt8)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild4 {
                                 DEFAULT -> $j1
                                 0#
                                 -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace5
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                              <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } }
                      } in
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> $j
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> $j
                             0#
                             -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace4
                                  `cast`
                                (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                          <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } } } }) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Types.IdeNamespace]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Types.$fFromJSONIdeNamespace3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fFromJSONIdeNamespace2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f14 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f14 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Types.IdeNamespace] f14 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Types.IdeNamespace]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_go
                        0#
                        ($wgo 0#) } }) -}
bf12ce78c741411b8db21a537727174e
  $fFromJSONIdeNamespace_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Types.IdeNamespace]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFunctorAstData ::
    GHC.Base.Functor Language.PureScript.Ide.Types.AstData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.AstData
                  Language.PureScript.Ide.Types.$fFunctorAstData2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <b>_R))
                  Language.PureScript.Ide.Types.$fFunctorAstData1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData b>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFunctorAstData1 ::
    a
    -> Language.PureScript.Ide.Types.AstData b
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Map.Internal.Map
            Language.PureScript.Ide.Types.IdeNamespaced a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Ide.Types.AstData b) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Names.ModuleName
                             (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced b,
                              Language.PureScript.Ide.Types.TypeAnnotations)
                           -> Data.Map.Internal.Map
                                Language.PureScript.Names.ModuleName
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced a,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced b,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case go13 l of dt1 { DEFAULT ->
                          case go13 r of dt2 { DEFAULT ->
                          Data.Map.Internal.Bin
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Language.PureScript.Ide.Types.TypeAnnotations)
                            dt
                            kx
                            (case x of wild1 { (,) a1 a2 ->
                             (Data.Map.Internal.$fFunctorMap_$c<$
                                @ Language.PureScript.Ide.Types.IdeNamespaced
                                @ a
                                @ b
                                z
                                a1,
                              a2) })
                            dt1
                            dt2 } }
                       Data.Map.Internal.Tip
                       -> Data.Map.Internal.Tip
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Language.PureScript.Ide.Types.TypeAnnotations) }
                 } in
                 go13
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <b>_R)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fFunctorAstData2 ::
    (a -> b)
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Map.Internal.Map
            Language.PureScript.Ide.Types.IdeNamespaced b,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Names.ModuleName
                             (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a,
                              Language.PureScript.Ide.Types.TypeAnnotations)
                           -> Data.Map.Internal.Map
                                Language.PureScript.Names.ModuleName
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced b,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case go13 l of dt1 { DEFAULT ->
                          case go13 r of dt2 { DEFAULT ->
                          Data.Map.Internal.Bin
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced b,
                               Language.PureScript.Ide.Types.TypeAnnotations)
                            dt
                            kx
                            (case x of wild1 { (,) a1 a2 ->
                             (Data.Map.Internal.map
                                @ a
                                @ b
                                @ Language.PureScript.Ide.Types.IdeNamespaced
                                f14
                                a1,
                              a2) })
                            dt1
                            dt2 } }
                       Data.Map.Internal.Tip
                       -> Data.Map.Internal.Tip
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced b,
                               Language.PureScript.Ide.Types.TypeAnnotations) }
                 } in
                 go13
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
d599e8d66b83cee61665ee06fcb20991
  $fFunctorMatch ::
    GHC.Base.Functor Language.PureScript.Ide.Types.Match
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Match
                  Language.PureScript.Ide.Types.$fFunctorMatch2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.Ide.Types.Match a>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <b>_N)
                  Language.PureScript.Ide.Types.$fFunctorMatch1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.Ide.Types.Match b>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N) -}
d599e8d66b83cee61665ee06fcb20991
  $fFunctorMatch1 ::
    a
    -> Language.PureScript.Ide.Types.Match b
    -> (Language.PureScript.Names.ModuleName, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Ide.Types.Match b) ->
                 case ds
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <b>_N) of wild { (,) a1 a2 ->
                 (a1, z) }) -}
d599e8d66b83cee61665ee06fcb20991
  $fFunctorMatch2 ::
    (a -> b)
    -> Language.PureScript.Ide.Types.Match a
    -> (Language.PureScript.Names.ModuleName, b)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f14 :: a -> b)
                   (ds :: Language.PureScript.Ide.Types.Match a) ->
                 case ds
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of wild { (,) a1 a2 ->
                 (a1, f14 a2) }) -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericAnnotation ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fGenericAnnotation1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.Annotation>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Annotation"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_annLocation")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe
                                               Language.PureScript.AST.SourcePos.SourceSpan))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_annExportedFrom")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Language.PureScript.Names.ModuleName)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_annTypeAnnotation")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Language.PureScript.Types.Type))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_annDocumentation")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 Data.Text.Internal.Text))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_Annotation[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericAnnotation_$cto -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericAnnotation1 ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_annLocation")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_annExportedFrom")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_annTypeAnnotation")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R (GHC.Base.Maybe Language.PureScript.Types.Type))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_annDocumentation")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe Data.Text.Internal.Text))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case x1 of wild { Language.PureScript.Ide.Types.Annotation g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_annLocation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_annExportedFrom")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_annTypeAnnotation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R (GHC.Base.Maybe Language.PureScript.Types.Type))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_annDocumentation")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Data.Text.Internal.Text)))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annLocation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annExportedFrom")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annLocation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.AST.SourcePos.SourceSpan)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annExportedFrom")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.Names.ModuleName)>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annTypeAnnotation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Language.PureScript.Types.Type)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annDocumentation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.Types.Type>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annTypeAnnotation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.Types.Type)>_R) <x>_N)
                       g4
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annDocumentation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Data.Text.Internal.Text)>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_annLocation")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_annExportedFrom")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Names.ModuleName)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_annTypeAnnotation")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe Language.PureScript.Types.Type))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_annDocumentation")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Data.Text.Internal.Text)))>_R) <x>_N) }) -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericAnnotation_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.Annotation x
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.Annotation x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_Annotation[0]) ; (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.D>_P
                                                                                     <'GHC.Generics.MetaData
                                                                                        "Annotation"
                                                                                        "Language.PureScript.Ide.Types"
                                                                                        "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.M1
                                                                                        GHC.Generics.C
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Annotation"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.True)
                                                                                        ((GHC.Generics.M1
                                                                                            GHC.Generics.S
                                                                                            ('GHC.Generics.MetaSel
                                                                                               ('GHC.Base.Just
                                                                                                  "_annLocation")
                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                               'GHC.Generics.DecidedLazy)
                                                                                            (GHC.Generics.K1
                                                                                               GHC.Generics.R
                                                                                               (GHC.Base.Maybe
                                                                                                  Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                ('GHC.Base.Just
                                                                                                                   "_annExportedFrom")
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                (GHC.Base.Maybe
                                                                                                                   Language.PureScript.Names.ModuleName)))
                                                                                         GHC.Generics.:*: (GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                ('GHC.Base.Just
                                                                                                                   "_annTypeAnnotation")
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                (GHC.Base.Maybe
                                                                                                                   Language.PureScript.Types.Type))
                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                              GHC.Generics.S
                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                 ('GHC.Base.Just
                                                                                                                                    "_annDocumentation")
                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                              (GHC.Generics.K1
                                                                                                                                 GHC.Generics.R
                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                    Data.Text.Internal.Text))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                                                            "Annotation"
                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                            'GHC.Types.True>_P
                                                                                                                                                                         <(GHC.Generics.M1
                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                   "_annLocation")
                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                (GHC.Base.Maybe
                                                                                                                                                                                   Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_annExportedFrom")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                                                                                    Language.PureScript.Names.ModuleName)))
                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_annTypeAnnotation")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                                                                                    Language.PureScript.Types.Type))
                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                                     "_annDocumentation")
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                  (GHC.Base.Maybe
                                                                                                                                                                                                                     Data.Text.Internal.Text)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Language.PureScript.Ide.Types.Annotation
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annLocation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.AST.SourcePos.SourceSpan)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.R>_P
                                                                                           <GHC.Base.Maybe
                                                                                              Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                           <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annExportedFrom")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Names.ModuleName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Names.ModuleName>_R
                                                                                   <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annTypeAnnotation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Types.Type)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <GHC.Base.Maybe
                                                                                Language.PureScript.Types.Type>_R
                                                                             <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annDocumentation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Data.Text.Internal.Text)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                      <*>_N
                                                                      <GHC.Generics.R>_P
                                                                      <GHC.Base.Maybe
                                                                         Data.Text.Internal.Text>_R
                                                                      <x>_P) } } }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fGenericAstData ::
    GHC.Generics.Generic (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fGenericAstData2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Language.PureScript.Ide.Types.N:AstData[0]
                            <a>_R ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Ide.Types.ModuleMap
                                                 (Language.PureScript.Ide.Types.DefinitionSites a,
                                                  Language.PureScript.Ide.Types.TypeAnnotations)>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    'GHC.Base.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (Language.PureScript.Ide.Types.ModuleMap
                                                                       (Language.PureScript.Ide.Types.DefinitionSites
                                                                          a,
                                                                        Language.PureScript.Ide.Types.TypeAnnotations))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                        <*>_N
                                                                                                                                        <GHC.Generics.C>_P
                                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                                           "AstData"
                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                           'GHC.Types.False>_P
                                                                                                                                        <GHC.Generics.M1
                                                                                                                                           GHC.Generics.S
                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                              'GHC.Base.Nothing
                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                           (GHC.Generics.K1
                                                                                                                                              GHC.Generics.R
                                                                                                                                              (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                 (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                    a,
                                                                                                                                                  Language.PureScript.Ide.Types.TypeAnnotations)))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                                                   <*>_N
                                                                                                                                                                                                                   <GHC.Generics.D>_P
                                                                                                                                                                                                                   <'GHC.Generics.MetaData
                                                                                                                                                                                                                      "AstData"
                                                                                                                                                                                                                      "Language.PureScript.Ide.Types"
                                                                                                                                                                                                                      "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                                                                                                                                      'GHC.Types.True>_P
                                                                                                                                                                                                                   <GHC.Generics.M1
                                                                                                                                                                                                                      GHC.Generics.C
                                                                                                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                                                                                                         "AstData"
                                                                                                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                                                                                                         'GHC.Types.False)
                                                                                                                                                                                                                      (GHC.Generics.M1
                                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                                            (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                                               (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                                                  a,
                                                                                                                                                                                                                                Language.PureScript.Ide.Types.TypeAnnotations))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_AstData[0]
                                                                                                                                                                                                                                                                                                      <a>_N))))) <x>_N))
                  (Language.PureScript.Ide.Types.$fGenericAstData1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x>_R
                   ->_R (Sub (Language.PureScript.Ide.Types.Rep_AstData[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "AstData"
                                                   "Language.PureScript.Ide.Types"
                                                   "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "AstData"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Language.PureScript.Ide.Types.ModuleMap
                                                            (Language.PureScript.Ide.Types.DefinitionSites
                                                               a,
                                                             Language.PureScript.Ide.Types.TypeAnnotations))))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                         <*>_N
                                                                                                                         <GHC.Generics.C>_P
                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                            "AstData"
                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                            'GHC.Types.False>_P
                                                                                                                         <GHC.Generics.M1
                                                                                                                            GHC.Generics.S
                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                               'GHC.Base.Nothing
                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                            (GHC.Generics.K1
                                                                                                                               GHC.Generics.R
                                                                                                                               (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                  (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                     a,
                                                                                                                                   Language.PureScript.Ide.Types.TypeAnnotations)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                             <*>_N
                                                                                                                                                                                             <GHC.Generics.S>_P
                                                                                                                                                                                             <'GHC.Generics.MetaSel
                                                                                                                                                                                                'GHC.Base.Nothing
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                             <GHC.Generics.K1
                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                   (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                      a,
                                                                                                                                                                                                    Language.PureScript.Ide.Types.TypeAnnotations))>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                                                                                                                                       <Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                                                                                          (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                                                                                             a,
                                                                                                                                                                                                                                                                           Language.PureScript.Ide.Types.TypeAnnotations)>_R
                                                                                                                                                                                                                                                                       <x>_P ; Sym (Language.PureScript.Ide.Types.N:AstData[0]
                                                                                                                                                                                                                                                                                        <a>_R))) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fGenericAstData1 ::
    GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x
    -> GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Ide.Types.AstData a) x) ->
                 ds) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fGenericAstData2 ::
    Language.PureScript.Ide.Types.AstData a
    -> Language.PureScript.Ide.Types.AstData a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ x (x1 :: Language.PureScript.Ide.Types.AstData a) ->
                 x1) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDataConstructor ::
    GHC.Generics.Generic
      Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fGenericIdeDataConstructor1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDataConstructor"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideDtorName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ConstructorName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideDtorTypeName")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.TypeName))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideDtorType")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              Language.PureScript.Types.Type)))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDataConstructor[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDataConstructor_$cto -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDataConstructor1 ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideDtorName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideDtorTypeName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideDtorType")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R Language.PureScript.Types.Type)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeDataConstructor g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideDtorName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideDtorTypeName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideDtorType")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Types.Type))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideDtorName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideDtorTypeName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideDtorType")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideDtorTypeName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName)>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Types.Type>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideDtorType")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Types.Type>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideDtorName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideDtorTypeName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "_ideDtorType")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Language.PureScript.Types.Type))>_R) <x>_N) }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDataConstructor_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDataConstructor x
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDataConstructor x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDataConstructor[0]) ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.D>_P
                                                                                             <'GHC.Generics.MetaData
                                                                                                "IdeDataConstructor"
                                                                                                "Language.PureScript.Ide.Types"
                                                                                                "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                'GHC.Types.False>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "IdeDataConstructor"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.True)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      ('GHC.Base.Just
                                                                                                         "_ideDtorName")
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.ConstructorName))
                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                     GHC.Generics.S
                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                        ('GHC.Base.Just
                                                                                                                           "_ideDtorTypeName")
                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                     (GHC.Generics.K1
                                                                                                                        GHC.Generics.R
                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                           'Language.PureScript.Names.TypeName))
                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                      GHC.Generics.S
                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                         ('GHC.Base.Just
                                                                                                                                            "_ideDtorType")
                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                      (GHC.Generics.K1
                                                                                                                                         GHC.Generics.R
                                                                                                                                         Language.PureScript.Types.Type)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <GHC.Generics.C>_P
                                                                                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                                                                                       "IdeDataConstructor"
                                                                                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                                                                                       'GHC.Types.True>_P
                                                                                                                                                                                    <GHC.Generics.M1
                                                                                                                                                                                       GHC.Generics.S
                                                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                             "_ideDtorName")
                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                       (GHC.Generics.K1
                                                                                                                                                                                          GHC.Generics.R
                                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                                             'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                                                                               "_ideDtorTypeName")
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                                                                "_ideDtorType")
                                                                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                                                                                             GHC.Generics.R
                                                                                                                                                                                                                             Language.PureScript.Types.Type))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeDataConstructor
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.ProperName
                                                                                            'Language.PureScript.Names.ConstructorName>_R
                                                                                         <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorTypeName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.Type>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Types.Type>_R
                                                                         <x>_P) } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDeclaration ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fGenericIdeDeclaration1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDeclaration>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDeclaration"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclType"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeType)))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclTypeSynonym"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeSynonym))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclDataConstructor"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeDataConstructor))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclTypeClass"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeClass))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclValueOperator"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeValueOperator)))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclTypeOperator"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeTypeOperator))
                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "IdeDeclKind"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.KindName)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDeclaration[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDeclaration_$cto -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDeclaration1 ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclDataConstructor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeDataConstructor))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValueOperator)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclKind"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.KindName)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (x1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case x1 of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeValue)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeValue>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeValue>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.C>_P
                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                       "IdeDeclValue"
                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                       'GHC.Types.False>_P
                                                                                                                    <GHC.Generics.M1
                                                                                                                       GHC.Generics.S
                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                          'GHC.Base.Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                       (GHC.Generics.K1
                                                                                                                          GHC.Generics.R
                                                                                                                          Language.PureScript.Ide.Types.IdeValue)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclType g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeValue)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeType>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeType>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                   <*>_N
                                                                                                                   <GHC.Generics.C>_P
                                                                                                                   <'GHC.Generics.MetaCons
                                                                                                                      "IdeDeclType"
                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                      'GHC.Types.False>_P
                                                                                                                   <GHC.Generics.M1
                                                                                                                      GHC.Generics.S
                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                         'GHC.Base.Nothing
                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                      (GHC.Generics.K1
                                                                                                                         GHC.Generics.R
                                                                                                                         Language.PureScript.Ide.Types.IdeType)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeSynonym)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclDataConstructor"
                                      'GHC.Generics.PrefixI
                                      'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeDataConstructor)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeSynonym>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                          <*>_N
                                                                                                                          <GHC.Generics.C>_P
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "IdeDeclTypeSynonym"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'GHC.Types.False>_P
                                                                                                                          <GHC.Generics.M1
                                                                                                                             GHC.Generics.S
                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                'GHC.Base.Nothing
                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                             (GHC.Generics.K1
                                                                                                                                GHC.Generics.R
                                                                                                                                Language.PureScript.Ide.Types.IdeTypeSynonym)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeSynonym)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclDataConstructor"
                                      'GHC.Generics.PrefixI
                                      'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeDataConstructor)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeDataConstructor>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                              <*>_N
                                                                                                                              <GHC.Generics.C>_P
                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                 "IdeDeclDataConstructor"
                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                 'GHC.Types.False>_P
                                                                                                                              <GHC.Generics.M1
                                                                                                                                 GHC.Generics.S
                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                    'GHC.Base.Nothing
                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                 (GHC.Generics.K1
                                                                                                                                    GHC.Generics.R
                                                                                                                                    Language.PureScript.Ide.Types.IdeDataConstructor)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeClass g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeClass)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeClass>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeClass>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                        <*>_N
                                                                                                                        <GHC.Generics.C>_P
                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                           "IdeDeclTypeClass"
                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                           'GHC.Types.False>_P
                                                                                                                        <GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              'GHC.Base.Nothing
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              Language.PureScript.Ide.Types.IdeTypeClass)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclValueOperator g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeClass)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeValueOperator>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeValueOperator>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                            <*>_N
                                                                                                                            <GHC.Generics.C>_P
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "IdeDeclValueOperator"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False>_P
                                                                                                                            <GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  Language.PureScript.Ide.Types.IdeValueOperator)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeOperator)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeOperator>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                           <*>_N
                                                                                                                           <GHC.Generics.C>_P
                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                              "IdeDeclTypeOperator"
                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                              'GHC.Types.False>_P
                                                                                                                           <GHC.Generics.M1
                                                                                                                              GHC.Generics.S
                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                 'GHC.Base.Nothing
                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                              (GHC.Generics.K1
                                                                                                                                 GHC.Generics.R
                                                                                                                                 Language.PureScript.Ide.Types.IdeTypeOperator)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclKind g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeOperator)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.KindName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "IdeDeclKind"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.KindName))>_R)) <x>_N))) }) -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericIdeDeclarationAnn ::
    GHC.Generics.Generic
      Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDeclarationAnn>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDeclarationAnn"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_idaAnnotation")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "_idaDeclaration")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Language.PureScript.Ide.Types.IdeDeclaration))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn_$cto -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericIdeDeclarationAnn1 ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_idaAnnotation")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "_idaDeclaration")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R Language.PureScript.Ide.Types.IdeDeclaration))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_idaAnnotation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.Annotation))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_idaDeclaration")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.IdeDeclaration))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.Annotation>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_idaAnnotation")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.Annotation>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.IdeDeclaration>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_idaDeclaration")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.IdeDeclaration>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_idaAnnotation")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_idaDeclaration")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Ide.Types.IdeDeclaration)>_R) <x>_N) }) -}
9e61215f32f4caed313e4d158f96dea0
  $fGenericIdeDeclarationAnn_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclarationAnn x
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDeclarationAnn x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn[0]) ; (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <GHC.Generics.D>_P
                                                                                            <'GHC.Generics.MetaData
                                                                                               "IdeDeclarationAnn"
                                                                                               "Language.PureScript.Ide.Types"
                                                                                               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                               'GHC.Types.False>_P
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.C
                                                                                               ('GHC.Generics.MetaCons
                                                                                                  "IdeDeclarationAnn"
                                                                                                  'GHC.Generics.PrefixI
                                                                                                  'GHC.Types.True)
                                                                                               (GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     ('GHC.Base.Just
                                                                                                        "_idaAnnotation")
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     Language.PureScript.Ide.Types.Annotation)
                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_idaDeclaration")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      Language.PureScript.Ide.Types.IdeDeclaration))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                              <*>_N
                                                                                                                                                                              <GHC.Generics.C>_P
                                                                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                                                                 "IdeDeclarationAnn"
                                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                                 'GHC.Types.True>_P
                                                                                                                                                                              <GHC.Generics.M1
                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                       "_idaAnnotation")
                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                    Language.PureScript.Ide.Types.Annotation)
                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                        "_idaDeclaration")
                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                     Language.PureScript.Ide.Types.IdeDeclaration)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeDeclarationAnn
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_idaAnnotation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.Annotation>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <Language.PureScript.Ide.Types.Annotation>_R
                                                                                   <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_idaDeclaration")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.IdeDeclaration>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.Ide.Types.IdeDeclaration>_R
                                                                                       <x>_P) }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fGenericIdeDeclaration_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclaration x
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDeclaration x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDeclaration[0]) ; GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "IdeDeclaration"
                                                                                           "Language.PureScript.Ide.Types"
                                                                                           "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                           'GHC.Types.False>_P
                                                                                        <((GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "IdeDeclValue"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.False)
                                                                                             (GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Language.PureScript.Ide.Types.IdeValue))
                                                                                           GHC.Generics.:+: GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclType"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeType)))
                                                                                          GHC.Generics.:+: (GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclTypeSynonym"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeTypeSynonym))
                                                                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclDataConstructor"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeDataConstructor))))
                                                                                         GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclTypeClass"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeTypeClass))
                                                                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclValueOperator"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                                                                                                           GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclTypeOperator"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                                                                                                             GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                                GHC.Generics.C
                                                                                                                                                ('GHC.Generics.MetaCons
                                                                                                                                                   "IdeDeclKind"
                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                   'GHC.Types.False)
                                                                                                                                                (GHC.Generics.M1
                                                                                                                                                   GHC.Generics.S
                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                      GHC.Generics.R
                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                         'Language.PureScript.Names.KindName)))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclValue
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeValue)>_R ; GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.S>_P
                                                                                               <'GHC.Generics.MetaSel
                                                                                                  'GHC.Base.Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                                               <GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  Language.PureScript.Ide.Types.IdeValue>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                         <*>_N
                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                         <Language.PureScript.Ide.Types.IdeValue>_R
                                                                                                                                                         <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclType
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeType)>_R ; GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <GHC.Generics.S>_P
                                                                                              <'GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                                              <GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.Ide.Types.IdeType>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                       <Language.PureScript.Ide.Types.IdeType>_R
                                                                                                                                                       <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeSynonym
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeSynonym"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeSynonym)>_R ; GHC.Generics.N:M1[0]
                                                                                                     <*>_N
                                                                                                     <GHC.Generics.S>_P
                                                                                                     <'GHC.Generics.MetaSel
                                                                                                        'GHC.Base.Nothing
                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                     <GHC.Generics.K1
                                                                                                        GHC.Generics.R
                                                                                                        Language.PureScript.Ide.Types.IdeTypeSynonym>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                     <*>_N
                                                                                                                                                                     <GHC.Generics.R>_P
                                                                                                                                                                     <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                                                                                                                                                                     <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclDataConstructor
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclDataConstructor"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeDataConstructor)>_R ; GHC.Generics.N:M1[0]
                                                                                                         <*>_N
                                                                                                         <GHC.Generics.S>_P
                                                                                                         <'GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy>_P
                                                                                                         <GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.Ide.Types.IdeDataConstructor>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                             <*>_N
                                                                                                                                                                             <GHC.Generics.R>_P
                                                                                                                                                                             <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                                                                                                                                                                             <x>_P) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeClass
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeClass"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeClass)>_R ; GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.S>_P
                                                                                                   <'GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                                   <GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      Language.PureScript.Ide.Types.IdeTypeClass>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.R>_P
                                                                                                                                                                 <Language.PureScript.Ide.Types.IdeTypeClass>_R
                                                                                                                                                                 <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclValueOperator
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclValueOperator"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeValueOperator)>_R ; GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Generics.S>_P
                                                                                                       <'GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                       <GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Ide.Types.IdeValueOperator>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                                         <Language.PureScript.Ide.Types.IdeValueOperator>_R
                                                                                                                                                                         <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeOperator
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeOperator"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeOperator)>_R ; GHC.Generics.N:M1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.S>_P
                                                                                                      <'GHC.Generics.MetaSel
                                                                                                         'GHC.Base.Nothing
                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                         'GHC.Generics.DecidedLazy>_P
                                                                                                      <GHC.Generics.K1
                                                                                                         GHC.Generics.R
                                                                                                         Language.PureScript.Ide.Types.IdeTypeOperator>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                       <*>_N
                                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                                       <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                                                                                                                                                                       <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclKind
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.KindName>_R
                                                                                                                                                           <x>_P) } } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeInstance ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fGenericIdeInstance1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeInstance>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeInstance"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideInstanceModule")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideInstanceName")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Names.Ident))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideInstanceTypes")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [Language.PureScript.Types.Type])
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideInstanceConstraints")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 [Language.PureScript.Types.Constraint]))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeInstance[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeInstance_$cto -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeInstance1 ::
    Language.PureScript.Ide.Types.IdeInstance
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideInstanceModule")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R Language.PureScript.Names.ModuleName)
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideInstanceName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideInstanceTypes")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [Language.PureScript.Types.Type])
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideInstanceConstraints")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe
                                                     [Language.PureScript.Types.Constraint]))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeInstance g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideInstanceModule")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideInstanceName")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Names.Ident))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideInstanceTypes")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R [Language.PureScript.Types.Type])
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideInstanceConstraints")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe
                                                [Language.PureScript.Types.Constraint])))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceModule")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Names.ModuleName))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.ModuleName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceModule")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Names.ModuleName>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Ident>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Names.Ident>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceTypes")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R [Language.PureScript.Types.Type]))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceConstraints")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe [Language.PureScript.Types.Constraint])))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[Language.PureScript.Types.Type]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceTypes")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [Language.PureScript.Types.Type]>_R) <x>_N)
                       g4
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe [Language.PureScript.Types.Constraint]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceConstraints")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         [Language.PureScript.Types.Constraint])>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideInstanceModule")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.Names.ModuleName)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideInstanceName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideInstanceTypes")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R [Language.PureScript.Types.Type])
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideInstanceConstraints")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       [Language.PureScript.Types.Constraint])))>_R) <x>_N) }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeInstance_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeInstance x
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeInstance x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeInstance[0]) ; (GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.D>_P
                                                                                      <'GHC.Generics.MetaData
                                                                                         "IdeInstance"
                                                                                         "Language.PureScript.Ide.Types"
                                                                                         "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.C
                                                                                         ('GHC.Generics.MetaCons
                                                                                            "IdeInstance"
                                                                                            'GHC.Generics.PrefixI
                                                                                            'GHC.Types.True)
                                                                                         ((GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideInstanceModule")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName)
                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 ('GHC.Base.Just
                                                                                                                    "_ideInstanceName")
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (GHC.Generics.K1
                                                                                                                 GHC.Generics.R
                                                                                                                 Language.PureScript.Names.Ident))
                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 ('GHC.Base.Just
                                                                                                                    "_ideInstanceTypes")
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (GHC.Generics.K1
                                                                                                                 GHC.Generics.R
                                                                                                                 [Language.PureScript.Types.Type])
                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  ('GHC.Base.Just
                                                                                                                                     "_ideInstanceConstraints")
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  (GHC.Base.Maybe
                                                                                                                                     [Language.PureScript.Types.Constraint]))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                         <*>_N
                                                                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                                                                            "IdeInstance"
                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                            'GHC.Types.True>_P
                                                                                                                                                                                         <(GHC.Generics.M1
                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                   "_ideInstanceModule")
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                Language.PureScript.Names.ModuleName)
                                                                                                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                                    "_ideInstanceName")
                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                                 Language.PureScript.Names.Ident))
                                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                                    "_ideInstanceTypes")
                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                                 [Language.PureScript.Types.Type])
                                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                                                     "_ideInstanceConstraints")
                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                                  (GHC.Base.Maybe
                                                                                                                                                                                                                                     [Language.PureScript.Types.Constraint])))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Language.PureScript.Ide.Types.IdeInstance
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceModule")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Names.ModuleName>_R
                                                                               <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.R>_P
                                                                          <Language.PureScript.Names.Ident>_R
                                                                          <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceTypes")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Types.Type]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.R>_P
                                                                           <[Language.PureScript.Types.Type]>_R
                                                                           <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceConstraints")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              [Language.PureScript.Types.Constraint])>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.R>_P
                                                                                     <GHC.Base.Maybe
                                                                                        [Language.PureScript.Types.Constraint]>_R
                                                                                     <x>_P) } } }) -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespace ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fGenericIdeNamespace1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeNamespace>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeNamespace"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "IdeNSType"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "IdeNSKind"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeNamespace[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeNamespace_$cto -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespace1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x1 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace6 @ x
                   Language.PureScript.Ide.Types.IdeNSType
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace4 @ x
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace2 @ x }) -}
79c9134aaea71183f0ea0f70c5671d59
  $fGenericIdeNamespace2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Ide.Types.$fGenericIdeNamespace3 @ x)) -}
f4f233e3e2af6b8c7b4153a5c541dc33
  $fGenericIdeNamespace3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
c03e536d63c201404a9211f89f8a4217
  $fGenericIdeNamespace4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Ide.Types.$fGenericIdeNamespace5 @ x)) -}
d8556b2c961aae29e8a828da72f0147c
  $fGenericIdeNamespace5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
da0c54a6d110e47ec453901085225e9f
  $fGenericIdeNamespace6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespace_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespace x
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeNamespace x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeNamespace[0]) ; GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.D>_P
                                                                                      <'GHC.Generics.MetaData
                                                                                         "IdeNamespace"
                                                                                         "Language.PureScript.Ide.Types"
                                                                                         "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.C
                                                                                         ('GHC.Generics.MetaCons
                                                                                            "IdeNSValue"
                                                                                            'GHC.Generics.PrefixI
                                                                                            'GHC.Types.False)
                                                                                         GHC.Generics.U1
                                                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                                                           GHC.Generics.C
                                                                                                           ('GHC.Generics.MetaCons
                                                                                                              "IdeNSType"
                                                                                                              'GHC.Generics.PrefixI
                                                                                                              'GHC.Types.False)
                                                                                                           GHC.Generics.U1
                                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                                            GHC.Generics.C
                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                               "IdeNSKind"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False)
                                                                                                                            GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Ide.Types.IdeNSValue }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Ide.Types.IdeNSType }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Ide.Types.IdeNSKind } } }) -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespaced ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fGenericIdeNamespaced1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeNamespaced>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeNamespaced"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           Language.PureScript.Ide.Types.IdeNamespace)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeNamespaced[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeNamespaced_$cto -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespaced1 ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeNamespaced g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.IdeNamespace>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.IdeNamespace>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Data.Text.Internal.Text>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Data.Text.Internal.Text>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Base.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Base.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Data.Text.Internal.Text)>_R) <x>_N) }) -}
bf12ce78c741411b8db21a537727174e
  $fGenericIdeNamespaced_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespaced x
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeNamespaced x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeNamespaced[0]) ; (GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "IdeNamespaced"
                                                                                           "Language.PureScript.Ide.Types"
                                                                                           "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                           'GHC.Types.False>_P
                                                                                        <GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "IdeNamespaced"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.False)
                                                                                           (GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.Ide.Types.IdeNamespace)
                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                     <*>_N
                                                                                                                                                     <GHC.Generics.C>_P
                                                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                                                        "IdeNamespaced"
                                                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                                                        'GHC.Types.False>_P
                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                        GHC.Generics.S
                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                           'GHC.Base.Nothing
                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                        (GHC.Generics.K1
                                                                                                                                                           GHC.Generics.R
                                                                                                                                                           Language.PureScript.Ide.Types.IdeNamespace)
                                                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                            Data.Text.Internal.Text)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeNamespaced
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.IdeNamespace>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.R>_P
                                                                                     <Language.PureScript.Ide.Types.IdeNamespace>_R
                                                                                     <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Data.Text.Internal.Text>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.R>_P
                                                                  <Data.Text.Internal.Text>_R
                                                                  <x>_P) }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fGenericIdeType ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fGenericIdeType1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeType>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeType"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideTypeName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.TypeName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeKind")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Kinds.Kind)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideTypeDtors")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              [(Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName,
                                                                                Language.PureScript.Types.Type)])))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeType[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeType_$cto -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fGenericIdeType1 ::
    Language.PureScript.Ide.Types.IdeType
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideTypeName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeKind")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideTypeDtors")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  [(Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName,
                                                    Language.PureScript.Types.Type)])))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeType g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeKind")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTypeDtors")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             [(Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName,
                                               Language.PureScript.Types.Type)]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeDtors")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               [(Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName,
                                 Language.PureScript.Types.Type)]))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.Kind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.Kind>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[(Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName,
                                    Language.PureScript.Types.Type)]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeDtors")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [(Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ConstructorName,
                                                        Language.PureScript.Types.Type)]>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeKind")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Language.PureScript.Kinds.Kind)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "_ideTypeDtors")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    [(Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.ConstructorName,
                                                                      Language.PureScript.Types.Type)]))>_R) <x>_N) }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeTypeClass ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fGenericIdeTypeClass1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeClass>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeClass"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideTCName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTCKind")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Kinds.Kind)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideTCInstances")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              [Language.PureScript.Ide.Types.IdeInstance])))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeClass[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeClass_$cto -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeTypeClass1 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideTCName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTCKind")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideTCInstances")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  [Language.PureScript.Ide.Types.IdeInstance])))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeClass g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTCName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTCKind")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTCInstances")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             [Language.PureScript.Ide.Types.IdeInstance]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTCName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ClassName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTCKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTCInstances")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R [Language.PureScript.Ide.Types.IdeInstance]))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.Kind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTCKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.Kind>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[Language.PureScript.Ide.Types.IdeInstance]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTCInstances")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [Language.PureScript.Ide.Types.IdeInstance]>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTCName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTCKind")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Language.PureScript.Kinds.Kind)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideTCInstances")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    [Language.PureScript.Ide.Types.IdeInstance]))>_R) <x>_N) }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fGenericIdeTypeClass_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeClass x
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeClass x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeClass[0]) ; (GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.D>_P
                                                                                       <'GHC.Generics.MetaData
                                                                                          "IdeTypeClass"
                                                                                          "Language.PureScript.Ide.Types"
                                                                                          "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                          'GHC.Types.False>_P
                                                                                       <GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "IdeTypeClass"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.True)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideTCName")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.ClassName))
                                                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "_ideTCKind")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Language.PureScript.Kinds.Kind)
                                                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                GHC.Generics.S
                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                   ('GHC.Base.Just
                                                                                                                                      "_ideTCInstances")
                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                (GHC.Generics.K1
                                                                                                                                   GHC.Generics.R
                                                                                                                                   [Language.PureScript.Ide.Types.IdeInstance])))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                           <*>_N
                                                                                                                                                                                           <GHC.Generics.C>_P
                                                                                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                                                                                              "IdeTypeClass"
                                                                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_ideTCName")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
                                                                                                                                                                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                      "_ideTCKind")
                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                   Language.PureScript.Kinds.Kind)
                                                                                                                                                                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                                       "_ideTCInstances")
                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                                                                    [Language.PureScript.Ide.Types.IdeInstance]))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeTypeClass
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <Language.PureScript.Names.ProperName
                                                                                      'Language.PureScript.Names.ClassName>_R
                                                                                   <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.Kind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Kinds.Kind>_R
                                                                         <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCInstances")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Ide.Types.IdeInstance]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.R>_P
                                                                                      <[Language.PureScript.Ide.Types.IdeInstance]>_R
                                                                                      <x>_P) } }) -}
e9355acde24ce9532399166de62e3470
  $fGenericIdeTypeOperator ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fGenericIdeTypeOperator1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeOperator"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideTypeOpName")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeOpAlias")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.Qualified
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Operators.Precedence)
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "_ideTypeOpAssociativity")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Operators.Associativity)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideTypeOpKind")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (GHC.Base.Maybe
                                                                                                   Language.PureScript.Kinds.Kind)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeOperator[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeOperator_$cto -}
e9355acde24ce9532399166de62e3470
  $fGenericIdeTypeOperator1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideTypeOpName")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.TypeOpName))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeOpAlias")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeOpPrecedence")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Associativity)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideTypeOpKind")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Language.PureScript.Kinds.Kind)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeOperator g1 g2 g3 g4 g5 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeOpName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTypeOpAlias")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (Language.PureScript.Names.Qualified
                                                (Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.TypeName))))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeOpPrecedence")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "_ideTypeOpAssociativity")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.Operators.Associativity)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "_ideTypeOpKind")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe
                                                                  Language.PureScript.Kinds.Kind))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpAlias")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.TypeOpName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.OpName
                                                         'Language.PureScript.Names.TypeOpName)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpAlias")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName))>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpPrecedence")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Precedence))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpAssociativity")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Associativity)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "_ideTypeOpKind")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (GHC.Base.Maybe Language.PureScript.Kinds.Kind)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.AST.Operators.Precedence>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.Operators.Precedence>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpAssociativity")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.AST.Operators.Associativity))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpKind")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R (GHC.Base.Maybe Language.PureScript.Kinds.Kind)))
                          @ x
                          g4
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Language.PureScript.AST.Operators.Associativity>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Language.PureScript.AST.Operators.Associativity>_R) <x>_N)
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe Language.PureScript.Kinds.Kind>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpKind")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (GHC.Base.Maybe
                                                            Language.PureScript.Kinds.Kind)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpName")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpAlias")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Precedence)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "_ideTypeOpAssociativity")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     Language.PureScript.AST.Operators.Associativity)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "_ideTypeOpKind")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (GHC.Base.Maybe
                                                                                         Language.PureScript.Kinds.Kind))))>_R) <x>_N) }) -}
e9355acde24ce9532399166de62e3470
  $fGenericIdeTypeOperator_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeOperator x
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(LS)),1*U(1*U(U,U),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeOperator x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeOperator[0]) ; (GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.D>_P
                                                                                          <'GHC.Generics.MetaData
                                                                                             "IdeTypeOperator"
                                                                                             "Language.PureScript.Ide.Types"
                                                                                             "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                             'GHC.Types.False>_P
                                                                                          <GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "IdeTypeOperator"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True)
                                                                                             ((GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('GHC.Base.Just
                                                                                                       "_ideTypeOpName")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    (Language.PureScript.Names.OpName
                                                                                                       'Language.PureScript.Names.TypeOpName))
                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "_ideTypeOpAlias")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                           'Language.PureScript.Names.TypeName))))
                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "_ideTypeOpPrecedence")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     Language.PureScript.AST.Operators.Precedence)
                                                                                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                    GHC.Generics.S
                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                       ('GHC.Base.Just
                                                                                                                                          "_ideTypeOpAssociativity")
                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                    (GHC.Generics.K1
                                                                                                                                       GHC.Generics.R
                                                                                                                                       Language.PureScript.AST.Operators.Associativity)
                                                                                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                     GHC.Generics.S
                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                           "_ideTypeOpKind")
                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                        GHC.Generics.R
                                                                                                                                                        (GHC.Base.Maybe
                                                                                                                                                           Language.PureScript.Kinds.Kind)))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                        <*>_N
                                                                                                                                                                                                        <GHC.Generics.C>_P
                                                                                                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                                                                                                           "IdeTypeOperator"
                                                                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                                                                           'GHC.Types.True>_P
                                                                                                                                                                                                        <(GHC.Generics.M1
                                                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                                                               ('GHC.Base.Just
                                                                                                                                                                                                                  "_ideTypeOpName")
                                                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                                                               (Language.PureScript.Names.OpName
                                                                                                                                                                                                                  'Language.PureScript.Names.TypeOpName))
                                                                                                                                                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                                                   "_ideTypeOpAlias")
                                                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                      'Language.PureScript.Names.TypeName))))
                                                                                                                                                                                                         GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                                                   "_ideTypeOpPrecedence")
                                                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                                                Language.PureScript.AST.Operators.Precedence)
                                                                                                                                                                                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                                                                     "_ideTypeOpAssociativity")
                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                                                  Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                                                                      "_ideTypeOpKind")
                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                                                                   (GHC.Base.Maybe
                                                                                                                                                                                                                                                                      Language.PureScript.Kinds.Kind))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds6 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 Language.PureScript.Ide.Types.IdeTypeOperator
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                    <*>_N
                                                                                    <GHC.Generics.R>_P
                                                                                    <Language.PureScript.Names.OpName
                                                                                       'Language.PureScript.Names.TypeOpName>_R
                                                                                    <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpAlias")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.R>_P
                                                                                      <Language.PureScript.Names.Qualified
                                                                                         (Language.PureScript.Names.ProperName
                                                                                            'Language.PureScript.Names.TypeName)>_R
                                                                                      <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpPrecedence")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Precedence>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.AST.Operators.Precedence>_R
                                                                                       <x>_P)
                   ds7
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpAssociativity")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Associativity>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.R>_P
                                                                                          <Language.PureScript.AST.Operators.Associativity>_R
                                                                                          <x>_P)
                   ds8
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Kinds.Kind)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <GHC.Base.Maybe
                                                                                Language.PureScript.Kinds.Kind>_R
                                                                             <x>_P) } } } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fGenericIdeTypeSynonym ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeSynonym"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideSynonymName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.TypeName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideSynonymType")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Types.Type)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideSynonymKind")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              Language.PureScript.Kinds.Kind)))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeSynonym[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym_$cto -}
8e0134581e8be26d8a7975aa0f57a68f
  $fGenericIdeTypeSynonym1 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideSynonymName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideSynonymType")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideSynonymKind")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R Language.PureScript.Kinds.Kind)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeSynonym g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideSynonymName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideSynonymType")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideSynonymKind")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Kinds.Kind))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideSynonymName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideSynonymType")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideSynonymKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Kinds.Kind))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Types.Type>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideSynonymType")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Types.Type>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.Kind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideSynonymKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.Kind>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideSynonymName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideSynonymType")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Language.PureScript.Types.Type)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideSynonymKind")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Language.PureScript.Kinds.Kind))>_R) <x>_N) }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fGenericIdeTypeSynonym_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeSynonym x
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeSynonym x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeSynonym[0]) ; (GHC.Generics.N:M1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.D>_P
                                                                                         <'GHC.Generics.MetaData
                                                                                            "IdeTypeSynonym"
                                                                                            "Language.PureScript.Ide.Types"
                                                                                            "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                            'GHC.Types.False>_P
                                                                                         <GHC.Generics.M1
                                                                                            GHC.Generics.C
                                                                                            ('GHC.Generics.MetaCons
                                                                                               "IdeTypeSynonym"
                                                                                               'GHC.Generics.PrefixI
                                                                                               'GHC.Types.True)
                                                                                            (GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "_ideSynonymName")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    ('GHC.Base.Just
                                                                                                                       "_ideSynonymType")
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Types.Type)
                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Base.Just
                                                                                                                                        "_ideSynonymKind")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Kinds.Kind)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                <*>_N
                                                                                                                                                                                <GHC.Generics.C>_P
                                                                                                                                                                                <'GHC.Generics.MetaCons
                                                                                                                                                                                   "IdeTypeSynonym"
                                                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                                                   'GHC.Types.True>_P
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                         "_ideSynonymName")
                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                         'Language.PureScript.Names.TypeName))
                                                                                                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                     GHC.Generics.S
                                                                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                                                                           "_ideSynonymType")
                                                                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                                                                        GHC.Generics.R
                                                                                                                                                                                                        Language.PureScript.Types.Type)
                                                                                                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                      GHC.Generics.S
                                                                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                                                            "_ideSynonymKind")
                                                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                                                                         Language.PureScript.Kinds.Kind))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeTypeSynonym
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.Type>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Types.Type>_R
                                                                         <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.Kind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Kinds.Kind>_R
                                                                         <x>_P) } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fGenericIdeType_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType x
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeType[0]) ; (GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.D>_P
                                                                                  <'GHC.Generics.MetaData
                                                                                     "IdeType"
                                                                                     "Language.PureScript.Ide.Types"
                                                                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                     'GHC.Types.False>_P
                                                                                  <GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "IdeType"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.True)
                                                                                     (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           ('GHC.Base.Just
                                                                                              "_ideTypeName")
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           (Language.PureScript.Names.ProperName
                                                                                              'Language.PureScript.Names.TypeName))
                                                                                      GHC.Generics.:*: (GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             ('GHC.Base.Just
                                                                                                                "_ideTypeKind")
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             Language.PureScript.Kinds.Kind)
                                                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              ('GHC.Base.Just
                                                                                                                                 "_ideTypeDtors")
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              [(Language.PureScript.Names.ProperName
                                                                                                                                  'Language.PureScript.Names.ConstructorName,
                                                                                                                                Language.PureScript.Types.Type)])))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                             <*>_N
                                                                                                                                                                             <GHC.Generics.C>_P
                                                                                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                                                                                "IdeType"
                                                                                                                                                                                'GHC.Generics.PrefixI
                                                                                                                                                                                'GHC.Types.True>_P
                                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                      "_ideTypeName")
                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                                      'Language.PureScript.Names.TypeName))
                                                                                                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                        "_ideTypeKind")
                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                     Language.PureScript.Kinds.Kind)
                                                                                                                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                         "_ideTypeDtors")
                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                      [(Language.PureScript.Names.ProperName
                                                                                                                                                                                                                          'Language.PureScript.Names.ConstructorName,
                                                                                                                                                                                                                        Language.PureScript.Types.Type)]))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeType
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.Kind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Kinds.Kind>_R
                                                                         <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeDtors")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <[(Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName,
                                                                                Language.PureScript.Types.Type)]>_R
                                                                             <x>_P) } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fGenericIdeValue ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fGenericIdeValue1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeValue>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeValue"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideValueIdent")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Language.PureScript.Names.Ident)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "_ideValueType")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Language.PureScript.Types.Type))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeValue[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeValue_$cto -}
0059d9277c215835eaca5d4dd78e716a
  $fGenericIdeValue1 ::
    Language.PureScript.Ide.Types.IdeValue
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideValueIdent")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "_ideValueType")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeValue g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueIdent")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueType")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Types.Type))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.Ident>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueIdent")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Names.Ident>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Types.Type>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueType")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Types.Type>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueIdent")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideValueType")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Types.Type)>_R) <x>_N) }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fGenericIdeValueOperator ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fGenericIdeValueOperator1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeValueOperator>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeValueOperator"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideValueOpName")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideValueOpAlias")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.Qualified
                                                                (Data.Either.Either
                                                                   Language.PureScript.Names.Ident
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.ConstructorName)))))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just
                                                                "_ideValueOpPrecedence")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Operators.Precedence)
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "_ideValueOpAssociativity")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Operators.Associativity)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideValueOpType")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (GHC.Base.Maybe
                                                                                                   Language.PureScript.Types.Type)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeValueOperator[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeValueOperator_$cto -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fGenericIdeValueOperator1 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideValueOpName")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.ValueOpName))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueOpAlias")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.Qualified
                                    (Data.Either.Either
                                       Language.PureScript.Names.Ident
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)))))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueOpPrecedence")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpAssociativity")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Associativity)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideValueOpType")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Language.PureScript.Types.Type)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeValueOperator g1 g2 g3 g4 g5 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueOpName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideValueOpAlias")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (Language.PureScript.Names.Qualified
                                                (Data.Either.Either
                                                   Language.PureScript.Names.Ident
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName)))))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueOpPrecedence")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "_ideValueOpAssociativity")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.Operators.Associativity)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "_ideValueOpType")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe
                                                                  Language.PureScript.Types.Type))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpAlias")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.Qualified
                                  (Data.Either.Either
                                     Language.PureScript.Names.Ident
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ConstructorName)))))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.ValueOpName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.OpName
                                                         'Language.PureScript.Names.ValueOpName)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Qualified
                                    (Data.Either.Either
                                       Language.PureScript.Names.Ident
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName))>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpAlias")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.Qualified
                                                         (Data.Either.Either
                                                            Language.PureScript.Names.Ident
                                                            (Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.ConstructorName)))>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpPrecedence")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Precedence))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpAssociativity")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Associativity)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "_ideValueOpType")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (GHC.Base.Maybe Language.PureScript.Types.Type)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.AST.Operators.Precedence>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpPrecedence")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.Operators.Precedence>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpAssociativity")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.AST.Operators.Associativity))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpType")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R (GHC.Base.Maybe Language.PureScript.Types.Type)))
                          @ x
                          g4
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Language.PureScript.AST.Operators.Associativity>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Language.PureScript.AST.Operators.Associativity>_R) <x>_N)
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe Language.PureScript.Types.Type>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpType")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (GHC.Base.Maybe
                                                            Language.PureScript.Types.Type)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpName")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpAlias")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.Qualified
                                                      (Data.Either.Either
                                                         Language.PureScript.Names.Ident
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName)))))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpPrecedence")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Precedence)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "_ideValueOpAssociativity")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     Language.PureScript.AST.Operators.Associativity)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "_ideValueOpType")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (GHC.Base.Maybe
                                                                                         Language.PureScript.Types.Type))))>_R) <x>_N) }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fGenericIdeValueOperator_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValueOperator x
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(LS)),1*U(1*U(U,U),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeValueOperator x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeValueOperator[0]) ; (GHC.Generics.N:M1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.D>_P
                                                                                           <'GHC.Generics.MetaData
                                                                                              "IdeValueOperator"
                                                                                              "Language.PureScript.Ide.Types"
                                                                                              "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                              'GHC.Types.False>_P
                                                                                           <GHC.Generics.M1
                                                                                              GHC.Generics.C
                                                                                              ('GHC.Generics.MetaCons
                                                                                                 "IdeValueOperator"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'GHC.Types.True)
                                                                                              ((GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     ('GHC.Base.Just
                                                                                                        "_ideValueOpName")
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     (Language.PureScript.Names.OpName
                                                                                                        'Language.PureScript.Names.ValueOpName))
                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_ideValueOpAlias")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                         (Data.Either.Either
                                                                                                                            Language.PureScript.Names.Ident
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.ConstructorName)))))
                                                                                               GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_ideValueOpPrecedence")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      Language.PureScript.AST.Operators.Precedence)
                                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                     GHC.Generics.S
                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "_ideValueOpAssociativity")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                     (GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Language.PureScript.AST.Operators.Associativity)
                                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                      GHC.Generics.S
                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                            "_ideValueOpType")
                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                         GHC.Generics.R
                                                                                                                                                         (GHC.Base.Maybe
                                                                                                                                                            Language.PureScript.Types.Type)))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                         <*>_N
                                                                                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                                                                                            "IdeValueOperator"
                                                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                                                            'GHC.Types.True>_P
                                                                                                                                                                                                         <(GHC.Generics.M1
                                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                                   "_ideValueOpName")
                                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                                (Language.PureScript.Names.OpName
                                                                                                                                                                                                                   'Language.PureScript.Names.ValueOpName))
                                                                                                                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                                                    "_ideValueOpAlias")
                                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                    (Data.Either.Either
                                                                                                                                                                                                                                       Language.PureScript.Names.Ident
                                                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                          'Language.PureScript.Names.ConstructorName)))))
                                                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                                                    "_ideValueOpPrecedence")
                                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                                                 Language.PureScript.AST.Operators.Precedence)
                                                                                                                                                                                                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                                                      "_ideValueOpAssociativity")
                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                                                   Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                                                                       "_ideValueOpType")
                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                                                                                                    (GHC.Base.Maybe
                                                                                                                                                                                                                                                                       Language.PureScript.Types.Type))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds6 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 Language.PureScript.Ide.Types.IdeValueOperator
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.R>_P
                                                                                     <Language.PureScript.Names.OpName
                                                                                        'Language.PureScript.Names.ValueOpName>_R
                                                                                     <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpAlias")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.R>_P
                                                                                                 <Language.PureScript.Names.Qualified
                                                                                                    (Data.Either.Either
                                                                                                       Language.PureScript.Names.Ident
                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                          'Language.PureScript.Names.ConstructorName))>_R
                                                                                                 <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpPrecedence")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Precedence>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.AST.Operators.Precedence>_R
                                                                                       <x>_P)
                   ds7
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpAssociativity")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Associativity>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.R>_P
                                                                                          <Language.PureScript.AST.Operators.Associativity>_R
                                                                                          <x>_P)
                   ds8
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Types.Type)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <GHC.Base.Maybe
                                                                                Language.PureScript.Types.Type>_R
                                                                             <x>_P) } } } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fGenericIdeValue_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValue x
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeValue x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeValue[0]) ; (GHC.Generics.N:M1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.D>_P
                                                                                   <'GHC.Generics.MetaData
                                                                                      "IdeValue"
                                                                                      "Language.PureScript.Ide.Types"
                                                                                      "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                      'GHC.Types.False>_P
                                                                                   <GHC.Generics.M1
                                                                                      GHC.Generics.C
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "IdeValue"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.True)
                                                                                      (GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            ('GHC.Base.Just
                                                                                               "_ideValueIdent")
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.K1
                                                                                            GHC.Generics.R
                                                                                            Language.PureScript.Names.Ident)
                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             ('GHC.Base.Just
                                                                                                                "_ideValueType")
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             Language.PureScript.Types.Type))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <GHC.Generics.C>_P
                                                                                                                                                       <'GHC.Generics.MetaCons
                                                                                                                                                          "IdeValue"
                                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                                          'GHC.Types.True>_P
                                                                                                                                                       <GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                "_ideValueIdent")
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             Language.PureScript.Names.Ident)
                                                                                                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                           GHC.Generics.S
                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                              ('GHC.Base.Just
                                                                                                                                                                                 "_ideValueType")
                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                           (GHC.Generics.K1
                                                                                                                                                                              GHC.Generics.R
                                                                                                                                                                              Language.PureScript.Types.Type)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeValue
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueIdent")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.R>_P
                                                                          <Language.PureScript.Names.Ident>_R
                                                                          <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.Type>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <Language.PureScript.Types.Type>_R
                                                                         <x>_P) }) -}
9e61215f32f4caed313e4d158f96dea0
  $fNFDataAnnotation ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.Annotation
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataAnnotation_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.Annotation>_N)) -}
9e61215f32f4caed313e4d158f96dea0
  $fNFDataAnnotation_$crnf ::
    Language.PureScript.Ide.Types.Annotation -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$crnf ww1 ww2 ww3 ww4 }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fNFDataAstData ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(H)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.PureScript.Ide.Types.$fNFDataAstData_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Language.PureScript.Ide.Types.AstData a>_N)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fNFDataAstData_$crnf ::
    Control.DeepSeq.NFData a =>
    Language.PureScript.Ide.Types.AstData a -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(H)><S,1*U>,
     Unfolding: (\ @ a
                   ($dNFData :: Control.DeepSeq.NFData a)
                   (eta :: Language.PureScript.Ide.Types.AstData a) ->
                 Data.Map.Internal.$fNFDataMap_$crnf
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fNFDataModuleName_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.Names.ModuleName>_N))
                   (\ (ds :: (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a,
                              Data.Map.Internal.Map
                                Language.PureScript.Names.Ident Language.PureScript.Types.Type)) ->
                    case ds of wild { (,) x y ->
                    case Data.Map.Internal.$fNFDataMap_$crnf
                           @ Language.PureScript.Ide.Types.IdeNamespaced
                           @ a
                           Language.PureScript.Ide.Types.$fNFDataAstData_$crnf1
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Language.PureScript.Ide.Types.IdeNamespaced>_N))
                           $dNFData
                           x of wild1 { () ->
                    Data.Map.Internal.$fNFDataMap_$crnf
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Types.Type
                      Language.PureScript.Names.$fNFDataIdent_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Language.PureScript.Names.Ident>_N))
                      Language.PureScript.Types.$fNFDataType_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Language.PureScript.Types.Type>_N))
                      y } })
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <(Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Data.Map.Internal.Map
                                 Language.PureScript.Names.Ident
                                 Language.PureScript.Types.Type)>_N))
                   eta `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
bf12ce78c741411b8db21a537727174e
  $fNFDataAstData_$crnf1 ::
    Language.PureScript.Ide.Types.IdeNamespaced -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeNamespaced g1 g2 ->
                 case g1 of wild1 { DEFAULT ->
                 Data.Text.$fNFDataText_$crnf g2 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fNFDataIdeDataConstructor ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*H,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDataConstructor>_N)) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fNFDataIdeDataConstructor_$crnf ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*H,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDataConstructor g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case g2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds2 { Data.Text.Internal.Text ipv4 ipv5 ipv6 ->
                 Language.PureScript.Types.$fNFDataType_$crnf g3 } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fNFDataIdeDeclaration ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDeclaration>_N)) -}
9e61215f32f4caed313e4d158f96dea0
  $fNFDataIdeDeclarationAnn ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SSSS)S),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclarationAnn_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N)) -}
9e61215f32f4caed313e4d158f96dea0
  $fNFDataIdeDeclarationAnn_$crnf ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SSSS)S),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn g1 g2 ->
                 case Language.PureScript.Ide.Types.$fNFDataAnnotation_$crnf
                        g1 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf
                   g2 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fNFDataIdeDeclaration_$crnf ::
    Language.PureScript.Ide.Types.IdeDeclaration -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf6 g1
                   Language.PureScript.Ide.Types.IdeDeclType g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf5 g1
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf4 g1
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor_$crnf
                        g1
                   Language.PureScript.Ide.Types.IdeDeclTypeClass g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf3 g1
                   Language.PureScript.Ide.Types.IdeDeclValueOperator g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf2 g1
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf1 g1
                   Language.PureScript.Ide.Types.IdeDeclKind g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P) }) -}
e9355acde24ce9532399166de62e3470
  $fNFDataIdeDeclaration_$crnf1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*H),1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeOperator ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                 case ww8
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 Language.PureScript.Ide.Types.$w$crnf1
                   nt
                     `cast`
                   (Sym (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.TypeOpName>_P))
                   ww7
                   nt1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))
                   ww3
                   ww4
                   ww5 } } } }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fNFDataIdeDeclaration_$crnf2 ::
    Language.PureScript.Ide.Types.IdeValueOperator -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValueOperator ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.ValueOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                 Language.PureScript.Ide.Types.$w$crnf2
                   nt
                     `cast`
                   (Sym (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.ValueOpName>_P))
                   ww7
                   ww8
                   ww3
                   ww4
                   ww5 } } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fNFDataIdeDeclaration_$crnf3 ::
    Language.PureScript.Ide.Types.IdeTypeClass -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeTypeClass g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Kinds.$fNFDataKind_$crnf
                        g2 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_go
                   g3 } } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fNFDataIdeDeclaration_$crnf4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeTypeSynonym g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Types.$fNFDataType_$crnf
                        g2 of wild1 { () ->
                 Language.PureScript.Kinds.$fNFDataKind_$crnf g3 } } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fNFDataIdeDeclaration_$crnf5 ::
    Language.PureScript.Ide.Types.IdeType -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeType g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Kinds.$fNFDataKind_$crnf
                        g2 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_go1
                   g3 } } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fNFDataIdeDeclaration_$crnf6 ::
    Language.PureScript.Ide.Types.IdeValue -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$crnf3 ww1 ww2 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fNFDataIdeDeclaration_go ::
    [Language.PureScript.Ide.Types.IdeInstance] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
74a656c790e2d802ca5aa4eeef11d686
  $fNFDataIdeDeclaration_go1 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName,
      Language.PureScript.Types.Type)]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fNFDataIdeInstance ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeInstance_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeInstance>_N)) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fNFDataIdeInstance_$crnf ::
    Language.PureScript.Ide.Types.IdeInstance -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$crnf4 ww1 ww2 ww3 ww4 }) -}
509f3b9cbf1bb878c3665a399622018d
  $fNFDataIdeInstance_go ::
    [Language.PureScript.Types.Constraint] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6c2d78e41f098b3a0043e76583aea9de
  $fNFDataIdeInstance_go1 :: [Language.PureScript.Types.Type] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bf12ce78c741411b8db21a537727174e
  $fNFDataIdeNamespace ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeNamespace_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeNamespace>_N)) -}
bf12ce78c741411b8db21a537727174e
  $fNFDataIdeNamespace_$crnf ::
    Language.PureScript.Ide.Types.IdeNamespace -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
bf12ce78c741411b8db21a537727174e
  $fNFDataIdeNamespaced ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataAstData_$crnf1
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeNamespaced>_N)) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fNFDataIdeType ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeType
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf5
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeType>_N)) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fNFDataIdeTypeClass ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf3
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeClass>_N)) -}
e9355acde24ce9532399166de62e3470
  $fNFDataIdeTypeOperator ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*H),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf1
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeOperator>_N)) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fNFDataIdeTypeSynonym ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf4
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeSynonym>_N)) -}
0059d9277c215835eaca5d4dd78e716a
  $fNFDataIdeValue ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf6
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeValue>_N)) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fNFDataIdeValueOperator ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf2
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeValueOperator>_N)) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fEqAnnotation
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$ccompare
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c<=
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c>
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c>=
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$cmax
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$cmin -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$c< ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c<
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$c<= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$c> ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 Language.PureScript.Ide.Types.$fOrdAnnotation_$c< b a) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$c>= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$ccompare ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$cmax ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdAnnotation_$cmin ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fOrdAstData ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fOrdAstData_$cp1Ord @ a v)
                  (Language.PureScript.Ide.Types.$fOrdAstData7 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData6 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData5 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData4 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData3 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R))
                  (Language.PureScript.Ide.Types.$fOrdAstData1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
c261b26079f32467e79f522715e1c2f4
  $fOrdAstData1 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$cmin
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
8f384b16b514c43e487c255d7afe29f8
  $fOrdAstData2 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$cmax
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
c157d4ffe6e01c48144caf641510cec1
  $fOrdAstData3 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c>=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
ddfc8fb16b150aa00962b794cf7d5979
  $fOrdAstData4 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c>
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
f7fa01df1c5311f6bddba6585016280c
  $fOrdAstData5 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c<=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
534213d8c29dea859f8b0af7913fb5fa
  $fOrdAstData6 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c<
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
312af2689921351ccfc4b84548257322
  $fOrdAstData7 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Ordering
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$ccompare
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fOrdAstData_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.AstData a)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Ide.Types.$fEqAstData
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
d9f2b117db29184c4a1c63c93c0530d9
  $fOrdAstData_$s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                  Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap
                  (Data.Map.Internal.$fOrdMap_$ccompare
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$c<
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$c<=
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$c>
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$c>=
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$cmax
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType)
                  (Data.Map.Internal.$fOrdMap_$cmin
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fOrdIdent
                     Language.PureScript.Types.$fOrdType) -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.Completion
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fEqCompletion
                  Language.PureScript.Ide.Types.$fOrdCompletion_$ccompare
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c<=
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c>
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c>=
                  Language.PureScript.Ide.Types.$fOrdCompletion_$cmax
                  Language.PureScript.Ide.Types.$fOrdCompletion_$cmin -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$c< ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$c<= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$c> ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 Language.PureScript.Ide.Types.$fOrdCompletion_$c< b a) -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$c>= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$ccompare ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$cmax ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
1dc8499524dd705daadd896960727d73
  $fOrdCompletion_$cmin ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$cmin -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$c< ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$c<= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$c> ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c< b a) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$c>= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$ccompare ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$cmax ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)><S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDataConstructor_$cmin ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)><S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$cmin -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$cmin -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$c< ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<4
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$c<= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<=1
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$c> ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (b :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c< b a) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$c>= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c>=1
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$ccompare ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare8
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$cmax ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(U(U,U,U,U),U)><S(S(SLLL)L),1*U(U(U,U,U,U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww12
                        ww13
                        ww14
                        ww15
                        ww4
                        ww5
                        ww6
                        ww7 of wild {
                   GHC.Types.LT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                        ww2
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww10
                             ww2 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                             ww10
                        GHC.Types.LT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                             ww2 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                        ww10 } } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fOrdIdeDeclarationAnn_$cmin ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(U(U,U,U,U),U)><S(S(SLLL)L),1*U(U(U,U,U,U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww12
                        ww13
                        ww14
                        ww15
                        ww4
                        ww5
                        ww6
                        ww7 of wild {
                   GHC.Types.LT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                        ww10
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww10
                             ww2 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                             ww2
                        GHC.Types.LT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                             ww10 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                        ww2 } } } } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$c< ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$c<= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$c> ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$c>= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$ccompare ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (b :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValue b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare6
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclType a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValue ds -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclType b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare5
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare4
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$ccompare
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclTypeClass a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare3
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclValueOperator a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare2
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare1
                             a1
                             b1
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclKind a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclKind b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeDeclaration_$ccompare1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case a of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case a2 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case b2 of ww14 { Language.PureScript.Names.Qualified ww15 ww16 ->
                      let {
                        $j :: GHC.Types.Ordering <join 0>
                        = case GHC.Integer.Type.compareInteger a3 b3 of wild3 {
                            GHC.Types.LT -> GHC.Types.LT
                            GHC.Types.EQ
                            -> let {
                                 $j1 :: GHC.Types.Ordering <join 0>
                                 = case a5 of wild4 {
                                     GHC.Base.Nothing
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.EQ
                                          GHC.Base.Just ipv -> GHC.Types.LT }
                                     GHC.Base.Just a7
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.GT
                                          GHC.Base.Just b7
                                          -> Language.PureScript.Kinds.$fOrdKind_$ccompare a7 b7 } }
                               } in
                               case a4 of wild4 {
                                 Language.PureScript.AST.Operators.Infixl
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> $j1
                                      Language.PureScript.AST.Operators.Infixr -> GHC.Types.LT
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.LT }
                                 Language.PureScript.AST.Operators.Infixr
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> GHC.Types.GT
                                      Language.PureScript.AST.Operators.Infixr -> $j1
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.LT }
                                 Language.PureScript.AST.Operators.Infix
                                 -> case b4 of wild5 {
                                      DEFAULT -> GHC.Types.GT
                                      Language.PureScript.AST.Operators.Infix -> $j1 } }
                            GHC.Types.GT -> GHC.Types.GT }
                      } in
                      case ww12 of wild3 {
                        GHC.Base.Nothing
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing
                             -> case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                case Data.Text.$w$ccompare ww18 ww19 ww20 ww22 ww23 ww24 of wild5 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ -> $j
                                  GHC.Types.GT -> GHC.Types.GT } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a7
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b7
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b7
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                     case ww16
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                     case Data.Text.$w$ccompare
                                            ww18
                                            ww19
                                            ww20
                                            ww22
                                            ww23
                                            ww24 of wild6 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.GT } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeDeclaration_$ccompare2 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeDeclaration_$ccompare3 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare3
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeDeclaration_$ccompare4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeDeclaration_$ccompare5 ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeDeclaration_$ccompare6 ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$ccompare7 ww1 ww2 ww4 ww5 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$cmax ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fOrdIdeDeclaration_$cmin ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
d736d4b3d761f5e55f98c4428b0a3520
  $fOrdIdeDeclaration_$s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName,
       Language.PureScript.Types.Type)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName,
                     Language.PureScript.Types.Type)
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType)
                  (\ (a1 :: (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type))
                     (b1 :: (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ Language.PureScript.Types.Type
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Types.$fOrdType) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fEqIdeInstance
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$cmin -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$c< ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c<3
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$c<= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$c> ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 Language.PureScript.Ide.Types.$fOrdIdeInstance_$c< b a) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$c>= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$ccompare ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$ccompare4
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$cmax ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeInstance_$cmin ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fEqIdeNamespace
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$cmin -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$c< ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSType
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.PureScript.Ide.Types.IdeNSValue -> $j 0#
                   Language.PureScript.Ide.Types.IdeNSType -> $j 1#
                   Language.PureScript.Ide.Types.IdeNSKind -> $j 2# }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$c> ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c< b a) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSType
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue -> $j 0#
                   Language.PureScript.Ide.Types.IdeNSType -> $j 1#
                   Language.PureScript.Ide.Types.IdeNSKind -> $j 2# }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.EQ
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.EQ
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.EQ } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$cmax ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespace_$cmin ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$cmin -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$c< ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<1 ww1 ww2 ww4 ww5 } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$c<= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<= ww1 ww2 ww4 ww5 } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$c> ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (b :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c< b a) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$c>= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c>= ww1 ww2 ww4 ww5 } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$ccompare1 ww1 ww2 ww4 ww5 } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$cmax ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10 } } } } } } }) -}
bf12ce78c741411b8db21a537727174e
  $fOrdIdeNamespaced_$cmin ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww2
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeNamespaced wild1 ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6 } } } } } } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fEqIdeType
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare5
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeType_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeType_$cmin -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fEqIdeTypeClass
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare3
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$cmin -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$c< ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$c> ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c< b a) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fOrdIdeTypeClass_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fEqIdeTypeOperator
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare1
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$cmin -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$c< ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case a of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case a2 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case b2 of ww14 { Language.PureScript.Names.Qualified ww15 ww16 ->
                      let {
                        $j :: GHC.Types.Bool <join 0>
                        = case GHC.Integer.Type.compareInteger a3 b3 of wild3 {
                            GHC.Types.LT -> GHC.Types.True
                            GHC.Types.EQ
                            -> let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = case a5 of wild4 {
                                     GHC.Base.Nothing
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just ipv -> GHC.Types.True }
                                     GHC.Base.Just a7
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b7
                                          -> Language.PureScript.Kinds.$fOrdKind_$c< a7 b7 } }
                               } in
                               case a4 of wild4 {
                                 Language.PureScript.AST.Operators.Infixl
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> $j1
                                      Language.PureScript.AST.Operators.Infixr -> GHC.Types.True
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.True }
                                 Language.PureScript.AST.Operators.Infixr
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> GHC.Types.False
                                      Language.PureScript.AST.Operators.Infixr -> $j1
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.True }
                                 Language.PureScript.AST.Operators.Infix
                                 -> case b4 of wild5 {
                                      DEFAULT -> GHC.Types.False
                                      Language.PureScript.AST.Operators.Infix -> $j1 } }
                            GHC.Types.GT -> GHC.Types.False }
                      } in
                      case ww12 of wild3 {
                        GHC.Base.Nothing
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing
                             -> case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                case Data.Text.$w$ccompare ww18 ww19 ww20 ww22 ww23 ww24 of wild5 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ -> $j
                                  GHC.Types.GT -> GHC.Types.False } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a7
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b7
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b7
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                     case ww16
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                     case Data.Text.$w$ccompare
                                            ww18
                                            ww19
                                            ww20
                                            ww22
                                            ww23
                                            ww24 of wild6 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.False } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$c> ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c< b a) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
e9355acde24ce9532399166de62e3470
  $fOrdIdeTypeOperator_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fEqIdeTypeSynonym
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare4
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$cmin -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$c< ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<7
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$c> ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c< b a) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fOrdIdeTypeSynonym_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$c< ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$c<= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$c> ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 Language.PureScript.Ide.Types.$fOrdIdeType_$c< b a) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$c>= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$cmax ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fOrdIdeType_$cmin ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fEqIdeValue
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare6
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$cmin -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fEqIdeValueOperator
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare2
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$cmin -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$c< ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$c<= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$c> ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c< b a) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$c>= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$cmax ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fOrdIdeValueOperator_$cmin ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$c< ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<8 ww1 ww2 ww4 ww5 } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$c<= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<=2 ww1 ww2 ww4 ww5 } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$c> ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeValue)
                   (b :: Language.PureScript.Ide.Types.IdeValue) ->
                 Language.PureScript.Ide.Types.$fOrdIdeValue_$c< b a) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$c>= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c>=2 ww1 ww2 ww4 ww5 } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$cmax ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww5
                             ww2 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5
                        GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeValue ww4 ww5 } } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fOrdIdeValue_$cmin ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww5
                             ww2 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2
                        GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeValue ww1 ww2 } } }) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowAnnotation ::
    GHC.Show.Show Language.PureScript.Ide.Types.Annotation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshow
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshowList -}
9e61215f32f4caed313e4d158f96dea0
  $fShowAnnotation1 ::
    Language.PureScript.Ide.Types.Annotation -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowAnnotation_$cshow ::
    Language.PureScript.Ide.Types.Annotation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation) ->
                 Language.PureScript.Ide.Types.$fShowAnnotation_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowAnnotation_$cshowList ::
    [Language.PureScript.Ide.Types.Annotation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Annotation])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Annotation
                   Language.PureScript.Ide.Types.$fShowAnnotation1
                   ls
                   s) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowAnnotation_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.Annotation ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fShowAstData ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec @ a v)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshow @ a v)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshowList @ a v) -}
c6dc93f47ea18896738a5d057777e6c7
  $fShowAstData1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowAstData2) -}
85e5a31566d6190100d77e9500ec2bff
  $fShowAstData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AstData "#) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fShowAstData_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Types.AstData a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fShowAstData_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Types.AstData a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Types.AstData a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Types.AstData a)
                   (Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Types.$fFoldableAstData7)
                   ls
                   s) -}
e5bab2f0f0f5b6510d1fd90d834176e7
  $fShowAstData_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.AstData a -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) ->
                 let {
                   $dShow1 :: GHC.Show.Show
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced a)
                   = Data.Map.Internal.$fShowMap
                       @ Language.PureScript.Ide.Types.IdeNamespaced
                       @ a
                       Language.PureScript.Ide.Types.$fShowIdeNamespaced
                       $dShow
                 } in
                 let {
                   $dShow2 :: GHC.Show.Show
                                (Language.PureScript.Ide.Types.DefinitionSites a,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                   = GHC.Show.$fShow(,)
                       @ (Data.Map.Internal.Map
                            Language.PureScript.Ide.Types.IdeNamespaced a)
                       @ (Data.Map.Internal.Map
                            Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                       $dShow1
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
                 } in
                 \ (a1 :: GHC.Types.Int)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 case a1 of wild { GHC.Types.I# x ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.Ide.Types.DefinitionSites a,
                          Language.PureScript.Ide.Types.TypeAnnotations)
                       Language.PureScript.Names.$fShowModuleName
                       $dShow2
                       11#
                       ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                 } in
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowAstData1
                        (g x1)
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Types.$fShowAstData1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }) -}
9b4b3b1767dd753427fdd0bcb6fcf2da
  $fShowAstData_$s$fShow(,) ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced
         Language.PureScript.AST.SourcePos.SourceSpan,
       Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Ide.Types.IdeNamespaced
                       Language.PureScript.AST.SourcePos.SourceSpan,
                     Data.Map.Internal.Map
                       Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan)
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap)
                  (\ (x :: (Data.Map.Internal.Map
                              Language.PureScript.Ide.Types.IdeNamespaced
                              Language.PureScript.AST.SourcePos.SourceSpan,
                            Data.Map.Internal.Map
                              Language.PureScript.Names.Ident Language.PureScript.Types.Type)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan)
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced
                                Language.PureScript.AST.SourcePos.SourceSpan,
                              Data.Map.Internal.Map
                                Language.PureScript.Names.Ident Language.PureScript.Types.Type)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan,
                        Data.Map.Internal.Map
                          Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ (Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.AST.SourcePos.SourceSpan)
                        @ (Data.Map.Internal.Map
                             Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
edb69f0c1eb6ea91091fb20b1aeecae9
  $fShowAstData_$s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Types.$fShowType)
                  (\ (x :: Data.Map.Internal.Map
                             Language.PureScript.Names.Ident Language.PureScript.Types.Type) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Types.$fShowType
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               Language.PureScript.Names.Ident Language.PureScript.Types.Type])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Types.$fShowType
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
263a612d0b86ffa981f1db3b1f1bf28a
  $fShowAstData_$s$fShowMap1 ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced
         Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Ide.Types.IdeNamespaced
                       Language.PureScript.AST.SourcePos.SourceSpan)
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Ide.Types.IdeNamespaced
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Ide.Types.$fShowIdeNamespaced
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan)
                  (\ (x :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.AST.SourcePos.SourceSpan) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Ide.Types.IdeNamespaced
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Ide.Types.$fShowIdeNamespaced
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced
                               Language.PureScript.AST.SourcePos.SourceSpan])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan)
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ Language.PureScript.Ide.Types.IdeNamespaced
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
1dc8499524dd705daadd896960727d73
  $fShowCompletion ::
    GHC.Show.Show Language.PureScript.Ide.Types.Completion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshow
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshowList -}
1dc8499524dd705daadd896960727d73
  $fShowCompletion1 ::
    Language.PureScript.Ide.Types.Completion -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Completion) ->
                 case w of ww { Language.PureScript.Ide.Types.Completion ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
1dc8499524dd705daadd896960727d73
  $fShowCompletion_$cshow ::
    Language.PureScript.Ide.Types.Completion -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion) ->
                 Language.PureScript.Ide.Types.$fShowCompletion_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1dc8499524dd705daadd896960727d73
  $fShowCompletion_$cshowList ::
    [Language.PureScript.Ide.Types.Completion] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Completion])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Types.$fShowCompletion1
                   ls
                   s) -}
1dc8499524dd705daadd896960727d73
  $fShowCompletion_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Completion -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Completion) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.Completion ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDataConstructor ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshowList -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDataConstructor1 ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U(U,U,U),1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec3 0# ww1 ww2 ww3 }) -}
5f0203ce0a4a13cebae91503f663669c
  $fShowIdeDataConstructor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
592d0df2025957e16c2b2c411d0054b6
  $fShowIdeDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorType = "#) -}
df9623b009d4809d27643fdfbc33052b
  $fShowIdeDataConstructor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorTypeName = "#) -}
d3b2fd1c656e5e94f43e4a5bb80e6fc9
  $fShowIdeDataConstructor5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorName = "#) -}
961d6f71061b8721c8cc8f0d7f6efea5
  $fShowIdeDataConstructor6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDataConstructor {"#) -}
b104c26dfb4b3bf1a7fc52a86c3fc087
  $fShowIdeDataConstructor7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDataConstructor_$cshow ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshow ww1 ww2 ww3 }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDataConstructor_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDataConstructor]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDataConstructor])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor1
                   ls
                   s) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDataConstructor_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeDataConstructor ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDeclaration ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshowList -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDeclaration1 ::
    Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec4 0# w) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowIdeDeclarationAnn ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshowList -}
9e61215f32f4caed313e4d158f96dea0
  $fShowIdeDeclarationAnn1 ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec5 0# ww1 ww2 }) -}
d1bd82ec59c7a0cb0e3154abcf7f0da4
  $fShowIdeDeclarationAnn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_idaDeclaration = "#) -}
5067a8a8f200ee913af412104def13eb
  $fShowIdeDeclarationAnn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_idaAnnotation = "#) -}
191cbb270a3810fd827605dd8158860a
  $fShowIdeDeclarationAnn4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclarationAnn {"#) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowIdeDeclarationAnn_$cshow ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow1 ww1 ww2 }) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowIdeDeclarationAnn_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDeclarationAnn] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn1
                   ls
                   s) -}
9e61215f32f4caed313e4d158f96dea0
  $fShowIdeDeclarationAnn_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec5 ww1 ww3 ww4 } }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDeclaration_$cshow ::
    Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDeclaration_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDeclaration] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDeclaration])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDeclaration
                   Language.PureScript.Ide.Types.$fShowIdeDeclaration1
                   ls
                   s) -}
9a139a83eccdb4ce038336f38d1d61cf
  $fShowIdeDeclaration_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec4 ww1 w1 }) -}
3efe7a586df81e9939e878abd1e5b6ba
  $fShowIdeFileState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeFileState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeFileState
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowList -}
3efe7a586df81e9939e878abd1e5b6ba
  $fShowIdeFileState1 ::
    Language.PureScript.Ide.Types.IdeFileState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeFileState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec6 0# ww1 ww2 }) -}
9ff424c0863a301eedc97d73e553ce96
  $fShowIdeFileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fsModules = "#) -}
7f0114ac4086266429d89b979d8ca421
  $fShowIdeFileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fsExterns = "#) -}
0797848146cc5ca592c7d87523aea8a6
  $fShowIdeFileState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeFileState {"#) -}
3efe7a586df81e9939e878abd1e5b6ba
  $fShowIdeFileState_$cshow ::
    Language.PureScript.Ide.Types.IdeFileState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeFileState) ->
                 Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3efe7a586df81e9939e878abd1e5b6ba
  $fShowIdeFileState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeFileState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeFileState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeFileState
                   Language.PureScript.Ide.Types.$fShowIdeFileState1
                   ls
                   s) -}
3efe7a586df81e9939e878abd1e5b6ba
  $fShowIdeFileState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeFileState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeFileState ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec6 ww1 ww3 ww4 } }) -}
b3dd21eed56f75fbab9ec0b47a046ce5
  $fShowIdeFileState_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     Language.PureScript.AST.Declarations.$fShowModule
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: (Language.PureScript.AST.Declarations.Module,
                            [GHC.Types.Char])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     Language.PureScript.AST.Declarations.$fShowModule
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.Declarations.Module,
                              [GHC.Types.Char])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.Declarations.Module
                        @ [GHC.Types.Char]
                        Language.PureScript.AST.Declarations.$fShowModule
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeInstance ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowList -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeInstance1 ::
    Language.PureScript.Ide.Types.IdeInstance -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec7
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
4aa7cea4d2b94461e70569981add9758
  $fShowIdeInstance2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeInstance3) -}
69e0b966e47a803c42af13d53fb6434b
  $fShowIdeInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeInstance {"#) -}
b4ae65b0c744e11ef0776b46b3552311
  $fShowIdeInstance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceConstraints = "#) -}
f73498669284e8a6502066dfaac1ea39
  $fShowIdeInstance5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceTypes = "#) -}
2f5aba799d5c1378f9772f2475b13c25
  $fShowIdeInstance6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceName = "#) -}
86fb49b64707107a2cf2c55f40324ede
  $fShowIdeInstance7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceModule = "#) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeInstance_$cshow ::
    Language.PureScript.Ide.Types.IdeInstance -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance) ->
                 Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeInstance_$cshowList ::
    [Language.PureScript.Ide.Types.IdeInstance] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeInstance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeInstance
                   Language.PureScript.Ide.Types.$fShowIdeInstance1
                   ls
                   s) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeInstance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeInstance ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec7
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
7d71907099898bc2cdccd1516a05d59d
  $fShowIdeInstance_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Types.Constraint]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Types.Constraint]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Types.$fShowConstraint_$cshowList)
                  (\ (x :: [Language.PureScript.Types.Constraint]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Types.Constraint
                     Language.PureScript.Types.$fShowConstraint1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Types.Constraint]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Types.Constraint]
                     Language.PureScript.Types.$fShowConstraint_$cshowList
                     ls
                     s) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fShowIdeLogLevel ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeLogLevel
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeLogLevel
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshowList -}
556737c28766770cf4dc30a726818c41
  $fShowIdeLogLevel1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel2) -}
4a1c3784623d4bc4c70d9568706d9bda
  $fShowIdeLogLevel10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogDebug"#) -}
765daa7cb12568f4f02f6502aba8a2e8
  $fShowIdeLogLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogNone"#) -}
2f0281733b191c09c0deabeeb60ea160
  $fShowIdeLogLevel3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel4) -}
0ec44889e5218ba2c8ea95fdb44e0ea5
  $fShowIdeLogLevel4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogDefault"#) -}
91d6ef780bb8036f92f784c9c5d5bca0
  $fShowIdeLogLevel5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel6) -}
1b43455321da101a4a338ec442dcec44
  $fShowIdeLogLevel6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogAll"#) -}
5911413a4aacbbddd0ff7638bc724749
  $fShowIdeLogLevel7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel8) -}
82d8043ff52b7e3ae98491799c46cac7
  $fShowIdeLogLevel8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogPerf"#) -}
38fd734f5c8acc1518fcda3e760f513e
  $fShowIdeLogLevel9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel10) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fShowIdeLogLevel_$cshow ::
    Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel9
                   Language.PureScript.Ide.Types.LogPerf
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel7
                   Language.PureScript.Ide.Types.LogAll
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel5
                   Language.PureScript.Ide.Types.LogDefault
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel3
                   Language.PureScript.Ide.Types.LogNone
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel1 }) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fShowIdeLogLevel_$cshowList ::
    [Language.PureScript.Ide.Types.IdeLogLevel] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeLogLevel])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeLogLevel
                   Language.PureScript.Ide.Types.$w$cshowsPrec8
                   ls
                   s) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $fShowIdeLogLevel_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec8 w1 w2) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespace ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshowList -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespace_$cshow ::
    Language.PureScript.Ide.Types.IdeNamespace -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                   Language.PureScript.Ide.Types.IdeNSType
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced3 }) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespace_$cshowList ::
    [Language.PureScript.Ide.Types.IdeNamespace] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeNamespace])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeNamespace
                   Language.PureScript.Ide.Types.$w$cshowsPrec9
                   ls
                   s) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespace_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec9 w1 w2) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespaced ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowList -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespaced1 ::
    Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U,U,U))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
00fa8663b1b2335c398e1b6e66909010
  $fShowIdeNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespaced "#) -}
15a6ca6377f321d999f273760100198c
  $fShowIdeNamespaced3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced4) -}
d9d6cd51d80bb90c802285ee5b10f452
  $fShowIdeNamespaced4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSKind"#) -}
fac775d18d2f1dddb8a78031bd6fd5ad
  $fShowIdeNamespaced5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced6) -}
e3538a53254bb5795113fe34ab5ec745
  $fShowIdeNamespaced6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSType"#) -}
3332033e20ef54fd4567ef3504215a15
  $fShowIdeNamespaced7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced8) -}
e70eddc1cef5de648cd3f9fe34b7ae61
  $fShowIdeNamespaced8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSValue"#) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespaced_$cshow ::
    Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespaced_$cshowList ::
    [Language.PureScript.Ide.Types.IdeNamespaced] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeNamespaced])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced1
                   ls
                   s) -}
bf12ce78c741411b8db21a537727174e
  $fShowIdeNamespaced_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U,U,U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeNamespaced ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
c64cafa4c111c51ee62bcfcf640157b5
  $fShowIdeState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeState
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshowList -}
c64cafa4c111c51ee62bcfcf640157b5
  $fShowIdeState1 ::
    Language.PureScript.Ide.Types.IdeState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec10 0# ww1 ww2 }) -}
0f964504014454c671334f14df285cb0
  $fShowIdeState10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2) -}
f855fd8d3e9d7ec3dea39b0d9c7fe79d
  $fShowIdeState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ideVolatileState = "#) -}
d8c9720c8a3e1918c3ca058ab5a6fca5
  $fShowIdeState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ideFileState = "#) -}
b42a6fde96842cc904bc12d4b5288d01
  $fShowIdeState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeState {"#) -}
d84a2ed5d0a0541a3d46da2e78275bdf
  $fShowIdeState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsCachedRebuild = "#) -}
043cb269fcb7a56c9fc3e93fbcc86b09
  $fShowIdeState6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsDeclarations = "#) -}
466d89d68b6a0b0911ec4ff365014259
  $fShowIdeState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsAstData = "#) -}
f916970e2f146bb37b3d5746fe9feabb
  $fShowIdeState8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeVolatileState {"#) -}
f8d3b07ae933079dedee53bb0b105942
  $fShowIdeState9 ::
    GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn) -}
c64cafa4c111c51ee62bcfcf640157b5
  $fShowIdeState_$cshow ::
    Language.PureScript.Ide.Types.IdeState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow2 ww1 ww2 }) -}
c64cafa4c111c51ee62bcfcf640157b5
  $fShowIdeState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeState
                   Language.PureScript.Ide.Types.$fShowIdeState1
                   ls
                   s) -}
c64cafa4c111c51ee62bcfcf640157b5
  $fShowIdeState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeState ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec10 ww1 ww3 ww4 } }) -}
f228d9e0053d2c3cc9a8822419c2ab79
  $fShowIdeState_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Externs.ExternsFile)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Externs.ExternsFile)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     Language.PureScript.Names.$fShowModuleName
                     Language.PureScript.Externs.$fShowExternsFile)
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Externs.ExternsFile)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     Language.PureScript.Names.$fShowModuleName
                     Language.PureScript.Externs.$fShowExternsFile
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Externs.ExternsFile)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Externs.ExternsFile)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ Language.PureScript.Externs.ExternsFile
                        Language.PureScript.Names.$fShowModuleName
                        Language.PureScript.Externs.$fShowExternsFile
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fShowIdeType ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshowList -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fShowIdeType1 ::
    Language.PureScript.Ide.Types.IdeType -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec12 0# ww1 ww2 ww3 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeTypeClass ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowList -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeTypeClass1 ::
    Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec13 0# ww1 ww2 ww3 }) -}
bf5a686f89557df5478ea5e5f19d742d
  $fShowIdeTypeClass2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCInstances = "#) -}
b122e61c8044bb658ea8710987f97538
  $fShowIdeTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCKind = "#) -}
49a154e61519d74c266f2051b0cb0d95
  $fShowIdeTypeClass4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCName = "#) -}
e16ee626879a77a17d7708ead6875325
  $fShowIdeTypeClass5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeClass {"#) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeTypeClass_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeTypeClass_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeClass] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeClass])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   Language.PureScript.Ide.Types.$fShowIdeTypeClass1
                   ls
                   s) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $fShowIdeTypeClass_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeClass ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec13
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
e9355acde24ce9532399166de62e3470
  $fShowIdeTypeOperator ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowList -}
e9355acde24ce9532399166de62e3470
  $fShowIdeTypeOperator1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeOperator ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec14
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
9f9685f81cfc9554a1186a0930597e25
  $fShowIdeTypeOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpKind = "#) -}
c118fa8821472e1d68bf1c39fff76ca5
  $fShowIdeTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpAssociativity = "#) -}
720af68a4e5283835bb4436911399a74
  $fShowIdeTypeOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpPrecedence = "#) -}
ddd07ec72681c3c8ce7a754996678de9
  $fShowIdeTypeOperator5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpAlias = "#) -}
82e2f3fb478fa44ac5f3a6d1003feffd
  $fShowIdeTypeOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpName = "#) -}
a7b1011ffd01563fa71b43a574e80a92
  $fShowIdeTypeOperator7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeOperator {"#) -}
e9355acde24ce9532399166de62e3470
  $fShowIdeTypeOperator_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e9355acde24ce9532399166de62e3470
  $fShowIdeTypeOperator_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator1
                   ls
                   s) -}
e9355acde24ce9532399166de62e3470
  $fShowIdeTypeOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeOperator ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec14
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fShowIdeTypeSynonym ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowList -}
8e0134581e8be26d8a7975aa0f57a68f
  $fShowIdeTypeSynonym1 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec15 0# ww1 ww2 ww3 }) -}
c7cde3f8bbf524747f3fb4f7e51e059b
  $fShowIdeTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymKind = "#) -}
d1a1026ee4f875aa8cc9f49994995c89
  $fShowIdeTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymType = "#) -}
35120a8fa1859fd7dc2bdf4e764d70e4
  $fShowIdeTypeSynonym4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymName = "#) -}
1dc637d60b89b31143991a61ff1e27ee
  $fShowIdeTypeSynonym5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeSynonym {"#) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fShowIdeTypeSynonym_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fShowIdeTypeSynonym_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeSynonym] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeSynonym])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   Language.PureScript.Ide.Types.$fShowIdeTypeSynonym1
                   ls
                   s) -}
8e0134581e8be26d8a7975aa0f57a68f
  $fShowIdeTypeSynonym_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeSynonym ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec15
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fShowIdeType_$cshow ::
    Language.PureScript.Ide.Types.IdeType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType) ->
                 Language.PureScript.Ide.Types.$fShowIdeType_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fShowIdeType_$cshowList ::
    [Language.PureScript.Ide.Types.IdeType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeType
                   Language.PureScript.Ide.Types.$fShowIdeType1
                   ls
                   s) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  $fShowIdeType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeType ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec12
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
0059d9277c215835eaca5d4dd78e716a
  $fShowIdeValue ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshowList -}
0059d9277c215835eaca5d4dd78e716a
  $fShowIdeValue1 ::
    Language.PureScript.Ide.Types.IdeValue -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec16 0# ww1 ww2 }) -}
439f41a22e79ac67fde7bdb1b041b2d9
  $fShowIdeValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueType = "#) -}
552522c87cefa20d6fa09248dee3a16c
  $fShowIdeValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueIdent = "#) -}
016d71511cae0a1e54caeddaf96e09b1
  $fShowIdeValue4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValue {"#) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fShowIdeValueOperator ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowList -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fShowIdeValueOperator1 ::
    Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValueOperator ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec17
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
276b14b02c8aa08fad04ff6b1f7f4452
  $fShowIdeValueOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpType = "#) -}
a87c1141f688e24369adfd8daf825750
  $fShowIdeValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpAssociativity = "#) -}
8543a3c7e229ab2f1a83aa7b332d5ba7
  $fShowIdeValueOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpPrecedence = "#) -}
0163ca98082c6b564e3df6b8890a5f77
  $fShowIdeValueOperator5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpAlias = "#) -}
f6690181dd57178715de135cf07d7978
  $fShowIdeValueOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpName = "#) -}
0e2fe04ff4ed51df02c1664026e02fff
  $fShowIdeValueOperator7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValueOperator {"#) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fShowIdeValueOperator_$cshow ::
    Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fShowIdeValueOperator_$cshowList ::
    [Language.PureScript.Ide.Types.IdeValueOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeValueOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   Language.PureScript.Ide.Types.$fShowIdeValueOperator1
                   ls
                   s) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  $fShowIdeValueOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeValueOperator ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec17
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
b07f04cccf86355525ee0c341f83d311
  $fShowIdeValueOperator_$s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Language.PureScript.Names.$fShowProperName_$cshowsPrec
                             @ 'Language.PureScript.Names.ConstructorName
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
0059d9277c215835eaca5d4dd78e716a
  $fShowIdeValue_$cshow ::
    Language.PureScript.Ide.Types.IdeValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow3 ww1 ww2 }) -}
0059d9277c215835eaca5d4dd78e716a
  $fShowIdeValue_$cshowList ::
    [Language.PureScript.Ide.Types.IdeValue] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeValue])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeValue
                   Language.PureScript.Ide.Types.$fShowIdeValue1
                   ls
                   s) -}
0059d9277c215835eaca5d4dd78e716a
  $fShowIdeValue_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeValue ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec16 ww1 ww3 ww4 } }) -}
553cccbafe2b1e345c62ddbb697c6a55
  $fShowIdeVolatileState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeVolatileState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeVolatileState
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowList -}
553cccbafe2b1e345c62ddbb697c6a55
  $fShowIdeVolatileState1 ::
    Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeVolatileState ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec11 0# ww1 ww2 ww3 }) -}
553cccbafe2b1e345c62ddbb697c6a55
  $fShowIdeVolatileState_$cshow ::
    Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
553cccbafe2b1e345c62ddbb697c6a55
  $fShowIdeVolatileState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeVolatileState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeVolatileState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeVolatileState
                   Language.PureScript.Ide.Types.$fShowIdeVolatileState1
                   ls
                   s) -}
553cccbafe2b1e345c62ddbb697c6a55
  $fShowIdeVolatileState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeVolatileState ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec11
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
d599e8d66b83cee61665ee06fcb20991
  $fShowMatch ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Types.Match a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Types.Match a)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshowsPrec @ a v)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshow @ a v)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshowList @ a v) -}
47043bf4773a9386df47a007b1f502b2
  $fShowMatch1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match "#) -}
58010d787f0d59df3b6ae478cf25b811
  $fShowMatch2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d599e8d66b83cee61665ee06fcb20991
  $fShowMatch_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Types.Match a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*U,U)>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Types.Match a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowMatch1
                   (case x `cast`
                         (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww { (,) ww1 ww2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)4
                      (Language.PureScript.Names.$w$cshowsPrec
                         0#
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.showList__1
                            (GHC.Show.$fShow(,)_$sgo1
                               Language.PureScript.Ide.Types.$fShowMatch2
                               (GHC.Show.showsPrec @ a $dShow GHC.Show.$fShow(,)1 ww2)
                               (GHC.Types.[] @ GHC.Show.ShowS)))) })) -}
d599e8d66b83cee61665ee06fcb20991
  $fShowMatch_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Types.Match a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Types.Match a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Types.Match a)
                   (Language.PureScript.Ide.Types.$fShowMatch_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Types.$fFoldableAstData7)
                   ls
                   s) -}
d599e8d66b83cee61665ee06fcb20991
  $fShowMatch_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Match a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S(S),1*U(U)><L,1*U(1*U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Ide.Types.Match a)
                   (w3 :: GHC.Base.String) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec18 @ a w ww1 w2 w3 }) -}
7f283f65f12f93a1220add6ebe787174
  $fShowSuccess ::
    GHC.Show.Show Language.PureScript.Ide.Types.Success
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Success
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshow
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshowList -}
7f283f65f12f93a1220add6ebe787174
  $fShowSuccess1 ::
    Language.PureScript.Ide.Types.Success -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Success)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec19 0# w w1) -}
7f283f65f12f93a1220add6ebe787174
  $fShowSuccess_$cshow ::
    Language.PureScript.Ide.Types.Success -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Success) ->
                 Language.PureScript.Ide.Types.$fShowSuccess_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7f283f65f12f93a1220add6ebe787174
  $fShowSuccess_$cshowList ::
    [Language.PureScript.Ide.Types.Success] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Success])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Success
                   Language.PureScript.Ide.Types.$fShowSuccess1
                   ls
                   s) -}
7f283f65f12f93a1220add6ebe787174
  $fShowSuccess_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Success -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Success)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec19 ww1 w1 w2 }) -}
1dc8499524dd705daadd896960727d73
  $fToJSONCompletion ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Ide.Types.Completion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncoding
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSONList
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncodingList -}
1dc8499524dd705daadd896960727d73
  $fToJSONCompletion_$ctoEncoding ::
    Language.PureScript.Ide.Types.Completion
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1,
     Strictness: <S(SSSSSSS),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON x))
                  `cast`
                (<Language.PureScript.Ide.Types.Completion>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
1dc8499524dd705daadd896960727d73
  $fToJSONCompletion_$ctoEncodingList ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncoding) -}
1dc8499524dd705daadd896960727d73
  $fToJSONCompletion_$ctoJSON ::
    Language.PureScript.Ide.Types.Completion
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S(SSSSSSS),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
1dc8499524dd705daadd896960727d73
  $fToJSONCompletion_$ctoJSONList ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Ide.Types.Completion]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Ide.Types.Completion
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Ide.Types.Completion
                                     c
                                     Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON)
                                  n1
                                  x)))))) -}
7f283f65f12f93a1220add6ebe787174
  $fToJSONSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Ide.Types.Success
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Success
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncoding
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSONList
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncodingList -}
7f283f65f12f93a1220add6ebe787174
  $fToJSONSuccess_$ctoEncoding ::
    Language.PureScript.Ide.Types.Success
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Success) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON x))
                  `cast`
                (<Language.PureScript.Ide.Types.Success>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
7f283f65f12f93a1220add6ebe787174
  $fToJSONSuccess_$ctoEncodingList ::
    [Language.PureScript.Ide.Types.Success]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Ide.Types.Success
                   Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncoding) -}
7f283f65f12f93a1220add6ebe787174
  $fToJSONSuccess_$ctoJSON ::
    Language.PureScript.Ide.Types.Success
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
7f283f65f12f93a1220add6ebe787174
  $fToJSONSuccess_$ctoJSONList ::
    [Language.PureScript.Ide.Types.Success]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Ide.Types.Success]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Ide.Types.Success
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Ide.Types.Success
                                     c
                                     Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON)
                                  n1
                                  x)))))) -}
33ce553610cc3ab03043af7f1a789394
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       Language.PureScript.Names.Ident
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
865d749e0bc3577fccf3a6a28f04b63d
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.$fShowIdent
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   w3 }) -}
8a6a9d1dd23368038a033885d8449edc
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map
      Language.PureScript.Ide.Types.IdeNamespaced
      Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced
                           Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   @ Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced
                   Language.PureScript.AST.SourcePos.$fShowSourceSpan
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5f9509fa89c5f2c9f91b7b6332ba2ea2
  $s$fShowMap_$cshow1 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident Language.PureScript.Types.Type
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident Language.PureScript.Types.Type) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Types.Type
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.Types.$fShowType
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0184b945ba2a986839d4e44eede65f19
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map
       Language.PureScript.Ide.Types.IdeNamespaced
       Language.PureScript.AST.SourcePos.SourceSpan]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.AST.SourcePos.SourceSpan])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Ide.Types.IdeNamespaced
                        Language.PureScript.AST.SourcePos.SourceSpan)
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ Language.PureScript.Ide.Types.IdeNamespaced
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.Ide.Types.$fShowIdeNamespaced
                      Language.PureScript.AST.SourcePos.$fShowSourceSpan
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
790baf8a13f734569400ae31ecfe4e76
  $s$fShowMap_$cshowList1 ::
    [Data.Map.Internal.Map
       Language.PureScript.Names.Ident Language.PureScript.Types.Type]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             Language.PureScript.Names.Ident Language.PureScript.Types.Type])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Types.Type
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Types.$fShowType
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
1aa2123b6d0dd2512d8c327a1bf52001
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced
         Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            Language.PureScript.Ide.Types.IdeNamespaced
                            Language.PureScript.AST.SourcePos.SourceSpan) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   @ Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced
                   Language.PureScript.AST.SourcePos.$fShowSourceSpan
                   ww1
                   w3 }) -}
da672ad6795c5fbf52c08514b95aba84
  $s$fShowMap_$cshowsPrec4 ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Types.Type
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            Language.PureScript.Names.Ident Language.PureScript.Types.Type) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Types.Type
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.Types.$fShowType
                   ww1
                   w3 }) -}
8ad8de0576a8b0a003acba3f9b5335db
  $s$fShow[]_$cshow ::
    [Language.PureScript.Types.Constraint] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Types.Constraint]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Types.Constraint
                   Language.PureScript.Types.$fShowConstraint1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b065ad5331d77a193d4e60d7bb2a2f08
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Types.Constraint]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Types.Constraint]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Types.Constraint]
                   Language.PureScript.Types.$fShowConstraint_$cshowList
                   ls
                   s) -}
ea0599d9f97a1230c15b9282c49ee426
  $tc'Annotation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17996433649029557947##
                   18364665337567418423##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Annotation2
                   0#
                   Language.PureScript.Ide.Types.$tc'Annotation1) -}
4fbe0ea60207d7edabffc3fe99c9102d
  $tc'Annotation1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e46cee301dbc771f6c072c8a17c0e7bc
  $tc'Annotation2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Annotation3) -}
5170eb2b33c199c314d800db72a6ce67
  $tc'Annotation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Annotation"#) -}
4c3580ad4d48e0438f9863f04dc17358
  $tc'AstData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16608474526088600906##
                   8187411239393212503##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'AstData2
                   1#
                   Language.PureScript.Ide.Types.$tc'AstData1) -}
de2696e2d5baee16206485e53b4c4f6b
  $tc'AstData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6da7131bd4ef5ac6fcca14d36aeb3d99
  $tc'AstData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'AstData3) -}
99bfe8098e9d65aa732b042ca7b76f9e
  $tc'AstData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AstData"#) -}
f159da0c2ea68cf342b866f766e772a5
  $tc'Completion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14410953936137546897##
                   887653082817926209##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Completion2
                   0#
                   Language.PureScript.Ide.Types.$tc'Completion1) -}
d9577bbfa1c7c7813c75db0e27310ddf
  $tc'Completion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
81239f2c8d704003667bebf7e9d78e1f
  $tc'Completion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Completion3) -}
89a6e8b8bde0b0381aee5dea382911a0
  $tc'Completion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Completion"#) -}
b9a90bd6699ac1b287dca98125dab0b8
  $tc'CompletionResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7501720916264604446##
                   7950345481802403417##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'CompletionResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'CompletionResult1) -}
718cd733a192c2b52f23fb959f3e9117
  $tc'CompletionResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ac768b843ff69f0aaa31a9e88e49bb0f
  $tc'CompletionResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'CompletionResult3) -}
ee980f474eed5015ffd22ab1412a3f16
  $tc'CompletionResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompletionResult"#) -}
24dc78a1edbd9595b74f20238077b6e3
  $tc'IdeConfiguration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5483602655767735059##
                   15621870109340509916##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration1) -}
a69a664720931a9963426148194e8370
  $tc'IdeConfiguration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c687c320e912846f66a1efec5fa85e0
  $tc'IdeConfiguration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration3) -}
e7f3277be5ed681801805f28e6ba1b72
  $tc'IdeConfiguration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeConfiguration"#) -}
f39722aa4a8e6e2d2a0bffd278ca68c9
  $tc'IdeDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4945529051243930722##
                   338284986706059853##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor1) -}
b5b0aab7c4967c3a0018e7f82b919317
  $tc'IdeDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4d6645a8ba07cc8929e7eeef50e90a57
  $tc'IdeDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor3) -}
e0047d3e9f6d54f4e93f209ac7c569e8
  $tc'IdeDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDataConstructor"#) -}
fcd24788f8c476c88055c3a3e83d2730
  $tc'IdeDeclDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13946514011264565543##
                   747861289818121701##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor1) -}
c9a7434009d576bbbdbda14cc5aae2ab
  $tc'IdeDeclDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c764770c6c5ba1d0a535d0582929105a
  $tc'IdeDeclDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor3) -}
d580eba38da429f2af0acfd43899b20e
  $tc'IdeDeclDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclDataConstructor"#) -}
c7526e1261b356fe2ad103cc6f241b46
  $tc'IdeDeclKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11274379056965699615##
                   13633967724598165611##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind1) -}
78894a8b9752f386eaa1bb1d6b76afe6
  $tc'IdeDeclKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
99ef496ab622131eebaaf8d29f4dd2bb
  $tc'IdeDeclKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind3) -}
cf82e66892d7c926935312d6493e55b6
  $tc'IdeDeclKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclKind"#) -}
5247ba2590d46872d13bf9a1a92de31f
  $tc'IdeDeclType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5254062143614664474##
                   11116391425610053979##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclType2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclType1) -}
2b2f569a2d7e4c267aa175e1b3004d19
  $tc'IdeDeclType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7d8222f744c4d867e80777c2d613cf4b
  $tc'IdeDeclType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclType3) -}
974a7a18fdae17e51a9ed05400caecf5
  $tc'IdeDeclType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclType"#) -}
3148a05c482e827af7f5cec4f72e94ab
  $tc'IdeDeclTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1194960324625254721##
                   3156769316534895715##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass1) -}
837ed1fc23f54fa698ca084dfe65846f
  $tc'IdeDeclTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
120e6ad8da379826b2a44dcaa58b48d2
  $tc'IdeDeclTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass3) -}
a8a6c98251ab048a7464d3e1c4c17929
  $tc'IdeDeclTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeClass"#) -}
6b4d38cb4bd3665aa067713df6b26527
  $tc'IdeDeclTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4317311402627359926##
                   15678558536081039317##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator1) -}
120ab8a8a46f2748e527685c10e5ad09
  $tc'IdeDeclTypeOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
db92bf5c4da2b97fd6099c08eacb3f06
  $tc'IdeDeclTypeOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator3) -}
a0c979c0d1d72d8008f2a5132f6f00fa
  $tc'IdeDeclTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeOperator"#) -}
b5a8e6234d5aa4b2e257c78235207895
  $tc'IdeDeclTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11587095020253891905##
                   1520748424878740524##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym1) -}
515d24068a912e3ac16c5698e4a21498
  $tc'IdeDeclTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1c531987a67c9f841d45855268fc16f3
  $tc'IdeDeclTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym3) -}
c6457b5ad3aa1d6531812a2035b52e1f
  $tc'IdeDeclTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeSynonym"#) -}
83d522117e8db01ed4a8914e1d6d9568
  $tc'IdeDeclValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9699877224060268960##
                   16618133498250574156##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue1) -}
8762a5ee0914f5f5d2f48c8fb335956b
  $tc'IdeDeclValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b2fa746a83216b1812de177475bf82a3
  $tc'IdeDeclValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue3) -}
85add0b5f29e26a186a01307a884439d
  $tc'IdeDeclValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclValue"#) -}
7e88cbed593c90b0fb1a1b9eb735cb63
  $tc'IdeDeclValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16507403324782468217##
                   14472109376760728440##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator1) -}
38883df140c74691ad486cd2d631f346
  $tc'IdeDeclValueOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a5e26d90ae7de37392f7b10ffdc4f24d
  $tc'IdeDeclValueOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator3) -}
b1d7c6876180b5bc2ea5bcbf37cb295b
  $tc'IdeDeclValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclValueOperator"#) -}
c518150dce15a410e246d8a9656b08fb
  $tc'IdeDeclarationAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6735874272709313844##
                   11428154597418950720##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn1) -}
dbbe9daf1955049d27f3f78d15db94c1
  $tc'IdeDeclarationAnn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a3e189b6e4c2303691f8ceee97020774
  $tc'IdeDeclarationAnn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn3) -}
452e5e151da3062e24073c46957cb837
  $tc'IdeDeclarationAnn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclarationAnn"#) -}
635ef30397565576136b8eb3dfef09e7
  $tc'IdeEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14559421997041796453##
                   1490396471748412866##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment1) -}
fa1a649e04a547d37af240d84e206702
  $tc'IdeEnvironment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
be926f8255f9e569a8ad12116984e98b
  $tc'IdeEnvironment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment3) -}
04911b99815b02bbceae05dceaa8fb1b
  $tc'IdeEnvironment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeEnvironment"#) -}
703cab871db926c87549d4c2a0880ab4
  $tc'IdeFileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17795634711823366110##
                   15381254932673098615##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeFileState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeFileState1) -}
6ca178b8ffa5dd7968fbd721b7c27a83
  $tc'IdeFileState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9d84d2e0307349cb9a4ad1a2856c82e
  $tc'IdeFileState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeFileState3) -}
057cfaab63594e048f0887638eeba65f
  $tc'IdeFileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeFileState"#) -}
e26db4ba4888bc743f53a74a3dd1c8be
  $tc'IdeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15218530778171329673##
                   13080786381834107293##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeInstance2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeInstance1) -}
b8574fa22458725830c7f8bec5112251
  $tc'IdeInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f6719686abdadc6c52abe44a6c34a52f
  $tc'IdeInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeInstance3) -}
7d7b6aaaf76f97987da754c4ff0d764c
  $tc'IdeInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeInstance"#) -}
f03a632ed38d86f5c55b2d39a9948606
  $tc'IdeNSKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14766038243558835402##
                   708639767212445477##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSKind2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
5f2a77e58f725b32b3cd306410cb20ea
  $tc'IdeNSKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
6c6f4a435714ab3fe8a5fe6a7e5bb371
  $tc'IdeNSKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSKind3) -}
85ef33fd18a5a34714b83cc34f2fe707
  $tc'IdeNSKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSKind"#) -}
d7e98e24b4bb946f5336b02110aac45d
  $tc'IdeNSType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13437768653303432550##
                   11629805765439681643##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSType1
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
fc4f20865253e95fd30a9169019f5827
  $tc'IdeNSType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSType2) -}
2262c708086332606ac65a739028ab52
  $tc'IdeNSType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSType"#) -}
07e785e85a6c146f2a7a891fe3c5ba51
  $tc'IdeNSValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7913149365913378767##
                   12046804046360147368##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSValue1
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
b41f28faa2fb85574eb79ba3f54985e4
  $tc'IdeNSValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSValue2) -}
c264a69f50ed687ea0328758d0902927
  $tc'IdeNSValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSValue"#) -}
7294e4faf7d4da7190d923415914946e
  $tc'IdeNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5857379818046871784##
                   8082115362796258323##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced1) -}
d3aad62d49ce36d8b6224e55cdf5486e
  $tc'IdeNamespaced1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fe076b95062b3ae860104ae924842928
  $tc'IdeNamespaced2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced3) -}
4afde65221f96a219cd9f82a3f8e33f6
  $tc'IdeNamespaced3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNamespaced"#) -}
ab95cbb628403c1e7eaad2e92a688dfd
  $tc'IdeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2924841164284876800##
                   9647070517316851195##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeState1) -}
1f1c71567e7628d6ad59281cf4e035af
  $tc'IdeState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
54397d68ddd4ef432cbc43825ba6ccdb
  $tc'IdeState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeState3) -}
ea756d545f49b6dbb26c373e9fb4bdd7
  $tc'IdeState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeState"#) -}
14afa54f849ca75639b4f5ef4ae79aa3
  $tc'IdeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10962279021182522356##
                   6323359946547802566##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeType2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeType1) -}
decfe8c15f05e963c7f544e936f0612d
  $tc'IdeType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6dc458c02d111b80b2f917920e3f8f7c
  $tc'IdeType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeType3) -}
8453c289e8c2959f60c74f6704fbd0e1
  $tc'IdeType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeType"#) -}
d81842268127afad4e3a62391167bf4a
  $tc'IdeTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11320391883224304200##
                   17840875320195915312##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass1) -}
12945970bf44cb92c956afec0cc39bff
  $tc'IdeTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b61e814e666625871908c8ca913acd11
  $tc'IdeTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass3) -}
6db62cfd073c9039566de4ec03ad56db
  $tc'IdeTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeClass"#) -}
df56fdcdcea5736e44ccd3b4b48171f5
  $tc'IdeTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2603712891923324848##
                   666296450184959272##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator1) -}
24339ac43c0e16e82e9aef2cbec8077f
  $tc'IdeTypeOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d63c08544787acb9b76eb1406efe6b1d
  $tc'IdeTypeOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator3) -}
7b9d556127ea90ac72c3a0af771f9501
  $tc'IdeTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeOperator"#) -}
30527c62dacc47e9dac63c5de969be2a
  $tc'IdeTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14502252652731379644##
                   17656277126910179887##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym1) -}
f2cfa832b0898aa8620dd5326abbe44d
  $tc'IdeTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4071beee4f0b677ea167e841ccbc210f
  $tc'IdeTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym3) -}
81eb56838c12df072781e869845928b9
  $tc'IdeTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeSynonym"#) -}
6cfc627d34472c93e9a2e025cbb7f758
  $tc'IdeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7869223585978613913##
                   261300317084480309##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeValue2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeValue1) -}
c215f2f29ad0b9899ce0d974dacae015
  $tc'IdeValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b1c01bb2e3757a3ce431a70ddd8af3a7
  $tc'IdeValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeValue3) -}
56eaaabc3d0697cf57cc70284924a64c
  $tc'IdeValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeValue"#) -}
7486287ed238de7a57c097cc6504aa0a
  $tc'IdeValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13459614684026659376##
                   1864520169244754192##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator1) -}
9dcc1515c5e0f2566c9b93d549ca6596
  $tc'IdeValueOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2cc6435d60074469e2c821dbead8fc88
  $tc'IdeValueOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator3) -}
59140b506d9311d71e8fae46530691c2
  $tc'IdeValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeValueOperator"#) -}
15723e1973d5760527c3811b6b86961b
  $tc'IdeVolatileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18020746817983151118##
                   3524065275001525104##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState1) -}
0d91ea6ba9e973e9e66275bb529b2331
  $tc'IdeVolatileState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
280682ff8b0fc3abf4b241c64274e45d
  $tc'IdeVolatileState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState3) -}
703b58cbae488657b028ba162e6929d2
  $tc'IdeVolatileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeVolatileState"#) -}
0ee48f0066f24ba960f74e4ef211959b
  $tc'ImportList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16832750017378542810##
                   12493118643373078695##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'ImportList2
                   0#
                   Language.PureScript.Ide.Types.$tc'ImportList1) -}
4de15103ab34eb64f045df62d5b3ca18
  $tc'ImportList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
870e119c0f9030c211501c9bc6e9329d
  $tc'ImportList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'ImportList3) -}
faf3067446f9b9a08d9bb6cbea5cbc43
  $tc'ImportList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportList"#) -}
fd86ada554f35b74851f18794e15100a
  $tc'LogAll :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   531225431243222968##
                   3506032114625176160##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogAll2
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
d325c42d0d138427c1d9623a4ec71b3d
  $tc'LogAll1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d4e6367c3f353df6592b153cb82e4aad
  $tc'LogAll2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogAll3) -}
b3ce5e0ab4c966d218de9b3cc86d761d
  $tc'LogAll3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogAll"#) -}
822d88428ea6c5a3cfb79bf1142db5a4
  $tc'LogDebug :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11628571090834052469##
                   5366457345180624586##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogDebug1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
f03d8f43620cc7b68315ccf8be0edb2a
  $tc'LogDebug1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogDebug2) -}
c6aebb2129f270988bddf63d22a6c821
  $tc'LogDebug2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogDebug"#) -}
c5b2ca1d87e4bd5aea1a1d2531f7e199
  $tc'LogDefault :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13697094881287825650##
                   13368830303518143492##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogDefault1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
ef3fc15fbaddb7221b7d666929bf6d28
  $tc'LogDefault1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogDefault2) -}
993f09c18a751dd0b24cd337a6ab56f1
  $tc'LogDefault2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogDefault"#) -}
b444824ebabbf28d274afd78b0067843
  $tc'LogNone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3732866152837776890##
                   921985933502416826##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogNone1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
19e9e27dd352fc2018caae2856c2b27b
  $tc'LogNone1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogNone2) -}
a3a57838be35e2c4697aea844faf06b2
  $tc'LogNone2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogNone"#) -}
cf25f22eeb79e80ea00734622334e449
  $tc'LogPerf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17435789903828600624##
                   14931145588695340811##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogPerf1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
0bf0fdc63f5c8fd3e32eb542511527f4
  $tc'LogPerf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogPerf2) -}
11315efe4b3175eb7f453f54869e9645
  $tc'LogPerf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogPerf"#) -}
ce8dba698fc767845907722f91b5e401
  $tc'Match :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17521966363073726369##
                   5499404261480576649##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Match2
                   1#
                   Language.PureScript.Ide.Types.$tc'Match1) -}
81737e7b97f7acfea198c7aa46fa2372
  $tc'Match1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94b346470f01b2bc096740d553b99d11
  $tc'Match2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Match3) -}
3eb9d7043167cd5140731ce758011b1a
  $tc'Match3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Match"#) -}
90cab4f5af65b73be8ef7af92031d2a3
  $tc'ModuleList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17491784417775643842##
                   10542985750775623711##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'ModuleList2
                   0#
                   Language.PureScript.Ide.Types.$tc'ModuleList1) -}
aebd996b070b77e730f45afbf20b5c9b
  $tc'ModuleList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3fccc1210f67f12d884a786cf1a5f6cd
  $tc'ModuleList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'ModuleList3) -}
1d5be0b9483ffbf82c74dd959c6f53a9
  $tc'ModuleList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleList"#) -}
b305cd92edd641dc5cde0c1a720c34ac
  $tc'MultilineTextResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11598687103472440459##
                   7486313569196640539##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'MultilineTextResult1
                   0#
                   Language.PureScript.Ide.Types.$tc'ModuleList1) -}
9d7a922bee6b91600e40cd388d18e5dd
  $tc'MultilineTextResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'MultilineTextResult2) -}
eedc3eabecf028ee00de19c7aab446d1
  $tc'MultilineTextResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultilineTextResult"#) -}
d12bbfad217daa966728f9306e147aec
  $tc'RebuildSuccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12436711365877887902##
                   9340893604958469655##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess2
                   0#
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess1) -}
c659757ca6b86a1e8d5437ad087d6ab7
  $tc'RebuildSuccess1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
03e398e1e7d15323b24390cfd367705f
  $tc'RebuildSuccess2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess3) -}
86c1cc006c6a3b13e484595513cf28fa
  $tc'RebuildSuccess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RebuildSuccess"#) -}
fcbd357631bcd30cb6ec3b22487a1af2
  $tc'TextResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6992422353055950200##
                   15610460392481536256##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'TextResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'TextResult1) -}
a4b44749f9d059648afc993217b10bee
  $tc'TextResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3fff8fe85b723d4d706b0a532786e31b
  $tc'TextResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'TextResult3) -}
40fe695e1958ab3075ea5c3ef66797d8
  $tc'TextResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TextResult"#) -}
c8448c411a6c82a6524a0ff885be8e24
  $tc'UsagesResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3575672930255383207##
                   10625976230634543146##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'UsagesResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'UsagesResult1) -}
e07371a0e25a557166681ab907accc72
  $tc'UsagesResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7631f49998fb45b71e965c53509a6cc6
  $tc'UsagesResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'UsagesResult3) -}
92aa33ba397567741de21db8b7d863e8
  $tc'UsagesResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UsagesResult"#) -}
ed37e55096dc03823461be4ad8b70e0b
  $tcAnnotation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1171157822316066649##
                   18146062042121817908##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcAnnotation1
                   0#
                   GHC.Types.krep$*) -}
3b2055464c59a9e878be57a793502c03
  $tcAnnotation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcAnnotation2) -}
70c9e7010584666cf43afd7ce1e8f0fd
  $tcAnnotation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Annotation"#) -}
5af35bf89d254ebfba9e57c66c15185f
  $tcAstData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1088132557322985008##
                   3769573626411212015##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcAstData1
                   0#
                   GHC.Types.krep$*Arr*) -}
99b7e18dd9ca2d9c8e73174cfb0391cf
  $tcAstData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcAstData2) -}
8beae277076a92964c6f94c32c93be93
  $tcAstData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AstData"#) -}
314fa6e758076032ffcfda2a1a154d09
  $tcCompletion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11236359936280534979##
                   9525006154592321##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcCompletion1
                   0#
                   GHC.Types.krep$*) -}
5f963b76f73127ef19fd7d3076002f54
  $tcCompletion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcCompletion2) -}
e1882e59c66e75e13e179af7e9f9904a
  $tcCompletion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Completion"#) -}
db47a28da4466fd3acc39c7d7828db2c
  $tcIdeConfiguration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16259977887320312489##
                   1778438954540426007##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeConfiguration1
                   0#
                   GHC.Types.krep$*) -}
fd6fc3f35748588687c4c3ac10b94802
  $tcIdeConfiguration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeConfiguration2) -}
dffab4d8f08b3d8c197a0557991bd133
  $tcIdeConfiguration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeConfiguration"#) -}
9e07e461b5bd78fcad963dec27d391c5
  $tcIdeDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11155995799243355751##
                   11409866585722631930##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDataConstructor1
                   0#
                   GHC.Types.krep$*) -}
43a5deedd5f90e84798b16de2cbcde95
  $tcIdeDataConstructor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDataConstructor2) -}
5c2b9eb27dc56d708a5a2f243067b060
  $tcIdeDataConstructor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDataConstructor"#) -}
b9c69085e23b292d4cd2a13550b5f3d9
  $tcIdeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12941370204167855208##
                   10977198819113011759##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDeclaration1
                   0#
                   GHC.Types.krep$*) -}
d13b1456cc4d2535a8e37a10dabe79ef
  $tcIdeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDeclaration2) -}
d305ae94e9ee3f65d437e84339dd6af8
  $tcIdeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclaration"#) -}
3b06376e75a04beb0ae3b4be3d662aa8
  $tcIdeDeclarationAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11751687982420888076##
                   8144256427519030730##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDeclarationAnn1
                   0#
                   GHC.Types.krep$*) -}
b6517ecbbcf8b1b64e86c26b0bac92ee
  $tcIdeDeclarationAnn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDeclarationAnn2) -}
0438760f39d040f949f5e0dd54e898d3
  $tcIdeDeclarationAnn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclarationAnn"#) -}
a9670aa7bf6d4c1f3081b0bd5b444050
  $tcIdeEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18188407256297470416##
                   13559990764937458810##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeEnvironment1
                   0#
                   GHC.Types.krep$*) -}
eb66fc2ec581484c12107cae039f54ca
  $tcIdeEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeEnvironment2) -}
18f6cbfc3af32469ebefab7bf25eca1a
  $tcIdeEnvironment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeEnvironment"#) -}
497b9bcae5f87ca1260e24dda09391d0
  $tcIdeFileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5398748354844339887##
                   10355485404746971398##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeFileState1
                   0#
                   GHC.Types.krep$*) -}
f337db1667cac3a09a3909ea2bd97487
  $tcIdeFileState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeFileState2) -}
afe2e5964517af0aca72b3a237a2d20e
  $tcIdeFileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeFileState"#) -}
3643d54823e31797eba62ffcc0021e6c
  $tcIdeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17546494849200737833##
                   1420090024232485927##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeInstance1
                   0#
                   GHC.Types.krep$*) -}
066c8e5a27ccc443742d8b1cb3fa2393
  $tcIdeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeInstance2) -}
f8c388ca68f02d76847ef6a1beb10cb5
  $tcIdeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeInstance"#) -}
29ba67af5249ad569f00dc8553f8ba59
  $tcIdeLogLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3653788060959324233##
                   7470855905901927375##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeLogLevel1
                   0#
                   GHC.Types.krep$*) -}
70fc54df2fbad54287d43a1affca5199
  $tcIdeLogLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeLogLevel2) -}
0b4ecf54db2d01db01a19ba817f99fe7
  $tcIdeLogLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeLogLevel"#) -}
3daa894376cc2b75c56e04bc36f35ad2
  $tcIdeNamespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4442925076887672368##
                   16346308801070115390##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeNamespace1
                   0#
                   GHC.Types.krep$*) -}
6ed5e68a5c302d0b351d657949c0831b
  $tcIdeNamespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeNamespace2) -}
1db8f06a528588a600e3472def31b242
  $tcIdeNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespace"#) -}
3a961faad80c3a3dc4d0e2898c50f8e7
  $tcIdeNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10762441474873200887##
                   1109242987126324992##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeNamespaced1
                   0#
                   GHC.Types.krep$*) -}
5815b5c98f1c4ca48b0fdd19b85f2244
  $tcIdeNamespaced1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeNamespaced2) -}
1f77a4549a49871ad4373323f3db4413
  $tcIdeNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespaced"#) -}
a0c50cf0bf7235b46328e1e6b3a3b98e
  $tcIdeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6402858764616282685##
                   1584280450101141884##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeState1
                   0#
                   GHC.Types.krep$*) -}
290d75fff09b2e696e384b0b5da41602
  $tcIdeState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeState2) -}
e3d3c639f9c4811c2cf0b83ff59231a6
  $tcIdeState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeState"#) -}
83b2fdd5b41ad9405285e4e628aaf3f8
  $tcIdeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6538359832114604843##
                   11087018372435042942##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeType1
                   0#
                   GHC.Types.krep$*) -}
b411eba11cc7c7a3956c31fce7641a5d
  $tcIdeType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeType2) -}
57422317a7b2cfa249ced635ca8ceafb
  $tcIdeType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeType"#) -}
f9bb461ae2f1ed16d99a3ad0e1ea61db
  $tcIdeTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11429556164990225461##
                   9724759911991775681##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeClass1
                   0#
                   GHC.Types.krep$*) -}
154066048f07f6fe49fd7c6dacd6057b
  $tcIdeTypeClass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeClass2) -}
6dfb586d5491e88f4a702797b589ea75
  $tcIdeTypeClass2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeClass"#) -}
8ecb93ecf8a3f5e099329a8bae290189
  $tcIdeTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17479209541973218658##
                   2423462737293602947##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeOperator1
                   0#
                   GHC.Types.krep$*) -}
8562b3bc7295fdd6defbc2d373c63b8c
  $tcIdeTypeOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeOperator2) -}
3dd5cc8192043be73aa8d7d0ba502483
  $tcIdeTypeOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeOperator"#) -}
5b800a59ac6cce08c7511eaf0a488298
  $tcIdeTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6253827957905980126##
                   5086996697346423854##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeSynonym1
                   0#
                   GHC.Types.krep$*) -}
7ee032e2551370fd9f11fa325442b5a2
  $tcIdeTypeSynonym1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeSynonym2) -}
5127c5b879ad08ae96c4569fde1a896b
  $tcIdeTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeSynonym"#) -}
e3dd599f6b9e1a4d4f0868c258a0d4c1
  $tcIdeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18328201714571423693##
                   2581672985446986943##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeValue1
                   0#
                   GHC.Types.krep$*) -}
d82e8e8356e8bf7b15a82eb6adc864a1
  $tcIdeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeValue2) -}
f0f67097e4635c1044341e4b21ea03b8
  $tcIdeValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValue"#) -}
f494a0e86842f8e3399905fa8445f19c
  $tcIdeValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1268099965730497031##
                   5203121727467623499##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeValueOperator1
                   0#
                   GHC.Types.krep$*) -}
958d3db770aa0a93fadd2e782d413724
  $tcIdeValueOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeValueOperator2) -}
8d501d2ba8af3844e3e37956ab04ded2
  $tcIdeValueOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValueOperator"#) -}
68f402473b946ece0105ae03c3611429
  $tcIdeVolatileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7841837497399771836##
                   17730660794887382154##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeVolatileState1
                   0#
                   GHC.Types.krep$*) -}
f8ce19d77f753f2165148365eab98e72
  $tcIdeVolatileState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeVolatileState2) -}
652553b4d0f73f76336452b4c702c7b6
  $tcIdeVolatileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeVolatileState"#) -}
0462b82eee213f434e867d80efc9775b
  $tcMatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17186995067357154960##
                   157286450600654732##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcMatch1
                   0#
                   GHC.Types.krep$*Arr*) -}
52717124fdccadcbb3600973b30b0645
  $tcMatch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcMatch2) -}
ef8bdd1419568100fd2028847f68f9a1
  $tcMatch2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match"#) -}
fbd7c7639d33184a41edf047973a6d9d
  $tcSuccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12551180089399278611##
                   7312952920052808720##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcSuccess1
                   0#
                   GHC.Types.krep$*) -}
5a35db7e113b2b7af15856330d89782c
  $tcSuccess1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcSuccess2) -}
193f6566908cfc270814d8e83ec39153
  $tcSuccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Success"#) -}
f96ba4d35dfefa86127eb179df8a5575
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Types.$trModule3
                   Language.PureScript.Ide.Types.$trModule1) -}
70805a8aee1aadd38baee8cdc481bf92
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$trModule2) -}
860d4cc46e4714a6092426952a16faf8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Types"#) -}
de1d9fcc244e1bc568850f0305f8fd1c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$trModule4) -}
aa31bec17992c55fea7576a88b1df16d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
df9689f90dc801eb52950723cb58be14
  $w$c< ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just ipv -> GHC.Types.True }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> Data.Text.$fOrdText_$c< a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.$fOrdType_$ccompare
                                          a2
                                          b1 of wild2 {
                                     GHC.Types.LT -> GHC.Types.True
                                     GHC.Types.EQ -> $j2
                                     GHC.Types.GT -> GHC.Types.False } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fOrd[]_$ccompare
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fOrdProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.LT -> GHC.Types.True
                                 GHC.Types.EQ -> $j1
                                 GHC.Types.GT -> GHC.Types.False } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a2 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> $j
                             GHC.Types.GT -> GHC.Types.False } } } } }) -}
bf12ce78c741411b8db21a537727174e
  $w$c<1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$c< ww1 ww3 } }) -}
570e5b05daa94d03f415bcc640cb48a5
  $w$c<2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U><S,U><S,U><S,U><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.Type)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.Type) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww3
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                      case ww8
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                      case Data.Text.$w$ccompare ww11 ww12 ww13 ww15 ww16 ww17 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ -> Language.PureScript.Types.$fOrdType_$c< ww4 ww9
                        GHC.Types.GT -> GHC.Types.False } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
d7f5a96db948e1fa3c28a93eb4345adb
  $w$c<3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.Type])
                   (ww3 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.Type])
                   (ww7 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                             ww1
                             ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ Language.PureScript.Types.Type
                                  Language.PureScript.Types.$fOrdType
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just ipv -> GHC.Types.True }
                                  GHC.Base.Just a2
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b1
                                       -> case GHC.Classes.$fOrd[]_$ccompare
                                                 @ Language.PureScript.Types.Constraint
                                                 Language.PureScript.Types.$fOrdConstraint
                                                 a2
                                                 b1 of wild5 {
                                            DEFAULT -> GHC.Types.False
                                            GHC.Types.LT -> GHC.Types.True } } }
                             GHC.Types.GT -> GHC.Types.False }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
d15c75198c0a45ea3c53482ba043c1f9
  $w$c<4 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c< ww4 ww9
                   GHC.Types.GT -> GHC.Types.False }) -}
7d900df34bb77058fe3337a7ab4210c4
  $w$c<5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.$fOrdKind_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     Language.PureScript.Types.Type)
                                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
                                  ww4
                                  ww9 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $w$c<6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.$fOrdKind_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ Language.PureScript.Ide.Types.IdeInstance
                                  Language.PureScript.Ide.Types.$fOrdIdeInstance
                                  ww4
                                  ww9 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
097f124176880d3bf5dcca53f9dc594e
  $w$c<7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.Type)
                   (ww4 :: Language.PureScript.Kinds.Kind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.Type)
                   (ww9 :: Language.PureScript.Kinds.Kind) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ -> Language.PureScript.Kinds.$fOrdKind_$c< ww4 ww9
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
96ae293693eb8513c6852b201e25d166
  $w$c<8 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,1*U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> Language.PureScript.Types.$fOrdType_$c< ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
bf12ce78c741411b8db21a537727174e
  $w$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww2 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
dd78ce4bee6f4aaadcb76cd145e69442
  $w$c<=1 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww5
                        ww6
                        ww7
                        ww8
                        ww
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww9
                             ww4 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
ba198f99052724ce8fade887a3dc0d5e
  $w$c<=2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww2
                        ww of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww3
                             ww1 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
adf0d554c0746370f76f6d2377a103d9
  $w$c== ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a1
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> Data.Text.$fEqText_$c== a1 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a1
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.$fEqType_$c== a1 b1 of wild2 {
                                     GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j2 } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a1
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fEqProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$c==1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> $j } } } } }) -}
bf12ce78c741411b8db21a537727174e
  $w$c==1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fEqText_$c== ww1 ww3 } }) -}
787226ce9d0183c43736049aa440cc47
  $w$c==2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U><L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.Type)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.Type) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case ww3
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case ww8
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild1 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild3 { (#,#) ds1 ds5 ->
                                case GHC.Prim.narrow32Int# ds5 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> Language.PureScript.Types.$fEqType_$c==
                                       ww4
                                       ww9 } } } } } } } }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $w$c==3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Kinds.$fEqKind_$c== ww3 ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ Language.PureScript.Ide.Types.IdeInstance
                                  Language.PureScript.Ide.Types.$fEqIdeInstance
                                  ww4
                                  ww9 } } } }) -}
e5bbe20437df4e3210220e8df33b0299
  $w$c==4 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.Type])
                   (ww3 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.Type])
                   (ww7 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Language.PureScript.Names.$fEqIdent_$c== ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Language.PureScript.Types.Type
                                  Language.PureScript.Types.$fEqType
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.True
                                       GHC.Base.Just ipv -> GHC.Types.False }
                                  GHC.Base.Just a1
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b1
                                       -> GHC.Classes.$fEq[]_$c==
                                            @ Language.PureScript.Types.Constraint
                                            Language.PureScript.Types.$fEqConstraint
                                            a1
                                            b1 } } } } }) -}
fb4d8943a598536e22b8549111db18db
  $w$c==5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.Type)
                   (ww4 :: Language.PureScript.Kinds.Kind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.Type)
                   (ww9 :: Language.PureScript.Kinds.Kind) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Types.$fEqType_$c== ww3 ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Language.PureScript.Kinds.$fEqKind_$c== ww4 ww9 } } } }) -}
f93186382348eb79f2a9f12c2ffc348d
  $w$c==6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)]) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Kinds.$fEqKind_$c== ww3 ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     Language.PureScript.Types.Type)
                                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
                                  ww4
                                  ww9 } } } }) -}
af57562f0e1023e0db90bc1e332c1dbc
  $w$c==7 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 case Language.PureScript.Names.$fEqIdent_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Language.PureScript.Types.$fEqType_$c== ww1 ww3 }) -}
d10c3bc4d97f9d61690cab0c0475cee0
  $w$c==8 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$c==
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                        ww4
                        ww9 }) -}
609e7cf80989c4f340bc2467a894ccc6
  $w$c==9 ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.ModuleName
    -> a -> Language.PureScript.Names.ModuleName -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ a w ww1 ww3 }) -}
bf12ce78c741411b8db21a537727174e
  $w$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
3a76fcdf10656f01ce45779f577b94bb
  $w$c>=1 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww4
                             ww9 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
a4f73adac230a78d9373b402db08f710
  $w$c>=2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,1*U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
75f5285088ba2d895fa61180927602c9
  $w$ccompare ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = let {
                       $j1 :: GHC.Types.Ordering <join 0>
                       = let {
                           $j2 :: GHC.Types.Ordering <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.EQ
                                    GHC.Base.Just ipv -> GHC.Types.LT }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.GT
                                    GHC.Base.Just b1 -> Data.Text.$fOrdText_$ccompare a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.LT }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.GT
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.$fOrdType_$ccompare
                                          a2
                                          b1 of wild2 {
                                     GHC.Types.LT -> GHC.Types.LT
                                     GHC.Types.EQ -> $j2
                                     GHC.Types.GT -> GHC.Types.GT } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.LT }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.GT
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fOrd[]_$ccompare
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fOrdProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.LT -> GHC.Types.LT
                                 GHC.Types.EQ -> $j1
                                 GHC.Types.GT -> GHC.Types.GT } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case a2 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> $j
                             GHC.Types.GT -> GHC.Types.GT } } } } }) -}
bf12ce78c741411b8db21a537727174e
  $w$ccompare1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3 } }) -}
ea42676f61a6c01b0b0315e607638307
  $w$ccompare2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U><S,U><S,U><S,U><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.Type)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.Type) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww3
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                      case ww8
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                      case Data.Text.$w$ccompare ww11 ww12 ww13 ww15 ww16 ww17 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> Language.PureScript.Types.$fOrdType_$ccompare ww4 ww9
                        GHC.Types.GT -> GHC.Types.GT } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  $w$ccompare3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.$fOrdKind_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ Language.PureScript.Ide.Types.IdeInstance
                             Language.PureScript.Ide.Types.$fOrdIdeInstance
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
da7da3e3531d700c739fa44d7d4feaec
  $w$ccompare4 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.Type])
                   (ww3 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.Type])
                   (ww7 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                             ww1
                             ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ Language.PureScript.Types.Type
                                  Language.PureScript.Types.$fOrdType
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.EQ
                                       GHC.Base.Just ipv -> GHC.Types.LT }
                                  GHC.Base.Just a2
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.GT
                                       GHC.Base.Just b1
                                       -> GHC.Classes.$fOrd[]_$ccompare
                                            @ Language.PureScript.Types.Constraint
                                            Language.PureScript.Types.$fOrdConstraint
                                            a2
                                            b1 } }
                             GHC.Types.GT -> GHC.Types.GT }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
4f5fd2d4359d67b0bc9ddccd75dcb120
  $w$ccompare5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.Type)
                   (ww4 :: Language.PureScript.Kinds.Kind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.Type)
                   (ww9 :: Language.PureScript.Kinds.Kind) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.$fOrdType_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> Language.PureScript.Kinds.$fOrdKind_$ccompare ww4 ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
80abbf74cb51c7c9c053899029e9c1fe
  $w$ccompare6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.Kind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.Kind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.$fOrdKind_$ccompare
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName,
                                Language.PureScript.Types.Type)
                             Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
86a9e1c6f878011782fb21319efc4f19
  $w$ccompare7 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,1*U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> Language.PureScript.Types.$fOrdType_$ccompare ww1 ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
da311eb22bae1fb49611d8d3bd3e67fc
  $w$ccompare8 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        ww4
                        ww9
                   GHC.Types.GT -> GHC.Types.GT }) -}
855ac1a3c5c92103dd9858fbe503ce5b
  $w$crnf ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.Type)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: () <join 0>
                   = let {
                       $j1 :: () <join 0>
                       = case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww3 of wild1 {
                                GHC.Base.Nothing -> GHC.Tuple.()
                                GHC.Base.Just x -> Data.Text.$fNFDataText_$crnf x }
                           GHC.Base.Just x
                           -> case Language.PureScript.Types.$fNFDataType_$crnf
                                     x of wild1 { () ->
                              case ww3 of wild2 {
                                GHC.Base.Nothing -> GHC.Tuple.()
                                GHC.Base.Just x1 -> Data.Text.$fNFDataText_$crnf x1 } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing -> $j1
                       GHC.Base.Just x
                       -> case Language.PureScript.Names.$fNFDataModuleName_go
                                 x `cast`
                                 (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                          $j1 } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> $j
                   GHC.Base.Just x
                   -> case x of ww4 { Language.PureScript.AST.SourcePos.SourceSpan ww5 ww6 ww7 ->
                      case ww6 of ww8 { Language.PureScript.AST.SourcePos.SourcePos ww9 ww10 ->
                      case ww9 of ww11 { GHC.Types.I# ipv ->
                      case ww10 of ww12 { GHC.Types.I# ipv1 ->
                      case ww7 of ww13 { Language.PureScript.AST.SourcePos.SourcePos ww14 ww15 ->
                      case ww14 of ww16 { GHC.Types.I# ipv2 ->
                      case ww15 of ww17 { GHC.Types.I# ipv3 ->
                      case Language.PureScript.AST.SourcePos.$fNFDataSourceSpan_go
                             ww5 of wild1 { () ->
                      $j } } } } } } } } }) -}
cfe79e63add98bc639f1e1474211e1a2
  $w$crnf1 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.TypeOpName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Kinds.Kind
    -> ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,A><S,1*U><L,A><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.OpName
                            'Language.PureScript.Names.TypeOpName)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww3 :: Language.PureScript.AST.Operators.Precedence)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                 case ww1 of wild {
                   GHC.Base.Nothing
                   -> case ww3 of ds1 { DEFAULT ->
                      case ww4 of wild1 { DEFAULT ->
                      case ww5 of wild2 {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Language.PureScript.Kinds.$fNFDataKind_$crnf x } } }
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                      case ww3 of ds1 { DEFAULT ->
                      case ww4 of wild2 { DEFAULT ->
                      case ww5 of wild3 {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x1
                        -> Language.PureScript.Kinds.$fNFDataKind_$crnf x1 } } } } }) -}
bca8de1d14e623d9fc53ed60331e7772
  $w$crnf2 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.ValueOpName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,A><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
e31b5b5148731460e4232cad953c4b83
  $w$crnf3 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type) ->
                 case ww of wild {
                   Language.PureScript.Names.Ident g1
                   -> case g1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Language.PureScript.Types.$fNFDataType_$crnf ww1 }
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild1 {
                        GHC.Base.Nothing
                        -> case g2 of ds1 { DEFAULT ->
                           Language.PureScript.Types.$fNFDataType_$crnf ww1 }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT ->
                           Language.PureScript.Types.$fNFDataType_$crnf ww1 } } }
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Types.$fNFDataType_$crnf ww1 }) -}
4428480e2b0930b756658ece59c14a65
  $w$crnf4 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.Type])
                   (ww3 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 case Language.PureScript.Names.$fNFDataModuleName_go
                        ww
                          `cast`
                        (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                 let {
                   $j :: () <join 0>
                   = case Language.PureScript.Ide.Types.$fNFDataIdeInstance_go1
                            ww2 of wild2 { () ->
                     case ww3 of wild {
                       GHC.Base.Nothing -> GHC.Tuple.()
                       GHC.Base.Just x
                       -> Language.PureScript.Ide.Types.$fNFDataIdeInstance_go x } }
                 } in
                 case ww1 of wild {
                   Language.PureScript.Names.Ident g1
                   -> case g1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 -> $j }
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild2 {
                        GHC.Base.Nothing -> case g2 of ds1 { DEFAULT -> $j }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT -> $j } } }
                   Language.PureScript.Names.UnusedIdent -> $j } }) -}
a36320cb85fdfb3b75dc9b863fa95e45
  $w$cshow ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww2 :: Language.PureScript.Types.Type) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor6
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Ide.Types.$fShowIdeDataConstructor5
                      (Language.PureScript.Names.$w$cshowsPrec2
                         @ 'Language.PureScript.Names.ConstructorName
                         0#
                         ww
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fShowIdeDataConstructor4
                               (Language.PureScript.Names.$w$cshowsPrec2
                                  @ 'Language.PureScript.Names.TypeName
                                  0#
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     GHC.Show.showCommaSpace1
                                     (GHC.CString.unpackAppendCString#
                                        Language.PureScript.Ide.Types.$fShowIdeDataConstructor3
                                        (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                                           Language.PureScript.Ide.Types.$fFoldableAstData7
                                           ww2
                                           Language.PureScript.Ide.Types.$fShowIdeDataConstructor7))))))))) -}
9e61215f32f4caed313e4d158f96dea0
  $w$cshow1 ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U,1*U,1*U)><L,1*U>,
     Inline: [0] -}
26c39172acd4c074cafb8e5f50bf8c0b
  $w$cshow2 ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><L,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeFileState)
                   (ww1 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeState4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Ide.Types.$fShowIdeState3
                      (case ww of ww2 { Language.PureScript.Ide.Types.IdeFileState ww3 ww4 ->
                       Language.PureScript.Ide.Types.$w$cshowsPrec6
                         0#
                         ww3
                         ww4
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fShowIdeState2
                               (case ww1 of ww5 { Language.PureScript.Ide.Types.IdeVolatileState ww6 ww7 ww8 ->
                                Language.PureScript.Ide.Types.$w$cshowsPrec11
                                  0#
                                  ww6
                                  ww7
                                  ww8
                                  Language.PureScript.Ide.Types.$fShowIdeState10 }))) }))) -}
e7e8328a223e3bfa6a97053e79ea495c
  $w$cshow3 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.Type) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeValue4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Ide.Types.$fShowIdeValue3
                      (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                         Language.PureScript.Ide.Types.$fFoldableAstData7
                         ww
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fShowIdeValue2
                               (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                                  Language.PureScript.Ide.Types.$fFoldableAstData7
                                  ww1
                                  Language.PureScript.Ide.Types.$fShowIdeState10)))))) -}
43c2922de413cf52ed9e173046aeb01d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
bf12ce78c741411b8db21a537727174e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww2 :: Data.Text.Internal.Text)
                   (w :: GHC.Base.String) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (eta :: GHC.Base.String)[OneShot] ->
                     case ww1 of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                            eta
                       Language.PureScript.Ide.Types.IdeNSType
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                            eta
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced3
                            eta }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced2
                        (f14
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case Data.Text.Show.$w$cshowsPrec ww2 w of ww3 { (#,#) ww4 ww5 ->
                               GHC.Types.: @ GHC.Types.Char ww4 ww5 })))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeNamespaced2
                           (f14
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (case Data.Text.Show.$w$cshowsPrec
                                         ww2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w) of ww3 { (#,#) ww4 ww5 ->
                                  GHC.Types.: @ GHC.Types.Char ww4 ww5 })))) }) -}
1738e2f1f77fdd1e691a5e2ff3fccc3a
  $w$cshowsPrec10 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(1*U,1*U)><L,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeFileState)
                   (ww2 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Language.PureScript.Ide.Types.IdeFileState ww4 ww5 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec6 0# ww4 ww5 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Language.PureScript.Ide.Types.IdeVolatileState ww4 ww5 ww6 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec11 0# ww4 ww5 ww6 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeState4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeState2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeState3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeState2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
882b9a21ceef397671056e63ecbade06
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Ide.Types.ModuleMap
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Externs.ExternsFile)
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.AstData
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: Language.PureScript.Ide.Types.ModuleMap
                             [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (ww3 :: GHC.Base.Maybe
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Externs.ExternsFile)) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Ide.Types.$w$s$cshowsPrec 0# ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowIdeState9
                       0#
                       ww2
                 } in
                 let {
                   f16 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Externs.ExternsFile)
                       Language.PureScript.Ide.Types.$fShowIdeState_$s$fShow(,)
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeState8
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState7
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeState6
                                    (f15
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeState5
                                             (f16
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x)))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState8
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeState7
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeState6
                                       (f15
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Ide.Types.$fShowIdeState5
                                                (f16
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
d39973256ce9965dd5e51fafab5dada6
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Kinds.Kind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,U>,
     Inline: [0] -}
c34cd658b6edc1c9e8202306ab95e2f0
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Kinds.Kind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (ww2 :: Language.PureScript.Kinds.Kind)
                   (ww3 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Kinds.$w$cshowsPrec 0# ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeTypeClass5
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeTypeClass4
                          (Language.PureScript.Names.$w$cshowsPrec2
                             @ 'Language.PureScript.Names.ClassName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeTypeClass3
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeTypeClass2
                                            (let {
                                               s :: GHC.Base.String
                                               = GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x
                                             } in
                                             case ww3 of wild {
                                               []
                                               -> GHC.CString.unpackAppendCString#
                                                    GHC.Show.showList__4
                                                    s
                                               : x1 xs
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__3
                                                    (case x1 of ww4 { Language.PureScript.Ide.Types.IdeInstance ww5 ww6 ww7 ww8 ->
                                                     Language.PureScript.Ide.Types.$w$cshowsPrec7
                                                       0#
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       (let {
                                                          lvl124 :: [GHC.Types.Char]
                                                          = GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showList__2
                                                              s
                                                        } in
                                                        letrec {
                                                          showl :: [Language.PureScript.Ide.Types.IdeInstance]
                                                                   -> GHC.Base.String
                                                            {- Arity: 1, Strictness: <S,1*U> -}
                                                          = \ (ds2 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                                                            case ds2 of wild1 {
                                                              [] -> lvl124
                                                              : y ys
                                                              -> GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showList__1
                                                                   (case y of ww9 { Language.PureScript.Ide.Types.IdeInstance ww10 ww11 ww12 ww13 ->
                                                                    Language.PureScript.Ide.Types.$w$cshowsPrec7
                                                                      0#
                                                                      ww10
                                                                      ww11
                                                                      ww12
                                                                      ww13
                                                                      (showl ys) }) }
                                                        } in
                                                        showl xs) }) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
56e995108da63a76f67dc9f64c8ec6bd
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Kinds.Kind
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U,U)><L,1*U(1*U,U)><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.AST.Operators.Precedence)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       0#
                       ww7
                       ww8 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Kinds.Kind
                       Language.PureScript.Kinds.$fShowKind
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww5
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeTypeOperator7
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeTypeOperator6
                          (Language.PureScript.Names.$w$cshowsPrec3
                             @ 'Language.PureScript.Names.TypeOpName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator5
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeTypeOperator4
                                            (case GHC.Show.$w$cshowsPrec4
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Ide.Types.$fShowIdeTypeOperator3
                                                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                                                             ww4
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                GHC.Show.showCommaSpace1
                                                                (GHC.CString.unpackAppendCString#
                                                                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator2
                                                                   (f15
                                                                      (GHC.CString.unpackAppendCString#
                                                                         Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                                         x))))))) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
270b6c03376ae2f721d6fdc140d94a1b
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> Language.PureScript.Kinds.Kind
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww2 :: Language.PureScript.Types.Type)
                   (ww3 :: Language.PureScript.Kinds.Kind) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww2
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Kinds.$w$cshowsPrec 0# ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeTypeSynonym5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeTypeSynonym4
                           (Language.PureScript.Names.$w$cshowsPrec2
                              @ 'Language.PureScript.Names.TypeName
                              0#
                              ww1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeTypeSynonym3
                                    (f14
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeTypeSynonym2
                                             (f15
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x)))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeTypeSynonym5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeTypeSynonym4
                              (Language.PureScript.Names.$w$cshowsPrec2
                                 @ 'Language.PureScript.Names.TypeName
                                 0#
                                 ww1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeTypeSynonym3
                                       (f14
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Ide.Types.$fShowIdeTypeSynonym2
                                                (f15
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
9d896614c8146982a2564baa7f678d1a
  $w$cshowsPrec16 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: Language.PureScript.Types.Type) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeValue4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeValue3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeValue2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeValue4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeValue3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeValue2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
1a3cf91863b39dc1cb53659e37a89e82
  $w$cshowsPrec17 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Types.Type
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U,U)><L,1*U(1*U,U)><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.AST.Operators.Precedence)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Types.Type) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName))
                       Language.PureScript.Ide.Types.$fShowIdeValueOperator_$s$fShowEither
                       0#
                       ww7
                       ww8 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Types.Type
                       Language.PureScript.Types.$fShowType
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww5
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeValueOperator7
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeValueOperator6
                          (Language.PureScript.Names.$w$cshowsPrec3
                             @ 'Language.PureScript.Names.ValueOpName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeValueOperator5
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeValueOperator4
                                            (case GHC.Show.$w$cshowsPrec4
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Ide.Types.$fShowIdeValueOperator3
                                                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                                                             ww4
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                GHC.Show.showCommaSpace1
                                                                (GHC.CString.unpackAppendCString#
                                                                   Language.PureScript.Ide.Types.$fShowIdeValueOperator2
                                                                   (f15
                                                                      (GHC.CString.unpackAppendCString#
                                                                         Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                                         x))))))) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
d599e8d66b83cee61665ee06fcb20991
  $w$cshowsPrec18 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Match a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,U><L,1*U(1*U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Language.PureScript.Ide.Types.Match a)
                   (w2 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowMatch1
                        (case w1
                                `cast`
                              (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww1 { (,) ww2 ww3 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (Language.PureScript.Names.$w$cshowsPrec
                              0#
                              ww2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo1
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2)
                                    (GHC.Show.showsPrec @ a w GHC.Show.$fShow(,)1 ww3)
                                    (GHC.Types.[] @ GHC.Show.ShowS)))) })
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowMatch1
                           (case w1
                                   `cast`
                                 (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww1 { (,) ww2 ww3 ->
                            GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)4
                              (Language.PureScript.Names.$w$cshowsPrec
                                 0#
                                 ww2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showList__1
                                    (GHC.Show.$fShow(,)_$sgo1
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)2
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2))
                                       (GHC.Show.showsPrec @ a w GHC.Show.$fShow(,)1 ww3)
                                       (GHC.Types.[] @ GHC.Show.ShowS)))) })) }) -}
7f283f65f12f93a1220add6ebe787174
  $w$cshowsPrec19 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Success
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
8fd3c3c70ad0bb93e234fc7b97bc4860
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> [Language.PureScript.Names.ModuleName]
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
aeae5736783a64c167b9c839d5bc63f2
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.Type
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   (ww2 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww3 :: Language.PureScript.Types.Type) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeDataConstructor6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor5
                          (Language.PureScript.Names.$w$cshowsPrec2
                             @ 'Language.PureScript.Names.ConstructorName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor4
                                   (Language.PureScript.Names.$w$cshowsPrec2
                                      @ 'Language.PureScript.Names.TypeName
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeDataConstructor3
                                            (f14
                                               (GHC.CString.unpackAppendCString#
                                                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                  x)))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
9a139a83eccdb4ce038336f38d1d61cf
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
9e61215f32f4caed313e4d158f96dea0
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(1*U,1*U,1*U,1*U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.Annotation)
                   (ww2 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec 0# ww4 ww5 ww6 ww7 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Ide.Types.$w$cshowsPrec4 0# ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
93071a61ef5b55c88977dd0aae8b740f
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.ModuleMap
         Language.PureScript.Externs.ExternsFile
    -> Language.PureScript.Ide.Types.ModuleMap
         (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.ModuleMap
                             Language.PureScript.Externs.ExternsFile)
                   (ww2 :: Language.PureScript.Ide.Types.ModuleMap
                             (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ Language.PureScript.Externs.ExternsFile
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Externs.$fShowExternsFile
                       0#
                       ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowIdeFileState_$s$fShow(,)
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeFileState4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeFileState3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeFileState2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeFileState4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeFileState3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeFileState2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
e0b7b598f31a62379a62c1c7ca2bd450
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,1*U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: [Language.PureScript.Types.Type])
                   (ww4 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww2
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [Language.PureScript.Types.Constraint]
                       Language.PureScript.Ide.Types.$fShowIdeInstance_$s$fShow[]
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww4
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeInstance7
                       (Language.PureScript.Names.$w$cshowsPrec
                          0#
                          ww1
                          (GHC.Base.++
                             @ GHC.Types.Char
                             GHC.Show.showCommaSpace1
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Ide.Types.$fShowIdeInstance6
                                (f14
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Ide.Types.$fShowIdeInstance5
                                         (let {
                                            s :: GHC.Base.String
                                            = GHC.Base.++
                                                @ GHC.Types.Char
                                                GHC.Show.showCommaSpace1
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeInstance4
                                                   (f15
                                                      (GHC.CString.unpackAppendCString#
                                                         Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                         x)))
                                          } in
                                          case ww3 of wild {
                                            []
                                            -> GHC.CString.unpackAppendCString#
                                                 GHC.Show.showList__4
                                                 s
                                            : x1 xs
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__3
                                                 (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                                                    Language.PureScript.Types.$fShowConstraint7
                                                    x1
                                                    (let {
                                                       lvl124 :: [GHC.Types.Char]
                                                       = GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.showList__2
                                                           s
                                                     } in
                                                     letrec {
                                                       showl :: [Language.PureScript.Types.Type]
                                                                -> GHC.Base.String
                                                         {- Arity: 1, Strictness: <S,1*U> -}
                                                       = \ (ds2 :: [Language.PureScript.Types.Type]) ->
                                                         case ds2 of wild1 {
                                                           [] -> lvl124
                                                           : y ys
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.showList__1
                                                                (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                                                                   Language.PureScript.Types.$fShowConstraint7
                                                                   y
                                                                   (showl ys)) }
                                                     } in
                                                     showl xs)) })))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeInstance2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Types.$fShowIdeInstance2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
f52b3bbb177ebfc52e267d9dd8a9eb78
  $w$cshowsPrec8 ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel9
                        w1
                   Language.PureScript.Ide.Types.LogPerf
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel7
                        w1
                   Language.PureScript.Ide.Types.LogAll
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel5
                        w1
                   Language.PureScript.Ide.Types.LogDefault
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel3
                        w1
                   Language.PureScript.Ide.Types.LogNone
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel1
                        w1 }) -}
bf12ce78c741411b8db21a537727174e
  $w$cshowsPrec9 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeNamespace)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                        w1
                   Language.PureScript.Ide.Types.IdeNSType
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                        w1
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced3
                        w1 }) -}
fb9091e879f543f07b18d403a08fb719
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Ide.Types.AstData
                           Language.PureScript.AST.SourcePos.SourceSpan) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.Ide.Types.DefinitionSites
                            Language.PureScript.AST.SourcePos.SourceSpan,
                          Language.PureScript.Ide.Types.TypeAnnotations)
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       11#
                       w `cast`
                       (Language.PureScript.Ide.Types.N:AstData[0]
                            <Language.PureScript.AST.SourcePos.SourceSpan>_R)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowAstData1
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Types.$fShowAstData1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
232751a069a775d630d3b324456f0b44
  $w$sencodeSuccess ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Errors.JSON.JSONError]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Errors.JSON.JSONError
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
80c1294ffbfdb0da032bcbcea45c58ec
  $w$sencodeSuccess1 ::
    [Language.PureScript.Ide.Types.ModuleIdent]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Types.ModuleIdent]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Data.Text.Internal.Text
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.Internal.$WString
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
7472f8346036ea16e2c21fbfdce982a1
  $w$sencodeSuccess2 ::
    [Language.PureScript.AST.SourcePos.SourceSpan]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.AST.SourcePos.SourceSpan]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.AST.SourcePos.SourceSpan
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.AST.SourcePos.$fToJSONSourceSpan_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
66155b6fbd5316840f34811e24c0ae19
  $w$sencodeSuccess3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww4
                        ww5
                        ww6
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww8
                        ww9
                        ww10
                        (Data.Aeson.Types.Internal.String
                           (Data.Text.Internal.Text ww ww1 ww2))
                        z23 of dt { DEFAULT ->
                 (# dt #) } } } } }) -}
a49cec266cf0c692ae29e3f55f0f46de
  $w$sencodeSuccess4 ::
    [Language.PureScript.Ide.Types.Completion]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Types.Completion]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Ide.Types.Completion
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
5cb16f151e448fe588289fbbba5e8d35
  $wencodeImport ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
33c96adb30ad38d01395066c3ba18345
  $wencodeSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    a -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <S(C(S)LLL),1*U(1*C1(U),A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: a) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case Data.Aeson.Types.ToJSON.toJSON @ a w w1 of v1 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        v1
                        z23 of dt { DEFAULT ->
                 (# dt #) } } } } } }) -}
9e61215f32f4caed313e4d158f96dea0
  data Annotation
    = Annotation {_annLocation :: GHC.Base.Maybe
                                    Language.PureScript.AST.SourcePos.SourceSpan,
                  _annExportedFrom :: GHC.Base.Maybe
                                        Language.PureScript.Names.ModuleName,
                  _annTypeAnnotation :: GHC.Base.Maybe
                                          Language.PureScript.Types.Type,
                  _annDocumentation :: GHC.Base.Maybe Data.Text.Internal.Text}
e5bab2f0f0f5b6510d1fd90d834176e7
  newtype AstData a
    = AstData (Language.PureScript.Ide.Types.ModuleMap
                 (Language.PureScript.Ide.Types.DefinitionSites a,
                  Language.PureScript.Ide.Types.TypeAnnotations))
1dc8499524dd705daadd896960727d73
  data Completion
    = Completion {complModule :: Data.Text.Internal.Text,
                  complIdentifier :: Data.Text.Internal.Text,
                  complType :: Data.Text.Internal.Text,
                  complExpandedType :: Data.Text.Internal.Text,
                  complLocation :: GHC.Base.Maybe
                                     Language.PureScript.AST.SourcePos.SourceSpan,
                  complDocumentation :: GHC.Base.Maybe Data.Text.Internal.Text,
                  complExportedFrom :: [Language.PureScript.Names.ModuleName]}
3a3e2508f4840cba90db1936662ffe32
  type DefinitionSites a =
    Data.Map.Internal.Map Language.PureScript.Ide.Types.IdeNamespaced a
e9f79bb08c02b580420aa93d49f8c0de
  type Ide (m :: * -> *) =
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Reader.Class.MonadReader
       Language.PureScript.Ide.Types.IdeEnvironment m)
    :: GHC.Types.Constraint
b2d24d9e851cc1c4d2bfe702e4e8e593
  data IdeConfiguration
    = IdeConfiguration {confOutputPath :: GHC.IO.FilePath,
                        confLogLevel :: Language.PureScript.Ide.Types.IdeLogLevel,
                        confGlobs :: [GHC.IO.FilePath],
                        confEditorMode :: GHC.Types.Bool}
9a139a83eccdb4ce038336f38d1d61cf
  data IdeDataConstructor
    = IdeDataConstructor {_ideDtorName :: Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName,
                          _ideDtorTypeName :: Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName,
                          _ideDtorType :: Language.PureScript.Types.Type}
9a139a83eccdb4ce038336f38d1d61cf
  data IdeDeclaration
    = IdeDeclValue Language.PureScript.Ide.Types.IdeValue
    | IdeDeclType Language.PureScript.Ide.Types.IdeType
    | IdeDeclTypeSynonym Language.PureScript.Ide.Types.IdeTypeSynonym
    | IdeDeclDataConstructor Language.PureScript.Ide.Types.IdeDataConstructor
    | IdeDeclTypeClass Language.PureScript.Ide.Types.IdeTypeClass
    | IdeDeclValueOperator Language.PureScript.Ide.Types.IdeValueOperator
    | IdeDeclTypeOperator Language.PureScript.Ide.Types.IdeTypeOperator
    | IdeDeclKind (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.KindName)
9e61215f32f4caed313e4d158f96dea0
  data IdeDeclarationAnn
    = IdeDeclarationAnn {_idaAnnotation :: Language.PureScript.Ide.Types.Annotation,
                         _idaDeclaration :: Language.PureScript.Ide.Types.IdeDeclaration}
6f3b6b19886fb003ac3367d5df972b0f
  data IdeEnvironment
    = IdeEnvironment {ideStateVar :: GHC.Conc.Sync.TVar
                                       Language.PureScript.Ide.Types.IdeState,
                      ideConfiguration :: Language.PureScript.Ide.Types.IdeConfiguration}
3efe7a586df81e9939e878abd1e5b6ba
  data IdeFileState
    = IdeFileState {fsExterns :: Language.PureScript.Ide.Types.ModuleMap
                                   Language.PureScript.Externs.ExternsFile,
                    fsModules :: Language.PureScript.Ide.Types.ModuleMap
                                   (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)}
c34cd658b6edc1c9e8202306ab95e2f0
  data IdeInstance
    = IdeInstance {_ideInstanceModule :: Language.PureScript.Names.ModuleName,
                   _ideInstanceName :: Language.PureScript.Names.Ident,
                   _ideInstanceTypes :: [Language.PureScript.Types.Type],
                   _ideInstanceConstraints :: GHC.Base.Maybe
                                                [Language.PureScript.Types.Constraint]}
f52b3bbb177ebfc52e267d9dd8a9eb78
  data IdeLogLevel
    = LogDebug | LogPerf | LogAll | LogDefault | LogNone
bf12ce78c741411b8db21a537727174e
  data IdeNamespace = IdeNSValue | IdeNSType | IdeNSKind
bf12ce78c741411b8db21a537727174e
  data IdeNamespaced
    = IdeNamespaced Language.PureScript.Ide.Types.IdeNamespace
                    Data.Text.Internal.Text
c64cafa4c111c51ee62bcfcf640157b5
  data IdeState
    = IdeState {ideFileState :: Language.PureScript.Ide.Types.IdeFileState,
                ideVolatileState :: Language.PureScript.Ide.Types.IdeVolatileState}
2cf1bd94f2c78eccc179ddf73012ec1f
  data IdeType
    = IdeType {_ideTypeName :: Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName,
               _ideTypeKind :: Language.PureScript.Kinds.Kind,
               _ideTypeDtors :: [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  Language.PureScript.Types.Type)]}
c34cd658b6edc1c9e8202306ab95e2f0
  data IdeTypeClass
    = IdeTypeClass {_ideTCName :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName,
                    _ideTCKind :: Language.PureScript.Kinds.Kind,
                    _ideTCInstances :: [Language.PureScript.Ide.Types.IdeInstance]}
e9355acde24ce9532399166de62e3470
  data IdeTypeOperator
    = IdeTypeOperator {_ideTypeOpName :: Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName,
                       _ideTypeOpAlias :: Language.PureScript.Names.Qualified
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName),
                       _ideTypeOpPrecedence :: Language.PureScript.AST.Operators.Precedence,
                       _ideTypeOpAssociativity :: Language.PureScript.AST.Operators.Associativity,
                       _ideTypeOpKind :: GHC.Base.Maybe Language.PureScript.Kinds.Kind}
8e0134581e8be26d8a7975aa0f57a68f
  data IdeTypeSynonym
    = IdeTypeSynonym {_ideSynonymName :: Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName,
                      _ideSynonymType :: Language.PureScript.Types.Type,
                      _ideSynonymKind :: Language.PureScript.Kinds.Kind}
0059d9277c215835eaca5d4dd78e716a
  data IdeValue
    = IdeValue {_ideValueIdent :: Language.PureScript.Names.Ident,
                _ideValueType :: Language.PureScript.Types.Type}
3e3ad98c77e7d61a15aa1e1986b03c6f
  data IdeValueOperator
    = IdeValueOperator {_ideValueOpName :: Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName,
                        _ideValueOpAlias :: Language.PureScript.Names.Qualified
                                              (Data.Either.Either
                                                 Language.PureScript.Names.Ident
                                                 (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName)),
                        _ideValueOpPrecedence :: Language.PureScript.AST.Operators.Precedence,
                        _ideValueOpAssociativity :: Language.PureScript.AST.Operators.Associativity,
                        _ideValueOpType :: GHC.Base.Maybe Language.PureScript.Types.Type}
553cccbafe2b1e345c62ddbb697c6a55
  data IdeVolatileState
    = IdeVolatileState {vsAstData :: Language.PureScript.Ide.Types.AstData
                                       Language.PureScript.AST.SourcePos.SourceSpan,
                        vsDeclarations :: Language.PureScript.Ide.Types.ModuleMap
                                            [Language.PureScript.Ide.Types.IdeDeclarationAnn],
                        vsCachedRebuild :: GHC.Base.Maybe
                                             (Language.PureScript.Names.ModuleName,
                                              Language.PureScript.Externs.ExternsFile)}
d599e8d66b83cee61665ee06fcb20991
  newtype Match a = Match (Language.PureScript.Names.ModuleName, a)
000e291fdce434a9b81810aca106d24c
  type ModuleIdent = Data.Text.Internal.Text
315b3ac99c0a1df9ab81f6091369924a
  type ModuleMap a =
    Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
9e61215f32f4caed313e4d158f96dea0
  axiom Language.PureScript.Ide.Types.Rep_Annotation::
      GHC.Generics.Rep Language.PureScript.Ide.Types.Annotation
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Annotation"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_annLocation")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_annExportedFrom")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_annTypeAnnotation")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (GHC.Base.Maybe Language.PureScript.Types.Type))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_annDocumentation")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe Data.Text.Internal.Text)))))
e5bab2f0f0f5b6510d1fd90d834176e7
  axiom Language.PureScript.Ide.Types.Rep_AstData::
      GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "AstData"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "AstData" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Ide.Types.ModuleMap
                        (Language.PureScript.Ide.Types.DefinitionSites a,
                         Language.PureScript.Ide.Types.TypeAnnotations)))))
9a139a83eccdb4ce038336f38d1d61cf
  axiom Language.PureScript.Ide.Types.Rep_IdeDataConstructor::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDataConstructor
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDataConstructor"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideDtorName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideDtorTypeName")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideDtorType")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        Language.PureScript.Types.Type))))
9a139a83eccdb4ce038336f38d1d61cf
  axiom Language.PureScript.Ide.Types.Rep_IdeDeclaration::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclaration
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDeclaration"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeValue))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeType)))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.Ide.Types.IdeTypeSynonym))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclDataConstructor"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeDataConstructor))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeTypeClass))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclValueOperator"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclTypeOperator"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeTypeOperator))
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "IdeDeclKind"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.KindName))))))
9e61215f32f4caed313e4d158f96dea0
  axiom Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclarationAnn
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDeclarationAnn"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_idaAnnotation")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Ide.Types.Annotation)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "_idaDeclaration")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      Language.PureScript.Ide.Types.IdeDeclaration)))
c34cd658b6edc1c9e8202306ab95e2f0
  axiom Language.PureScript.Ide.Types.Rep_IdeInstance::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeInstance
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeInstance"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideInstanceModule")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 Language.PureScript.Names.ModuleName)
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideInstanceName")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Names.Ident))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideInstanceTypes")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 [Language.PureScript.Types.Type])
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideInstanceConstraints")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe
                                                           [Language.PureScript.Types.Constraint])))))
bf12ce78c741411b8db21a537727174e
  axiom Language.PureScript.Ide.Types.Rep_IdeNamespace::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespace
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeNamespace"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "IdeNSKind"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
bf12ce78c741411b8db21a537727174e
  axiom Language.PureScript.Ide.Types.Rep_IdeNamespaced::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespaced
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeNamespaced"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeNamespace)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 Data.Text.Internal.Text)))
2cf1bd94f2c78eccc179ddf73012ec1f
  axiom Language.PureScript.Ide.Types.Rep_IdeType::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeType"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideTypeName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeKind")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Kinds.Kind)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideTypeDtors")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        [(Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName,
                                                          Language.PureScript.Types.Type)]))))
c34cd658b6edc1c9e8202306ab95e2f0
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeClass::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeClass
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeClass"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideTCName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTCKind")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Kinds.Kind)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideTCInstances")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        [Language.PureScript.Ide.Types.IdeInstance]))))
e9355acde24ce9532399166de62e3470
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeOperator::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeOperator
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeOperator"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideTypeOpName")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (Language.PureScript.Names.OpName
                         'Language.PureScript.Names.TypeOpName))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeOpAlias")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName))))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeOpPrecedence")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.AST.Operators.Precedence)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.Operators.Associativity)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "_ideTypeOpKind")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (GHC.Base.Maybe
                                                                             Language.PureScript.Kinds.Kind))))))
8e0134581e8be26d8a7975aa0f57a68f
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeSynonym::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeSynonym
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeSynonym"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideSynonymName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideSynonymType")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Types.Type)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideSynonymKind")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        Language.PureScript.Kinds.Kind))))
0059d9277c215835eaca5d4dd78e716a
  axiom Language.PureScript.Ide.Types.Rep_IdeValue::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValue
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeValue"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideValueIdent")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Names.Ident)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "_ideValueType")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 Language.PureScript.Types.Type)))
3e3ad98c77e7d61a15aa1e1986b03c6f
  axiom Language.PureScript.Ide.Types.Rep_IdeValueOperator::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValueOperator
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeValueOperator"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideValueOpName")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (Language.PureScript.Names.OpName
                         'Language.PureScript.Names.ValueOpName))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideValueOpAlias")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.Qualified
                                          (Data.Either.Either
                                             Language.PureScript.Names.Ident
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName)))))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideValueOpPrecedence")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.AST.Operators.Precedence)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.Operators.Associativity)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "_ideValueOpType")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (GHC.Base.Maybe
                                                                             Language.PureScript.Types.Type))))))
7f283f65f12f93a1220add6ebe787174
  data Success
    = CompletionResult [Language.PureScript.Ide.Types.Completion]
    | TextResult Data.Text.Internal.Text
    | UsagesResult [Language.PureScript.AST.SourcePos.SourceSpan]
    | MultilineTextResult [Data.Text.Internal.Text]
    | ImportList (Language.PureScript.Names.ModuleName,
                  [(Language.PureScript.Names.ModuleName,
                    Language.PureScript.AST.Declarations.ImportDeclarationType,
                    GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
    | ModuleList [Language.PureScript.Ide.Types.ModuleIdent]
    | RebuildSuccess Language.PureScript.Errors.MultipleErrors
d3060bd163f7b8f4cb4af455406d60b9
  type TypeAnnotations =
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident Language.PureScript.Types.Type
fb9bd523b9df3ddda459a7ff8a9013b1
  _IdeDeclDataConstructor ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeDataConstructor
                           -> f14 Language.PureScript.Ide.Types.IdeDataConstructor)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeDataConstructor
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor
                        (eta x) }) -}
ee4c9fc7570a99a4b976b5b15c191e37
  _IdeDeclKind ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName))
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclKind x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclKind
                        (eta x) }) -}
b6abbb84c05a2626bb6f939f2d4a01d9
  _IdeDeclType ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeType
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeType
                           -> f14 Language.PureScript.Ide.Types.IdeType)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclType x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeType
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclType
                        (eta x) }) -}
7b73d8300b94013ccf0fa786e0e8feda
  _IdeDeclTypeClass ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeClass
                           -> f14 Language.PureScript.Ide.Types.IdeTypeClass)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeClass x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeClass
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeClass
                        (eta x) }) -}
0c11922a67a7da1aba4a94a02792d17d
  _IdeDeclTypeOperator ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeOperator
                           -> f14 Language.PureScript.Ide.Types.IdeTypeOperator)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeOperator
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator
                        (eta x) }) -}
b5eace2e83b060396a866e675bda3356
  _IdeDeclTypeSynonym ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeSynonym
                           -> f14 Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeSynonym
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym
                        (eta x) }) -}
6fa877d6b1628fd5f64602ebac3fae78
  _IdeDeclValue ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeValue
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeValue
                           -> f14 Language.PureScript.Ide.Types.IdeValue)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclValue x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeValue
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclValue
                        (eta x) }) -}
de68182cc0bcf920a206595d7ef15fa3
  _IdeDeclValueOperator ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeValueOperator
                           -> f14 Language.PureScript.Ide.Types.IdeValueOperator)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclValueOperator x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeValueOperator
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclValueOperator
                        (eta x) }) -}
9e61215f32f4caed313e4d158f96dea0
  _annDocumentation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
9e61215f32f4caed313e4d158f96dea0
  _annExportedFrom ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
9e61215f32f4caed313e4d158f96dea0
  _annLocation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
9e61215f32f4caed313e4d158f96dea0
  _annTypeAnnotation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
9e61215f32f4caed313e4d158f96dea0
  _idaAnnotation ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.Annotation
  RecSel Left Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn ds1 ds2 ->
                 ds1 }) -}
9e61215f32f4caed313e4d158f96dea0
  _idaDeclaration ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclaration
  RecSel Left Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn ds1 ds2 ->
                 ds2 }) -}
9a139a83eccdb4ce038336f38d1d61cf
  _ideDtorName ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds1 }) -}
9a139a83eccdb4ce038336f38d1d61cf
  _ideDtorType ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds3 }) -}
9a139a83eccdb4ce038336f38d1d61cf
  _ideDtorTypeName ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds2 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideInstanceConstraints ::
    Language.PureScript.Ide.Types.IdeInstance
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideInstanceModule ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideInstanceName ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideInstanceTypes ::
    Language.PureScript.Ide.Types.IdeInstance
    -> [Language.PureScript.Types.Type]
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
8e0134581e8be26d8a7975aa0f57a68f
  _ideSynonymKind ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Kinds.Kind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds3 }) -}
8e0134581e8be26d8a7975aa0f57a68f
  _ideSynonymName ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds1 }) -}
8e0134581e8be26d8a7975aa0f57a68f
  _ideSynonymType ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds2 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideTCInstances ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> [Language.PureScript.Ide.Types.IdeInstance]
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds3 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideTCKind ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Kinds.Kind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds2 }) -}
c34cd658b6edc1c9e8202306ab95e2f0
  _ideTCName ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds1 }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  _ideTypeDtors ::
    Language.PureScript.Ide.Types.IdeType
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.Type)]
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds3 }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  _ideTypeKind ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Kinds.Kind
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds2 }) -}
2cf1bd94f2c78eccc179ddf73012ec1f
  _ideTypeName ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds1 }) -}
e9355acde24ce9532399166de62e3470
  _ideTypeOpAlias ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
e9355acde24ce9532399166de62e3470
  _ideTypeOpAssociativity ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
e9355acde24ce9532399166de62e3470
  _ideTypeOpKind ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Base.Maybe Language.PureScript.Kinds.Kind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
e9355acde24ce9532399166de62e3470
  _ideTypeOpName ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
e9355acde24ce9532399166de62e3470
  _ideTypeOpPrecedence ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
0059d9277c215835eaca5d4dd78e716a
  _ideValueIdent ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue ds1 ds2 ->
                 ds1 }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  _ideValueOpAlias ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  _ideValueOpAssociativity ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  _ideValueOpName ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  _ideValueOpPrecedence ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
3e3ad98c77e7d61a15aa1e1986b03c6f
  _ideValueOpType ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Base.Maybe Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
0059d9277c215835eaca5d4dd78e716a
  _ideValueType ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue ds1 ds2 ->
                 ds2 }) -}
3eb9d0865b072805c1f75695ef353d46
  annDocumentation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Data.Text.Internal.Text)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> f14 (GHC.Base.Maybe Data.Text.Internal.Text))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                    Language.PureScript.Ide.Types.Annotation x x1 x2 y)
                   (f15 x3) }) -}
f7c30e8a6a1c7f1139386b04b04850df
  annExportedFrom ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
                           -> f14 (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                    Language.PureScript.Ide.Types.Annotation x y x2 x3)
                   (f15 x1) }) -}
2c2f1818729049d17ed051402cd8264a
  annLocation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
                           -> f14 (GHC.Base.Maybe
                                     Language.PureScript.AST.SourcePos.SourceSpan))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe
                              Language.PureScript.AST.SourcePos.SourceSpan) ->
                    Language.PureScript.Ide.Types.Annotation y x1 x2 x3)
                   (f15 x) }) -}
33d7dd05d85c0eeb3e09cb2b35c9bb9d
  annTypeAnnotation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.Types.Type)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Types.Type
                           -> f14 (GHC.Base.Maybe Language.PureScript.Types.Type))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Types.Type)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Types.Type) ->
                    Language.PureScript.Ide.Types.Annotation x x1 y x3)
                   (f15 x2) }) -}
42e219aefc77f695882094d59e3b6182
  anyOf ::
    Lens.Micro.Type.Getting Data.Semigroup.Internal.Any s a
    -> (a -> GHC.Types.Bool) -> s -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C(U))><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ a
                   (g :: Lens.Micro.Type.Getting Data.Semigroup.Internal.Any s a)
                   (p :: a -> GHC.Types.Bool) ->
                 let {
                   g1 :: s -> Data.Functor.Const.Const Data.Semigroup.Internal.Any s
                   = g (\ (x :: a) -> p x)
                         `cast`
                       (<a>_R
                        ->_R Sym (Data.Semigroup.Internal.N:Any[0]) ; Sym (Data.Functor.Const.N:Const[0]
                                                                               <*>_N
                                                                               <Data.Semigroup.Internal.Any>_R
                                                                               <a>_P))
                 } in
                 (\ (x :: s) -> g1 x)
                   `cast`
                 (<s>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <Data.Semigroup.Internal.Any>_R
                           <s>_P ; Data.Semigroup.Internal.N:Any[0])) -}
1dc8499524dd705daadd896960727d73
  complDocumentation ::
    Language.PureScript.Ide.Types.Completion
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
1dc8499524dd705daadd896960727d73
  complExpandedType ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
1dc8499524dd705daadd896960727d73
  complExportedFrom ::
    Language.PureScript.Ide.Types.Completion
    -> [Language.PureScript.Names.ModuleName]
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
1dc8499524dd705daadd896960727d73
  complIdentifier ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
1dc8499524dd705daadd896960727d73
  complLocation ::
    Language.PureScript.Ide.Types.Completion
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
1dc8499524dd705daadd896960727d73
  complModule ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
1dc8499524dd705daadd896960727d73
  complType ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
b2d24d9e851cc1c4d2bfe702e4e8e593
  confEditorMode ::
    Language.PureScript.Ide.Types.IdeConfiguration -> GHC.Types.Bool
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
b2d24d9e851cc1c4d2bfe702e4e8e593
  confGlobs ::
    Language.PureScript.Ide.Types.IdeConfiguration -> [GHC.IO.FilePath]
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
b2d24d9e851cc1c4d2bfe702e4e8e593
  confLogLevel ::
    Language.PureScript.Ide.Types.IdeConfiguration
    -> Language.PureScript.Ide.Types.IdeLogLevel
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
b2d24d9e851cc1c4d2bfe702e4e8e593
  confOutputPath ::
    Language.PureScript.Ide.Types.IdeConfiguration -> GHC.IO.FilePath
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
5975d0d1e82d156ab8bd7ad89e6a954b
  emptyAnn :: Language.PureScript.Ide.Types.Annotation
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.Annotation
                   (GHC.Base.Nothing @ Language.PureScript.AST.SourcePos.SourceSpan)
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   (GHC.Base.Nothing @ Language.PureScript.Types.Type)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
3f99aee665efb319e3ee1f9b7d9852a3
  emptyFileState :: Language.PureScript.Ide.Types.IdeFileState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeFileState
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ Language.PureScript.Externs.ExternsFile)
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ (Language.PureScript.AST.Declarations.Module,
                         GHC.IO.FilePath))) -}
48b8fadb61e252df0065b7be15599a6e
  emptyIdeState :: Language.PureScript.Ide.Types.IdeState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeState
                   Language.PureScript.Ide.Types.emptyFileState
                   Language.PureScript.Ide.Types.emptyVolatileState) -}
285057ce06bed619d4382491bae15e25
  emptyVolatileState ::
    Language.PureScript.Ide.Types.IdeVolatileState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeVolatileState
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ (Language.PureScript.Ide.Types.DefinitionSites
                           Language.PureScript.AST.SourcePos.SourceSpan,
                         Language.PureScript.Ide.Types.TypeAnnotations))
                     `cast`
                   (Sym (Language.PureScript.Ide.Types.N:AstData[0]
                             <Language.PureScript.AST.SourcePos.SourceSpan>_R))
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (GHC.Base.Nothing
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Externs.ExternsFile))) -}
013306fd91a4f86529c0d269ab5a65b5
  encodeImport ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$wencodeImport ww1 ww2 ww3 }) -}
34c708755493d17a110fcdacaa0e3b88
  encodeSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    a -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <S(C(S)LLL),1*U(1*C1(U),A,A,A)><L,U>m1,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Data.Aeson.Types.ToJSON.ToJSON a) (w1 :: a) ->
                 case Language.PureScript.Ide.Types.$wencodeSuccess
                        @ a
                        w
                        w1 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
0193ceb5793e90f7d83dff5aeac1a785
  encodeSuccess1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.encodeSuccess2) -}
12eecd93b2611df0a906cfbf35937c8c
  encodeSuccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("result"#) -}
1e720b01b20e85ce9d8181d0c03ea220
  encodeSuccess3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.encodeSuccess4) -}
4dc3852db01a8fcf4954d76cb6dd1a58
  encodeSuccess4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("resultType"#) -}
716f28d6d457af814f1db78dd88f1969
  encodeSuccess5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Ide.Types.encodeSuccess6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
bd0eab720d44432be75101c7e969915f
  encodeSuccess6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("success"#) -}
7266c100b0bb1b1dc542a3de9628168f
  encodeSuccess_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
3fa096e8302c40cbd682274df76e8928
  encodeSuccess_$sencodeSuccess1 ::
    [Language.PureScript.Ide.Types.ModuleIdent]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Ide.Types.ModuleIdent]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess1
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
544541c737338c0c8cf2293f5d6d7d99
  encodeSuccess_$sencodeSuccess2 ::
    [Language.PureScript.AST.SourcePos.SourceSpan]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.AST.SourcePos.SourceSpan]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess2
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
ff7048a63fd94b1d9b7dddc41d0f9cb7
  encodeSuccess_$sencodeSuccess3 ::
    Data.Text.Internal.Text -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess3
                        ww1
                        ww2
                        ww3 of ww4 { Unit# ww5 ->
                 Data.Aeson.Types.Internal.Object ww5 } }) -}
8c903a6775337a9a2bb528c36313767c
  encodeSuccess_$sencodeSuccess4 ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Ide.Types.Completion]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess4
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
3efe7a586df81e9939e878abd1e5b6ba
  fsExterns ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.ModuleMap
         Language.PureScript.Externs.ExternsFile
  RecSel Left Language.PureScript.Ide.Types.IdeFileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeFileState ds1 ds2 ->
                 ds1 }) -}
3efe7a586df81e9939e878abd1e5b6ba
  fsModules ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.ModuleMap
         (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
  RecSel Left Language.PureScript.Ide.Types.IdeFileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeFileState ds1 ds2 ->
                 ds2 }) -}
fbbb7f9df853960d494f789a81b28c63
  idaAnnotation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDeclarationAnn
      Language.PureScript.Ide.Types.Annotation
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Ide.Types.Annotation
                           -> f14 Language.PureScript.Ide.Types.Annotation)
                   (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Ide.Types.Annotation
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   (\ (y :: Language.PureScript.Ide.Types.Annotation) ->
                    Language.PureScript.Ide.Types.IdeDeclarationAnn y x1)
                   (f15 x) }) -}
a8a9c5d727b1ceabcff6fe9a77c3ce8a
  idaDeclaration ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDeclarationAnn
      Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Ide.Types.IdeDeclaration
                           -> f14 Language.PureScript.Ide.Types.IdeDeclaration)
                   (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Ide.Types.IdeDeclaration
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   (\ (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                    Language.PureScript.Ide.Types.IdeDeclarationAnn x y)
                   (f15 x1) }) -}
6f3b6b19886fb003ac3367d5df972b0f
  ideConfiguration ::
    Language.PureScript.Ide.Types.IdeEnvironment
    -> Language.PureScript.Ide.Types.IdeConfiguration
  RecSel Left Language.PureScript.Ide.Types.IdeEnvironment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeEnvironment) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeEnvironment ds1 ds2 ->
                 ds2 }) -}
4b0e35dffdadad83f0994bd143209fc9
  ideDtorName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName))
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor y x1 x2)
                   (f15 x) }) -}
88238d24f2d1a10b2a977ac1a1991867
  ideDtorType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      Language.PureScript.Types.Type
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.Type
                           -> f14 Language.PureScript.Types.Type)
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.Type
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Types.Type) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor x x1 y)
                   (f15 x2) }) -}
d0c37f04951e936a8b0f6444e932c3d9
  ideDtorTypeName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor x y x2)
                   (f15 x1) }) -}
c64cafa4c111c51ee62bcfcf640157b5
  ideFileState ::
    Language.PureScript.Ide.Types.IdeState
    -> Language.PureScript.Ide.Types.IdeFileState
  RecSel Left Language.PureScript.Ide.Types.IdeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeState ds1 ds2 ->
                 ds1 }) -}
59f96fd04f65bd892c628d269ace8f14
  ideInstanceConstraints ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      (GHC.Base.Maybe [Language.PureScript.Types.Constraint])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]
                           -> f14 (GHC.Base.Maybe [Language.PureScript.Types.Constraint]))
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe [Language.PureScript.Types.Constraint])
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                    Language.PureScript.Ide.Types.IdeInstance x x1 x2 y)
                   (f15 x3) }) -}
1fad1be2ab22d4f78657cc834b543fed
  ideInstanceModule ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      Language.PureScript.Names.ModuleName
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ModuleName
                           -> f14 Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.ModuleName
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: Language.PureScript.Names.ModuleName) ->
                    Language.PureScript.Ide.Types.IdeInstance y x1 x2 x3)
                   (f15 x) }) -}
8daab6ddc01f5383700e3804cd264288
  ideInstanceName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      Language.PureScript.Names.Ident
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Ident
                           -> f14 Language.PureScript.Names.Ident)
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: Language.PureScript.Names.Ident) ->
                    Language.PureScript.Ide.Types.IdeInstance x y x2 x3)
                   (f15 x1) }) -}
7226221fe0ef96c91fcdba3b5b6fab3c
  ideInstanceTypes ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      [Language.PureScript.Types.Type]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [Language.PureScript.Types.Type]
                           -> f14 [Language.PureScript.Types.Type])
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [Language.PureScript.Types.Type]
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: [Language.PureScript.Types.Type]) ->
                    Language.PureScript.Ide.Types.IdeInstance x x1 y x3)
                   (f15 x2) }) -}
6f3b6b19886fb003ac3367d5df972b0f
  ideStateVar ::
    Language.PureScript.Ide.Types.IdeEnvironment
    -> GHC.Conc.Sync.TVar Language.PureScript.Ide.Types.IdeState
  RecSel Left Language.PureScript.Ide.Types.IdeEnvironment
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeEnvironment) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeEnvironment ds1 ds2 ->
                 ds1 }) -}
747b09f850f6e322cccab98f3750bbd9
  ideSynonymKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      Language.PureScript.Kinds.Kind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.Kind
                           -> f14 Language.PureScript.Kinds.Kind)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.Kind
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Kinds.Kind) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym x x1 y)
                   (f15 x2) }) -}
f05596230d9dbc39b510041107fb41e9
  ideSynonymName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym y x1 x2)
                   (f15 x) }) -}
c2621955a65ce14df2bceecf2e4de207
  ideSynonymType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      Language.PureScript.Types.Type
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.Type
                           -> f14 Language.PureScript.Types.Type)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.Type
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Types.Type) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym x y x2)
                   (f15 x1) }) -}
d96ef841d9cae5877a4c8d8f68ba433c
  ideTCInstances ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      [Language.PureScript.Ide.Types.IdeInstance]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [Language.PureScript.Ide.Types.IdeInstance]
                           -> f14 [Language.PureScript.Ide.Types.IdeInstance])
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [Language.PureScript.Ide.Types.IdeInstance]
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                    Language.PureScript.Ide.Types.IdeTypeClass x x1 y)
                   (f15 x2) }) -}
5ed28d368ffc9b569c905cbf0b9b14e9
  ideTCKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      Language.PureScript.Kinds.Kind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.Kind
                           -> f14 Language.PureScript.Kinds.Kind)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.Kind
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: Language.PureScript.Kinds.Kind) ->
                    Language.PureScript.Ide.Types.IdeTypeClass x y x2)
                   (f15 x1) }) -}
66e9343e4eda36974b61203c0546ec1e
  ideTCName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName) ->
                    Language.PureScript.Ide.Types.IdeTypeClass y x1 x2)
                   (f15 x) }) -}
5de4dbaa6c0ef11fbab6321f0f48a768
  ideTypeDtors ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      [(Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName,
        Language.PureScript.Types.Type)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type)]
                           -> f14 [(Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName,
                                    Language.PureScript.Types.Type)])
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [(Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName,
                       Language.PureScript.Types.Type)]
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: [(Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName,
                              Language.PureScript.Types.Type)]) ->
                    Language.PureScript.Ide.Types.IdeType x x1 y)
                   (f15 x2) }) -}
41b7daeb2ecc3435543b5da07ba15ee3
  ideTypeKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      Language.PureScript.Kinds.Kind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.Kind
                           -> f14 Language.PureScript.Kinds.Kind)
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.Kind
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: Language.PureScript.Kinds.Kind) ->
                    Language.PureScript.Ide.Types.IdeType x y x2)
                   (f15 x1) }) -}
07a28cae9afd06eac4ebbeba9047afee
  ideTypeName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeType y x1 x2)
                   (f15 x) }) -}
4f7a5aab16297f26afe248ebdddab891
  ideTypeOpAlias ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                           -> f14 (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName)))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x y x2 x3 x4)
                   (f15 x1) }) -}
a8234bdaee1d3b597b9b668ce750db9b
  ideTypeOpAssociativity ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      Language.PureScript.AST.Operators.Associativity
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Associativity
                           -> f14 Language.PureScript.AST.Operators.Associativity)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Associativity
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.AST.Operators.Associativity) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 y x4)
                   (f15 x3) }) -}
f049f369c37b12b2e433596aec8edcd6
  ideTypeOpKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind
                           -> f14 (GHC.Base.Maybe Language.PureScript.Kinds.Kind))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 y)
                   (f15 x4) }) -}
a71d07d03868a498ff32bb8d2a39a281
  ideTypeOpName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName
                           -> f14 (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.TypeOpName)
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator y x1 x2 x3 x4)
                   (f15 x) }) -}
3794f855b0a249b376eeab35eb7b0efb
  ideTypeOpPrecedence ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      Language.PureScript.AST.Operators.Precedence
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Precedence
                           -> f14 Language.PureScript.AST.Operators.Precedence)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Precedence
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.AST.Operators.Precedence) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 y x3 x4)
                   (f15 x2) }) -}
47a1c1011665faf42f703f8df96ff6f0
  ideValueIdent ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValue
      Language.PureScript.Names.Ident
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Ident
                           -> f14 Language.PureScript.Names.Ident)
                   (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Ide.Types.IdeValue
                   (\ (y :: Language.PureScript.Names.Ident) ->
                    Language.PureScript.Ide.Types.IdeValue y x1)
                   (f15 x) }) -}
523a759161b438fe3567c509d86cbda8
  ideValueOpAlias ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName)))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))
                           -> f14 (Language.PureScript.Names.Qualified
                                     (Data.Either.Either
                                        Language.PureScript.Names.Ident
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName))))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.Qualified
                        (Data.Either.Either
                           Language.PureScript.Names.Ident
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)))
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName))) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x y x2 x3 x4)
                   (f15 x1) }) -}
2271c272537cb98acb862a5a04bacec5
  ideValueOpAssociativity ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      Language.PureScript.AST.Operators.Associativity
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Associativity
                           -> f14 Language.PureScript.AST.Operators.Associativity)
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Associativity
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.AST.Operators.Associativity) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 y x4)
                   (f15 x3) }) -}
4c4afc0fa58c943c5be021a21d27c60f
  ideValueOpName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName
                           -> f14 (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.ValueOpName)
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName) ->
                    Language.PureScript.Ide.Types.IdeValueOperator y x1 x2 x3 x4)
                   (f15 x) }) -}
d6a4b730dd8b752e72aaa636f46eb027
  ideValueOpPrecedence ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      Language.PureScript.AST.Operators.Precedence
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Precedence
                           -> f14 Language.PureScript.AST.Operators.Precedence)
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Precedence
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.AST.Operators.Precedence) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 y x3 x4)
                   (f15 x2) }) -}
2e2d8468609678dee7e7347e555d02f7
  ideValueOpType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (GHC.Base.Maybe Language.PureScript.Types.Type)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Types.Type
                           -> f14 (GHC.Base.Maybe Language.PureScript.Types.Type))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Types.Type)
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Types.Type) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 y)
                   (f15 x4) }) -}
9e0e4761099915fe4c8b2cf03ac5d1ce
  ideValueType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValue
      Language.PureScript.Types.Type
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.Type
                           -> f14 Language.PureScript.Types.Type)
                   (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.Type
                   @ Language.PureScript.Ide.Types.IdeValue
                   (\ (y :: Language.PureScript.Types.Type) ->
                    Language.PureScript.Ide.Types.IdeValue x y)
                   (f15 x1) }) -}
c64cafa4c111c51ee62bcfcf640157b5
  ideVolatileState ::
    Language.PureScript.Ide.Types.IdeState
    -> Language.PureScript.Ide.Types.IdeVolatileState
  RecSel Left Language.PureScript.Ide.Types.IdeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeState ds1 ds2 ->
                 ds2 }) -}
1c8df9563ed21298438657cfc22221d5
  identifierFromDeclarationRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> Data.Text.Internal.empty_
                   Language.PureScript.AST.Declarations.TypeRef ds1 name ds2
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P)
                   Language.PureScript.AST.Declarations.TypeOpRef ds1 op
                   -> Language.PureScript.Names.showOp
                        @ 'Language.PureScript.Names.TypeOpName
                        op
                   Language.PureScript.AST.Declarations.ValueRef ds1 ident
                   -> Language.PureScript.Names.runIdent ident
                   Language.PureScript.AST.Declarations.ValueOpRef ds1 op
                   -> Language.PureScript.Names.showOp
                        @ 'Language.PureScript.Names.ValueOpName
                        op
                   Language.PureScript.AST.Declarations.TypeClassRef ds1 name
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P)
                   Language.PureScript.AST.Declarations.KindRef ds1 name
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.KindName>_P) }) -}
553cccbafe2b1e345c62ddbb697c6a55
  vsAstData ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds1 }) -}
553cccbafe2b1e345c62ddbb697c6a55
  vsCachedRebuild ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Externs.ExternsFile)
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds3 }) -}
553cccbafe2b1e345c62ddbb697c6a55
  vsDeclarations ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> Language.PureScript.Ide.Types.ModuleMap
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fEqAnnotation
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fEqAstData
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fEqCompletion
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fEqIdeDataConstructor
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fEqIdeInstance
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeLogLevel]
  = Language.PureScript.Ide.Types.$fEqIdeLogLevel
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fEqIdeNamespace
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fEqIdeNamespaced
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fEqIdeType
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fEqIdeTypeClass
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fEqIdeTypeOperator
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fEqIdeTypeSynonym
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fEqIdeValue
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fEqIdeValueOperator
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fEqMatch
instance Data.Foldable.Foldable [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fFoldableAstData
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fFromJSONIdeNamespace
instance GHC.Base.Functor [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fFunctorAstData
instance GHC.Base.Functor [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fFunctorMatch
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fGenericAnnotation
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fGenericAstData
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fGenericIdeDataConstructor
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fGenericIdeDeclaration
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fGenericIdeInstance
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fGenericIdeNamespace
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fGenericIdeNamespaced
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fGenericIdeType
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeClass
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeOperator
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fGenericIdeValue
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fGenericIdeValueOperator
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fNFDataAnnotation
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fNFDataAstData
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fNFDataIdeDeclaration
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fNFDataIdeDeclarationAnn
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fNFDataIdeInstance
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fNFDataIdeNamespace
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fNFDataIdeNamespaced
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fNFDataIdeType
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeClass
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeOperator
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeSynonym
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fNFDataIdeValue
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fNFDataIdeValueOperator
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fOrdAnnotation
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fOrdAstData
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fOrdCompletion
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fOrdIdeDataConstructor
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fOrdIdeDeclaration
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fOrdIdeInstance
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fOrdIdeNamespace
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fOrdIdeNamespaced
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fOrdIdeType
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeClass
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeOperator
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fOrdIdeValue
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fOrdIdeValueOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fShowAnnotation
instance GHC.Show.Show [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fShowAstData
instance GHC.Show.Show [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fShowCompletion
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fShowIdeDataConstructor
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fShowIdeDeclaration
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeFileState]
  = Language.PureScript.Ide.Types.$fShowIdeFileState
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fShowIdeInstance
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeLogLevel]
  = Language.PureScript.Ide.Types.$fShowIdeLogLevel
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fShowIdeNamespace
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fShowIdeNamespaced
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeState]
  = Language.PureScript.Ide.Types.$fShowIdeState
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fShowIdeType
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fShowIdeTypeClass
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fShowIdeTypeOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fShowIdeTypeSynonym
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fShowIdeValue
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fShowIdeValueOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeVolatileState]
  = Language.PureScript.Ide.Types.$fShowIdeVolatileState
instance GHC.Show.Show [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fShowMatch
instance GHC.Show.Show [Language.PureScript.Ide.Types.Success]
  = Language.PureScript.Ide.Types.$fShowSuccess
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fToJSONCompletion
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Ide.Types.Success]
  = Language.PureScript.Ide.Types.$fToJSONSuccess
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.Rep_AstData
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.Rep_IdeNamespaced
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.Rep_IdeNamespace
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.Rep_Annotation
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.Rep_IdeDeclaration
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.Rep_IdeTypeOperator
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.Rep_IdeValueOperator
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.Rep_IdeTypeClass
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.Rep_IdeInstance
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.Rep_IdeDataConstructor
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.Rep_IdeTypeSynonym
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.Rep_IdeType
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.Rep_IdeValue
"SPEC $cfoldMap @ Any _" forall @ a
                                ($dMonoid :: GHC.Base.Monoid Data.Semigroup.Internal.Any)
  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap @ Data.Semigroup.Internal.Any
                                                            @ a
                                                            $dMonoid
  = Language.PureScript.Ide.Types.$fFoldableAstData_$s$cfoldMap @ a
"SPEC encodeSuccess @ Text" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                  Data.Text.Internal.Text)
  Language.PureScript.Ide.Types.encodeSuccess @ Data.Text.Internal.Text
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess3
"SPEC encodeSuccess @ [Completion]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                          [Language.PureScript.Ide.Types.Completion])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.Ide.Types.Completion]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess4
"SPEC encodeSuccess @ [ModuleIdent]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                           [Language.PureScript.Ide.Types.ModuleIdent])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.Ide.Types.ModuleIdent]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess1
"SPEC encodeSuccess @ [SourceSpan]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                          [Language.PureScript.AST.SourcePos.SourceSpan])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.AST.SourcePos.SourceSpan]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess2
"SPEC/Language.PureScript.Ide.Types $fEq(,) @ (ProperName
                                                'ConstructorName) @ Type" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                             Language.PureScript.Types.Type)
                                                                                                                                                    (v :: GHC.Classes.Eq
                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,) @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      @ Language.PureScript.Types.Type
                      v
                      v1
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
"SPEC/Language.PureScript.Ide.Types $fEq(,)_$c/= @ (ProperName
                                                     'ConstructorName) @ Type" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                          Language.PureScript.Types.Type)
                                                                                                                                                              ($dEq :: GHC.Classes.Eq
                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,)_$c/= @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           @ Language.PureScript.Types.Type
                           $dEq
                           $dEq1
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Ide.Types $fEqMap @ Ident @ Type" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                     Language.PureScript.Types.Type)
                                                                            (v :: GHC.Classes.Eq
                                                                                    Language.PureScript.Names.Ident)
  Data.Map.Internal.$fEqMap @ Language.PureScript.Names.Ident
                            @ Language.PureScript.Types.Type
                            v
                            v1
  = Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap
"SPEC/Language.PureScript.Ide.Types $fEqMap_$c/= @ Ident @ Type" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                             Language.PureScript.Types.Type)
                                                                                 ($dEq :: GHC.Classes.Eq
                                                                                            Language.PureScript.Names.Ident)
  Data.Map.Internal.$fEqMap_$c/= @ Language.PureScript.Names.Ident
                                 @ Language.PureScript.Types.Type
                                 $dEq
                                 $dEq1
  = Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap_$c/=
"SPEC/Language.PureScript.Ide.Types $fOrd(,) @ (ProperName
                                                 'ConstructorName) @ Type" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                                                                               Language.PureScript.Types.Type)
                                                                                                                                                      (v :: GHC.Classes.Ord
                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                 'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fOrd(,) @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName)
                       @ Language.PureScript.Types.Type
                       v
                       v1
  = Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
"SPEC/Language.PureScript.Ide.Types $fOrdMap @ Ident @ Type" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                      Language.PureScript.Types.Type)
                                                                             (v1 :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.Ident)
  Data.Map.Internal.$fOrdMap @ Language.PureScript.Names.Ident
                             @ Language.PureScript.Types.Type
                             v1
                             v2
  = Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ (Map
                                                  IdeNamespaced SourceSpan) @ (Map Ident Type)" forall (v1 :: GHC.Show.Show
                                                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                                                        Language.PureScript.Names.Ident
                                                                                                                                                                        Language.PureScript.Types.Type))
                                                                                                                                                            (v :: GHC.Show.Show
                                                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                                                       Language.PureScript.Ide.Types.IdeNamespaced
                                                                                                                                                                       Language.PureScript.AST.SourcePos.SourceSpan))
  GHC.Show.$fShow(,) @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan)
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Names.Ident Language.PureScript.Types.Type)
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ Module @ [Char]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                          [GHC.Types.Char])
                                                                                 (v :: GHC.Show.Show
                                                                                         Language.PureScript.AST.Declarations.Module)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowIdeFileState_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ ModuleName @ ExternsFile" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                   Language.PureScript.Externs.ExternsFile)
                                                                                          (v :: GHC.Show.Show
                                                                                                  Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowIdeState_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShowEither @ Ident @ (ProperName
                                                             'ConstructorName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                       (v :: GHC.Show.Show
                                                                                                                                                                               Language.PureScript.Names.Ident)
  Data.Either.$fShowEither @ Language.PureScript.Names.Ident
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           v
                           v1
  = Language.PureScript.Ide.Types.$fShowIdeValueOperator_$s$fShowEither
"SPEC/Language.PureScript.Ide.Types $fShowEither_$cshowList @ Ident @ (ProperName
                                                                        'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                                              'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                             ($dShow :: GHC.Show.Show
                                                                                                                                                                                                          Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowList @ Language.PureScript.Names.Ident
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)
                                      $dShow
                                      $dShow1
  = Language.PureScript.Ide.Types.$s$fShowEither_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowEither_$cshowsPrec @ Ident @ (ProperName
                                                                         'ConstructorName)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                   (w :: GHC.Show.Show
                                                                                                                                                                                                           Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowsPrec @ Language.PureScript.Names.Ident
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName)
                                       w
                                       w1
  = Language.PureScript.Ide.Types.$s$fShowEither_$cshowsPrec
"SPEC/Language.PureScript.Ide.Types $fShowMap @ IdeNamespaced @ SourceSpan" forall (v1 :: GHC.Show.Show
                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   (v :: GHC.Show.Show
                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap @ Language.PureScript.Ide.Types.IdeNamespaced
                              @ Language.PureScript.AST.SourcePos.SourceSpan
                              v
                              v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
"SPEC/Language.PureScript.Ide.Types $fShowMap @ Ident @ Type" [orphan] forall (v1 :: GHC.Show.Show
                                                                                       Language.PureScript.Types.Type)
                                                                              (v :: GHC.Show.Show
                                                                                      Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap @ Language.PureScript.Names.Ident
                              @ Language.PureScript.Types.Type
                              v
                              v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshow @ IdeNamespaced @ SourceSpan" forall ($dShow1 :: GHC.Show.Show
                                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                          ($dShow :: GHC.Show.Show
                                                                                                       Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshow @ Language.PureScript.Ide.Types.IdeNamespaced
                                     @ Language.PureScript.AST.SourcePos.SourceSpan
                                     $dShow
                                     $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshow
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshow @ Ident @ Type" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                   Language.PureScript.Types.Type)
                                                                                     ($dShow :: GHC.Show.Show
                                                                                                  Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshow @ Language.PureScript.Names.Ident
                                     @ Language.PureScript.Types.Type
                                     $dShow
                                     $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshow1
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowList @ IdeNamespaced @ SourceSpan" forall ($dShow1 :: GHC.Show.Show
                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                              ($dShow :: GHC.Show.Show
                                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshowList @ Language.PureScript.Ide.Types.IdeNamespaced
                                         @ Language.PureScript.AST.SourcePos.SourceSpan
                                         $dShow
                                         $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowList @ Ident @ Type" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                       Language.PureScript.Types.Type)
                                                                                         ($dShow :: GHC.Show.Show
                                                                                                      Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshowList @ Language.PureScript.Names.Ident
                                         @ Language.PureScript.Types.Type
                                         $dShow
                                         $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowList1
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowsPrec @ IdeNamespaced @ SourceSpan" [0] forall (w1 :: GHC.Show.Show
                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                   (w :: GHC.Show.Show
                                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshowsPrec @ Language.PureScript.Ide.Types.IdeNamespaced
                                          @ Language.PureScript.AST.SourcePos.SourceSpan
                                          w
                                          w1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowsPrec
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowsPrec @ Ident @ Type" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                       Language.PureScript.Types.Type)
                                                                                              (w :: GHC.Show.Show
                                                                                                      Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshowsPrec @ Language.PureScript.Names.Ident
                                          @ Language.PureScript.Types.Type
                                          w
                                          w1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowsPrec4
"SPEC/Language.PureScript.Ide.Types $fShow[] @ Constraint" [orphan] forall (v :: GHC.Show.Show
                                                                                   Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[] @ Language.PureScript.Types.Constraint v
  = Language.PureScript.Ide.Types.$fShowIdeInstance_$s$fShow[]
"SPEC/Language.PureScript.Ide.Types $fShow[]_$cshow @ Constraint" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                               Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Types.Constraint
                           $dShow
  = Language.PureScript.Ide.Types.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Ide.Types $fShow[]_$cshowList @ Constraint" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                   Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Types.Constraint
                               $dShow
  = Language.PureScript.Ide.Types.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

