
==================== FINAL INTERFACE ====================
2019-01-24 14:23:22.809955 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types [family instance module] 8043
  interface hash: b256864fbf33d0547ee15e9a5d2e9a2b
  ABI hash: 4bb81e9de3788f7f63a68a23e190eb73
  export-list hash: e5ee4d37ef25d4dfedd36ea1d435a17a
  orphan hash: c52f2d998001c2df3c2adcd44d8c0b1c
  flag hash: c99236fac219a84a4c92ac3fc18f3a5f
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Ide.Types._IdeDeclDataConstructor
  Language.PureScript.Ide.Types._IdeDeclKind
  Language.PureScript.Ide.Types._IdeDeclType
  Language.PureScript.Ide.Types._IdeDeclTypeClass
  Language.PureScript.Ide.Types._IdeDeclTypeOperator
  Language.PureScript.Ide.Types._IdeDeclTypeSynonym
  Language.PureScript.Ide.Types._IdeDeclValue
  Language.PureScript.Ide.Types._IdeDeclValueOperator
  Language.PureScript.Ide.Types.annDocumentation
  Language.PureScript.Ide.Types.annExportedFrom
  Language.PureScript.Ide.Types.annLocation
  Language.PureScript.Ide.Types.annTypeAnnotation
  Language.PureScript.Ide.Types.anyOf
  Language.PureScript.Ide.Types.emptyAnn
  Language.PureScript.Ide.Types.emptyFileState
  Language.PureScript.Ide.Types.emptyIdeState
  Language.PureScript.Ide.Types.emptyVolatileState
  Language.PureScript.Ide.Types.encodeImport
  Language.PureScript.Ide.Types.encodeSuccess
  Language.PureScript.Ide.Types.idaAnnotation
  Language.PureScript.Ide.Types.idaDeclaration
  Language.PureScript.Ide.Types.ideDtorName
  Language.PureScript.Ide.Types.ideDtorType
  Language.PureScript.Ide.Types.ideDtorTypeName
  Language.PureScript.Ide.Types.ideInstanceConstraints
  Language.PureScript.Ide.Types.ideInstanceModule
  Language.PureScript.Ide.Types.ideInstanceName
  Language.PureScript.Ide.Types.ideInstanceTypes
  Language.PureScript.Ide.Types.ideSynonymKind
  Language.PureScript.Ide.Types.ideSynonymName
  Language.PureScript.Ide.Types.ideSynonymType
  Language.PureScript.Ide.Types.ideTCInstances
  Language.PureScript.Ide.Types.ideTCKind
  Language.PureScript.Ide.Types.ideTCName
  Language.PureScript.Ide.Types.ideTypeDtors
  Language.PureScript.Ide.Types.ideTypeKind
  Language.PureScript.Ide.Types.ideTypeName
  Language.PureScript.Ide.Types.ideTypeOpAlias
  Language.PureScript.Ide.Types.ideTypeOpAssociativity
  Language.PureScript.Ide.Types.ideTypeOpKind
  Language.PureScript.Ide.Types.ideTypeOpName
  Language.PureScript.Ide.Types.ideTypeOpPrecedence
  Language.PureScript.Ide.Types.ideValueIdent
  Language.PureScript.Ide.Types.ideValueOpAlias
  Language.PureScript.Ide.Types.ideValueOpAssociativity
  Language.PureScript.Ide.Types.ideValueOpName
  Language.PureScript.Ide.Types.ideValueOpPrecedence
  Language.PureScript.Ide.Types.ideValueOpType
  Language.PureScript.Ide.Types.ideValueType
  Language.PureScript.Ide.Types.identifierFromDeclarationRef
  Language.PureScript.Ide.Types.Annotation{Language.PureScript.Ide.Types.Annotation _annDocumentation _annExportedFrom _annLocation _annTypeAnnotation}
  Language.PureScript.Ide.Types.AstData{Language.PureScript.Ide.Types.AstData}
  Language.PureScript.Ide.Types.Completion{Language.PureScript.Ide.Types.Completion complDocumentation complExpandedType complExportedFrom complIdentifier complLocation complModule complType}
  Language.PureScript.Ide.Types.DefinitionSites
  Language.PureScript.Ide.Types.Ide
  Language.PureScript.Ide.Types.IdeConfiguration{Language.PureScript.Ide.Types.IdeConfiguration confEditorMode confGlobs confLogLevel confOutputPath}
  Language.PureScript.Ide.Types.IdeDataConstructor{Language.PureScript.Ide.Types.IdeDataConstructor _ideDtorName _ideDtorType _ideDtorTypeName}
  Language.PureScript.Ide.Types.IdeDeclaration{Language.PureScript.Ide.Types.IdeDeclDataConstructor Language.PureScript.Ide.Types.IdeDeclKind Language.PureScript.Ide.Types.IdeDeclType Language.PureScript.Ide.Types.IdeDeclTypeClass Language.PureScript.Ide.Types.IdeDeclTypeOperator Language.PureScript.Ide.Types.IdeDeclTypeSynonym Language.PureScript.Ide.Types.IdeDeclValue Language.PureScript.Ide.Types.IdeDeclValueOperator}
  Language.PureScript.Ide.Types.IdeDeclarationAnn{Language.PureScript.Ide.Types.IdeDeclarationAnn _idaAnnotation _idaDeclaration}
  Language.PureScript.Ide.Types.IdeEnvironment{Language.PureScript.Ide.Types.IdeEnvironment ideConfiguration ideStateVar}
  Language.PureScript.Ide.Types.IdeFileState{Language.PureScript.Ide.Types.IdeFileState fsExterns fsModules}
  Language.PureScript.Ide.Types.IdeInstance{Language.PureScript.Ide.Types.IdeInstance _ideInstanceConstraints _ideInstanceModule _ideInstanceName _ideInstanceTypes}
  Language.PureScript.Ide.Types.IdeLogLevel{Language.PureScript.Ide.Types.LogAll Language.PureScript.Ide.Types.LogDebug Language.PureScript.Ide.Types.LogDefault Language.PureScript.Ide.Types.LogNone Language.PureScript.Ide.Types.LogPerf}
  Language.PureScript.Ide.Types.IdeNamespace{Language.PureScript.Ide.Types.IdeNSKind Language.PureScript.Ide.Types.IdeNSType Language.PureScript.Ide.Types.IdeNSValue}
  Language.PureScript.Ide.Types.IdeNamespaced{Language.PureScript.Ide.Types.IdeNamespaced}
  Language.PureScript.Ide.Types.IdeState{Language.PureScript.Ide.Types.IdeState ideFileState ideVolatileState}
  Language.PureScript.Ide.Types.IdeType{Language.PureScript.Ide.Types.IdeType _ideTypeDtors _ideTypeKind _ideTypeName}
  Language.PureScript.Ide.Types.IdeTypeClass{Language.PureScript.Ide.Types.IdeTypeClass _ideTCInstances _ideTCKind _ideTCName}
  Language.PureScript.Ide.Types.IdeTypeOperator{Language.PureScript.Ide.Types.IdeTypeOperator _ideTypeOpAlias _ideTypeOpAssociativity _ideTypeOpKind _ideTypeOpName _ideTypeOpPrecedence}
  Language.PureScript.Ide.Types.IdeTypeSynonym{Language.PureScript.Ide.Types.IdeTypeSynonym _ideSynonymKind _ideSynonymName _ideSynonymType}
  Language.PureScript.Ide.Types.IdeValue{Language.PureScript.Ide.Types.IdeValue _ideValueIdent _ideValueType}
  Language.PureScript.Ide.Types.IdeValueOperator{Language.PureScript.Ide.Types.IdeValueOperator _ideValueOpAlias _ideValueOpAssociativity _ideValueOpName _ideValueOpPrecedence _ideValueOpType}
  Language.PureScript.Ide.Types.IdeVolatileState{Language.PureScript.Ide.Types.IdeVolatileState vsAstData vsCachedRebuild vsDeclarations}
  Language.PureScript.Ide.Types.Match{Language.PureScript.Ide.Types.Match}
  Language.PureScript.Ide.Types.ModuleIdent
  Language.PureScript.Ide.Types.ModuleMap
  Language.PureScript.Ide.Types.Success{Language.PureScript.Ide.Types.CompletionResult Language.PureScript.Ide.Types.ImportList Language.PureScript.Ide.Types.ModuleList Language.PureScript.Ide.Types.MultilineTextResult Language.PureScript.Ide.Types.RebuildSuccess Language.PureScript.Ide.Types.TextResult Language.PureScript.Ide.Types.UsagesResult}
  Language.PureScript.Ide.Types.TypeAnnotations
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Const c37ed085532438faa7612a939a2608be
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Semigroup.Internal 3e64145a879c21fc4c6fc83e5d8ca93b
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Lazy 04768812a57695fe69782cd0014b0c7b
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  microlens-0.4.9.1:Lens.Micro.Type 60377ed102f710af0bf94059aa466f74
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  microlens-th-0.4.2.1:Lens.Micro.TH e87f12cb78633ea9c00a5d8b513ea0c6
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  Explicit 0e7d786f7f26f8b40dc941854a989937
  Hiding 14af127ef57cd3e7808a207407b44158
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  ImportDeclarationType ee54accdb974d8b355eb58984489a7af
  KindRef fdcf7f61e078f63d583e2e92289fb303
  Module 3342e00ee072addfd009ee61e87fb865
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Precedence ea481cf59a404ab1d4264846eb495580
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  Warning 9f8a59ada7ce7bc6cf20d4dbf4acdf19
import  -/  Language.PureScript.Errors.JSON dd4b902f2e772e21e16fc115c7544009
  exports: 1c2e11de4e9f5d383b0185c64dbff5f4
  toJSONErrors 3a80f2719b20ba24213b801499c698fd
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  ExternsFile c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident bad3562aa6138b6192713ac281080869
  KindName 7782d66ce60bd67282cf566485701e07
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  OpName 9af301165f72160425c5e0dde6525338
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  ValueOpName 11964a7dc7a3029edbea30fc5b4578c2
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runProperName a7268334e0b909381550b9329cb80fcc
  showOp b45e7917a51eac70fb9658fd0956a139
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
import  -/  stm-2.4.5.0:Control.Concurrent.STM 5ec97830246fb15a85b4d8cd8209f698
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
b02d1e3d0d65a3bc0459005430392eb1
  $fEqAnnotation ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                  Language.PureScript.Ide.Types.$fEqAnnotation_$c/= -}
b02d1e3d0d65a3bc0459005430392eb1
  $fEqAnnotation_$c/= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fEqAnnotation_$c== ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fEqAstData ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fEqAstData2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fEqAstData1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R) -}
79bdb1e7c5771ec8a38f9b1794abd0d7
  $fEqAstData1 ::
    GHC.Classes.Eq a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 Data.Map.Internal.$fEqMap_$c/=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fEqModuleName
                   (GHC.Classes.$fEq(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fEqMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fEqIdeNamespaced
                         $dEq)
                      Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap)) -}
4121123db1d2f7329f578eb3aa2b4057
  $fEqAstData2 ::
    GHC.Classes.Eq a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 Data.Map.Internal.$fEqMap_$c==
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fEqModuleName
                   (GHC.Classes.$fEq(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fEqMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fEqIdeNamespaced
                         $dEq)
                      Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap)) -}
e541d6b5f7ac0edcc07ad5f118cd1329
  $fEqAstData_$s$fEqMap ::
    GHC.Classes.Eq
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         (Language.PureScript.Types.Type
            Language.PureScript.AST.SourcePos.SourceAnn))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn))
                  (Data.Map.Internal.$fEqMap_$c==
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fEqIdent
                     (Language.PureScript.Types.$fEqType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap_$c/= -}
73c6d78ad6bec9d102393238bbeee55b
  $fEqAstData_$s$fEqMap_$c/= ::
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident
      (Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         (Language.PureScript.Types.Type
            Language.PureScript.AST.SourcePos.SourceAnn)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           (Language.PureScript.Types.Type
                              Language.PureScript.AST.SourcePos.SourceAnn))
                   (y :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           (Language.PureScript.Types.Type
                              Language.PureScript.AST.SourcePos.SourceAnn)) ->
                 case Data.Map.Internal.$fEqMap_$c==
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn)
                        Language.PureScript.Names.$fEqIdent
                        (Language.PureScript.Types.$fEqType
                           @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment]))
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fEqCompletion ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.Completion
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fEqCompletion_$c==
                  Language.PureScript.Ide.Types.$fEqCompletion_$c/= -}
4b4d2eb10040d397c113a23d1ee3051f
  $fEqCompletion_$c/= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fEqCompletion_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fEqCompletion_$c== ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDataConstructor ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c/= -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDataConstructor_$c/= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDataConstructor_$c== ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDeclaration ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c/= -}
b02d1e3d0d65a3bc0459005430392eb1
  $fEqIdeDeclarationAnn ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn_$c==
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn_$c/= -}
b02d1e3d0d65a3bc0459005430392eb1
  $fEqIdeDeclarationAnn_$c/= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (y :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Types.IdeDeclarationAnn b1 b2 ->
                 case Language.PureScript.Ide.Types.$fEqAnnotation_$c==
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fEqIdeDeclarationAnn_$c== ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==8
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDeclaration_$c/= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fEqIdeDeclaration_$c== ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ds1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclValue b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==6 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclType a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclType b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDataConstructor_$c==
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeClass a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeClass b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclValueOperator a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclValueOperator b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator b1
                        -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1 a1 b1 }
                   Language.PureScript.Ide.Types.IdeDeclKind a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeDeclKind b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
942db7ca1b475d96338060f9a58d09df
  $fEqIdeDeclaration_$c==1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (ds1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case ds1 of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Prim.==# dt2 dt5 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild4 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                           case b2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                           let {
                             $j :: GHC.Types.Bool <join 0>
                             = case GHC.Integer.Type.eqInteger# a3 b3 of wild6 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> let {
                                      $j1 :: GHC.Types.Bool <join 0>
                                      = case a5 of wild7 {
                                          GHC.Base.Nothing
                                          -> case b5 of wild8 {
                                               GHC.Base.Nothing -> GHC.Types.True
                                               GHC.Base.Just ipv -> GHC.Types.False }
                                          GHC.Base.Just a7
                                          -> case b5 of wild8 {
                                               GHC.Base.Nothing -> GHC.Types.False
                                               GHC.Base.Just b7
                                               -> Language.PureScript.Kinds.eqKind
                                                    @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                       [Language.PureScript.Comments.Comment])
                                                    @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                       [Language.PureScript.Comments.Comment])
                                                    a7
                                                    b7 } }
                                    } in
                                    case a4 of wild7 {
                                      Language.PureScript.AST.Operators.Infixl
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infixl -> $j1 }
                                      Language.PureScript.AST.Operators.Infixr
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infixr -> $j1 }
                                      Language.PureScript.AST.Operators.Infix
                                      -> case b4 of wild8 {
                                           DEFAULT -> GHC.Types.False
                                           Language.PureScript.AST.Operators.Infix -> $j1 } } }
                           } in
                           case ww1 of wild6 {
                             GHC.Base.Nothing
                             -> case ww4 of wild7 {
                                  GHC.Base.Nothing
                                  -> case ww2
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild8 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild9 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild10 { (#,#) ds5 ds6 ->
                                          case GHC.Prim.narrow32Int# ds6 of wild11 {
                                            DEFAULT -> GHC.Types.False 0# -> $j } } } } }
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a7
                             -> case ww4 of wild7 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b7
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b7
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild9 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case ww5
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild10 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild11 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild12 {
                                                 DEFAULT -> GHC.Types.False
                                                 0# -> $j } } } } } } } } } } } } } } } } }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fEqIdeDeclaration_$c==2 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeDeclaration_$c==3 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==3
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fEqIdeDeclaration_$c==4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fEqIdeDeclaration_$c==5 ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c==6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fEqIdeDeclaration_$c==6 ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==7 ww1 ww2 ww4 ww5 } }) -}
a40163d5c04a992b1148918b6c0c6416
  $fEqIdeDeclaration_$s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName,
       Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName,
                     Language.PureScript.Types.Type
                       Language.PureScript.AST.SourcePos.SourceAnn)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fEqType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)_$c/= -}
7a956a54caf2ed9967e2a2e57a61b82c
  $fEqIdeDeclaration_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName,
     Language.PureScript.Types.Type
       Language.PureScript.AST.SourcePos.SourceAnn)
    -> (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName,
        Language.PureScript.Types.Type
          Language.PureScript.AST.SourcePos.SourceAnn)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn))
                   (y :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Classes.eqInt
                        (GHC.Types.I# dt2)
                        (GHC.Types.I# dt5) of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Int.eqInt32
                             (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                             (GHC.Int.I32# 0#) of wild6 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Language.PureScript.Types.eqType
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  a2
                                  b2 of wild7 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeInstance ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fEqIdeInstance_$c==
                  Language.PureScript.Ide.Types.$fEqIdeInstance_$c/= -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeInstance_$c/= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fEqIdeInstance_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeInstance_$c== ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c==4
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
ced15246fae5ac5968cfdab937d3b807
  $fEqIdeLogLevel ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeLogLevel
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeLogLevel
                  Language.PureScript.Ide.Types.$fEqIdeLogLevel_$c==
                  Language.PureScript.Ide.Types.$fEqIdeLogLevel_$c/= -}
ced15246fae5ac5968cfdab937d3b807
  $fEqIdeLogLevel_$c/= ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (y :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogDebug -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogPerf
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogPerf -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogAll
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogAll -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogDefault
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogDefault -> GHC.Types.False }
                   Language.PureScript.Ide.Types.LogNone
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.LogNone -> GHC.Types.False } }) -}
ced15246fae5ac5968cfdab937d3b807
  $fEqIdeLogLevel_$c== ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (ds1 :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogDebug -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogPerf
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogPerf -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogAll
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogAll -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogDefault
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogDefault -> GHC.Types.True }
                   Language.PureScript.Ide.Types.LogNone
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.LogNone -> GHC.Types.True } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespace ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fEqIdeNamespace_$c==
                  Language.PureScript.Ide.Types.$fEqIdeNamespace_$c/= -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespace_$c/= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespace_$c== ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ds1 :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case ds of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespaced ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c==
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c/= -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespaced_$c/= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (y :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case Language.PureScript.Ide.Types.$fEqIdeNamespaced_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fEqIdeNamespaced_$c== ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fEqIdeType :: GHC.Classes.Eq Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5
                  Language.PureScript.Ide.Types.$fEqIdeType_$c/= -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeTypeClass ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3
                  Language.PureScript.Ide.Types.$fEqIdeTypeClass_$c/= -}
60c599d0289b3fc90de185766f47b756
  $fEqIdeTypeClass_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
942db7ca1b475d96338060f9a58d09df
  $fEqIdeTypeOperator ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1
                  Language.PureScript.Ide.Types.$fEqIdeTypeOperator_$c/= -}
942db7ca1b475d96338060f9a58d09df
  $fEqIdeTypeOperator_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==1
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fEqIdeTypeSynonym ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4
                  Language.PureScript.Ide.Types.$fEqIdeTypeSynonym_$c/= -}
434cac5be7a927bb03b5196d1252e0b7
  $fEqIdeTypeSynonym_$c/= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==4
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
862d0466a921badc471ac4eb799b1c5c
  $fEqIdeType_$c/= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(LLS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==5
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fEqIdeValue ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==6
                  Language.PureScript.Ide.Types.$fEqIdeValue_$c/= -}
cf3c14901b432d2873d0b1d8733734a7
  $fEqIdeValueOperator ::
    GHC.Classes.Eq Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2
                  Language.PureScript.Ide.Types.$fEqIdeValueOperator_$c/= -}
cf3c14901b432d2873d0b1d8733734a7
  $fEqIdeValueOperator_$c/= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(LLS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==2
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fEqIdeValue_$c/= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValue)
                   (y :: Language.PureScript.Ide.Types.IdeValue) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeValue a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Types.IdeValue b1 b2 ->
                 case Language.PureScript.Names.$fEqIdent_$c== a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.Types.eqType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
fb37c344e14b1371a6bc8438855d851a
  $fEqMatch ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.Match a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Types.Match a)
                  (Language.PureScript.Ide.Types.$fEqMatch2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fEqMatch1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N
                   ->_R <GHC.Types.Bool>_R) -}
2696dc2619ff85c27e1c74a92c9b8e22
  $fEqMatch1 ::
    GHC.Classes.Eq a =>
    (Language.PureScript.Names.ModuleName, a)
    -> (Language.PureScript.Names.ModuleName, a) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 GHC.Classes.$fEq(,)_$c/=
                   @ Language.PureScript.Names.ModuleName
                   @ a
                   Language.PureScript.Names.$fEqModuleName
                   $dEq) -}
fb9321e857b6ac58cb4bf6ff658a2d98
  $fEqMatch2 ::
    GHC.Classes.Eq a =>
    (Language.PureScript.Names.ModuleName, a)
    -> (Language.PureScript.Names.ModuleName, a) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: (Language.PureScript.Names.ModuleName, a))
                   (w2 :: (Language.PureScript.Names.ModuleName, a)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case w2 of ww3 { (,) ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c==9 @ a w ww1 ww2 ww4 ww5 } }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData ::
    Data.Foldable.Foldable Language.PureScript.Ide.Types.AstData
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.AstData
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfold
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr'
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl'
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr1
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldl1
                  Language.PureScript.Ide.Types.$fFoldableAstData_$ctoList
                  Language.PureScript.Ide.Types.$fFoldableAstData9
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:All[0])
                  Language.PureScript.Ide.Types.$fFoldableAstData_$clength
                  Language.PureScript.Ide.Types.$fFoldableAstData6
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Classes.Eq a>_R
                   ->_R <a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Any[0])
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cmaximum
                  Language.PureScript.Ide.Types.$fFoldableAstData_$cminimum
                  Language.PureScript.Ide.Types.$fFoldableAstData3
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.Ide.Types.$fFoldableAstData1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData1 ::
    GHC.Num.Num a =>
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ (Data.Semigroup.Internal.Product a)
                   @ a
                   (Data.Semigroup.Internal.$fMonoidProduct @ a $dNum)
                   (Language.PureScript.Ide.Types.$fFoldableAstData2 @ a)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))) -}
807836a96432673b62fe169de1a12d5a
  $fFoldableAstData10 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a5e5829bbee71762e322354651eff6bc
  $fFoldableAstData11 :: a
  {- Strictness: x -}
ee017939aa68124c214e5f1bf37e5d97
  $fFoldableAstData12 :: a
  {- Strictness: x -}
3a1eb6ff5819e9e13897f20ce2a59861
  $fFoldableAstData2 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData3 ::
    GHC.Num.Num a =>
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ (Data.Semigroup.Internal.Sum a)
                   @ a
                   (Data.Semigroup.Internal.$fMonoidSum @ a $dNum)
                   (Language.PureScript.Ide.Types.$fFoldableAstData2 @ a)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))) -}
7e1634909be31cdf5a640ec51181f12d
  $fFoldableAstData4 :: a
  {- Strictness: x -}
626c341d8db52af9b1a568d43511977d
  $fFoldableAstData5 :: a
  {- Strictness: x -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData6 ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$s$cfoldMap
                   @ a
                   (GHC.Classes.== @ a $dEq eta)
                     `cast`
                   (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))) -}
b9d5debe52353a45d286fd0934c6b97d
  $fFoldableAstData7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
788ac39cc84dafe20c310d96c578fc19
  $fFoldableAstData8 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData9 ::
    Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData10
                   @ a
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfold ::
    GHC.Base.Monoid m => Language.PureScript.Ide.Types.AstData m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,U,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.Ide.Types.AstData a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f14 :: a -> m)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 let {
                   lvl131 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced a
                           -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> GHC.Base.mappend
                                 @ m
                                 $dMonoid
                                 (go13 ds3)
                                 (GHC.Base.mappend @ m $dMonoid (f14 v) (go13 ds4))
                            1# -> f14 v }
                       Data.Map.Internal.Tip -> lvl131 }
                 } in
                 letrec {
                   go1 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            (Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced a,
                             Language.PureScript.Ide.Types.TypeAnnotations)
                          -> m
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> GHC.Base.mappend
                                 @ m
                                 $dMonoid
                                 (go1 ds3)
                                 (GHC.Base.mappend
                                    @ m
                                    $dMonoid
                                    (case v of wild1 { (,) a1 a2 -> go13 a1 })
                                    (go1 ds4))
                            1# -> case v of wild1 { (,) a1 a2 -> go13 a1 } }
                       Data.Map.Internal.Tip -> lvl131 }
                 } in
                 go1
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldl ::
    (b -> a -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f14 :: b -> a -> b)
                   (z :: b)
                   (t1 :: Language.PureScript.Ide.Types.AstData a) ->
                 (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
                    @ a
                    (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid @ b)
                    (\ (x :: a) (y :: b) -> f14 y x)
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                    t1)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                   z) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldl' ::
    (b -> a -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f14 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x :: a) (k :: b -> b)[OneShot] (z :: b) ->
                    case f14 z x of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldl1 ::
    (a -> a -> a) -> Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> a -> a)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (GHC.Base.Maybe a)))
                         @ a
                         (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid
                            @ (GHC.Base.Maybe a))
                         (\ (x :: a) (y :: GHC.Base.Maybe a) ->
                          GHC.Base.Just
                            @ a
                            (case y of wild {
                               GHC.Base.Nothing -> x GHC.Base.Just x1 -> f14 x1 x }))
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R)))
                         xs)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R))
                        (GHC.Base.Nothing @ a) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData11 @ a
                   GHC.Base.Just v -> v }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldr ::
    (a -> b -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b -> b)
                   (z :: b)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: b
                           -> Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a
                           -> b
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: b)
                       (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 x l r -> go13 (f14 x (go13 z' r)) l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 letrec {
                   go1 :: b
                          -> Data.Map.Internal.Map
                               Language.PureScript.Names.ModuleName
                               (Data.Map.Internal.Map
                                  Language.PureScript.Ide.Types.IdeNamespaced a,
                                Language.PureScript.Ide.Types.TypeAnnotations)
                          -> b
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: b)
                       (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 x l r
                       -> go1 (case x of wild1 { (,) a1 a2 -> go13 (go1 z' r) a1 }) l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 go1
                   z
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldr' ::
    (a -> b -> b) -> b -> Language.PureScript.Ide.Types.AstData a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo (b -> b)))
                    @ a
                    (Language.PureScript.Ide.Types.$fFoldableAstData_$dMonoid
                       @ (b -> b))
                    (\ (x :: a) (y :: b -> b) (z :: b) ->
                     case f14 x z of vx { DEFAULT -> y vx })
                      `cast`
                    (<a>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R)))
                    xs)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R))
                   (GHC.Base.id @ b)
                   z0) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cfoldr1 ::
    (a -> a -> a) -> Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> a -> a)
                   (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 case Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x GHC.Base.Just y -> f14 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData12 @ a
                   GHC.Base.Just v -> v }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$clength ::
    Language.PureScript.Ide.Types.AstData a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Language.PureScript.Ide.Types.$fFoldableAstData8 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   xs
                   Language.PureScript.Ide.Types.$fFoldableAstData7) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cmaximum ::
    GHC.Classes.Ord a => Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Functor.Utils.Max a)
                         @ a
                         g
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                         x)
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData5 @ a
                   GHC.Base.Just v -> v }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$cminimum ::
    GHC.Classes.Ord a => Language.PureScript.Ide.Types.AstData a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.Ide.Types.AstData a) ->
                 case (Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap
                         @ (Data.Functor.Utils.Min a)
                         @ a
                         g
                         (GHC.Base.Just @ a)
                           `cast`
                         (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                         x)
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Ide.Types.$fFoldableAstData4 @ a
                   GHC.Base.Just v -> v }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$ctoList ::
    Language.PureScript.Ide.Types.AstData a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.Ide.Types.AstData a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldr
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
e19e93a0bcf1952ccdedbcf8f5f916ab
  $fFoldableAstData_$dMonoid ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
  {- Unfolding: (\ @ b ->
                 Data.Semigroup.Internal.$fMonoidDual
                   @ (Data.Semigroup.Internal.Endo b)
                   (Data.Semigroup.Internal.$fMonoidEndo @ b)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFoldableAstData_$s$cfoldMap ::
    (a -> Data.Semigroup.Internal.Any)
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   (f14 :: a -> Data.Semigroup.Internal.Any)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced a
                           -> Data.Semigroup.Internal.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> case (go13 ds3)
                                      `cast`
                                    (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                                 GHC.Types.False
                                 -> case (f14 v)
                                           `cast`
                                         (Data.Semigroup.Internal.N:Any[0]) of wild2 {
                                      GHC.Types.False -> go13 ds4
                                      GHC.Types.True
                                      -> GHC.Types.True
                                           `cast`
                                         (Sym (Data.Semigroup.Internal.N:Any[0])) }
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) }
                            1# -> f14 v }
                       Data.Map.Internal.Tip
                       -> GHC.Types.False
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Any[0])) }
                 } in
                 letrec {
                   go1 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            (Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced a,
                             Language.PureScript.Ide.Types.TypeAnnotations)
                          -> Data.Semigroup.Internal.Any
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt ds2 v ds3 ds4
                       -> case dt of ds5 {
                            DEFAULT
                            -> case (go1 ds3)
                                      `cast`
                                    (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                                 GHC.Types.False
                                 -> case v of wild2 { (,) a1 a2 ->
                                    case (go13 a1)
                                           `cast`
                                         (Data.Semigroup.Internal.N:Any[0]) of wild3 {
                                      GHC.Types.False -> go1 ds4
                                      GHC.Types.True
                                      -> GHC.Types.True
                                           `cast`
                                         (Sym (Data.Semigroup.Internal.N:Any[0])) } }
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) }
                            1# -> case v of wild1 { (,) a1 a2 -> go13 a1 } }
                       Data.Map.Internal.Tip
                       -> GHC.Types.False
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Any[0])) }
                 } in
                 go1
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_$cparseJSON
                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_$cparseJSONList -}
0751bb733f5557f092139bae35931e7e
  $fFromJSONIdeNamespace1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
f9c953038eecdd53b3a1ad9e9f6017a9
  $fFromJSONIdeNamespace10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("type"#) -}
0b40f8db2621d612bf86006f3140dd3a
  $fFromJSONIdeNamespace11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace12) -}
c28765215c82a82958c5d475caaf12f7
  $fFromJSONIdeNamespace12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("value"#) -}
5e6b02ce4984a58cf4c2162406bef35c
  $fFromJSONIdeNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
46458a5738bb02e9c334c146393ab205
  $fFromJSONIdeNamespace3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace4 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSValue) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace5 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSType) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace6 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Ide.Types.IdeNamespace f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f14 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f14 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Ide.Types.IdeNamespace f14 r) ->
                 ks Language.PureScript.Ide.Types.IdeNSKind) -}
81f66d87f570f1bd61f7d99b3a689964
  $fFromJSONIdeNamespace7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace8) -}
74a450a31f05967d5c4b43919fbabc22
  $fFromJSONIdeNamespace8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kind"#) -}
732c373194366015e3058ec2acda784c
  $fFromJSONIdeNamespace9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.$fFromJSONIdeNamespace10) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                        @ Language.PureScript.Ide.Types.IdeNamespace
                   Data.Aeson.Types.Internal.String s
                   -> case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace11 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      let {
                        $j :: Data.Aeson.Types.Internal.Parser
                                Language.PureScript.Ide.Types.IdeNamespace
                          <join 0>
                        = case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace9 of wild3 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                          let {
                            $j1 :: Data.Aeson.Types.Internal.Parser
                                     Language.PureScript.Ide.Types.IdeNamespace
                              <join 0>
                            = case Language.PureScript.Ide.Types.$fFromJSONIdeNamespace7 of wild4 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                              case GHC.Prim.==# dt2 dt12 of lwild {
                                DEFAULT
                                -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                                     @ Language.PureScript.Ide.Types.IdeNamespace
                                1#
                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                          dt
                                          (GHC.Prim.int2Word# dt1)
                                          dt10
                                          (GHC.Prim.int2Word# dt11)
                                          (GHC.Prim.int2Word# dt2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                   case GHC.Prim.narrow32Int# ds3 of wild6 {
                                     DEFAULT
                                     -> Data.Aeson.Types.Internal.$fMonadPlusParser_$cmzero
                                          @ Language.PureScript.Ide.Types.IdeNamespace
                                     0#
                                     -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace6
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } }
                          } in
                          case GHC.Prim.==# dt2 dt9 of lwild {
                            DEFAULT -> $j1
                            1#
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt7
                                      (GHC.Prim.int2Word# dt8)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild4 {
                                 DEFAULT -> $j1
                                 0#
                                 -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace5
                                      `cast`
                                    (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                              <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } }
                      } in
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> $j
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> $j
                             0#
                             -> Language.PureScript.Ide.Types.$fFromJSONIdeNamespace4
                                  `cast`
                                (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                          <Language.PureScript.Ide.Types.IdeNamespace>_R)) } } } } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Types.IdeNamespace]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Types.$fFromJSONIdeNamespace3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fFromJSONIdeNamespace2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Types.$fFromJSONIdeNamespace1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f14 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f14 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Types.IdeNamespace] f14 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Types.IdeNamespace]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Types.$fFromJSONIdeNamespace_go
                        0#
                        ($wgo 0#) } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fFromJSONIdeNamespace_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Types.IdeNamespace]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
85d67545a4541d73a5afab71bcc6a25d
  $fFunctorAstData ::
    GHC.Base.Functor Language.PureScript.Ide.Types.AstData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.AstData
                  Language.PureScript.Ide.Types.$fFunctorAstData2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <b>_R))
                  Language.PureScript.Ide.Types.$fFunctorAstData1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.Ide.Types.AstData b>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFunctorAstData1 ::
    a
    -> Language.PureScript.Ide.Types.AstData b
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Map.Internal.Map
            Language.PureScript.Ide.Types.IdeNamespaced a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Ide.Types.AstData b) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Names.ModuleName
                             (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced b,
                              Language.PureScript.Ide.Types.TypeAnnotations)
                           -> Data.Map.Internal.Map
                                Language.PureScript.Names.ModuleName
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced a,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced b,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case go13 l of dt1 { DEFAULT ->
                          case go13 r of dt2 { DEFAULT ->
                          Data.Map.Internal.Bin
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Language.PureScript.Ide.Types.TypeAnnotations)
                            dt
                            kx
                            (case x of wild1 { (,) a1 a2 ->
                             (Data.Map.Internal.$fFunctorMap_$c<$
                                @ Language.PureScript.Ide.Types.IdeNamespaced
                                @ a
                                @ b
                                z
                                a1,
                              a2) })
                            dt1
                            dt2 } }
                       Data.Map.Internal.Tip
                       -> Data.Map.Internal.Tip
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Language.PureScript.Ide.Types.TypeAnnotations) }
                 } in
                 go13
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <b>_R)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fFunctorAstData2 ::
    (a -> b)
    -> Language.PureScript.Ide.Types.AstData a
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Map.Internal.Map
            Language.PureScript.Ide.Types.IdeNamespaced b,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f14 :: a -> b)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 letrec {
                   go13 :: Data.Map.Internal.Map
                             Language.PureScript.Names.ModuleName
                             (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a,
                              Language.PureScript.Ide.Types.TypeAnnotations)
                           -> Data.Map.Internal.Map
                                Language.PureScript.Names.ModuleName
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced b,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 (Data.Map.Internal.Map
                                    Language.PureScript.Ide.Types.IdeNamespaced a,
                                  Language.PureScript.Ide.Types.TypeAnnotations)) ->
                     case ds1 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case go13 l of dt1 { DEFAULT ->
                          case go13 r of dt2 { DEFAULT ->
                          Data.Map.Internal.Bin
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced b,
                               Language.PureScript.Ide.Types.TypeAnnotations)
                            dt
                            kx
                            (case x of wild1 { (,) a1 a2 ->
                             (Data.Map.Internal.map
                                @ a
                                @ b
                                @ Language.PureScript.Ide.Types.IdeNamespaced
                                f14
                                a1,
                              a2) })
                            dt1
                            dt2 } }
                       Data.Map.Internal.Tip
                       -> Data.Map.Internal.Tip
                            @ Language.PureScript.Names.ModuleName
                            @ (Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced b,
                               Language.PureScript.Ide.Types.TypeAnnotations) }
                 } in
                 go13
                   ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
fb37c344e14b1371a6bc8438855d851a
  $fFunctorMatch ::
    GHC.Base.Functor Language.PureScript.Ide.Types.Match
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Match
                  Language.PureScript.Ide.Types.$fFunctorMatch2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.Ide.Types.Match a>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <b>_N)
                  Language.PureScript.Ide.Types.$fFunctorMatch1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.Ide.Types.Match b>_R
                   ->_R Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N) -}
fb37c344e14b1371a6bc8438855d851a
  $fFunctorMatch1 ::
    a
    -> Language.PureScript.Ide.Types.Match b
    -> (Language.PureScript.Names.ModuleName, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Ide.Types.Match b) ->
                 case ds
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <b>_N) of wild { (,) a1 a2 ->
                 (a1, z) }) -}
fb37c344e14b1371a6bc8438855d851a
  $fFunctorMatch2 ::
    (a -> b)
    -> Language.PureScript.Ide.Types.Match a
    -> (Language.PureScript.Names.ModuleName, b)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f14 :: a -> b)
                   (ds :: Language.PureScript.Ide.Types.Match a) ->
                 case ds
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of wild { (,) a1 a2 ->
                 (a1, f14 a2) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericAnnotation ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fGenericAnnotation1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.Annotation>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Annotation"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_annLocation")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe
                                               Language.PureScript.AST.SourcePos.SourceSpan))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_annExportedFrom")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Language.PureScript.Names.ModuleName)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_annTypeAnnotation")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Language.PureScript.Types.SourceType))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_annDocumentation")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 Data.Text.Internal.Text))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_Annotation[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericAnnotation_$cto -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericAnnotation1 ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_annLocation")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_annExportedFrom")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_annTypeAnnotation")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (GHC.Base.Maybe Language.PureScript.Types.SourceType))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_annDocumentation")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe Data.Text.Internal.Text))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case x1 of wild { Language.PureScript.Ide.Types.Annotation g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_annLocation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_annExportedFrom")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_annTypeAnnotation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Language.PureScript.Types.SourceType))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_annDocumentation")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Data.Text.Internal.Text)))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annLocation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annExportedFrom")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annLocation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.AST.SourcePos.SourceSpan)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annExportedFrom")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.Names.ModuleName)>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annTypeAnnotation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Language.PureScript.Types.SourceType)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_annDocumentation")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Language.PureScript.Types.SourceType>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annTypeAnnotation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.Types.SourceType)>_R) <x>_N)
                       g4
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_annDocumentation")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         Data.Text.Internal.Text)>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_annLocation")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_annExportedFrom")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Names.ModuleName)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_annTypeAnnotation")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Types.SourceType))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_annDocumentation")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Data.Text.Internal.Text)))>_R) <x>_N) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericAnnotation_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.Annotation x
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.Annotation x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_Annotation[0]) ; (GHC.Generics.N:M1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.D>_P
                                                                                     <'GHC.Generics.MetaData
                                                                                        "Annotation"
                                                                                        "Language.PureScript.Ide.Types"
                                                                                        "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                        'GHC.Types.False>_P
                                                                                     <GHC.Generics.M1
                                                                                        GHC.Generics.C
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Annotation"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.True)
                                                                                        ((GHC.Generics.M1
                                                                                            GHC.Generics.S
                                                                                            ('GHC.Generics.MetaSel
                                                                                               ('GHC.Base.Just
                                                                                                  "_annLocation")
                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                               'GHC.Generics.DecidedLazy)
                                                                                            (GHC.Generics.K1
                                                                                               GHC.Generics.R
                                                                                               (GHC.Base.Maybe
                                                                                                  Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                ('GHC.Base.Just
                                                                                                                   "_annExportedFrom")
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                (GHC.Base.Maybe
                                                                                                                   Language.PureScript.Names.ModuleName)))
                                                                                         GHC.Generics.:*: (GHC.Generics.M1
                                                                                                             GHC.Generics.S
                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                ('GHC.Base.Just
                                                                                                                   "_annTypeAnnotation")
                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                             (GHC.Generics.K1
                                                                                                                GHC.Generics.R
                                                                                                                (GHC.Base.Maybe
                                                                                                                   Language.PureScript.Types.SourceType))
                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                              GHC.Generics.S
                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                 ('GHC.Base.Just
                                                                                                                                    "_annDocumentation")
                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                              (GHC.Generics.K1
                                                                                                                                 GHC.Generics.R
                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                    Data.Text.Internal.Text))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.C>_P
                                                                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                                                                            "Annotation"
                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                            'GHC.Types.True>_P
                                                                                                                                                                         <(GHC.Generics.M1
                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                   "_annLocation")
                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                (GHC.Base.Maybe
                                                                                                                                                                                   Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_annExportedFrom")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                                                                                    Language.PureScript.Names.ModuleName)))
                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_annTypeAnnotation")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (GHC.Base.Maybe
                                                                                                                                                                                                    Language.PureScript.Types.SourceType))
                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                                     "_annDocumentation")
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                  (GHC.Base.Maybe
                                                                                                                                                                                                                     Data.Text.Internal.Text)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Language.PureScript.Ide.Types.Annotation
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annLocation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.AST.SourcePos.SourceSpan)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.R>_P
                                                                                           <GHC.Base.Maybe
                                                                                              Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                           <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annExportedFrom")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Names.ModuleName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Names.ModuleName>_R
                                                                                   <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annTypeAnnotation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Types.SourceType)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Types.SourceType>_R
                                                                                   <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_annDocumentation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Data.Text.Internal.Text)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                      <*>_N
                                                                      <GHC.Generics.R>_P
                                                                      <GHC.Base.Maybe
                                                                         Data.Text.Internal.Text>_R
                                                                      <x>_P) } } }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fGenericAstData ::
    GHC.Generics.Generic (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fGenericAstData2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.AstData a>_R
                   ->_R Language.PureScript.Ide.Types.N:AstData[0]
                            <a>_R ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Ide.Types.ModuleMap
                                                 (Language.PureScript.Ide.Types.DefinitionSites a,
                                                  Language.PureScript.Ide.Types.TypeAnnotations)>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    'GHC.Base.Nothing
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (Language.PureScript.Ide.Types.ModuleMap
                                                                       (Language.PureScript.Ide.Types.DefinitionSites
                                                                          a,
                                                                        Language.PureScript.Ide.Types.TypeAnnotations))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                        <*>_N
                                                                                                                                        <GHC.Generics.C>_P
                                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                                           "AstData"
                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                           'GHC.Types.False>_P
                                                                                                                                        <GHC.Generics.M1
                                                                                                                                           GHC.Generics.S
                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                              'GHC.Base.Nothing
                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                           (GHC.Generics.K1
                                                                                                                                              GHC.Generics.R
                                                                                                                                              (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                 (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                    a,
                                                                                                                                                  Language.PureScript.Ide.Types.TypeAnnotations)))>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                                                   <*>_N
                                                                                                                                                                                                                   <GHC.Generics.D>_P
                                                                                                                                                                                                                   <'GHC.Generics.MetaData
                                                                                                                                                                                                                      "AstData"
                                                                                                                                                                                                                      "Language.PureScript.Ide.Types"
                                                                                                                                                                                                                      "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                                                                                                                                      'GHC.Types.True>_P
                                                                                                                                                                                                                   <GHC.Generics.M1
                                                                                                                                                                                                                      GHC.Generics.C
                                                                                                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                                                                                                         "AstData"
                                                                                                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                                                                                                         'GHC.Types.False)
                                                                                                                                                                                                                      (GHC.Generics.M1
                                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                                            (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                                               (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                                                  a,
                                                                                                                                                                                                                                Language.PureScript.Ide.Types.TypeAnnotations))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_AstData[0]
                                                                                                                                                                                                                                                                                                      <a>_N))))) <x>_N))
                  (Language.PureScript.Ide.Types.$fGenericAstData1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x>_R
                   ->_R (Sub (Language.PureScript.Ide.Types.Rep_AstData[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "AstData"
                                                   "Language.PureScript.Ide.Types"
                                                   "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "AstData"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Language.PureScript.Ide.Types.ModuleMap
                                                            (Language.PureScript.Ide.Types.DefinitionSites
                                                               a,
                                                             Language.PureScript.Ide.Types.TypeAnnotations))))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                         <*>_N
                                                                                                                         <GHC.Generics.C>_P
                                                                                                                         <'GHC.Generics.MetaCons
                                                                                                                            "AstData"
                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                            'GHC.Types.False>_P
                                                                                                                         <GHC.Generics.M1
                                                                                                                            GHC.Generics.S
                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                               'GHC.Base.Nothing
                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                            (GHC.Generics.K1
                                                                                                                               GHC.Generics.R
                                                                                                                               (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                  (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                     a,
                                                                                                                                   Language.PureScript.Ide.Types.TypeAnnotations)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                             <*>_N
                                                                                                                                                                                             <GHC.Generics.S>_P
                                                                                                                                                                                             <'GHC.Generics.MetaSel
                                                                                                                                                                                                'GHC.Base.Nothing
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                             <GHC.Generics.K1
                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                (Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                   (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                      a,
                                                                                                                                                                                                    Language.PureScript.Ide.Types.TypeAnnotations))>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                                                                                                                                       <Language.PureScript.Ide.Types.ModuleMap
                                                                                                                                                                                                                                                                          (Language.PureScript.Ide.Types.DefinitionSites
                                                                                                                                                                                                                                                                             a,
                                                                                                                                                                                                                                                                           Language.PureScript.Ide.Types.TypeAnnotations)>_R
                                                                                                                                                                                                                                                                       <x>_P ; Sym (Language.PureScript.Ide.Types.N:AstData[0]
                                                                                                                                                                                                                                                                                        <a>_R))) -}
85d67545a4541d73a5afab71bcc6a25d
  $fGenericAstData1 ::
    GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x
    -> GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Ide.Types.AstData a) x) ->
                 ds) -}
85d67545a4541d73a5afab71bcc6a25d
  $fGenericAstData2 ::
    Language.PureScript.Ide.Types.AstData a
    -> Language.PureScript.Ide.Types.AstData a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a @ x (x1 :: Language.PureScript.Ide.Types.AstData a) ->
                 x1) -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDataConstructor ::
    GHC.Generics.Generic
      Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fGenericIdeDataConstructor1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDataConstructor"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideDtorName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ConstructorName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideDtorTypeName")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.TypeName))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideDtorType")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              Language.PureScript.Types.SourceType)))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDataConstructor[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDataConstructor_$cto -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDataConstructor1 ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideDtorName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideDtorTypeName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideDtorType")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Types.SourceType)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeDataConstructor g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideDtorName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideDtorTypeName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideDtorType")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Types.SourceType))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideDtorName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideDtorTypeName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideDtorType")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Types.SourceType))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideDtorTypeName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName)>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Types.SourceType>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideDtorType")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Types.SourceType>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideDtorName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideDtorTypeName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "_ideDtorType")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Language.PureScript.Types.SourceType))>_R) <x>_N) }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDataConstructor_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDataConstructor x
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDataConstructor x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDataConstructor[0]) ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.D>_P
                                                                                             <'GHC.Generics.MetaData
                                                                                                "IdeDataConstructor"
                                                                                                "Language.PureScript.Ide.Types"
                                                                                                "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                'GHC.Types.False>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "IdeDataConstructor"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.True)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      ('GHC.Base.Just
                                                                                                         "_ideDtorName")
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.ConstructorName))
                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                     GHC.Generics.S
                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                        ('GHC.Base.Just
                                                                                                                           "_ideDtorTypeName")
                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                     (GHC.Generics.K1
                                                                                                                        GHC.Generics.R
                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                           'Language.PureScript.Names.TypeName))
                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                      GHC.Generics.S
                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                         ('GHC.Base.Just
                                                                                                                                            "_ideDtorType")
                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                      (GHC.Generics.K1
                                                                                                                                         GHC.Generics.R
                                                                                                                                         Language.PureScript.Types.SourceType)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                          <*>_N
                                                                                                                                                                                          <GHC.Generics.C>_P
                                                                                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                                                                                             "IdeDataConstructor"
                                                                                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                                                                                             'GHC.Types.True>_P
                                                                                                                                                                                          <GHC.Generics.M1
                                                                                                                                                                                             GHC.Generics.S
                                                                                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                   "_ideDtorName")
                                                                                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                                                                                             (GHC.Generics.K1
                                                                                                                                                                                                GHC.Generics.R
                                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                                   'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                                     "_ideDtorTypeName")
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                                      "_ideDtorType")
                                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                                   Language.PureScript.Types.SourceType))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeDataConstructor
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.ProperName
                                                                                            'Language.PureScript.Names.ConstructorName>_R
                                                                                         <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorTypeName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideDtorType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.SourceType>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Types.SourceType>_R
                                                                               <x>_P) } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDeclaration ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fGenericIdeDeclaration1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDeclaration>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDeclaration"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclType"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeType)))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclTypeSynonym"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeSynonym))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclDataConstructor"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeDataConstructor))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "IdeDeclTypeClass"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeClass))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclValueOperator"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeValueOperator)))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "IdeDeclTypeOperator"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Ide.Types.IdeTypeOperator))
                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "IdeDeclKind"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.KindName)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDeclaration[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDeclaration_$cto -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDeclaration1 ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclDataConstructor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeDataConstructor))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValueOperator)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclKind"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.KindName)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (x1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case x1 of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeValue)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeValue>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeValue>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                    <*>_N
                                                                                                                    <GHC.Generics.C>_P
                                                                                                                    <'GHC.Generics.MetaCons
                                                                                                                       "IdeDeclValue"
                                                                                                                       'GHC.Generics.PrefixI
                                                                                                                       'GHC.Types.False>_P
                                                                                                                    <GHC.Generics.M1
                                                                                                                       GHC.Generics.S
                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                          'GHC.Base.Nothing
                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                       (GHC.Generics.K1
                                                                                                                          GHC.Generics.R
                                                                                                                          Language.PureScript.Ide.Types.IdeValue)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclType g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeValue)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Ide.Types.IdeType)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeType>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeType>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                   <*>_N
                                                                                                                   <GHC.Generics.C>_P
                                                                                                                   <'GHC.Generics.MetaCons
                                                                                                                      "IdeDeclType"
                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                      'GHC.Types.False>_P
                                                                                                                   <GHC.Generics.M1
                                                                                                                      GHC.Generics.S
                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                         'GHC.Base.Nothing
                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                      (GHC.Generics.K1
                                                                                                                         GHC.Generics.R
                                                                                                                         Language.PureScript.Ide.Types.IdeType)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeSynonym)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclDataConstructor"
                                      'GHC.Generics.PrefixI
                                      'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeDataConstructor)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeSynonym>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                          <*>_N
                                                                                                                          <GHC.Generics.C>_P
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "IdeDeclTypeSynonym"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'GHC.Types.False>_P
                                                                                                                          <GHC.Generics.M1
                                                                                                                             GHC.Generics.S
                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                'GHC.Base.Nothing
                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                             (GHC.Generics.K1
                                                                                                                                GHC.Generics.R
                                                                                                                                Language.PureScript.Ide.Types.IdeTypeSynonym)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclType"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeType)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeSynonym))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclDataConstructor"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeDataConstructor)))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeSynonym)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclDataConstructor"
                                      'GHC.Generics.PrefixI
                                      'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeDataConstructor)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeDataConstructor>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                              <*>_N
                                                                                                                              <GHC.Generics.C>_P
                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                 "IdeDeclDataConstructor"
                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                 'GHC.Types.False>_P
                                                                                                                              <GHC.Generics.M1
                                                                                                                                 GHC.Generics.S
                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                    'GHC.Base.Nothing
                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                 (GHC.Generics.K1
                                                                                                                                    GHC.Generics.R
                                                                                                                                    Language.PureScript.Ide.Types.IdeDataConstructor)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeClass g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeClass)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeClass>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeClass>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                        <*>_N
                                                                                                                        <GHC.Generics.C>_P
                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                           "IdeDeclTypeClass"
                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                           'GHC.Types.False>_P
                                                                                                                        <GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              'GHC.Base.Nothing
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              Language.PureScript.Ide.Types.IdeTypeClass)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclValueOperator g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeClass)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeValueOperator>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeValueOperator>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                            <*>_N
                                                                                                                            <GHC.Generics.C>_P
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "IdeDeclValueOperator"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False>_P
                                                                                                                            <GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  Language.PureScript.Ide.Types.IdeValueOperator)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeOperator)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Ide.Types.IdeTypeOperator>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                           <*>_N
                                                                                                                           <GHC.Generics.C>_P
                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                              "IdeDeclTypeOperator"
                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                              'GHC.Types.False>_P
                                                                                                                           <GHC.Generics.M1
                                                                                                                              GHC.Generics.S
                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                 'GHC.Base.Nothing
                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                              (GHC.Generics.K1
                                                                                                                                 GHC.Generics.R
                                                                                                                                 Language.PureScript.Ide.Types.IdeTypeOperator)>_R)) <x>_N)))
                   Language.PureScript.Ide.Types.IdeDeclKind g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeValue))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclType"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeType)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeSynonym"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeSynonym))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclDataConstructor"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Ide.Types.IdeDataConstructor))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclValueOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "IdeDeclTypeOperator"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "IdeDeclKind"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeClass))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclValueOperator"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Ide.Types.IdeValueOperator)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Ide.Types.IdeTypeOperator))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "IdeDeclKind"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.Ide.Types.IdeTypeOperator)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.KindName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "IdeDeclKind"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.KindName))>_R)) <x>_N))) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericIdeDeclarationAnn ::
    GHC.Generics.Generic
      Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeDeclarationAnn>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeDeclarationAnn"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_idaAnnotation")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "_idaDeclaration")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Language.PureScript.Ide.Types.IdeDeclaration))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn_$cto -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericIdeDeclarationAnn1 ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_idaAnnotation")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "_idaDeclaration")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R Language.PureScript.Ide.Types.IdeDeclaration))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_idaAnnotation")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.Annotation))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_idaDeclaration")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.IdeDeclaration))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.Annotation>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_idaAnnotation")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.Annotation>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.IdeDeclaration>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_idaDeclaration")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.IdeDeclaration>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_idaAnnotation")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Ide.Types.Annotation)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_idaDeclaration")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Ide.Types.IdeDeclaration)>_R) <x>_N) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fGenericIdeDeclarationAnn_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclarationAnn x
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDeclarationAnn x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn[0]) ; (GHC.Generics.N:M1[0]
                                                                                            <*>_N
                                                                                            <GHC.Generics.D>_P
                                                                                            <'GHC.Generics.MetaData
                                                                                               "IdeDeclarationAnn"
                                                                                               "Language.PureScript.Ide.Types"
                                                                                               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                               'GHC.Types.False>_P
                                                                                            <GHC.Generics.M1
                                                                                               GHC.Generics.C
                                                                                               ('GHC.Generics.MetaCons
                                                                                                  "IdeDeclarationAnn"
                                                                                                  'GHC.Generics.PrefixI
                                                                                                  'GHC.Types.True)
                                                                                               (GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     ('GHC.Base.Just
                                                                                                        "_idaAnnotation")
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     Language.PureScript.Ide.Types.Annotation)
                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_idaDeclaration")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      Language.PureScript.Ide.Types.IdeDeclaration))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                              <*>_N
                                                                                                                                                                              <GHC.Generics.C>_P
                                                                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                                                                 "IdeDeclarationAnn"
                                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                                 'GHC.Types.True>_P
                                                                                                                                                                              <GHC.Generics.M1
                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                       "_idaAnnotation")
                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                    Language.PureScript.Ide.Types.Annotation)
                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                        "_idaDeclaration")
                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                     Language.PureScript.Ide.Types.IdeDeclaration)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeDeclarationAnn
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_idaAnnotation")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.Annotation>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <Language.PureScript.Ide.Types.Annotation>_R
                                                                                   <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_idaDeclaration")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.IdeDeclaration>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.Ide.Types.IdeDeclaration>_R
                                                                                       <x>_P) }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fGenericIdeDeclaration_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclaration x
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeDeclaration x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeDeclaration[0]) ; GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "IdeDeclaration"
                                                                                           "Language.PureScript.Ide.Types"
                                                                                           "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                           'GHC.Types.False>_P
                                                                                        <((GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "IdeDeclValue"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.False)
                                                                                             (GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Language.PureScript.Ide.Types.IdeValue))
                                                                                           GHC.Generics.:+: GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclType"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeType)))
                                                                                          GHC.Generics.:+: (GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclTypeSynonym"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeTypeSynonym))
                                                                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclDataConstructor"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeDataConstructor))))
                                                                                         GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "IdeDeclTypeClass"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    'GHC.Base.Nothing
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Ide.Types.IdeTypeClass))
                                                                                                            GHC.Generics.:+: GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclValueOperator"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeValueOperator)))
                                                                                                           GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                               GHC.Generics.C
                                                                                                                               ('GHC.Generics.MetaCons
                                                                                                                                  "IdeDeclTypeOperator"
                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                  'GHC.Types.False)
                                                                                                                               (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Ide.Types.IdeTypeOperator))
                                                                                                                             GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                                GHC.Generics.C
                                                                                                                                                ('GHC.Generics.MetaCons
                                                                                                                                                   "IdeDeclKind"
                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                   'GHC.Types.False)
                                                                                                                                                (GHC.Generics.M1
                                                                                                                                                   GHC.Generics.S
                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                      GHC.Generics.R
                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                         'Language.PureScript.Names.KindName)))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclValue
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeValue)>_R ; GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.S>_P
                                                                                               <'GHC.Generics.MetaSel
                                                                                                  'GHC.Base.Nothing
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                                               <GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  Language.PureScript.Ide.Types.IdeValue>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                         <*>_N
                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                         <Language.PureScript.Ide.Types.IdeValue>_R
                                                                                                                                                         <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclType
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeType)>_R ; GHC.Generics.N:M1[0]
                                                                                              <*>_N
                                                                                              <GHC.Generics.S>_P
                                                                                              <'GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy>_P
                                                                                              <GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.Ide.Types.IdeType>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                       <Language.PureScript.Ide.Types.IdeType>_R
                                                                                                                                                       <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeSynonym
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeSynonym"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeSynonym)>_R ; GHC.Generics.N:M1[0]
                                                                                                     <*>_N
                                                                                                     <GHC.Generics.S>_P
                                                                                                     <'GHC.Generics.MetaSel
                                                                                                        'GHC.Base.Nothing
                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                     <GHC.Generics.K1
                                                                                                        GHC.Generics.R
                                                                                                        Language.PureScript.Ide.Types.IdeTypeSynonym>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                     <*>_N
                                                                                                                                                                     <GHC.Generics.R>_P
                                                                                                                                                                     <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                                                                                                                                                                     <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclDataConstructor
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclDataConstructor"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeDataConstructor)>_R ; GHC.Generics.N:M1[0]
                                                                                                         <*>_N
                                                                                                         <GHC.Generics.S>_P
                                                                                                         <'GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy>_P
                                                                                                         <GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.Ide.Types.IdeDataConstructor>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                             <*>_N
                                                                                                                                                                             <GHC.Generics.R>_P
                                                                                                                                                                             <Language.PureScript.Ide.Types.IdeDataConstructor>_R
                                                                                                                                                                             <x>_P) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeClass
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeClass"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeClass)>_R ; GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.S>_P
                                                                                                   <'GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                                   <GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      Language.PureScript.Ide.Types.IdeTypeClass>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.R>_P
                                                                                                                                                                 <Language.PureScript.Ide.Types.IdeTypeClass>_R
                                                                                                                                                                 <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclValueOperator
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclValueOperator"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeValueOperator)>_R ; GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Generics.S>_P
                                                                                                       <'GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                       <GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Ide.Types.IdeValueOperator>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                                         <Language.PureScript.Ide.Types.IdeValueOperator>_R
                                                                                                                                                                         <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclTypeOperator
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclTypeOperator"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Ide.Types.IdeTypeOperator)>_R ; GHC.Generics.N:M1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.S>_P
                                                                                                      <'GHC.Generics.MetaSel
                                                                                                         'GHC.Base.Nothing
                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                         'GHC.Generics.DecidedLazy>_P
                                                                                                      <GHC.Generics.K1
                                                                                                         GHC.Generics.R
                                                                                                         Language.PureScript.Ide.Types.IdeTypeOperator>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                       <*>_N
                                                                                                                                                                       <GHC.Generics.R>_P
                                                                                                                                                                       <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                                                                                                                                                                       <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Ide.Types.IdeDeclKind
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdeDeclKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.KindName>_R
                                                                                                                                                           <x>_P) } } }) -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeInstance ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fGenericIdeInstance1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeInstance>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeInstance"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideInstanceModule")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideInstanceName")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Names.Ident))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideInstanceTypes")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [Language.PureScript.Types.SourceType])
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideInstanceConstraints")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 [Language.PureScript.Types.SourceConstraint]))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeInstance[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeInstance_$cto -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeInstance1 ::
    Language.PureScript.Ide.Types.IdeInstance
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideInstanceModule")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R Language.PureScript.Names.ModuleName)
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideInstanceName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideInstanceTypes")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R [Language.PureScript.Types.SourceType])
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideInstanceConstraints")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe
                                                     [Language.PureScript.Types.SourceConstraint]))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeInstance g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideInstanceModule")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideInstanceName")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Names.Ident))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideInstanceTypes")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R [Language.PureScript.Types.SourceType])
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideInstanceConstraints")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe
                                                [Language.PureScript.Types.SourceConstraint])))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceModule")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Names.ModuleName))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.ModuleName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceModule")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Names.ModuleName>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Ident>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Names.Ident>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceTypes")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R [Language.PureScript.Types.SourceType]))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideInstanceConstraints")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint])))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[Language.PureScript.Types.SourceType]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceTypes")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [Language.PureScript.Types.SourceType]>_R) <x>_N)
                       g4
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideInstanceConstraints")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         [Language.PureScript.Types.SourceConstraint])>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideInstanceModule")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.Names.ModuleName)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideInstanceName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideInstanceTypes")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   [Language.PureScript.Types.SourceType])
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideInstanceConstraints")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       [Language.PureScript.Types.SourceConstraint])))>_R) <x>_N) }) -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeInstance_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeInstance x
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeInstance x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeInstance[0]) ; (GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.D>_P
                                                                                      <'GHC.Generics.MetaData
                                                                                         "IdeInstance"
                                                                                         "Language.PureScript.Ide.Types"
                                                                                         "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.C
                                                                                         ('GHC.Generics.MetaCons
                                                                                            "IdeInstance"
                                                                                            'GHC.Generics.PrefixI
                                                                                            'GHC.Types.True)
                                                                                         ((GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideInstanceModule")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName)
                                                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 ('GHC.Base.Just
                                                                                                                    "_ideInstanceName")
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (GHC.Generics.K1
                                                                                                                 GHC.Generics.R
                                                                                                                 Language.PureScript.Names.Ident))
                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                              GHC.Generics.S
                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                 ('GHC.Base.Just
                                                                                                                    "_ideInstanceTypes")
                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                              (GHC.Generics.K1
                                                                                                                 GHC.Generics.R
                                                                                                                 [Language.PureScript.Types.SourceType])
                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  ('GHC.Base.Just
                                                                                                                                     "_ideInstanceConstraints")
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  (GHC.Base.Maybe
                                                                                                                                     [Language.PureScript.Types.SourceConstraint]))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                               <*>_N
                                                                                                                                                                                               <GHC.Generics.C>_P
                                                                                                                                                                                               <'GHC.Generics.MetaCons
                                                                                                                                                                                                  "IdeInstance"
                                                                                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                                                                                  'GHC.Types.True>_P
                                                                                                                                                                                               <(GHC.Generics.M1
                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                         "_ideInstanceModule")
                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                      Language.PureScript.Names.ModuleName)
                                                                                                                                                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                                                                       ('GHC.Base.Just
                                                                                                                                                                                                                          "_ideInstanceName")
                                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                    (GHC.Generics.K1
                                                                                                                                                                                                                       GHC.Generics.R
                                                                                                                                                                                                                       Language.PureScript.Names.Ident))
                                                                                                                                                                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                                                                       ('GHC.Base.Just
                                                                                                                                                                                                                          "_ideInstanceTypes")
                                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                    (GHC.Generics.K1
                                                                                                                                                                                                                       GHC.Generics.R
                                                                                                                                                                                                                       [Language.PureScript.Types.SourceType])
                                                                                                                                                                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                     GHC.Generics.S
                                                                                                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                                                                                                           "_ideInstanceConstraints")
                                                                                                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                                                                                                        GHC.Generics.R
                                                                                                                                                                                                                                        (GHC.Base.Maybe
                                                                                                                                                                                                                                           [Language.PureScript.Types.SourceConstraint])))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Language.PureScript.Ide.Types.IdeInstance
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceModule")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Names.ModuleName>_R
                                                                               <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.R>_P
                                                                          <Language.PureScript.Names.Ident>_R
                                                                          <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceTypes")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Types.SourceType]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                 <*>_N
                                                                                 <GHC.Generics.R>_P
                                                                                 <[Language.PureScript.Types.SourceType]>_R
                                                                                 <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideInstanceConstraints")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              [Language.PureScript.Types.SourceConstraint])>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.R>_P
                                                                                           <GHC.Base.Maybe
                                                                                              [Language.PureScript.Types.SourceConstraint]>_R
                                                                                           <x>_P) } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespace ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fGenericIdeNamespace1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeNamespace>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeNamespace"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "IdeNSType"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "IdeNSKind"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeNamespace[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeNamespace_$cto -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespace1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x1 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace6 @ x
                   Language.PureScript.Ide.Types.IdeNSType
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace4 @ x
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> Language.PureScript.Ide.Types.$fGenericIdeNamespace2 @ x }) -}
4832c2d40f762a366df3c9a1d614490a
  $fGenericIdeNamespace2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Ide.Types.$fGenericIdeNamespace3 @ x)) -}
c78c89569a086028d4e498aeddad9776
  $fGenericIdeNamespace3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
c788bcf9a0607a28b74305b0aff38683
  $fGenericIdeNamespace4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Ide.Types.$fGenericIdeNamespace5 @ x)) -}
6039c0c39407594a5b76eb646c8e4391
  $fGenericIdeNamespace5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
eea3faa76e1988f6c9e98018909185c5
  $fGenericIdeNamespace6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespace_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespace x
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeNamespace x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeNamespace[0]) ; GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.D>_P
                                                                                      <'GHC.Generics.MetaData
                                                                                         "IdeNamespace"
                                                                                         "Language.PureScript.Ide.Types"
                                                                                         "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.C
                                                                                         ('GHC.Generics.MetaCons
                                                                                            "IdeNSValue"
                                                                                            'GHC.Generics.PrefixI
                                                                                            'GHC.Types.False)
                                                                                         GHC.Generics.U1
                                                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                                                           GHC.Generics.C
                                                                                                           ('GHC.Generics.MetaCons
                                                                                                              "IdeNSType"
                                                                                                              'GHC.Generics.PrefixI
                                                                                                              'GHC.Types.False)
                                                                                                           GHC.Generics.U1
                                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                                            GHC.Generics.C
                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                               "IdeNSKind"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False)
                                                                                                                            GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Ide.Types.IdeNSValue }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Ide.Types.IdeNSType }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "IdeNSKind" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Ide.Types.IdeNSKind } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespaced ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fGenericIdeNamespaced1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeNamespaced>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeNamespaced"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           Language.PureScript.Ide.Types.IdeNamespace)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeNamespaced[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeNamespaced_$cto -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespaced1 ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeNamespaced g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Ide.Types.IdeNamespace>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Ide.Types.IdeNamespace>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Data.Text.Internal.Text>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Data.Text.Internal.Text>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Base.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Ide.Types.IdeNamespace)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Base.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Data.Text.Internal.Text)>_R) <x>_N) }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fGenericIdeNamespaced_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespaced x
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeNamespaced x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeNamespaced[0]) ; (GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "IdeNamespaced"
                                                                                           "Language.PureScript.Ide.Types"
                                                                                           "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                           'GHC.Types.False>_P
                                                                                        <GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "IdeNamespaced"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.False)
                                                                                           (GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.Ide.Types.IdeNamespace)
                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                     <*>_N
                                                                                                                                                     <GHC.Generics.C>_P
                                                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                                                        "IdeNamespaced"
                                                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                                                        'GHC.Types.False>_P
                                                                                                                                                     <GHC.Generics.M1
                                                                                                                                                        GHC.Generics.S
                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                           'GHC.Base.Nothing
                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                        (GHC.Generics.K1
                                                                                                                                                           GHC.Generics.R
                                                                                                                                                           Language.PureScript.Ide.Types.IdeNamespace)
                                                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                            Data.Text.Internal.Text)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeNamespaced
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Ide.Types.IdeNamespace>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.R>_P
                                                                                     <Language.PureScript.Ide.Types.IdeNamespace>_R
                                                                                     <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Data.Text.Internal.Text>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                  <*>_N
                                                                  <GHC.Generics.R>_P
                                                                  <Data.Text.Internal.Text>_R
                                                                  <x>_P) }) -}
862d0466a921badc471ac4eb799b1c5c
  $fGenericIdeType ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fGenericIdeType1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeType>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeType"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideTypeName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.TypeName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeKind")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Kinds.SourceKind)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideTypeDtors")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              [(Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName,
                                                                                Language.PureScript.Types.SourceType)])))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeType[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeType_$cto -}
862d0466a921badc471ac4eb799b1c5c
  $fGenericIdeType1 ::
    Language.PureScript.Ide.Types.IdeType
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideTypeName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeKind")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Kinds.SourceKind)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideTypeDtors")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  [(Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName,
                                                    Language.PureScript.Types.SourceType)])))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeType g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeKind")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Kinds.SourceKind)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTypeDtors")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             [(Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName,
                                               Language.PureScript.Types.SourceType)]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Kinds.SourceKind))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeDtors")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               [(Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName,
                                 Language.PureScript.Types.SourceType)]))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.SourceKind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.SourceKind>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[(Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName,
                                    Language.PureScript.Types.SourceType)]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeDtors")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [(Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ConstructorName,
                                                        Language.PureScript.Types.SourceType)]>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeKind")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Kinds.SourceKind)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "_ideTypeDtors")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    [(Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.ConstructorName,
                                                                      Language.PureScript.Types.SourceType)]))>_R) <x>_N) }) -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeTypeClass ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fGenericIdeTypeClass1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeClass>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeClass"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideTCName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTCKind")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Kinds.SourceKind)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideTCInstances")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              [Language.PureScript.Ide.Types.IdeInstance])))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeClass[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeClass_$cto -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeTypeClass1 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideTCName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTCKind")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Kinds.SourceKind)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideTCInstances")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  [Language.PureScript.Ide.Types.IdeInstance])))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeClass g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTCName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTCKind")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Kinds.SourceKind)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTCInstances")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             [Language.PureScript.Ide.Types.IdeInstance]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTCName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ClassName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTCKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Kinds.SourceKind))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTCInstances")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R [Language.PureScript.Ide.Types.IdeInstance]))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.SourceKind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTCKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.SourceKind>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[Language.PureScript.Ide.Types.IdeInstance]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTCInstances")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [Language.PureScript.Ide.Types.IdeInstance]>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTCName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTCKind")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Kinds.SourceKind)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideTCInstances")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    [Language.PureScript.Ide.Types.IdeInstance]))>_R) <x>_N) }) -}
60c599d0289b3fc90de185766f47b756
  $fGenericIdeTypeClass_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeClass x
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeClass x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeClass[0]) ; (GHC.Generics.N:M1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.D>_P
                                                                                       <'GHC.Generics.MetaData
                                                                                          "IdeTypeClass"
                                                                                          "Language.PureScript.Ide.Types"
                                                                                          "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                          'GHC.Types.False>_P
                                                                                       <GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "IdeTypeClass"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.True)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideTCName")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.ClassName))
                                                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "_ideTCKind")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Language.PureScript.Kinds.SourceKind)
                                                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                GHC.Generics.S
                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                   ('GHC.Base.Just
                                                                                                                                      "_ideTCInstances")
                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                (GHC.Generics.K1
                                                                                                                                   GHC.Generics.R
                                                                                                                                   [Language.PureScript.Ide.Types.IdeInstance])))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                           <*>_N
                                                                                                                                                                                           <GHC.Generics.C>_P
                                                                                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                                                                                              "IdeTypeClass"
                                                                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                    "_ideTCName")
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
                                                                                                                                                                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                      "_ideTCKind")
                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                   Language.PureScript.Kinds.SourceKind)
                                                                                                                                                                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                                       "_ideTCInstances")
                                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                                                                    [Language.PureScript.Ide.Types.IdeInstance]))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeTypeClass
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <Language.PureScript.Names.ProperName
                                                                                      'Language.PureScript.Names.ClassName>_R
                                                                                   <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.SourceKind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Kinds.SourceKind>_R
                                                                               <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTCInstances")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Ide.Types.IdeInstance]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.R>_P
                                                                                      <[Language.PureScript.Ide.Types.IdeInstance]>_R
                                                                                      <x>_P) } }) -}
942db7ca1b475d96338060f9a58d09df
  $fGenericIdeTypeOperator ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fGenericIdeTypeOperator1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeOperator>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeOperator"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideTypeOpName")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeOpAlias")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.Qualified
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Operators.Precedence)
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "_ideTypeOpAssociativity")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Operators.Associativity)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideTypeOpKind")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (GHC.Base.Maybe
                                                                                                   Language.PureScript.Kinds.SourceKind)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeOperator[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeOperator_$cto -}
942db7ca1b475d96338060f9a58d09df
  $fGenericIdeTypeOperator1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideTypeOpName")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.TypeOpName))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeOpAlias")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideTypeOpPrecedence")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Associativity)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideTypeOpKind")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Language.PureScript.Kinds.SourceKind)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeOperator g1 g2 g3 g4 g5 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeOpName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideTypeOpAlias")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (Language.PureScript.Names.Qualified
                                                (Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.TypeName))))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideTypeOpPrecedence")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "_ideTypeOpAssociativity")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.Operators.Associativity)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "_ideTypeOpKind")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe
                                                                  Language.PureScript.Kinds.SourceKind))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpAlias")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.TypeOpName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.OpName
                                                         'Language.PureScript.Names.TypeOpName)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpAlias")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName))>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpPrecedence")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Precedence))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideTypeOpAssociativity")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Associativity)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "_ideTypeOpKind")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (GHC.Base.Maybe
                                                   Language.PureScript.Kinds.SourceKind)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.AST.Operators.Precedence>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.Operators.Precedence>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpAssociativity")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.AST.Operators.Associativity))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpKind")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)))
                          @ x
                          g4
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Language.PureScript.AST.Operators.Associativity>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Language.PureScript.AST.Operators.Associativity>_R) <x>_N)
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe Language.PureScript.Kinds.SourceKind>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpKind")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (GHC.Base.Maybe
                                                            Language.PureScript.Kinds.SourceKind)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideTypeOpName")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpAlias")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideTypeOpPrecedence")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Precedence)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "_ideTypeOpAssociativity")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     Language.PureScript.AST.Operators.Associativity)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "_ideTypeOpKind")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (GHC.Base.Maybe
                                                                                         Language.PureScript.Kinds.SourceKind))))>_R) <x>_N) }) -}
942db7ca1b475d96338060f9a58d09df
  $fGenericIdeTypeOperator_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeOperator x
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(LS)),1*U(1*U(U,U),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeOperator x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeOperator[0]) ; (GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.D>_P
                                                                                          <'GHC.Generics.MetaData
                                                                                             "IdeTypeOperator"
                                                                                             "Language.PureScript.Ide.Types"
                                                                                             "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                             'GHC.Types.False>_P
                                                                                          <GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "IdeTypeOperator"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True)
                                                                                             ((GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('GHC.Base.Just
                                                                                                       "_ideTypeOpName")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    (Language.PureScript.Names.OpName
                                                                                                       'Language.PureScript.Names.TypeOpName))
                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "_ideTypeOpAlias")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                           'Language.PureScript.Names.TypeName))))
                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "_ideTypeOpPrecedence")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     Language.PureScript.AST.Operators.Precedence)
                                                                                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                    GHC.Generics.S
                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                       ('GHC.Base.Just
                                                                                                                                          "_ideTypeOpAssociativity")
                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                    (GHC.Generics.K1
                                                                                                                                       GHC.Generics.R
                                                                                                                                       Language.PureScript.AST.Operators.Associativity)
                                                                                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                     GHC.Generics.S
                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                           "_ideTypeOpKind")
                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                        GHC.Generics.R
                                                                                                                                                        (GHC.Base.Maybe
                                                                                                                                                           Language.PureScript.Kinds.SourceKind)))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                              <*>_N
                                                                                                                                                                                                              <GHC.Generics.C>_P
                                                                                                                                                                                                              <'GHC.Generics.MetaCons
                                                                                                                                                                                                                 "IdeTypeOperator"
                                                                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                                                                 'GHC.Types.True>_P
                                                                                                                                                                                                              <(GHC.Generics.M1
                                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                                        "_ideTypeOpName")
                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                                        'Language.PureScript.Names.TypeOpName))
                                                                                                                                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                                         "_ideTypeOpAlias")
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                            'Language.PureScript.Names.TypeName))))
                                                                                                                                                                                                               GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                                         "_ideTypeOpPrecedence")
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                                      Language.PureScript.AST.Operators.Precedence)
                                                                                                                                                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                                     GHC.Generics.S
                                                                                                                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                                                                                                                           "_ideTypeOpAssociativity")
                                                                                                                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                                                                                                                        GHC.Generics.R
                                                                                                                                                                                                                                                        Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                                      GHC.Generics.S
                                                                                                                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                                                                                                            "_ideTypeOpKind")
                                                                                                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                                                                                                                         (GHC.Base.Maybe
                                                                                                                                                                                                                                                                            Language.PureScript.Kinds.SourceKind))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds6 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 Language.PureScript.Ide.Types.IdeTypeOperator
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                    <*>_N
                                                                                    <GHC.Generics.R>_P
                                                                                    <Language.PureScript.Names.OpName
                                                                                       'Language.PureScript.Names.TypeOpName>_R
                                                                                    <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpAlias")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.R>_P
                                                                                      <Language.PureScript.Names.Qualified
                                                                                         (Language.PureScript.Names.ProperName
                                                                                            'Language.PureScript.Names.TypeName)>_R
                                                                                      <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpPrecedence")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Precedence>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.AST.Operators.Precedence>_R
                                                                                       <x>_P)
                   ds7
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpAssociativity")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Associativity>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.R>_P
                                                                                          <Language.PureScript.AST.Operators.Associativity>_R
                                                                                          <x>_P)
                   ds8
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeOpKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Kinds.SourceKind)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Kinds.SourceKind>_R
                                                                                   <x>_P) } } } }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fGenericIdeTypeSynonym ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeTypeSynonym>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeTypeSynonym"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideSynonymName")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.TypeName))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideSynonymType")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.Types.SourceType)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "_ideSynonymKind")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              Language.PureScript.Kinds.SourceKind)))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeTypeSynonym[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym_$cto -}
434cac5be7a927bb03b5196d1252e0b7
  $fGenericIdeTypeSynonym1 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideSynonymName")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideSynonymType")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.Types.SourceType)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideSynonymKind")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Kinds.SourceKind)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeTypeSynonym g1 g2 g3 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideSynonymName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideSynonymType")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Types.SourceType)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideSynonymKind")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Kinds.SourceKind))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideSynonymName")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideSynonymType")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Types.SourceType))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideSynonymKind")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.Kinds.SourceKind))
                       @ x
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Types.SourceType>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideSynonymType")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Types.SourceType>_R) <x>_N)
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Kinds.SourceKind>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideSynonymKind")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.Kinds.SourceKind>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideSynonymName")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideSynonymType")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Types.SourceType)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideSynonymKind")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Language.PureScript.Kinds.SourceKind))>_R) <x>_N) }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fGenericIdeTypeSynonym_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeSynonym x
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeTypeSynonym x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeTypeSynonym[0]) ; (GHC.Generics.N:M1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.D>_P
                                                                                         <'GHC.Generics.MetaData
                                                                                            "IdeTypeSynonym"
                                                                                            "Language.PureScript.Ide.Types"
                                                                                            "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                            'GHC.Types.False>_P
                                                                                         <GHC.Generics.M1
                                                                                            GHC.Generics.C
                                                                                            ('GHC.Generics.MetaCons
                                                                                               "IdeTypeSynonym"
                                                                                               'GHC.Generics.PrefixI
                                                                                               'GHC.Types.True)
                                                                                            (GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "_ideSynonymName")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    ('GHC.Base.Just
                                                                                                                       "_ideSynonymType")
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    Language.PureScript.Types.SourceType)
                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Base.Just
                                                                                                                                        "_ideSynonymKind")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     Language.PureScript.Kinds.SourceKind)))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                      <*>_N
                                                                                                                                                                                      <GHC.Generics.C>_P
                                                                                                                                                                                      <'GHC.Generics.MetaCons
                                                                                                                                                                                         "IdeTypeSynonym"
                                                                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                                                                         'GHC.Types.True>_P
                                                                                                                                                                                      <GHC.Generics.M1
                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                                                               "_ideSynonymName")
                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.TypeName))
                                                                                                                                                                                       GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                           GHC.Generics.S
                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                              ('GHC.Base.Just
                                                                                                                                                                                                                 "_ideSynonymType")
                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                           (GHC.Generics.K1
                                                                                                                                                                                                              GHC.Generics.R
                                                                                                                                                                                                              Language.PureScript.Types.SourceType)
                                                                                                                                                                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                                                                               ('GHC.Base.Just
                                                                                                                                                                                                                                  "_ideSynonymKind")
                                                                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                                                                               Language.PureScript.Kinds.SourceKind))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeTypeSynonym
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.SourceType>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Types.SourceType>_R
                                                                               <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideSynonymKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.SourceKind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Kinds.SourceKind>_R
                                                                               <x>_P) } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fGenericIdeType_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType x
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeType[0]) ; (GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.D>_P
                                                                                  <'GHC.Generics.MetaData
                                                                                     "IdeType"
                                                                                     "Language.PureScript.Ide.Types"
                                                                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                     'GHC.Types.False>_P
                                                                                  <GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "IdeType"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.True)
                                                                                     (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           ('GHC.Base.Just
                                                                                              "_ideTypeName")
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           (Language.PureScript.Names.ProperName
                                                                                              'Language.PureScript.Names.TypeName))
                                                                                      GHC.Generics.:*: (GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             ('GHC.Base.Just
                                                                                                                "_ideTypeKind")
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             Language.PureScript.Kinds.SourceKind)
                                                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              ('GHC.Base.Just
                                                                                                                                 "_ideTypeDtors")
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              [(Language.PureScript.Names.ProperName
                                                                                                                                  'Language.PureScript.Names.ConstructorName,
                                                                                                                                Language.PureScript.Types.SourceType)])))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <GHC.Generics.C>_P
                                                                                                                                                                                   <'GHC.Generics.MetaCons
                                                                                                                                                                                      "IdeType"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'GHC.Types.True>_P
                                                                                                                                                                                   <GHC.Generics.M1
                                                                                                                                                                                      GHC.Generics.S
                                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                            "_ideTypeName")
                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                            'Language.PureScript.Names.TypeName))
                                                                                                                                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                        GHC.Generics.S
                                                                                                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                                                                                                           ('GHC.Base.Just
                                                                                                                                                                                                              "_ideTypeKind")
                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                        (GHC.Generics.K1
                                                                                                                                                                                                           GHC.Generics.R
                                                                                                                                                                                                           Language.PureScript.Kinds.SourceKind)
                                                                                                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                                                                                               "_ideTypeDtors")
                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                                            [(Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                'Language.PureScript.Names.ConstructorName,
                                                                                                                                                                                                                              Language.PureScript.Types.SourceType)]))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds2 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 Language.PureScript.Ide.Types.IdeType
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName>_R
                                                                                  <x>_P)
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeKind")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Kinds.SourceKind>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Kinds.SourceKind>_R
                                                                               <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideTypeDtors")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <[(Language.PureScript.Names.ProperName
                                                                                        'Language.PureScript.Names.ConstructorName,
                                                                                      Language.PureScript.Types.SourceType)]>_R
                                                                                   <x>_P) } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fGenericIdeValue ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fGenericIdeValue1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeValue>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeValue"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "_ideValueIdent")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Language.PureScript.Names.Ident)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "_ideValueType")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            Language.PureScript.Types.SourceType))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeValue[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeValue_$cto -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fGenericIdeValue1 ::
    Language.PureScript.Ide.Types.IdeValue
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "_ideValueIdent")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "_ideValueType")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R Language.PureScript.Types.SourceType))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeValue g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueIdent")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueType")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.Types.SourceType))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Names.Ident>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueIdent")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Names.Ident>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <Language.PureScript.Types.SourceType>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueType")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.Types.SourceType>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueIdent")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "_ideValueType")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  Language.PureScript.Types.SourceType)>_R) <x>_N) }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fGenericIdeValueOperator ::
    GHC.Generics.Generic Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fGenericIdeValueOperator1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Types.IdeValueOperator>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "IdeValueOperator"
                                     "Language.PureScript.Ide.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "_ideValueOpName")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "_ideValueOpAlias")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.Qualified
                                                                (Data.Either.Either
                                                                   Language.PureScript.Names.Ident
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.ConstructorName)))))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just
                                                                "_ideValueOpPrecedence")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Operators.Precedence)
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "_ideValueOpAssociativity")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Operators.Associativity)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "_ideValueOpType")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (GHC.Base.Maybe
                                                                                                   Language.PureScript.Types.SourceType)))))>_R) ; Sub (Sym (Language.PureScript.Ide.Types.Rep_IdeValueOperator[0]))) <x>_N)
                  Language.PureScript.Ide.Types.$fGenericIdeValueOperator_$cto -}
cf3c14901b432d2873d0b1d8733734a7
  $fGenericIdeValueOperator1 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "_ideValueOpName")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.ValueOpName))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueOpAlias")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (Language.PureScript.Names.Qualified
                                    (Data.Either.Either
                                       Language.PureScript.Names.Ident
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)))))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "_ideValueOpPrecedence")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpAssociativity")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Associativity)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "_ideValueOpType")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Language.PureScript.Types.SourceType)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case x1 of wild { Language.PureScript.Ide.Types.IdeValueOperator g1 g2 g3 g4 g5 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueOpName")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "_ideValueOpAlias")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (Language.PureScript.Names.Qualified
                                                (Data.Either.Either
                                                   Language.PureScript.Names.Ident
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.ConstructorName)))))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "_ideValueOpPrecedence")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R Language.PureScript.AST.Operators.Precedence)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "_ideValueOpAssociativity")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.Operators.Associativity)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "_ideValueOpType")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe
                                                                  Language.PureScript.Types.SourceType))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpName")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpAlias")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Language.PureScript.Names.Qualified
                                  (Data.Either.Either
                                     Language.PureScript.Names.Ident
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ConstructorName)))))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.ValueOpName>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpName")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.OpName
                                                         'Language.PureScript.Names.ValueOpName)>_R) <x>_N)
                       g2
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.Names.Qualified
                                    (Data.Either.Either
                                       Language.PureScript.Names.Ident
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName))>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpAlias")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.Qualified
                                                         (Data.Either.Either
                                                            Language.PureScript.Names.Ident
                                                            (Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.ConstructorName)))>_R) <x>_N))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpPrecedence")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Precedence))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "_ideValueOpAssociativity")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R Language.PureScript.AST.Operators.Associativity)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "_ideValueOpType")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (GHC.Base.Maybe
                                                   Language.PureScript.Types.SourceType)))
                       @ x
                       g3
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Language.PureScript.AST.Operators.Precedence>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "_ideValueOpPrecedence")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.Operators.Precedence>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpAssociativity")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R Language.PureScript.AST.Operators.Associativity))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpType")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (GHC.Base.Maybe Language.PureScript.Types.SourceType)))
                          @ x
                          g4
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Language.PureScript.AST.Operators.Associativity>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Language.PureScript.AST.Operators.Associativity>_R) <x>_N)
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe Language.PureScript.Types.SourceType>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpType")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (GHC.Base.Maybe
                                                            Language.PureScript.Types.SourceType)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "_ideValueOpName")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpAlias")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Language.PureScript.Names.Qualified
                                                      (Data.Either.Either
                                                         Language.PureScript.Names.Ident
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName)))))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "_ideValueOpPrecedence")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Language.PureScript.AST.Operators.Precedence)
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "_ideValueOpAssociativity")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     Language.PureScript.AST.Operators.Associativity)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "_ideValueOpType")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (GHC.Base.Maybe
                                                                                         Language.PureScript.Types.SourceType))))>_R) <x>_N) }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fGenericIdeValueOperator_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValueOperator x
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(LS)),1*U(1*U(U,U),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeValueOperator x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeValueOperator[0]) ; (GHC.Generics.N:M1[0]
                                                                                           <*>_N
                                                                                           <GHC.Generics.D>_P
                                                                                           <'GHC.Generics.MetaData
                                                                                              "IdeValueOperator"
                                                                                              "Language.PureScript.Ide.Types"
                                                                                              "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                              'GHC.Types.False>_P
                                                                                           <GHC.Generics.M1
                                                                                              GHC.Generics.C
                                                                                              ('GHC.Generics.MetaCons
                                                                                                 "IdeValueOperator"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'GHC.Types.True)
                                                                                              ((GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     ('GHC.Base.Just
                                                                                                        "_ideValueOpName")
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     (Language.PureScript.Names.OpName
                                                                                                        'Language.PureScript.Names.ValueOpName))
                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_ideValueOpAlias")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                         (Data.Either.Either
                                                                                                                            Language.PureScript.Names.Ident
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.ConstructorName)))))
                                                                                               GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "_ideValueOpPrecedence")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      Language.PureScript.AST.Operators.Precedence)
                                                                                                                 GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                     GHC.Generics.S
                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "_ideValueOpAssociativity")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                     (GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Language.PureScript.AST.Operators.Associativity)
                                                                                                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                      GHC.Generics.S
                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                            "_ideValueOpType")
                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                         GHC.Generics.R
                                                                                                                                                         (GHC.Base.Maybe
                                                                                                                                                            Language.PureScript.Types.SourceType)))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                               <*>_N
                                                                                                                                                                                                               <GHC.Generics.C>_P
                                                                                                                                                                                                               <'GHC.Generics.MetaCons
                                                                                                                                                                                                                  "IdeValueOperator"
                                                                                                                                                                                                                  'GHC.Generics.PrefixI
                                                                                                                                                                                                                  'GHC.Types.True>_P
                                                                                                                                                                                                               <(GHC.Generics.M1
                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                         "_ideValueOpName")
                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                      (Language.PureScript.Names.OpName
                                                                                                                                                                                                                         'Language.PureScript.Names.ValueOpName))
                                                                                                                                                                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                       ('GHC.Base.Just
                                                                                                                                                                                                                                          "_ideValueOpAlias")
                                                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                    (GHC.Generics.K1
                                                                                                                                                                                                                                       GHC.Generics.R
                                                                                                                                                                                                                                       (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                          (Data.Either.Either
                                                                                                                                                                                                                                             Language.PureScript.Names.Ident
                                                                                                                                                                                                                                             (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                'Language.PureScript.Names.ConstructorName)))))
                                                                                                                                                                                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                    GHC.Generics.S
                                                                                                                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                       ('GHC.Base.Just
                                                                                                                                                                                                                                          "_ideValueOpPrecedence")
                                                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                    (GHC.Generics.K1
                                                                                                                                                                                                                                       GHC.Generics.R
                                                                                                                                                                                                                                       Language.PureScript.AST.Operators.Precedence)
                                                                                                                                                                                                                                  GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                                      GHC.Generics.S
                                                                                                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                                                                                            "_ideValueOpAssociativity")
                                                                                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                                                                                                         Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                                                                                    GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                                       GHC.Generics.S
                                                                                                                                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                                                                                             "_ideValueOpType")
                                                                                                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                       (GHC.Generics.K1
                                                                                                                                                                                                                                                                          GHC.Generics.R
                                                                                                                                                                                                                                                                          (GHC.Base.Maybe
                                                                                                                                                                                                                                                                             Language.PureScript.Types.SourceType))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds6 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 Language.PureScript.Ide.Types.IdeValueOperator
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpName")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                     <*>_N
                                                                                     <GHC.Generics.R>_P
                                                                                     <Language.PureScript.Names.OpName
                                                                                        'Language.PureScript.Names.ValueOpName>_R
                                                                                     <x>_P)
                   ds4
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpAlias")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.R>_P
                                                                                                 <Language.PureScript.Names.Qualified
                                                                                                    (Data.Either.Either
                                                                                                       Language.PureScript.Names.Ident
                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                          'Language.PureScript.Names.ConstructorName))>_R
                                                                                                 <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpPrecedence")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Precedence>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                       <*>_N
                                                                                       <GHC.Generics.R>_P
                                                                                       <Language.PureScript.AST.Operators.Precedence>_R
                                                                                       <x>_P)
                   ds7
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpAssociativity")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.AST.Operators.Associativity>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.R>_P
                                                                                          <Language.PureScript.AST.Operators.Associativity>_R
                                                                                          <x>_P)
                   ds8
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueOpType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Types.SourceType)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Types.SourceType>_R
                                                                                   <x>_P) } } } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fGenericIdeValue_$cto ::
    GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValue x
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Ide.Types.IdeValue x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Types.Rep_IdeValue[0]) ; (GHC.Generics.N:M1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.D>_P
                                                                                   <'GHC.Generics.MetaData
                                                                                      "IdeValue"
                                                                                      "Language.PureScript.Ide.Types"
                                                                                      "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                      'GHC.Types.False>_P
                                                                                   <GHC.Generics.M1
                                                                                      GHC.Generics.C
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "IdeValue"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.True)
                                                                                      (GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            ('GHC.Base.Just
                                                                                               "_ideValueIdent")
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.K1
                                                                                            GHC.Generics.R
                                                                                            Language.PureScript.Names.Ident)
                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             ('GHC.Base.Just
                                                                                                                "_ideValueType")
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             Language.PureScript.Types.SourceType))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.C>_P
                                                                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                                                                "IdeValue"
                                                                                                                                                                'GHC.Generics.PrefixI
                                                                                                                                                                'GHC.Types.True>_P
                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                      "_ideValueIdent")
                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                   Language.PureScript.Names.Ident)
                                                                                                                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                       "_ideValueType")
                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                    Language.PureScript.Types.SourceType)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Types.IdeValue
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueIdent")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.R>_P
                                                                          <Language.PureScript.Names.Ident>_R
                                                                          <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "_ideValueType")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           Language.PureScript.Types.SourceType>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Language.PureScript.Types.SourceType>_R
                                                                               <x>_P) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fNFDataAnnotation ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.Annotation
  DFunId
  {- Arity: 1, Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataAnnotation_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.Annotation>_N)) -}
315d007bab1b2fd35e31c2f60967a899
  $fNFDataAnnotation1 ::
    Language.PureScript.Types.Type
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> ()
  {- Unfolding: (Language.PureScript.Types.$fNFDataConstraint_$crnf2
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fNFDataAnnotation2
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <(Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])>_N))) -}
8c0d00326c50a2cb69a42a15d219e26a
  $fNFDataAnnotation2 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     [Language.PureScript.Comments.Comment])
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SS(SS)S(SS))S),1*U(1*U(1*U,1*U(1*H,1*H),1*U(1*H,1*H)),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.AST.SourcePos.SourceSpan ww4 ww5 ww6 ->
                 case ww5 of ww7 { Language.PureScript.AST.SourcePos.SourcePos ww8 ww9 ->
                 case ww8 of ww10 { GHC.Types.I# ipv ->
                 case ww9 of ww11 { GHC.Types.I# ipv1 ->
                 case ww6 of ww12 { Language.PureScript.AST.SourcePos.SourcePos ww13 ww14 ->
                 case ww13 of ww15 { GHC.Types.I# ipv2 ->
                 case ww14 of ww16 { GHC.Types.I# ipv3 ->
                 case Language.PureScript.AST.SourcePos.$fNFDataSourceSpan_go
                        ww4 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataAnnotation_go
                   ww2 } } } } } } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fNFDataAnnotation_$crnf ::
    Language.PureScript.Ide.Types.Annotation -> ()
  {- Arity: 1, Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$crnf ww1 ww2 ww3 ww4 }) -}
b5aed539dc68efbd193df873ba6502ee
  $fNFDataAnnotation_go ::
    [Language.PureScript.Comments.Comment] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
85d67545a4541d73a5afab71bcc6a25d
  $fNFDataAstData ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 2, Strictness: <L,C(H)><S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.PureScript.Ide.Types.$fNFDataAstData_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Language.PureScript.Ide.Types.AstData a>_N)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fNFDataAstData_$crnf ::
    Control.DeepSeq.NFData a =>
    Language.PureScript.Ide.Types.AstData a -> ()
  {- Arity: 2, Strictness: <L,C(H)><S,1*U>,
     Unfolding: (\ @ a
                   ($dNFData :: Control.DeepSeq.NFData a)
                   (eta :: Language.PureScript.Ide.Types.AstData a) ->
                 Data.Map.Internal.$fNFDataMap_$crnf
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fNFDataModuleName_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.Names.ModuleName>_N))
                   (\ (ds :: (Data.Map.Internal.Map
                                Language.PureScript.Ide.Types.IdeNamespaced a,
                              Data.Map.Internal.Map
                                Language.PureScript.Names.Ident
                                Language.PureScript.Types.SourceType)) ->
                    case ds of wild { (,) x y ->
                    case Data.Map.Internal.$fNFDataMap_$crnf
                           @ Language.PureScript.Ide.Types.IdeNamespaced
                           @ a
                           Language.PureScript.Ide.Types.$fNFDataAstData_$crnf1
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Language.PureScript.Ide.Types.IdeNamespaced>_N))
                           $dNFData
                           x of wild1 { () ->
                    Data.Map.Internal.$fNFDataMap_$crnf
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn)
                      Language.PureScript.Names.$fNFDataIdent_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Language.PureScript.Names.Ident>_N))
                      Language.PureScript.Ide.Types.$fNFDataAnnotation1
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Language.PureScript.Types.Type
                                   (Language.PureScript.AST.SourcePos.SourceSpan,
                                    [Language.PureScript.Comments.Comment])>_N))
                      y } })
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <(Data.Map.Internal.Map
                                 Language.PureScript.Ide.Types.IdeNamespaced a,
                               Data.Map.Internal.Map
                                 Language.PureScript.Names.Ident
                                 Language.PureScript.Types.SourceType)>_N))
                   eta `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
a433d742d266c5a84cd109a4a3bf8314
  $fNFDataAstData_$crnf1 ::
    Language.PureScript.Ide.Types.IdeNamespaced -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeNamespaced g1 g2 ->
                 case g1 of wild1 { DEFAULT ->
                 Data.Text.$fNFDataText_$crnf g2 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fNFDataIdeDataConstructor ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- Arity: 1, Strictness: <S(SSL),1*U(1*H,1*H,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDataConstructor>_N)) -}
0c91b1320f07da0ab07b77b49d64d462
  $fNFDataIdeDataConstructor_$crnf ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> ()
  {- Arity: 1, Strictness: <S(SSL),1*U(1*H,1*H,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDataConstructor g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case g2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds2 { Data.Text.Internal.Text ipv4 ipv5 ipv6 ->
                 Language.PureScript.Ide.Types.$fNFDataAnnotation1 g3 } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fNFDataIdeDeclaration ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDeclaration>_N)) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fNFDataIdeDeclarationAnn ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- Arity: 1,
     Strictness: <S(S(SSSS)S),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclarationAnn_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N)) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fNFDataIdeDeclarationAnn_$crnf ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> ()
  {- Arity: 1,
     Strictness: <S(S(SSSS)S),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn g1 g2 ->
                 case Language.PureScript.Ide.Types.$fNFDataAnnotation_$crnf
                        g1 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf
                   g2 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fNFDataIdeDeclaration_$crnf ::
    Language.PureScript.Ide.Types.IdeDeclaration -> ()
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf6 g1
                   Language.PureScript.Ide.Types.IdeDeclType g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf5 g1
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf4 g1
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor_$crnf
                        g1
                   Language.PureScript.Ide.Types.IdeDeclTypeClass g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf3 g1
                   Language.PureScript.Ide.Types.IdeDeclValueOperator g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf2 g1
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator g1
                   -> Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf1 g1
                   Language.PureScript.Ide.Types.IdeDeclKind g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P) }) -}
942db7ca1b475d96338060f9a58d09df
  $fNFDataIdeDeclaration_$crnf1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*H),1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeOperator ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                 case ww8
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of nt1 { Data.Text.Internal.Text ipv3 ipv4 ipv5 ->
                 let {
                   $j :: () <join 0>
                   = case ww3 of ds1 { DEFAULT ->
                     case ww4 of wild { DEFAULT ->
                     case ww5 of wild1 {
                       GHC.Base.Nothing -> GHC.Tuple.()
                       GHC.Base.Just x
                       -> Language.PureScript.Kinds.$fNFDataKind_$crnf
                            @ (Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])
                            Language.PureScript.Ide.Types.$fNFDataAnnotation2
                              `cast`
                            (Sym (Control.DeepSeq.N:NFData[0]
                                      <(Language.PureScript.AST.SourcePos.SourceSpan,
                                        [Language.PureScript.Comments.Comment])>_N))
                            x } } }
                 } in
                 case ww7 of wild {
                   GHC.Base.Nothing -> $j
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                      $j } } } } } }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fNFDataIdeDeclaration_$crnf2 ::
    Language.PureScript.Ide.Types.IdeValueOperator -> ()
  {- Arity: 1,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValueOperator ww1 ww2 ww3 ww4 ww5 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.ValueOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                 Language.PureScript.Ide.Types.$w$crnf1
                   nt
                     `cast`
                   (Sym (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.ValueOpName>_P))
                   ww7
                   ww8
                   ww3
                   ww4
                   ww5 } } }) -}
60c599d0289b3fc90de185766f47b756
  $fNFDataIdeDeclaration_$crnf3 ::
    Language.PureScript.Ide.Types.IdeTypeClass -> ()
  {- Arity: 1, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeTypeClass g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Kinds.$fNFDataKind_$crnf
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Ide.Types.$fNFDataAnnotation2
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <(Language.PureScript.AST.SourcePos.SourceSpan,
                                    [Language.PureScript.Comments.Comment])>_N))
                        g2 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_go
                   g3 } } }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fNFDataIdeDeclaration_$crnf4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> ()
  {- Arity: 1, Strictness: <S(SLS),1*U(1*H,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeTypeSynonym g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Ide.Types.$fNFDataAnnotation1
                        g2 of wild1 { () ->
                 Language.PureScript.Kinds.$fNFDataKind_$crnf
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fNFDataAnnotation2
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <(Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])>_N))
                   g3 } } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fNFDataIdeDeclaration_$crnf5 ::
    Language.PureScript.Ide.Types.IdeType -> ()
  {- Arity: 1, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType) ->
                 case x of wild { Language.PureScript.Ide.Types.IdeType g1 g2 g3 ->
                 case g1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Kinds.$fNFDataKind_$crnf
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Ide.Types.$fNFDataAnnotation2
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <(Language.PureScript.AST.SourcePos.SourceSpan,
                                    [Language.PureScript.Comments.Comment])>_N))
                        g2 of wild1 { () ->
                 Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_go1
                   g3 } } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fNFDataIdeDeclaration_$crnf6 ::
    Language.PureScript.Ide.Types.IdeValue -> ()
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$crnf2 ww1 ww2 }) -}
60c599d0289b3fc90de185766f47b756
  $fNFDataIdeDeclaration_go ::
    [Language.PureScript.Ide.Types.IdeInstance] -> ()
  {- Arity: 1, Strictness: <S,1*U> -}
cf32061a56ee1aac02d0268ad1b2d74f
  $fNFDataIdeDeclaration_go1 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName,
      Language.PureScript.Types.SourceType)]
    -> ()
  {- Arity: 1, Strictness: <S,1*U> -}
60c599d0289b3fc90de185766f47b756
  $fNFDataIdeInstance ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- Arity: 1, Strictness: <S(SSSS),1*U(1*U,1*U,1*U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeInstance_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeInstance>_N)) -}
a5b2f8fa2963c31e4c9f450682bbb2ad
  $fNFDataIdeInstance1 ::
    Language.PureScript.Types.Constraint
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> ()
  {- Unfolding: (Language.PureScript.Types.$fNFDataConstraint_$crnf
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fNFDataAnnotation2
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <(Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])>_N))) -}
60c599d0289b3fc90de185766f47b756
  $fNFDataIdeInstance_$crnf ::
    Language.PureScript.Ide.Types.IdeInstance -> ()
  {- Arity: 1, Strictness: <S(SSSS),1*U(1*U,1*U,1*U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$crnf3 ww1 ww2 ww3 ww4 }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fNFDataIdeNamespace ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeNamespace_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeNamespace>_N)) -}
a433d742d266c5a84cd109a4a3bf8314
  $fNFDataIdeNamespace_$crnf ::
    Language.PureScript.Ide.Types.IdeNamespace -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fNFDataIdeNamespaced ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataAstData_$crnf1
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeNamespaced>_N)) -}
862d0466a921badc471ac4eb799b1c5c
  $fNFDataIdeType ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeType
  DFunId
  {- Arity: 1, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf5
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeType>_N)) -}
60c599d0289b3fc90de185766f47b756
  $fNFDataIdeTypeClass ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- Arity: 1, Strictness: <S(SSS),1*U(1*H,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf3
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeClass>_N)) -}
942db7ca1b475d96338060f9a58d09df
  $fNFDataIdeTypeOperator ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*H),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf1
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeOperator>_N)) -}
434cac5be7a927bb03b5196d1252e0b7
  $fNFDataIdeTypeSynonym ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- Arity: 1, Strictness: <S(SLS),1*U(1*H,U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf4
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeTypeSynonym>_N)) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fNFDataIdeValue ::
    Control.DeepSeq.NFData Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf6
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeValue>_N)) -}
cf3c14901b432d2873d0b1d8733734a7
  $fNFDataIdeValueOperator ::
    Control.DeepSeq.NFData
      Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- Arity: 1,
     Strictness: <S(SS(SS)SSS),1*U(1*H,1*U(1*U,1*U),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Ide.Types.$fNFDataIdeDeclaration_$crnf2
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Ide.Types.IdeValueOperator>_N)) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.Annotation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fEqAnnotation
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$ccompare
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c<=
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c>
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$c>=
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$cmax
                  Language.PureScript.Ide.Types.$fOrdAnnotation_$cmin -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$c< ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c<
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$c<= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$c> ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 Language.PureScript.Ide.Types.$fOrdAnnotation_$c< b a) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$c>= ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Annotation)
                   (b :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$ccompare ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.Annotation)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.Annotation ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$cmax ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdAnnotation_$cmin ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.Annotation
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation)
                   (y :: Language.PureScript.Ide.Types.Annotation) ->
                 case Language.PureScript.Ide.Types.$fOrdAnnotation_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fOrdAstData ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fOrdAstData_$cp1Ord @ a v)
                  (Language.PureScript.Ide.Types.$fOrdAstData7 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData6 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData5 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData4 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData3 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.Ide.Types.$fOrdAstData2 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R))
                  (Language.PureScript.Ide.Types.$fOrdAstData1 @ a v)
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                   ->_R Sym (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)) -}
72510da8911cebfe57de1d766b198cc9
  $fOrdAstData1 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$cmin
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
484ecbbdfded57c0824de481fb28ff15
  $fOrdAstData2 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$cmax
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
394be52ae1eac55c09898009a8b060df
  $fOrdAstData3 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c>=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
ccd672de0ddb34be85e7cc524bef2583
  $fOrdAstData4 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c>
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
df4d0c12ed3dd32a6068aa4b68143705
  $fOrdAstData5 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c<=
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
1d1a38f48eb15eb917d48ae209699fd6
  $fOrdAstData6 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Bool
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$c<
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
e081ca3049c7b8964093eb3cfbe6c269
  $fOrdAstData7 ::
    GHC.Classes.Ord a =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.Ide.Types.DefinitionSites a,
       Language.PureScript.Ide.Types.TypeAnnotations)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Language.PureScript.Ide.Types.DefinitionSites a,
          Language.PureScript.Ide.Types.TypeAnnotations)
    -> GHC.Types.Ordering
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Internal.$fOrdMap_$ccompare
                   @ Language.PureScript.Names.ModuleName
                   @ (Language.PureScript.Ide.Types.DefinitionSites a,
                      Language.PureScript.Ide.Types.TypeAnnotations)
                   Language.PureScript.Names.$fOrdModuleName
                   (GHC.Classes.$fOrd(,)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced a)
                      @ (Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           Language.PureScript.Types.SourceType)
                      (Data.Map.Internal.$fOrdMap
                         @ Language.PureScript.Ide.Types.IdeNamespaced
                         @ a
                         Language.PureScript.Ide.Types.$fOrdIdeNamespaced
                         $dOrd)
                      Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fOrdAstData_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Types.AstData a)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Ide.Types.$fEqAstData
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
49a9bdefb8b65886b1fb1b6fbd434786
  $fOrdAstData_$s$fOrdMap ::
    GHC.Classes.Ord
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         (Language.PureScript.Types.Type
            Language.PureScript.AST.SourcePos.SourceAnn))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn))
                  Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap
                  (Data.Map.Internal.$fOrdMap_$ccompare
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$c<
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$c<=
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$c>
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$c>=
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$cmax
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (Data.Map.Internal.$fOrdMap_$cmin
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fOrdIdent
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.Completion
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fEqCompletion
                  Language.PureScript.Ide.Types.$fOrdCompletion_$ccompare
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c<=
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c>
                  Language.PureScript.Ide.Types.$fOrdCompletion_$c>=
                  Language.PureScript.Ide.Types.$fOrdCompletion_$cmax
                  Language.PureScript.Ide.Types.$fOrdCompletion_$cmin -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$c< ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$c<= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$c> ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 Language.PureScript.Ide.Types.$fOrdCompletion_$c< b a) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$c>= ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.Completion)
                   (b :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$ccompare ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)><S(S(SSS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$cmax ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fOrdCompletion_$cmin ::
    Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)><S(S(SSS)LLLLLL),U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion)
                   (y :: Language.PureScript.Ide.Types.Completion) ->
                 case Language.PureScript.Ide.Types.$fOrdCompletion_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fEqIdeDataConstructor
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$cmin -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$c< ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$c<= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$c> ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c< b a) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$c>= ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (b :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$ccompare ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDataConstructor ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare2
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$cmax ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)><S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDataConstructor_$cmin ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)><S(S(SSS)LL),1*U(U(U,U,U),U(U,U,U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor)
                   (y :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$cmin -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$cmin -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$c< ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<4
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$c<= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<=1
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$c> ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (b :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn_$c< b a) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$c>= ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c>=1
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$ccompare ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)><S(S(SLLL)L),1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare8
                   ww4
                   ww5
                   ww6
                   ww7
                   ww2
                   ww12
                   ww13
                   ww14
                   ww15
                   ww10 } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$cmax ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(U(U,U,U,U),U)><S(S(SLLL)L),1*U(U(U,U,U,U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww12
                        ww13
                        ww14
                        ww15
                        ww4
                        ww5
                        ww6
                        ww7 of wild {
                   GHC.Types.LT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                        ww2
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww10
                             ww2 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                             ww10
                        GHC.Types.LT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                             ww2 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                        ww10 } } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fOrdIdeDeclarationAnn_$cmin ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLL)L),1*U(U(U,U,U,U),U)><S(S(SLLL)L),1*U(U(U,U,U,U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww9 ww10 ->
                 case ww9 of ww11 { Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15 ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww12
                        ww13
                        ww14
                        ww15
                        ww4
                        ww5
                        ww6
                        ww7 of wild {
                   GHC.Types.LT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                        ww10
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww10
                             ww2 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                             ww2
                        GHC.Types.LT
                        -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                             (Language.PureScript.Ide.Types.Annotation ww12 ww13 ww14 ww15)
                             ww10 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeDeclarationAnn
                        (Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7)
                        ww2 } } } } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$c< ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$c<= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$c> ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$c>= ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$ccompare ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (b :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValue b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare6
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclType a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValue ds -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclType b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare5
                             a1
                             b1 }
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare4
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDataConstructor_$ccompare
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclTypeClass a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeClass ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare3
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclValueOperator a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclValueOperator ds
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare2
                             a1
                             ds
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                        -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator b1
                        -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare1
                             a1
                             b1
                        Language.PureScript.Ide.Types.IdeDeclKind ds -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeDeclKind a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeDeclKind b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeDeclaration_$ccompare1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case a of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case a2 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case b2 of ww14 { Language.PureScript.Names.Qualified ww15 ww16 ->
                      let {
                        $j :: GHC.Types.Ordering <join 0>
                        = case GHC.Integer.Type.compareInteger a3 b3 of wild3 {
                            GHC.Types.LT -> GHC.Types.LT
                            GHC.Types.EQ
                            -> let {
                                 $j1 :: GHC.Types.Ordering <join 0>
                                 = case a5 of wild4 {
                                     GHC.Base.Nothing
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.EQ
                                          GHC.Base.Just ipv -> GHC.Types.LT }
                                     GHC.Base.Just a7
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.GT
                                          GHC.Base.Just b7
                                          -> Language.PureScript.Kinds.compareKind
                                               @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                  [Language.PureScript.Comments.Comment])
                                               @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                  [Language.PureScript.Comments.Comment])
                                               a7
                                               b7 } }
                               } in
                               case a4 of wild4 {
                                 Language.PureScript.AST.Operators.Infixl
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> $j1
                                      Language.PureScript.AST.Operators.Infixr -> GHC.Types.LT
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.LT }
                                 Language.PureScript.AST.Operators.Infixr
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> GHC.Types.GT
                                      Language.PureScript.AST.Operators.Infixr -> $j1
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.LT }
                                 Language.PureScript.AST.Operators.Infix
                                 -> case b4 of wild5 {
                                      DEFAULT -> GHC.Types.GT
                                      Language.PureScript.AST.Operators.Infix -> $j1 } }
                            GHC.Types.GT -> GHC.Types.GT }
                      } in
                      case ww12 of wild3 {
                        GHC.Base.Nothing
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing
                             -> case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                case Data.Text.$w$ccompare ww18 ww19 ww20 ww22 ww23 ww24 of wild5 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ -> $j
                                  GHC.Types.GT -> GHC.Types.GT } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a7
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b7
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b7
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                     case ww16
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                     case Data.Text.$w$ccompare
                                            ww18
                                            ww19
                                            ww20
                                            ww22
                                            ww23
                                            ww24 of wild6 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.GT } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeDeclaration_$ccompare2 ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeDeclaration_$ccompare3 ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare3
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeDeclaration_$ccompare4 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeDeclaration_$ccompare5 ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$ccompare6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeDeclaration_$ccompare6 ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$ccompare7 ww1 ww2 ww4 ww5 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$cmax ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fOrdIdeDeclaration_$cmin ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
21042cc52d67957601d6403466bbcfcf
  $fOrdIdeDeclaration_$s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName,
       Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName,
                     Language.PureScript.Types.Type
                       Language.PureScript.AST.SourcePos.SourceAnn)
                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (\ (a1 :: (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type
                               Language.PureScript.AST.SourcePos.SourceAnn))
                     (b1 :: (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.Type
                               Language.PureScript.AST.SourcePos.SourceAnn)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])))
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Types.$fOrdType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fEqIdeInstance
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeInstance_$cmin -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$c< ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$c<3
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$c<= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$c> ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 Language.PureScript.Ide.Types.$fOrdIdeInstance_$c< b a) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$c>= ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeInstance)
                   (b :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$ccompare ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeInstance)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Language.PureScript.Ide.Types.IdeInstance ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$ccompare4
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$cmax ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeInstance_$cmin ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U,U,U,U)><S(SLLL),1*U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance)
                   (y :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeInstance_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fEqIdeNamespace
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeNamespace_$cmin -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$c< ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSType
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.PureScript.Ide.Types.IdeNSValue -> $j 0#
                   Language.PureScript.Ide.Types.IdeNSType -> $j 1#
                   Language.PureScript.Ide.Types.IdeNSKind -> $j 2# }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$c> ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c< b a) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSType
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue -> $j 0#
                   Language.PureScript.Ide.Types.IdeNSType -> $j 1#
                   Language.PureScript.Ide.Types.IdeNSKind -> $j 2# }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeNamespace)
                   (b :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case a of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.EQ
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.EQ
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.EQ } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$cmax ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespace_$cmin ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace)
                   (y :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fEqIdeNamespaced
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$ccompare
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$cmin -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$c< ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<1 ww1 ww2 ww4 ww5 } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$c<= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<= ww1 ww2 ww4 ww5 } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$c> ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (b :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 Language.PureScript.Ide.Types.$fOrdIdeNamespaced_$c< b a) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$c>= ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c>= ww1 ww2 ww4 ww5 } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$ccompare1 ww1 ww2 ww4 ww5 } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$cmax ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10 } } } } } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fOrdIdeNamespaced_$cmin ::
    Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
    -> Language.PureScript.Ide.Types.IdeNamespaced
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeNamespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww2
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeNamespaced wild1 ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Types.IdeNamespaced
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6 } } } } } } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fEqIdeType
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare5
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeType_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeType_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeType_$cmin -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fEqIdeTypeClass
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare3
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$cmin -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$c< ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeClass ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<6
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$c> ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c< b a) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (b :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
60c599d0289b3fc90de185766f47b756
  $fOrdIdeTypeClass_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass)
                   (y :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeClass_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fEqIdeTypeOperator
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare1
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$cmin -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$c< ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case a of wild { Language.PureScript.Ide.Types.IdeTypeOperator a1 a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator b1 b2 b3 b4 b5 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case a2 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case b2 of ww14 { Language.PureScript.Names.Qualified ww15 ww16 ->
                      let {
                        $j :: GHC.Types.Bool <join 0>
                        = case GHC.Integer.Type.compareInteger a3 b3 of wild3 {
                            GHC.Types.LT -> GHC.Types.True
                            GHC.Types.EQ
                            -> let {
                                 $j1 :: GHC.Types.Bool <join 0>
                                 = case a5 of wild4 {
                                     GHC.Base.Nothing
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just ipv -> GHC.Types.True }
                                     GHC.Base.Just a7
                                     -> case b5 of wild5 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b7
                                          -> Language.PureScript.Kinds.$fOrdKind_$c<
                                               @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                  [Language.PureScript.Comments.Comment])
                                               a7
                                               b7 } }
                               } in
                               case a4 of wild4 {
                                 Language.PureScript.AST.Operators.Infixl
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> $j1
                                      Language.PureScript.AST.Operators.Infixr -> GHC.Types.True
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.True }
                                 Language.PureScript.AST.Operators.Infixr
                                 -> case b4 of wild5 {
                                      Language.PureScript.AST.Operators.Infixl -> GHC.Types.False
                                      Language.PureScript.AST.Operators.Infixr -> $j1
                                      Language.PureScript.AST.Operators.Infix -> GHC.Types.True }
                                 Language.PureScript.AST.Operators.Infix
                                 -> case b4 of wild5 {
                                      DEFAULT -> GHC.Types.False
                                      Language.PureScript.AST.Operators.Infix -> $j1 } }
                            GHC.Types.GT -> GHC.Types.False }
                      } in
                      case ww12 of wild3 {
                        GHC.Base.Nothing
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing
                             -> case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                case Data.Text.$w$ccompare ww18 ww19 ww20 ww22 ww23 ww24 of wild5 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ -> $j
                                  GHC.Types.GT -> GHC.Types.False } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a7
                        -> case ww15 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b7
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a7 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b7
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww17 { Data.Text.Internal.Text ww18 ww19 ww20 ->
                                     case ww16
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww21 { Data.Text.Internal.Text ww22 ww23 ww24 ->
                                     case Data.Text.$w$ccompare
                                            ww18
                                            ww19
                                            ww20
                                            ww22
                                            ww23
                                            ww24 of wild6 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> $j
                                       GHC.Types.GT -> GHC.Types.False } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$c> ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c< b a) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U(U,U,U)),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (b :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
942db7ca1b475d96338060f9a58d09df
  $fOrdIdeTypeOperator_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U(U,U,U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator)
                   (y :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fEqIdeTypeSynonym
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare4
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$cmin -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$c< ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeTypeSynonym ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<7
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$c<= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$c> ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c< b a) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$c>= ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (b :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$cmax ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
434cac5be7a927bb03b5196d1252e0b7
  $fOrdIdeTypeSynonym_$cmin ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (y :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$c< ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeType)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { Language.PureScript.Ide.Types.IdeType ww9 ww10 ww11 ->
                 case ww9
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 Language.PureScript.Ide.Types.$w$c<5
                   ww5
                   ww6
                   ww7
                   ww2
                   ww3
                   ww13
                   ww14
                   ww15
                   ww10
                   ww11 } } } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$c<= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$c> ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 Language.PureScript.Ide.Types.$fOrdIdeType_$c< b a) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$c>= ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)><S(S(SSS)LL),1*U(1*U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeType)
                   (b :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$cmax ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
862d0466a921badc471ac4eb799b1c5c
  $fOrdIdeType_$cmin ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Ide.Types.IdeType
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType)
                   (y :: Language.PureScript.Ide.Types.IdeType) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeType_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fEqIdeValue
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare6
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeValue_$cmin -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator ::
    GHC.Classes.Ord Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fEqIdeValueOperator
                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare2
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<=
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c>
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c>=
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$cmax
                  Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$cmin -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$c< ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)> -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$c<= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$c> ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c< b a) -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$c>= ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)><S(S(SSS)LLLL),1*U(1*U(U,U,U),1*U(1*U,1*U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (b :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$cmax ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
cf3c14901b432d2873d0b1d8733734a7
  $fOrdIdeValueOperator_$cmin ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)><S(S(SSS)LLLL),U(U(U,U,U),U(U,U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator)
                   (y :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case Language.PureScript.Ide.Types.$fOrdIdeValueOperator_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$c< ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<8 ww1 ww2 ww4 ww5 } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$c<= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c<=2 ww1 ww2 ww4 ww5 } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$c> ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Ide.Types.IdeValue)
                   (b :: Language.PureScript.Ide.Types.IdeValue) ->
                 Language.PureScript.Ide.Types.$fOrdIdeValue_$c< b a) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$c>= ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$c>=2 ww1 ww2 ww4 ww5 } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$cmax ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww5
                             ww2 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5
                        GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeValue ww4 ww5 } } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fOrdIdeValue_$cmin ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Ide.Types.IdeValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Types.IdeValue ww4 ww5 ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww4
                        ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww5
                             ww2 of wild1 {
                        DEFAULT -> Language.PureScript.Ide.Types.IdeValue ww1 ww2
                        GHC.Types.LT -> Language.PureScript.Ide.Types.IdeValue ww4 ww5 }
                   GHC.Types.GT
                   -> Language.PureScript.Ide.Types.IdeValue ww1 ww2 } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowAnnotation ::
    GHC.Show.Show Language.PureScript.Ide.Types.Annotation
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Annotation
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshow
                  Language.PureScript.Ide.Types.$fShowAnnotation_$cshowList -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowAnnotation1 ::
    Language.PureScript.Ide.Types.Annotation -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { Language.PureScript.Ide.Types.Annotation ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowAnnotation_$cshow ::
    Language.PureScript.Ide.Types.Annotation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Annotation) ->
                 Language.PureScript.Ide.Types.$fShowAnnotation_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowAnnotation_$cshowList ::
    [Language.PureScript.Ide.Types.Annotation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Annotation])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Annotation
                   Language.PureScript.Ide.Types.$fShowAnnotation1
                   ls
                   s) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowAnnotation_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Annotation -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Annotation) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.Annotation ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
85d67545a4541d73a5afab71bcc6a25d
  $fShowAstData ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Types.AstData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Types.AstData a)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec @ a v)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshow @ a v)
                  (Language.PureScript.Ide.Types.$fShowAstData_$cshowList @ a v) -}
e5ea12f2f14ce6852a89dabd0e521068
  $fShowAstData1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowAstData2) -}
a884e790e2a606386f1837003c7b01df
  $fShowAstData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AstData "#) -}
a338a52ab8cb714ec41893c312ba7135
  $fShowAstData3 ::
    GHC.Show.Show
      (Language.PureScript.Ide.Types.DefinitionSites
         Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Ide.Types.TypeAnnotations)
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Ide.Types.IdeNamespaced
                        Language.PureScript.AST.SourcePos.SourceSpan)
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Names.Ident
                        Language.PureScript.Types.SourceType)
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap) -}
85d67545a4541d73a5afab71bcc6a25d
  $fShowAstData_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Types.AstData a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Types.AstData a) ->
                 Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
85d67545a4541d73a5afab71bcc6a25d
  $fShowAstData_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Types.AstData a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Types.AstData a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Types.AstData a)
                   (Language.PureScript.Ide.Types.$fShowAstData_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Types.$fFoldableAstData7)
                   ls
                   s) -}
85d67545a4541d73a5afab71bcc6a25d
  $fShowAstData_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.AstData a -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) ->
                 let {
                   $dShow1 :: GHC.Show.Show
                                (Data.Map.Internal.Map
                                   Language.PureScript.Ide.Types.IdeNamespaced a)
                   = Data.Map.Internal.$fShowMap
                       @ Language.PureScript.Ide.Types.IdeNamespaced
                       @ a
                       Language.PureScript.Ide.Types.$fShowIdeNamespaced
                       $dShow
                 } in
                 let {
                   $dShow2 :: GHC.Show.Show
                                (Language.PureScript.Ide.Types.DefinitionSites a,
                                 Language.PureScript.Ide.Types.TypeAnnotations)
                   = GHC.Show.$fShow(,)
                       @ (Data.Map.Internal.Map
                            Language.PureScript.Ide.Types.IdeNamespaced a)
                       @ (Data.Map.Internal.Map
                            Language.PureScript.Names.Ident
                            Language.PureScript.Types.SourceType)
                       $dShow1
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
                 } in
                 \ (a1 :: GHC.Types.Int)
                   (ds :: Language.PureScript.Ide.Types.AstData a) ->
                 case a1 of wild { GHC.Types.I# x ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.Ide.Types.DefinitionSites a,
                          Language.PureScript.Ide.Types.TypeAnnotations)
                       Language.PureScript.Names.$fShowModuleName
                       $dShow2
                       11#
                       ds `cast` (Language.PureScript.Ide.Types.N:AstData[0] <a>_R)
                 } in
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowAstData1
                        (g x1)
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Types.$fShowAstData1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }) -}
56a5bea1c1c6c8460ba9b824bf402925
  $fShowAstData_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
c911633ff609045ebb9a0adcf2086318
  $fShowAstData_$s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         (Language.PureScript.Types.Type
            Language.PureScript.AST.SourcePos.SourceAnn))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn))
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType)
                  (\ (x :: Data.Map.Internal.Map
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Types.Type
                                Language.PureScript.AST.SourcePos.SourceAnn)) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Types.Type
                          Language.PureScript.AST.SourcePos.SourceAnn)
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Types.Type
                                  Language.PureScript.AST.SourcePos.SourceAnn)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn))
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn)
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
f047accab75ba3e45fca9df2f5596565
  $fShowAstData_$s$fShowMap1 ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced
         Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       Language.PureScript.Ide.Types.IdeNamespaced
                       Language.PureScript.AST.SourcePos.SourceSpan)
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Ide.Types.IdeNamespaced
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Ide.Types.$fShowIdeNamespaced
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan)
                  (\ (x :: Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.AST.SourcePos.SourceSpan) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ Language.PureScript.Ide.Types.IdeNamespaced
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Ide.Types.$fShowIdeNamespaced
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               Language.PureScript.Ide.Types.IdeNamespaced
                               Language.PureScript.AST.SourcePos.SourceSpan])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          Language.PureScript.Ide.Types.IdeNamespaced
                          Language.PureScript.AST.SourcePos.SourceSpan)
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ Language.PureScript.Ide.Types.IdeNamespaced
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
a15a6fb23035f53e740fa082490fb790
  $fShowAstData_$s$fShowType ::
    GHC.Show.Show
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Type
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,))
                  (\ (x :: Language.PureScript.Types.Type
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                     Language.PureScript.Types.$fFoldableConstraint4
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Types.Type
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Type
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Types.$fShowType_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                        Language.PureScript.Types.$fFoldableConstraint4)
                     ls
                     s) -}
52bb23aef7041385c7dceb4b9384da72
  $fShowAstData_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fShowCompletion ::
    GHC.Show.Show Language.PureScript.Ide.Types.Completion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshow
                  Language.PureScript.Ide.Types.$fShowCompletion_$cshowList -}
4b4d2eb10040d397c113a23d1ee3051f
  $fShowCompletion1 ::
    Language.PureScript.Ide.Types.Completion -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Completion) ->
                 case w of ww { Language.PureScript.Ide.Types.Completion ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fShowCompletion_$cshow ::
    Language.PureScript.Ide.Types.Completion -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion) ->
                 Language.PureScript.Ide.Types.$fShowCompletion_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fShowCompletion_$cshowList ::
    [Language.PureScript.Ide.Types.Completion] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Completion])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Types.$fShowCompletion1
                   ls
                   s) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fShowCompletion_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Completion -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),U(U,U,U),U(U,U,U),1*U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Completion) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.Completion ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDataConstructor ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDataConstructor
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDataConstructor
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshowList -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDataConstructor1 ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U(U,U,U),1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDataConstructor ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec3 0# ww1 ww2 ww3 }) -}
64853cd28aedb89e762d5ae32990a9ea
  $fShowIdeDataConstructor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
70cbaefb4977d99a32e7c5ff970c35ef
  $fShowIdeDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorType = "#) -}
fd25e2698ac0a4a51eb3441dd53e2b9c
  $fShowIdeDataConstructor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorTypeName = "#) -}
30fb65083f119d831bcb1024bee5e0b7
  $fShowIdeDataConstructor5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideDtorName = "#) -}
a3cea1c445f960a7ce7c6d52a66574e7
  $fShowIdeDataConstructor6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDataConstructor {"#) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDataConstructor_$cshow ::
    Language.PureScript.Ide.Types.IdeDataConstructor -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),U(U,U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 Language.PureScript.Ide.Types.$fShowIdeDataConstructor_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDataConstructor_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDataConstructor]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDataConstructor])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor1
                   ls
                   s) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDataConstructor_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDataConstructor
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeDataConstructor ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDeclaration ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDeclaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclaration
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDeclaration_$cshowList -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDeclaration1 ::
    Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec4 0# w) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowIdeDeclarationAnn ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeDeclarationAnn
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn_$cshowList -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowIdeDeclarationAnn1 ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec5 0# ww1 ww2 }) -}
5ca95e3b3327736e228bd4ab234c65db
  $fShowIdeDeclarationAnn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_idaDeclaration = "#) -}
18b780d8500f8815341015b56603fc84
  $fShowIdeDeclarationAnn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_idaAnnotation = "#) -}
8dd4fbec9341b671c82fb05303f02e7e
  $fShowIdeDeclarationAnn4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclarationAnn {"#) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowIdeDeclarationAnn_$cshow ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeDeclarationAnn ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow ww1 ww2 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowIdeDeclarationAnn_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDeclarationAnn] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn1
                   ls
                   s) -}
b02d1e3d0d65a3bc0459005430392eb1
  $fShowIdeDeclarationAnn_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,1*U,1*U,1*U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec5 ww1 ww3 ww4 } }) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDeclaration_$cshow ::
    Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDeclaration_$cshowList ::
    [Language.PureScript.Ide.Types.IdeDeclaration] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeDeclaration])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeDeclaration
                   Language.PureScript.Ide.Types.$fShowIdeDeclaration1
                   ls
                   s) -}
0c91b1320f07da0ab07b77b49d64d462
  $fShowIdeDeclaration_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec4 ww1 w1 }) -}
2923622c53c0f0fcf77bbfd3720beec1
  $fShowIdeFileState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeFileState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeFileState
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowList -}
2923622c53c0f0fcf77bbfd3720beec1
  $fShowIdeFileState1 ::
    Language.PureScript.Ide.Types.IdeFileState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeFileState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec6 0# ww1 ww2 }) -}
e175d8ca2b254631ecab9e9961a93b6e
  $fShowIdeFileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fsModules = "#) -}
5d903ff33e204d4df11a456964479a37
  $fShowIdeFileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fsExterns = "#) -}
e0d4899d39a2d76bed9febff9c6bad47
  $fShowIdeFileState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeFileState {"#) -}
2923622c53c0f0fcf77bbfd3720beec1
  $fShowIdeFileState_$cshow ::
    Language.PureScript.Ide.Types.IdeFileState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeFileState) ->
                 Language.PureScript.Ide.Types.$fShowIdeFileState_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2923622c53c0f0fcf77bbfd3720beec1
  $fShowIdeFileState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeFileState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeFileState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeFileState
                   Language.PureScript.Ide.Types.$fShowIdeFileState1
                   ls
                   s) -}
2923622c53c0f0fcf77bbfd3720beec1
  $fShowIdeFileState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeFileState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeFileState ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec6 ww1 ww3 ww4 } }) -}
f4c33ff2d4d6ef0f6d4765174cd63c39
  $fShowIdeFileState_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     Language.PureScript.AST.Declarations.$fShowModule
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: (Language.PureScript.AST.Declarations.Module,
                            [GHC.Types.Char])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     Language.PureScript.AST.Declarations.$fShowModule
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.Declarations.Module,
                              [GHC.Types.Char])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.Declarations.Module, [GHC.Types.Char])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.Declarations.Module
                        @ [GHC.Types.Char]
                        Language.PureScript.AST.Declarations.$fShowModule
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeInstance ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeInstance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeInstance
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowList -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeInstance1 ::
    Language.PureScript.Ide.Types.IdeInstance -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeInstance ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec7
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
525b7cda6ea63478e14b6f59584855f9
  $fShowIdeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceConstraints = "#) -}
6b51d92313cb8d2f01cd829720010ef2
  $fShowIdeInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceTypes = "#) -}
29c13954180b3d1c0d2108fd139dfa30
  $fShowIdeInstance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceName = "#) -}
783e8d63b2c99ff8181048532fae9add
  $fShowIdeInstance5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideInstanceModule = "#) -}
464067e41865d6fe89b5ec17f3cd8b50
  $fShowIdeInstance6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeInstance {"#) -}
a25d8f67cc0ac26b8e459af4d10a2115
  $fShowIdeInstance7 ::
    GHC.Show.Show [Language.PureScript.Types.SourceConstraint]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Types.Constraint
                        Language.PureScript.AST.SourcePos.SourceAnn)
                   Language.PureScript.Ide.Types.$fShowIdeInstance_$s$fShowConstraint) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeInstance_$cshow ::
    Language.PureScript.Ide.Types.IdeInstance -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeInstance) ->
                 Language.PureScript.Ide.Types.$fShowIdeInstance_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeInstance_$cshowList ::
    [Language.PureScript.Ide.Types.IdeInstance] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeInstance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeInstance
                   Language.PureScript.Ide.Types.$fShowIdeInstance1
                   ls
                   s) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeInstance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeInstance -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeInstance ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec7
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
d8c9ea7730682a045c5ab69f3330ca58
  $fShowIdeInstance_$s$fShowConstraint ::
    GHC.Show.Show
      (Language.PureScript.Types.Constraint
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Constraint
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,))
                  (\ (x :: Language.PureScript.Types.Constraint
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                     Language.PureScript.Types.$fFoldableConstraint4
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Types.Constraint
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Constraint
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                        Language.PureScript.Types.$fFoldableConstraint4)
                     ls
                     s) -}
ced15246fae5ac5968cfdab937d3b807
  $fShowIdeLogLevel ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeLogLevel
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeLogLevel
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeLogLevel_$cshowList -}
722c5becd84af34246854e485bebad26
  $fShowIdeLogLevel1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel2) -}
bcabd3010d10475db35733913836e1bc
  $fShowIdeLogLevel10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogDebug"#) -}
92acba0bce6381e189f4cd2b59de567f
  $fShowIdeLogLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogNone"#) -}
7ea67c2f803f8be2e278492bf043d471
  $fShowIdeLogLevel3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel4) -}
0ae7269fdf1a736f49960a86f978e6bf
  $fShowIdeLogLevel4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogDefault"#) -}
9754fba958a119f6db4a3058b00b4b6e
  $fShowIdeLogLevel5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel6) -}
33dcbaf3dfeaf365bbac4cad5d8a0185
  $fShowIdeLogLevel6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogAll"#) -}
90f4e4f557e5bfc8d075c5575a4251a1
  $fShowIdeLogLevel7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel8) -}
f4ebd0c8614975f3a900663cd75118f7
  $fShowIdeLogLevel8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogPerf"#) -}
6d838d0cca902b94d802fb6ee78ad599
  $fShowIdeLogLevel9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeLogLevel10) -}
ced15246fae5ac5968cfdab937d3b807
  $fShowIdeLogLevel_$cshow ::
    Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeLogLevel) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel9
                   Language.PureScript.Ide.Types.LogPerf
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel7
                   Language.PureScript.Ide.Types.LogAll
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel5
                   Language.PureScript.Ide.Types.LogDefault
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel3
                   Language.PureScript.Ide.Types.LogNone
                   -> Language.PureScript.Ide.Types.$fShowIdeLogLevel1 }) -}
ced15246fae5ac5968cfdab937d3b807
  $fShowIdeLogLevel_$cshowList ::
    [Language.PureScript.Ide.Types.IdeLogLevel] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeLogLevel])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeLogLevel
                   Language.PureScript.Ide.Types.$w$cshowsPrec8
                   ls
                   s) -}
ced15246fae5ac5968cfdab937d3b807
  $fShowIdeLogLevel_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeLogLevel -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec8 w1 w2) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespace ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeNamespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespace
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeNamespace_$cshowList -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespace_$cshow ::
    Language.PureScript.Ide.Types.IdeNamespace -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespace) ->
                 case x of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                   Language.PureScript.Ide.Types.IdeNSType
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> Language.PureScript.Ide.Types.$fShowIdeNamespaced3 }) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespace_$cshowList ::
    [Language.PureScript.Ide.Types.IdeNamespace] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeNamespace])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeNamespace
                   Language.PureScript.Ide.Types.$w$cshowsPrec9
                   ls
                   s) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespace_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeNamespace -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec9 w1 w2) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespaced ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeNamespaced
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeNamespaced
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowList -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespaced1 ::
    Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U,U,U))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeNamespaced ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
a9f9efb111b15ae49c9183f71e37a957
  $fShowIdeNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespaced "#) -}
5c7bacb8e0e63bdd93154de6444286ab
  $fShowIdeNamespaced3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced4) -}
f739187e97b1557b977c0b3e25493be9
  $fShowIdeNamespaced4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSKind"#) -}
e5849fa22034004b00ddb6237e831f99
  $fShowIdeNamespaced5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced6) -}
8dbc872f69683e3950802ce48c0f57c7
  $fShowIdeNamespaced6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSType"#) -}
57ce96c1e631e5aafebc35e802fa084d
  $fShowIdeNamespaced7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced8) -}
bef5e95c254c51a761c77cf8c08f3bb2
  $fShowIdeNamespaced8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNSValue"#) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespaced_$cshow ::
    Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeNamespaced) ->
                 Language.PureScript.Ide.Types.$fShowIdeNamespaced_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespaced_$cshowList ::
    [Language.PureScript.Ide.Types.IdeNamespaced] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeNamespaced])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced1
                   ls
                   s) -}
a433d742d266c5a84cd109a4a3bf8314
  $fShowIdeNamespaced_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeNamespaced -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U,U,U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeNamespaced)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeNamespaced ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
08b5f0405d44452524b8941687d080f4
  $fShowIdeState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeState
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeState_$cshowList -}
08b5f0405d44452524b8941687d080f4
  $fShowIdeState1 ::
    Language.PureScript.Ide.Types.IdeState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec10 0# ww1 ww2 }) -}
1446e79c6e8591446e5ae3cec13c491d
  $fShowIdeState10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2) -}
398f8a4ac571f56e046634e05505df85
  $fShowIdeState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ideVolatileState = "#) -}
ed8aa46a2b16aac127468e667d97c559
  $fShowIdeState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ideFileState = "#) -}
ddcc8eadac2e04064b1162a57ecf139c
  $fShowIdeState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeState {"#) -}
b48f20823f9bd03f26f21ea831156a62
  $fShowIdeState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsCachedRebuild = "#) -}
e1fd75eb671160d98981e88cae11cf09
  $fShowIdeState6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsDeclarations = "#) -}
54129b1e2a6cb6d630f32591c76e7e0d
  $fShowIdeState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("vsAstData = "#) -}
37904233d7ae608bbe0cc4edff462645
  $fShowIdeState8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeVolatileState {"#) -}
2b48a891d5070707a9f912f04cb44560
  $fShowIdeState9 ::
    GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn) -}
08b5f0405d44452524b8941687d080f4
  $fShowIdeState_$cshow ::
    Language.PureScript.Ide.Types.IdeState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeState ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow1 ww1 ww2 }) -}
08b5f0405d44452524b8941687d080f4
  $fShowIdeState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeState
                   Language.PureScript.Ide.Types.$fShowIdeState1
                   ls
                   s) -}
08b5f0405d44452524b8941687d080f4
  $fShowIdeState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeState -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,1*U),1*U(1*U,1*U,1*U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeState ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec10 ww1 ww3 ww4 } }) -}
2274951b6aa05fc35173736e0192b194
  $fShowIdeState_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Externs.ExternsFile)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Externs.ExternsFile)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     Language.PureScript.Names.$fShowModuleName
                     Language.PureScript.Externs.$fShowExternsFile)
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Externs.ExternsFile)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     Language.PureScript.Names.$fShowModuleName
                     Language.PureScript.Externs.$fShowExternsFile
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Externs.ExternsFile)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Externs.ExternsFile)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ Language.PureScript.Externs.ExternsFile
                        Language.PureScript.Names.$fShowModuleName
                        Language.PureScript.Externs.$fShowExternsFile
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
862d0466a921badc471ac4eb799b1c5c
  $fShowIdeType ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeType
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeType_$cshowList -}
862d0466a921badc471ac4eb799b1c5c
  $fShowIdeType1 ::
    Language.PureScript.Ide.Types.IdeType -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeType ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec12 0# ww1 ww2 ww3 }) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeTypeClass ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeClass
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeClass
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowList -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeTypeClass1 ::
    Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeClass ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec13 0# ww1 ww2 ww3 }) -}
a2f906dbffb2a12b899d21161f34a96b
  $fShowIdeTypeClass2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCInstances = "#) -}
12a3a81f86760216013d72b5cc78e00f
  $fShowIdeTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCKind = "#) -}
967e69fba907592278f0bf4d7390d6fa
  $fShowIdeTypeClass4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTCName = "#) -}
09289b394d46b5b90f9798d03b735f37
  $fShowIdeTypeClass5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeClass {"#) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeTypeClass_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeClass_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeTypeClass_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeClass] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeClass])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   Language.PureScript.Ide.Types.$fShowIdeTypeClass1
                   ls
                   s) -}
60c599d0289b3fc90de185766f47b756
  $fShowIdeTypeClass_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeClass -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeClass ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec13
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
942db7ca1b475d96338060f9a58d09df
  $fShowIdeTypeOperator ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeOperator
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowList -}
942db7ca1b475d96338060f9a58d09df
  $fShowIdeTypeOperator1 ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeOperator ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec14
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
303ca67d26de41670f95e7bc08805c87
  $fShowIdeTypeOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpKind = "#) -}
1b32b2fff52058f5d5a5462d345d7865
  $fShowIdeTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpAssociativity = "#) -}
c8134fbc7985a0d225067d96f114583c
  $fShowIdeTypeOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpPrecedence = "#) -}
5d6ca0154dfbf718e609ae089ef30fe1
  $fShowIdeTypeOperator5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpAlias = "#) -}
f1e5e45a1183eda4b3d67c04f6bd94d9
  $fShowIdeTypeOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideTypeOpName = "#) -}
649461d0e6608c955462186cc43d7280
  $fShowIdeTypeOperator7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeOperator {"#) -}
942db7ca1b475d96338060f9a58d09df
  $fShowIdeTypeOperator_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
942db7ca1b475d96338060f9a58d09df
  $fShowIdeTypeOperator_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator1
                   ls
                   s) -}
942db7ca1b475d96338060f9a58d09df
  $fShowIdeTypeOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeOperator -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeOperator ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec14
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
e48259b33cce428aa9c08aa35b573afb
  $fShowIdeTypeOperator_$s$fShowKind ::
    GHC.Show.Show
      (Language.PureScript.Kinds.Kind
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Kinds.Kind
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,))
                  (\ (x :: Language.PureScript.Kinds.Kind
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                     Language.PureScript.Kinds.$fFoldableKind7
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Kinds.Kind
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Kinds.Kind
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                        Language.PureScript.Kinds.$fFoldableKind7)
                     ls
                     s) -}
434cac5be7a927bb03b5196d1252e0b7
  $fShowIdeTypeSynonym ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeTypeSynonym
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeTypeSynonym
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowList -}
434cac5be7a927bb03b5196d1252e0b7
  $fShowIdeTypeSynonym1 ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeTypeSynonym ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec15 0# ww1 ww2 ww3 }) -}
c4f178e3264e23f0175d52b2061048a2
  $fShowIdeTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymKind = "#) -}
20318f41007598633803ec5207e06c39
  $fShowIdeTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymType = "#) -}
c699cc5430951a26ab643fea47b1c3df
  $fShowIdeTypeSynonym4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideSynonymName = "#) -}
cb34af410c19b6db70ebf03ac1b4fc62
  $fShowIdeTypeSynonym5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeSynonym {"#) -}
434cac5be7a927bb03b5196d1252e0b7
  $fShowIdeTypeSynonym_$cshow ::
    Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 Language.PureScript.Ide.Types.$fShowIdeTypeSynonym_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
434cac5be7a927bb03b5196d1252e0b7
  $fShowIdeTypeSynonym_$cshowList ::
    [Language.PureScript.Ide.Types.IdeTypeSynonym] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeTypeSynonym])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   Language.PureScript.Ide.Types.$fShowIdeTypeSynonym1
                   ls
                   s) -}
434cac5be7a927bb03b5196d1252e0b7
  $fShowIdeTypeSynonym_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeTypeSynonym -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeTypeSynonym ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec15
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
862d0466a921badc471ac4eb799b1c5c
  $fShowIdeType_$cshow ::
    Language.PureScript.Ide.Types.IdeType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeType) ->
                 Language.PureScript.Ide.Types.$fShowIdeType_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
862d0466a921badc471ac4eb799b1c5c
  $fShowIdeType_$cshowList ::
    [Language.PureScript.Ide.Types.IdeType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeType
                   Language.PureScript.Ide.Types.$fShowIdeType1
                   ls
                   s) -}
862d0466a921badc471ac4eb799b1c5c
  $fShowIdeType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeType) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeType ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec12
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fShowIdeValue ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeValue
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValue
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeValue_$cshowList -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fShowIdeValue1 ::
    Language.PureScript.Ide.Types.IdeValue -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec16 0# ww1 ww2 }) -}
c88793b49e13ddd917fa2a5d9e2fce07
  $fShowIdeValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueType = "#) -}
232cc94983d905b1cc7d2283e5af9d20
  $fShowIdeValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueIdent = "#) -}
ca50153b2b072e8c0de711d26379d112
  $fShowIdeValue4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValue {"#) -}
cf3c14901b432d2873d0b1d8733734a7
  $fShowIdeValueOperator ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeValueOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeValueOperator
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowList -}
cf3c14901b432d2873d0b1d8733734a7
  $fShowIdeValueOperator1 ::
    Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValueOperator ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec17
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
544b83b39acdefdd159c4a4cf09ceced
  $fShowIdeValueOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpType = "#) -}
61db9475bd6022f50bc5db4acde612d7
  $fShowIdeValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpAssociativity = "#) -}
d5a724d90f155ca19c6476cf5f6f55dc
  $fShowIdeValueOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpPrecedence = "#) -}
d87b38a9baec18559322f29cbfcf2b39
  $fShowIdeValueOperator5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpAlias = "#) -}
6420cc7604d3bff78018593cfe3c3ad7
  $fShowIdeValueOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ideValueOpName = "#) -}
0dc1c7c2bf44111f3835a79606dae145
  $fShowIdeValueOperator7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValueOperator {"#) -}
cf3c14901b432d2873d0b1d8733734a7
  $fShowIdeValueOperator_$cshow ::
    Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 Language.PureScript.Ide.Types.$fShowIdeValueOperator_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf3c14901b432d2873d0b1d8733734a7
  $fShowIdeValueOperator_$cshowList ::
    [Language.PureScript.Ide.Types.IdeValueOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeValueOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   Language.PureScript.Ide.Types.$fShowIdeValueOperator1
                   ls
                   s) -}
cf3c14901b432d2873d0b1d8733734a7
  $fShowIdeValueOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeValueOperator -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U(1*U,U),U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeValueOperator ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec17
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
d9799c3ec144f8a4da8786146d5f8780
  $fShowIdeValueOperator_$s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Language.PureScript.Names.$fShowProperName_$cshowsPrec
                             @ 'Language.PureScript.Names.ConstructorName
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fShowIdeValue_$cshow ::
    Language.PureScript.Ide.Types.IdeValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeValue ww1 ww2 ->
                 Language.PureScript.Ide.Types.$w$cshow2 ww1 ww2 }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fShowIdeValue_$cshowList ::
    [Language.PureScript.Ide.Types.IdeValue] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeValue])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeValue
                   Language.PureScript.Ide.Types.$fShowIdeValue1
                   ls
                   s) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  $fShowIdeValue_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeValue ww3 ww4 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec16 ww1 ww3 ww4 } }) -}
534b3d7af0aa98600153a60583892e70
  $fShowIdeVolatileState ::
    GHC.Show.Show Language.PureScript.Ide.Types.IdeVolatileState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.IdeVolatileState
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshow
                  Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowList -}
534b3d7af0aa98600153a60583892e70
  $fShowIdeVolatileState1 ::
    Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case w of ww { Language.PureScript.Ide.Types.IdeVolatileState ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec11 0# ww1 ww2 ww3 }) -}
534b3d7af0aa98600153a60583892e70
  $fShowIdeVolatileState_$cshow ::
    Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 Language.PureScript.Ide.Types.$fShowIdeVolatileState_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
534b3d7af0aa98600153a60583892e70
  $fShowIdeVolatileState_$cshowList ::
    [Language.PureScript.Ide.Types.IdeVolatileState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.IdeVolatileState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.IdeVolatileState
                   Language.PureScript.Ide.Types.$fShowIdeVolatileState1
                   ls
                   s) -}
534b3d7af0aa98600153a60583892e70
  $fShowIdeVolatileState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.IdeVolatileState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Types.IdeVolatileState ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec11
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
fb37c344e14b1371a6bc8438855d851a
  $fShowMatch ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Types.Match a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Types.Match a)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshowsPrec @ a v)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshow @ a v)
                  (Language.PureScript.Ide.Types.$fShowMatch_$cshowList @ a v) -}
fbb4e159ce94c0db31163454ef1942cf
  $fShowMatch1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match "#) -}
e099d4ac2b78a90c18a80210d08288e4
  $fShowMatch2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fb37c344e14b1371a6bc8438855d851a
  $fShowMatch_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Types.Match a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*U,U)>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Types.Match a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowMatch1
                   (case x `cast`
                         (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww { (,) ww1 ww2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.$fShow(,)4
                      (Language.PureScript.Names.$w$cshowsPrec
                         0#
                         ww1
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.showList__1
                            (GHC.Show.$fShow(,)_$sgo1
                               Language.PureScript.Ide.Types.$fShowMatch2
                               (GHC.Show.showsPrec @ a $dShow GHC.Show.$fShow(,)1 ww2)
                               (GHC.Types.[] @ GHC.Show.ShowS)))) })) -}
fb37c344e14b1371a6bc8438855d851a
  $fShowMatch_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Types.Match a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Types.Match a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Types.Match a)
                   (Language.PureScript.Ide.Types.$fShowMatch_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Types.$fFoldableAstData7)
                   ls
                   s) -}
fb37c344e14b1371a6bc8438855d851a
  $fShowMatch_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Match a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S(S),1*U(U)><L,1*U(1*U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Ide.Types.Match a)
                   (w3 :: GHC.Base.String) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec18 @ a w ww1 w2 w3 }) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fShowSuccess ::
    GHC.Show.Show Language.PureScript.Ide.Types.Success
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Success
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshowsPrec
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshow
                  Language.PureScript.Ide.Types.$fShowSuccess_$cshowList -}
b9eb2ae0777aa82b05464c5c85d22086
  $fShowSuccess1 ::
    Language.PureScript.Ide.Types.Success -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.Success)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec19 0# w w1) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fShowSuccess_$cshow ::
    Language.PureScript.Ide.Types.Success -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Success) ->
                 Language.PureScript.Ide.Types.$fShowSuccess_$cshowsPrec
                   Language.PureScript.Ide.Types.$fFoldableAstData7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fShowSuccess_$cshowList ::
    [Language.PureScript.Ide.Types.Success] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Types.Success])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Types.Success
                   Language.PureScript.Ide.Types.$fShowSuccess1
                   ls
                   s) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fShowSuccess_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Types.Success -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Types.Success)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Types.$w$cshowsPrec19 ww1 w1 w2 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fToJSONCompletion ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Ide.Types.Completion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Completion
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncoding
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSONList
                  Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncodingList -}
4b4d2eb10040d397c113a23d1ee3051f
  $fToJSONCompletion_$ctoEncoding ::
    Language.PureScript.Ide.Types.Completion
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1,
     Strictness: <S(SSSSSSS),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Completion) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON x))
                  `cast`
                (<Language.PureScript.Ide.Types.Completion>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fToJSONCompletion_$ctoEncodingList ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoEncoding) -}
4b4d2eb10040d397c113a23d1ee3051f
  $fToJSONCompletion_$ctoJSON ::
    Language.PureScript.Ide.Types.Completion
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S(SSSSSSS),1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U)> -}
4b4d2eb10040d397c113a23d1ee3051f
  $fToJSONCompletion_$ctoJSONList ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Ide.Types.Completion]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Ide.Types.Completion
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Ide.Types.Completion
                                     c
                                     Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON)
                                  n1
                                  x)))))) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fToJSONSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Ide.Types.Success
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Types.Success
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncoding
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSONList
                  Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncodingList -}
b9eb2ae0777aa82b05464c5c85d22086
  $fToJSONSuccess_$ctoEncoding ::
    Language.PureScript.Ide.Types.Success
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Ide.Types.Success) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON x))
                  `cast`
                (<Language.PureScript.Ide.Types.Success>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fToJSONSuccess_$ctoEncodingList ::
    [Language.PureScript.Ide.Types.Success]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Ide.Types.Success
                   Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoEncoding) -}
b9eb2ae0777aa82b05464c5c85d22086
  $fToJSONSuccess_$ctoJSON ::
    Language.PureScript.Ide.Types.Success
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
b9eb2ae0777aa82b05464c5c85d22086
  $fToJSONSuccess_$ctoJSONList ::
    [Language.PureScript.Ide.Types.Success]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Ide.Types.Success]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Ide.Types.Success
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Ide.Types.Success
                                     c
                                     Language.PureScript.Ide.Types.$fToJSONSuccess_$ctoJSON)
                                  n1
                                  x)))))) -}
e13c16d973ed5e220833273994795a72
  $s$fShowConstraint_$cshowList ::
    [Language.PureScript.Types.Constraint
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Types.Constraint
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Types.Constraint
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                      Language.PureScript.Types.$fFoldableConstraint4)
                   ls
                   s) -}
a18458c1314dc15f454b5b264203aa41
  $s$fShowConstraint_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Types.Constraint
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment])
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U,U),U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Types.Constraint
                            (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment])) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Types.$w$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
74942f10340cf21f874ccde1029a40ed
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       Language.PureScript.Names.Ident
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
c4e92d42b5086c9eb4c72fc948bddc20
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.$fShowIdent
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   w3 }) -}
dd435b8c599845a7622744cba537aa5d
  $s$fShowKind_$cshow ::
    Language.PureScript.Kinds.Kind
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Kinds.Kind
                           (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                 Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                   Language.PureScript.Kinds.$fFoldableKind7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
df9e40b002d9423cc27f1f9d0d415c85
  $s$fShowKind_$cshowList ::
    [Language.PureScript.Kinds.Kind
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Kinds.Kind
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Kinds.Kind
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                      Language.PureScript.Kinds.$fFoldableKind7)
                   ls
                   s) -}
c4f8313486cf234862a523889ecb63a8
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map
      Language.PureScript.Ide.Types.IdeNamespaced
      Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Ide.Types.IdeNamespaced
                           Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   @ Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced
                   Language.PureScript.AST.SourcePos.$fShowSourceSpan
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
674c03e79c19a4c9f235f99d99738a56
  $s$fShowMap_$cshow1 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident
      (Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           Language.PureScript.Names.Ident
                           (Language.PureScript.Types.Type
                              Language.PureScript.AST.SourcePos.SourceAnn)) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Types.Type
                        Language.PureScript.AST.SourcePos.SourceAnn)
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
12c8f8e44455fae2f02f7a0722e3cff8
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map
       Language.PureScript.Ide.Types.IdeNamespaced
       Language.PureScript.AST.SourcePos.SourceSpan]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             Language.PureScript.Ide.Types.IdeNamespaced
                             Language.PureScript.AST.SourcePos.SourceSpan])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Ide.Types.IdeNamespaced
                        Language.PureScript.AST.SourcePos.SourceSpan)
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ Language.PureScript.Ide.Types.IdeNamespaced
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.Ide.Types.$fShowIdeNamespaced
                      Language.PureScript.AST.SourcePos.$fShowSourceSpan
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
b633744aaaf00972b61a6dba74e451f0
  $s$fShowMap_$cshowList1 ::
    [Data.Map.Internal.Map
       Language.PureScript.Names.Ident
       (Language.PureScript.Types.Type
          Language.PureScript.AST.SourcePos.SourceAnn)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Types.Type
                                Language.PureScript.AST.SourcePos.SourceAnn)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn))
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn)
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
1ee9e2e0586d5e7a194155e721d12211
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         Language.PureScript.Ide.Types.IdeNamespaced
         Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            Language.PureScript.Ide.Types.IdeNamespaced
                            Language.PureScript.AST.SourcePos.SourceSpan) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ Language.PureScript.Ide.Types.IdeNamespaced
                   @ Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Ide.Types.$fShowIdeNamespaced
                   Language.PureScript.AST.SourcePos.$fShowSourceSpan
                   ww1
                   w3 }) -}
8d84ba9e6daf4f2772a8f5f3267da7ff
  $s$fShowMap_$cshowsPrec3 ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         (Language.PureScript.Types.Type
            Language.PureScript.AST.SourcePos.SourceAnn)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Types.Type
                               Language.PureScript.AST.SourcePos.SourceAnn)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Types.Type
                        Language.PureScript.AST.SourcePos.SourceAnn)
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                   ww1
                   w3 }) -}
0ba9391125caea493a9fa8e7c7b28f60
  $s$fShowType_$cshow ::
    Language.PureScript.Types.Type
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Types.Type
                           (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                 Language.PureScript.Types.$fShowType_$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                   Language.PureScript.Types.$fFoldableConstraint4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7a188515bbf876e339a17bb757539958
  $s$fShowType_$cshowList ::
    [Language.PureScript.Types.Type
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Types.Type
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Types.Type
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Types.$fShowType_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                      Language.PureScript.Types.$fFoldableConstraint4)
                   ls
                   s) -}
f3b9cbd45a80ce5ab5f371ad420e302f
  $s$fShow[]_$cshow ::
    [Language.PureScript.Comments.Comment] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ed8abe1327764d5a3ba06488cea021ff
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Comments.Comment]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Comments.Comment]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Comments.Comment]
                   Language.PureScript.Comments.$fShowComment_$cshowList
                   ls
                   s) -}
915f65605df09890b45540113cb69f85
  $tc'Annotation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8022874979491770052##
                   9589223988737766254##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Annotation2
                   0#
                   Language.PureScript.Ide.Types.$tc'Annotation1) -}
58b88abaadf0e0bbfbed32b2e4e0595f
  $tc'Annotation1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f3301b3811718301387288041ec4aa4
  $tc'Annotation2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Annotation3) -}
5c7090039b7650aa0e769fbb3c2d4326
  $tc'Annotation3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Annotation"#) -}
9174e8217d38f44719df4aa840317778
  $tc'AstData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16466805447677236577##
                   9080127231183645740##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'AstData2
                   1#
                   Language.PureScript.Ide.Types.$tc'AstData1) -}
d3763286ab5b5b424b183df3733e317c
  $tc'AstData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
061dadebd6a8d07977ceadf4fd759478
  $tc'AstData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'AstData3) -}
85bc149a3fea8dadd55adcae5ae5c971
  $tc'AstData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AstData"#) -}
b8c0444949208bcc002864e4bde0ce63
  $tc'Completion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6813594121909504815##
                   11123281835248594375##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Completion2
                   0#
                   Language.PureScript.Ide.Types.$tc'Completion1) -}
7bde56ddbefe8b86a17bbb7132162ec9
  $tc'Completion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a2cdeb543569d9333bb9adcfcb92edb
  $tc'Completion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Completion3) -}
07eefaad91dd6f177fe53abe372bbd75
  $tc'Completion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Completion"#) -}
0d80e80d339249d1e9d1356fd3c43597
  $tc'CompletionResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17126196861341831010##
                   3191262965243837956##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'CompletionResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'CompletionResult1) -}
b3bab2f461c174d511805cda18f0ed49
  $tc'CompletionResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
928905c40fc3cbe49acd19327d979995
  $tc'CompletionResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'CompletionResult3) -}
0eb588eda387cc6dc26751c541f81b1f
  $tc'CompletionResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompletionResult"#) -}
6b3c567c894ef62829f71b2c2178d829
  $tc'IdeConfiguration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6613827263048308723##
                   7025984140911664466##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration1) -}
5a91c068a2795290e32624a17bee2a2e
  $tc'IdeConfiguration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6450379643340c565518c44bfadf124a
  $tc'IdeConfiguration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeConfiguration3) -}
f749acb32e82c3a084e18016d8f8d358
  $tc'IdeConfiguration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeConfiguration"#) -}
23a2145be0025eb645c644d88667382c
  $tc'IdeDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2074971421507847637##
                   8554251240585894012##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor1) -}
a5ac2a5f26616b6220b7e5f813442537
  $tc'IdeDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4590d9bd41f93e3761359ce958bfbc74
  $tc'IdeDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDataConstructor3) -}
b7223d68321629e1cbb575dfe1bfdba4
  $tc'IdeDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDataConstructor"#) -}
3319fe34303c9b93e1e86dc2f0e9ba26
  $tc'IdeDeclDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7908736805485872835##
                   8189880206392482706##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor1) -}
98f01fe957ad8952bdca39347093a864
  $tc'IdeDeclDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ef68b79dc861d71cd78d2a9ec776b27f
  $tc'IdeDeclDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclDataConstructor3) -}
26babc1b9e093e66e36f76b674055180
  $tc'IdeDeclDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclDataConstructor"#) -}
c4bc1608d5b8b5702477d0e033a7635a
  $tc'IdeDeclKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8586816806534756812##
                   18186682907022585518##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind1) -}
ab9de23d18a86913d95f6cf1ff672038
  $tc'IdeDeclKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
294ac5ea5ba62ca08d72dd07d7f0b533
  $tc'IdeDeclKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclKind3) -}
1fc06197a287d35f7f766be6c30789f6
  $tc'IdeDeclKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclKind"#) -}
c48a26ced3d3c7ad42fe373586c70d93
  $tc'IdeDeclType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15723715811054260398##
                   17295413066701004770##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclType2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclType1) -}
5a79d3e6863f4982173febf29eb86941
  $tc'IdeDeclType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cd8b98e6003e90666f45683f817c75b4
  $tc'IdeDeclType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclType3) -}
50e042e34677579c3fca8a1e02fa4524
  $tc'IdeDeclType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclType"#) -}
14f0faa1d91a7826055487f416278387
  $tc'IdeDeclTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13575994601373120695##
                   2804762574146970599##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass1) -}
64edddda0876f8d779528d6e2ee95204
  $tc'IdeDeclTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
63b133ba5fb3e491b81f1115fb2828dc
  $tc'IdeDeclTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeClass3) -}
6660282c4efb91c3a350a39fb4f2dc93
  $tc'IdeDeclTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeClass"#) -}
42f12ff4a996929c9f9449af8386a283
  $tc'IdeDeclTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6817036559161592039##
                   2680045463056107406##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator1) -}
ceac9484007e5a8d0d91cf38f0289dae
  $tc'IdeDeclTypeOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0174c3042b4283b1cd5d50c9d5e6129a
  $tc'IdeDeclTypeOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeOperator3) -}
b982867ecbbd2866aba8e6d9a690c986
  $tc'IdeDeclTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeOperator"#) -}
27073bc6f9438743c62bd67d8162c2aa
  $tc'IdeDeclTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13840556001743543306##
                   9437469953546681739##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym1) -}
e2f57baba04206c048bbe3df2f32f3dd
  $tc'IdeDeclTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d652c14f4b1a4f76d61c2a7156f15f8d
  $tc'IdeDeclTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclTypeSynonym3) -}
8e92c38ab789a8e4c984e56c36ab9694
  $tc'IdeDeclTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclTypeSynonym"#) -}
fa01706334d96e02e03eb3c5a0ae4ff1
  $tc'IdeDeclValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10558579803644654844##
                   7733104404291525304##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue1) -}
016c51ce9396c6d3c7920fff4b385b6f
  $tc'IdeDeclValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
24acc0876d72e9b2d2835b48f25ebe1a
  $tc'IdeDeclValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclValue3) -}
d815a0b31c3d833c51f8f7ee5bd8a2a6
  $tc'IdeDeclValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclValue"#) -}
1cdce1ebad74dc97acfc548c7556af71
  $tc'IdeDeclValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13561842614364184792##
                   6642320189112395525##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator1) -}
7960a9a438d8f6e02d336b7c8455b82c
  $tc'IdeDeclValueOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7a964666d04a89c2a88baf7230e05a49
  $tc'IdeDeclValueOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclValueOperator3) -}
b65fac154d0abef3f9bafa26863a3885
  $tc'IdeDeclValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclValueOperator"#) -}
fe4576f04469fc0eadb30666588d5b1d
  $tc'IdeDeclarationAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7034011340964611695##
                   1395462094240505069##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn1) -}
b7806414d1066a88328cbc18e8b3f49c
  $tc'IdeDeclarationAnn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aa2b70e3fb5e1d322eef5a7199cca2a7
  $tc'IdeDeclarationAnn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeDeclarationAnn3) -}
9018bd3b179dc181f7c2104cf8b62c28
  $tc'IdeDeclarationAnn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeDeclarationAnn"#) -}
35add68f723f02a90cbc03b3fabf2c4b
  $tc'IdeEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   422638265043319292##
                   4158225160275960041##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment1) -}
55aec3d4218bce4ccfc5b57b972ba0f5
  $tc'IdeEnvironment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1a5988f2d731820ac78788949222899f
  $tc'IdeEnvironment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeEnvironment3) -}
f2dd2e63df98d2cd1d92a8788f2513fb
  $tc'IdeEnvironment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeEnvironment"#) -}
cdf0d63c35b4e092cd3e7bca8dacfa4d
  $tc'IdeFileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9709943639194135928##
                   11476574289743016820##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeFileState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeFileState1) -}
f5725f6bd312b266e23eb99278da4807
  $tc'IdeFileState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ba145ffd4779bd2c74b21741c057358d
  $tc'IdeFileState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeFileState3) -}
a47fd5bc2a9e9f40bc823e6dacc91712
  $tc'IdeFileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeFileState"#) -}
3f7eb97236e8b303960fd49af2eb41a1
  $tc'IdeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13639576188934674735##
                   14699621899998849931##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeInstance2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeInstance1) -}
62950ab79dbf857b3097a31944456b67
  $tc'IdeInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
68a98c1d74e0ba1db90da99c01cb1d5c
  $tc'IdeInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeInstance3) -}
98e52fed86ba06299e6583e81e4d0333
  $tc'IdeInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeInstance"#) -}
a3bbd995d80089aa2f0c54e5a576422c
  $tc'IdeNSKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16747019527917357401##
                   1673868754483360307##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSKind2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
eb9237e30c2ff032340af01361f3c072
  $tc'IdeNSKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
91d365bd47839c249a86e5ca5df50dc0
  $tc'IdeNSKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSKind3) -}
60947b25a9b9f5d24398c99f76cef301
  $tc'IdeNSKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSKind"#) -}
9163220e58d9e27336802da2d5c2b308
  $tc'IdeNSType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6658779371342987238##
                   13288578760269150254##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSType1
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
d04ba06fdcfd8f0d0db8222375f90cb1
  $tc'IdeNSType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSType2) -}
d94930ea964a42ffd2c29c7fd4ad9a19
  $tc'IdeNSType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSType"#) -}
0d4c39e14e216aecd36dc5cee139b8f8
  $tc'IdeNSValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13912289212618197457##
                   4805757890616668907##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNSValue1
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNSKind1) -}
d01b1c8deb8efe6d27d4c1d437c464f3
  $tc'IdeNSValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNSValue2) -}
b99ee13c9e9822610e012939d4fdf46e
  $tc'IdeNSValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNSValue"#) -}
8881b21bd175644d5958fc8a24b7c846
  $tc'IdeNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11945899362432505574##
                   13934813863470104428##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced1) -}
b2e077761b92c46d29da6859d40f11c2
  $tc'IdeNamespaced1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5b3f5dca2f41e0b55710fd11929bb34e
  $tc'IdeNamespaced2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeNamespaced3) -}
7445682b9aeea309bc98418bf325168c
  $tc'IdeNamespaced3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeNamespaced"#) -}
495fb93215840010cd7df356a532371e
  $tc'IdeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16328766941412830046##
                   15697362253858860716##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeState1) -}
223556a22efaf6ab4fc4132ed9189a90
  $tc'IdeState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9aad00e88c1a286127cb1a4d59f4402
  $tc'IdeState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeState3) -}
aa7ac30cfc9c260c1847717081e4bd3c
  $tc'IdeState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeState"#) -}
cf18f76dd612d054552d6ae17b201461
  $tc'IdeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10882844263150453891##
                   3663296696016479171##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeType2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeType1) -}
c2622944bff49268a8f0625f5ce0c2b2
  $tc'IdeType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4c9911389beb88b69593bdbcbd10d52
  $tc'IdeType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeType3) -}
2c785be9e2e353674faa1d207d4f3a9e
  $tc'IdeType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeType"#) -}
8f4700729205ca41c096b2c31f852097
  $tc'IdeTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17528777715795459498##
                   11185850955767513128##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass1) -}
f70f2b3fa7ef67258cc3f88d52bdee0a
  $tc'IdeTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0253a157619ef0a235b403c1f4ba05e4
  $tc'IdeTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeClass3) -}
404ab26b387d241aa1e02b66b5b0879b
  $tc'IdeTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeClass"#) -}
23c23f67fb141c408a1b2ffa5fabda93
  $tc'IdeTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16799947488570190690##
                   5462553678222706940##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator1) -}
632330656d2adacbc94b56fbe38bed81
  $tc'IdeTypeOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
79591e3f65fa29371aa98d42851225d8
  $tc'IdeTypeOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeOperator3) -}
ba64d3f14b70329805065150e818889a
  $tc'IdeTypeOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeOperator"#) -}
263381da9d5dba07936c4e4fe4ba22d1
  $tc'IdeTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12608637574416116834##
                   6630198875644285685##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym1) -}
8696f1334af22c846bec06223efd0f92
  $tc'IdeTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20e8d24105124afafa11b9c20c2c39bf
  $tc'IdeTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeTypeSynonym3) -}
e6cc631b25c460743863d0625970cbab
  $tc'IdeTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeTypeSynonym"#) -}
5a66b30c0f2e099c1dba07c76770cf02
  $tc'IdeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14636844612803916596##
                   17449087340866226358##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeValue2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeValue1) -}
3d1443d6904f0195155674f12540b54a
  $tc'IdeValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9dd08582a1b78ca1cc5b7f587b420179
  $tc'IdeValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeValue3) -}
b07e3cff9f2bbfaa06ddf6035a1d5ecc
  $tc'IdeValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeValue"#) -}
545e39c89bcb41794fb588a7a0c1857b
  $tc'IdeValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   303218914243227522##
                   13520401743185233040##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator1) -}
79820e114b56b70dc8412710caa1e58c
  $tc'IdeValueOperator1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f471fd14a0133e8cc5f5965318e90420
  $tc'IdeValueOperator2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeValueOperator3) -}
44db3a3eb0adfd30b197f2dc7918020c
  $tc'IdeValueOperator3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeValueOperator"#) -}
0444a67f9625e3e00248d24141262637
  $tc'IdeVolatileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1650934522301716377##
                   13654081041147537446##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState2
                   0#
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState1) -}
208bf1a8093a90b15127f84fbc5a7366
  $tc'IdeVolatileState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dde583e4a6453e2704456e59ffce5bf9
  $tc'IdeVolatileState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'IdeVolatileState3) -}
32cb17f771cc061ea67b29ed8eab6c99
  $tc'IdeVolatileState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdeVolatileState"#) -}
981fe5c70eb504df8d66a01d37077f3d
  $tc'ImportList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1784246526929177535##
                   8574144898425658370##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'ImportList2
                   0#
                   Language.PureScript.Ide.Types.$tc'ImportList1) -}
52c85ee5b086d3f6aa1d67ae6fa9d81d
  $tc'ImportList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
108f00060655d5e555834d8388ab2c6c
  $tc'ImportList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'ImportList3) -}
7442cab584a73b01e9fb47b61d0e429e
  $tc'ImportList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportList"#) -}
b1344ecf23238c370783f37061711296
  $tc'LogAll :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15569127496327012711##
                   3995836054478904684##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogAll2
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
82fb50a808ad1558670bb7c96b5f56a1
  $tc'LogAll1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
a27d7dc041d6a16649bccbae2a419b4f
  $tc'LogAll2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogAll3) -}
835106b8bfc840d82febd12714e996f6
  $tc'LogAll3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogAll"#) -}
c02bd2d222facbc44dd2b0d6f550ca03
  $tc'LogDebug :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13800496770450054205##
                   17276101005958468002##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogDebug1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
81ff6ff856fb9f5e40952b7173bd38c5
  $tc'LogDebug1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogDebug2) -}
7766af882a51f30c451ae9677e9df3e6
  $tc'LogDebug2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogDebug"#) -}
1562518d8c5549d1e978c6a8cc6472ce
  $tc'LogDefault :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1122497271504648765##
                   11922611566510786517##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogDefault1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
12c2767ad5a4de57e7c87b6502daf910
  $tc'LogDefault1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogDefault2) -}
745d4832fa0c3ca516f84dccc8fd8dcd
  $tc'LogDefault2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogDefault"#) -}
5a41845b3b944105906b6c4e409f416d
  $tc'LogNone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3052822628900654234##
                   4368712143689469500##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogNone1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
156163250309e2fe78995f8c9a05021c
  $tc'LogNone1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogNone2) -}
2b82e8f90351e13c4c2a6adaa74b1d95
  $tc'LogNone2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogNone"#) -}
c185c86b59b45f94d06e0c679d3ce3d5
  $tc'LogPerf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10368124027275830511##
                   10863752508281166384##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'LogPerf1
                   0#
                   Language.PureScript.Ide.Types.$tc'LogAll1) -}
e313176c254e45a9f57875dc36a8ddd4
  $tc'LogPerf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'LogPerf2) -}
466be2e3688c4cdb41a027bf300e018e
  $tc'LogPerf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LogPerf"#) -}
9f00524b9e4624aa1b0709d17fb12269
  $tc'Match :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2251484237683087519##
                   4918507978631457609##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'Match2
                   1#
                   Language.PureScript.Ide.Types.$tc'Match1) -}
8fb10baf77f34d3fd467526bf581f52c
  $tc'Match1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
573e38bede044c3a11d55802709eef91
  $tc'Match2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'Match3) -}
d4a9e3fc96f10a60a3e0263a76303513
  $tc'Match3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Match"#) -}
157d607d9e59aaa738829500dd05d1b5
  $tc'ModuleList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16944482325809067562##
                   16530149243769521685##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'ModuleList2
                   0#
                   Language.PureScript.Ide.Types.$tc'ModuleList1) -}
887a52c44059a2d9819f0409c5a5cb02
  $tc'ModuleList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
77ef67c61a47e5391ef2bfb10c54bad2
  $tc'ModuleList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'ModuleList3) -}
b99b64dd2a96aeadcc89fc2808ead7c1
  $tc'ModuleList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleList"#) -}
c76230b5e01dd7f8d39b73f9533fe54f
  $tc'MultilineTextResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8373821547223150372##
                   16419633229513724509##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'MultilineTextResult1
                   0#
                   Language.PureScript.Ide.Types.$tc'ModuleList1) -}
ed10c1969f785b8cd7f70b90ec2c890d
  $tc'MultilineTextResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'MultilineTextResult2) -}
a279331111fd58e07c8e7083a8bbbd4a
  $tc'MultilineTextResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultilineTextResult"#) -}
7be101c5523d930a04c8e603d97dfeab
  $tc'RebuildSuccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6835484619035861632##
                   13510367791980012789##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess2
                   0#
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess1) -}
475dccae547904796afcd26100016192
  $tc'RebuildSuccess1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b3613388989a2e14971d1040c8ed3cc6
  $tc'RebuildSuccess2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'RebuildSuccess3) -}
5c0ed2fc7a0628252e1155a77745a982
  $tc'RebuildSuccess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RebuildSuccess"#) -}
e934b4b38c09cf8f53a8838b29e2ed00
  $tc'TextResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17124774412847644879##
                   5627983497245820045##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'TextResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'TextResult1) -}
7357c5ba1a09270da6f56c932f959ef1
  $tc'TextResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2fad2b1d29b071e51816648aea5d8278
  $tc'TextResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'TextResult3) -}
6bf3eabdbc44a90a8ad4c39b3d0f94c6
  $tc'TextResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TextResult"#) -}
ddf899ee86ef46dd72ffc50a91f23e01
  $tc'UsagesResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3570692627069188471##
                   5195095966805405465##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tc'UsagesResult2
                   0#
                   Language.PureScript.Ide.Types.$tc'UsagesResult1) -}
fa400fde7f4f0939d134c779db3e3478
  $tc'UsagesResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
58274af6b96866011c3c8804f330febe
  $tc'UsagesResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tc'UsagesResult3) -}
e8e8854ffae2fc57a08c735e98d8b0bd
  $tc'UsagesResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UsagesResult"#) -}
452bede61b8ddc4cdb39643547af4779
  $tcAnnotation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13622828641804083304##
                   8359458834896121138##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcAnnotation1
                   0#
                   GHC.Types.krep$*) -}
b105c41265da0f1f9fb01220330b5755
  $tcAnnotation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcAnnotation2) -}
a6b4371f3dec791f14c6d277aac6fd0f
  $tcAnnotation2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Annotation"#) -}
23ed36892927e153fbc36eb43edfefea
  $tcAstData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17074260230268454126##
                   12333401623916191963##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcAstData1
                   0#
                   GHC.Types.krep$*Arr*) -}
fa43bdab837d47c032602235a30bbd4d
  $tcAstData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcAstData2) -}
afe8ca3745c4d2ce1a437cc13dc0fe13
  $tcAstData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AstData"#) -}
b96aaff6e879ddf255eabf5f908651b2
  $tcCompletion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16500098778075897644##
                   4248105285588721162##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcCompletion1
                   0#
                   GHC.Types.krep$*) -}
6a47d119fdf2a24253d333fb23032a49
  $tcCompletion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcCompletion2) -}
3dc8f87f9cba1e6b1e955a8dd951ea5d
  $tcCompletion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Completion"#) -}
99d424a88d494496d080ecaeb09462a7
  $tcIdeConfiguration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4978284554063990618##
                   1497201508489049404##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeConfiguration1
                   0#
                   GHC.Types.krep$*) -}
ac4cc43ce2ae9923610122be981dd2a1
  $tcIdeConfiguration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeConfiguration2) -}
b515b7898629a01110bd7aca3e9521df
  $tcIdeConfiguration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeConfiguration"#) -}
bd62cc34df43d3dc6367e347465c2da0
  $tcIdeDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15370607728229274051##
                   3695964815817861470##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDataConstructor1
                   0#
                   GHC.Types.krep$*) -}
d0c528916eddb6f89f3eb4427e1fe8bf
  $tcIdeDataConstructor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDataConstructor2) -}
438e81976c98b45248b09733d94a4363
  $tcIdeDataConstructor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDataConstructor"#) -}
185293d4632e4996cf3d9e0ac7c0859c
  $tcIdeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1676913247465613439##
                   11802847665963208559##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDeclaration1
                   0#
                   GHC.Types.krep$*) -}
f2283e84c9acc0acba384256370e1b98
  $tcIdeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDeclaration2) -}
728bdef9e1a633c0587fbd6f0e67f804
  $tcIdeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclaration"#) -}
2b030fc4125b03c6ee705b6752c32c8c
  $tcIdeDeclarationAnn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15099080888772762119##
                   1496332422184244900##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeDeclarationAnn1
                   0#
                   GHC.Types.krep$*) -}
06d4cdcd38408d9df7503c718c8997d2
  $tcIdeDeclarationAnn1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeDeclarationAnn2) -}
9db28f02fd236b15f933c3fcb56caef9
  $tcIdeDeclarationAnn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeDeclarationAnn"#) -}
cca15bd633042c7fa84edb0ed5d837dd
  $tcIdeEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15653293589277158640##
                   15787346179360734670##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeEnvironment1
                   0#
                   GHC.Types.krep$*) -}
41774d59833b382b187201e27bbd8e9e
  $tcIdeEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeEnvironment2) -}
ab9d81954b6593186c9f638bec531ad2
  $tcIdeEnvironment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeEnvironment"#) -}
d0fbfc9df4abea27348553786ff2177e
  $tcIdeFileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9422073998317210845##
                   1153596299636128256##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeFileState1
                   0#
                   GHC.Types.krep$*) -}
e8ce0a1e8622239e687cb711a18fe887
  $tcIdeFileState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeFileState2) -}
d4697cf469415f3583710fcfd2574580
  $tcIdeFileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeFileState"#) -}
e3e6d7196b81c8145218c10e6d1eeb12
  $tcIdeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16127089010020661929##
                   7273673664124621058##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeInstance1
                   0#
                   GHC.Types.krep$*) -}
c05312d99ffe7a2e21624474762a1187
  $tcIdeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeInstance2) -}
1cd278e1edc1050e8585bfa23080b762
  $tcIdeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeInstance"#) -}
aa125778c0e8dcaa154561f471910dbc
  $tcIdeLogLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10687040669029751120##
                   13077915329258858052##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeLogLevel1
                   0#
                   GHC.Types.krep$*) -}
cd297dae9cf983f3325d87a1d5c02725
  $tcIdeLogLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeLogLevel2) -}
34ba993bf32d6c258cdf54666d989799
  $tcIdeLogLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeLogLevel"#) -}
91eb8a60737e7e3c8df74da731e83ada
  $tcIdeNamespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9818044880811564443##
                   1866815540376016199##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeNamespace1
                   0#
                   GHC.Types.krep$*) -}
0d3ebd57a09edf2e7376618e365326ad
  $tcIdeNamespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeNamespace2) -}
633c9c32426885eeab1a2630964738d0
  $tcIdeNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespace"#) -}
84481e93db8210ad244b96d90ad02c4a
  $tcIdeNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13385495556156101081##
                   4071021595960698986##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeNamespaced1
                   0#
                   GHC.Types.krep$*) -}
6fb9d186c231511885b74d86ec15cfa8
  $tcIdeNamespaced1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeNamespaced2) -}
a428304f50175ed59b8065b3b85e9122
  $tcIdeNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeNamespaced"#) -}
8d5db87bcbb6f8438ec087e558b0f20b
  $tcIdeState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10772633169209940285##
                   6907185303827735528##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeState1
                   0#
                   GHC.Types.krep$*) -}
b18e4e9bd6197b2c4b7697f627729d18
  $tcIdeState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeState2) -}
d84a7ef5e5c30705983a016e685cfc47
  $tcIdeState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeState"#) -}
87f14de8c4da3928b3ab92bfee2683ae
  $tcIdeType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2735786656180474268##
                   3606005059051312284##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeType1
                   0#
                   GHC.Types.krep$*) -}
1db5dcd3891037ccde89754b6eac558c
  $tcIdeType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeType2) -}
f744d8297b495972d5ddb8c3ed47d1e2
  $tcIdeType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeType"#) -}
859197bb1b9114a69b809ac1be481d94
  $tcIdeTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1187815967583198027##
                   2363559379403119691##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeClass1
                   0#
                   GHC.Types.krep$*) -}
8e3a4f6fcab7d71db5d8cc799db8f9bf
  $tcIdeTypeClass1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeClass2) -}
067451f7734fd140ad73ea7f607a5adb
  $tcIdeTypeClass2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeClass"#) -}
bd16e9e1d8e70dd143805a695c813f6f
  $tcIdeTypeOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1842975941774644097##
                   16662767426338329075##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeOperator1
                   0#
                   GHC.Types.krep$*) -}
912898bfb53841b28f7626ce4c97b42c
  $tcIdeTypeOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeOperator2) -}
fbd7968f7e03a863b8126fed9229eca0
  $tcIdeTypeOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeOperator"#) -}
3adf93a8964dad2e82be70da521dd9c5
  $tcIdeTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13641729323358123122##
                   14924805030060064472##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeTypeSynonym1
                   0#
                   GHC.Types.krep$*) -}
940b412aba3ea5a377c91db115c2cddf
  $tcIdeTypeSynonym1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeTypeSynonym2) -}
7d0ad61d5cce9f2260aec835c370dc3e
  $tcIdeTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeTypeSynonym"#) -}
dd2a7bb93f2fae36ab8722f4442b0b2e
  $tcIdeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1704788089650760054##
                   1859464011732792675##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeValue1
                   0#
                   GHC.Types.krep$*) -}
0291990ef1e9090f7bfd6b9459ba9e15
  $tcIdeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeValue2) -}
fe7b7b4df87ac13d824adae6d219f333
  $tcIdeValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValue"#) -}
762fc235d766550a2c4256acbd8c2543
  $tcIdeValueOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17656840361588635429##
                   11783147710522868456##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeValueOperator1
                   0#
                   GHC.Types.krep$*) -}
10bd3b567377a7ad624cdbcfcabdffbe
  $tcIdeValueOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeValueOperator2) -}
88a9e593df6f560abda3f00f7adf2989
  $tcIdeValueOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeValueOperator"#) -}
51dfd0f4c3930432383be1a911f2ff9b
  $tcIdeVolatileState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   674463030231999036##
                   15968788297103639850##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcIdeVolatileState1
                   0#
                   GHC.Types.krep$*) -}
656b68f671ee76063b5c641613e47b75
  $tcIdeVolatileState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcIdeVolatileState2) -}
ecdba585c39235fea1d976eeaa122510
  $tcIdeVolatileState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdeVolatileState"#) -}
db1579715157cb8ea0d6347d647facde
  $tcMatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   358830702991511439##
                   5961853736749200745##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcMatch1
                   0#
                   GHC.Types.krep$*Arr*) -}
bd86958998c5209871511c9e32c2640e
  $tcMatch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcMatch2) -}
a06ea1c239ac6efd933724d0d0f71f19
  $tcMatch2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match"#) -}
f9c2615ed7f1034a6ffad21956136d7e
  $tcSuccess :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10675002907333308813##
                   9189737698507781345##
                   Language.PureScript.Ide.Types.$trModule
                   Language.PureScript.Ide.Types.$tcSuccess1
                   0#
                   GHC.Types.krep$*) -}
628d52595f133002d4fb8e7ea5c136fe
  $tcSuccess1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$tcSuccess2) -}
b86d5c78d0b62b51b536a914330f7609
  $tcSuccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Success"#) -}
8d550ea4469aba65798178f40c647eae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Types.$trModule3
                   Language.PureScript.Ide.Types.$trModule1) -}
53bb82d66b9d7a38b1f4f89f3eff5faf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$trModule2) -}
e3c3b480905544f183e5e1176695b8fc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Types"#) -}
e35d897b0844dab9ef38f393719d7a41
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Types.$trModule4) -}
4be6bdad1059a4af0d5236f6e3aedfca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
eac92ac0c65c42cd1ad1d89f89afec0e
  $w$c< ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just ipv -> GHC.Types.True }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> Data.Text.$fOrdText_$c< a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.compareType
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          a2
                                          b1 of wild2 {
                                     GHC.Types.LT -> GHC.Types.True
                                     GHC.Types.EQ -> $j2
                                     GHC.Types.GT -> GHC.Types.False } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fOrd[]_$ccompare
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fOrdProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.LT -> GHC.Types.True
                                 GHC.Types.EQ -> $j1
                                 GHC.Types.GT -> GHC.Types.False } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a2 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> $j
                             GHC.Types.GT -> GHC.Types.False } } } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$c<1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$c< ww1 ww3 } }) -}
f4e5c0828a769aa4cd53e88a4eacf625
  $w$c<2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U><S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.SourceType)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.SourceType) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww3
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                      case ww8
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                      case Data.Text.$w$ccompare ww11 ww12 ww13 ww15 ww16 ww17 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> Language.PureScript.Types.$fOrdType_$c<
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.False } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
bf3cf194b942dee8c8ec401db7a5f34e
  $w$c<3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.SourceType])
                   (ww3 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.SourceType])
                   (ww7 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                             ww1
                             ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Types.Type
                                       Language.PureScript.AST.SourcePos.SourceAnn)
                                  (Language.PureScript.Types.$fOrdType
                                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                        [Language.PureScript.Comments.Comment]))
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just ipv -> GHC.Types.True }
                                  GHC.Base.Just a2
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b1
                                       -> case GHC.Classes.$fOrd[]_$ccompare
                                                 @ (Language.PureScript.Types.Constraint
                                                      Language.PureScript.AST.SourcePos.SourceAnn)
                                                 (Language.PureScript.Types.$fOrdConstraint
                                                    @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                       [Language.PureScript.Comments.Comment]))
                                                 a2
                                                 b1 of wild5 {
                                            DEFAULT -> GHC.Types.False
                                            GHC.Types.LT -> GHC.Types.True } } }
                             GHC.Types.GT -> GHC.Types.False }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
1f0350de5aebced06e5af595f5ad4138
  $w$c<4 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$c< ww4 ww9
                   GHC.Types.GT -> GHC.Types.False }) -}
048f65fb5b1dcb17383b8cd8dc72882b
  $w$c<5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.compareKind
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     Language.PureScript.Types.SourceType)
                                  Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
                                  ww4
                                  ww9 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
60c599d0289b3fc90de185766f47b756
  $w$c<6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.compareKind
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ Language.PureScript.Ide.Types.IdeInstance
                                  Language.PureScript.Ide.Types.$fOrdIdeInstance
                                  ww4
                                  ww9 of wild2 {
                             DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
bc7c416286caa6bbad6ccb50e2e7e594
  $w$c<7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.SourceType)
                   (ww4 :: Language.PureScript.Kinds.SourceKind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.SourceType)
                   (ww9 :: Language.PureScript.Kinds.SourceKind) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> Language.PureScript.Kinds.$fOrdKind_$c<
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
d9ff7bebec082565aab7a48722509041
  $w$c<8 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> Language.PureScript.Types.$fOrdType_$c<
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        ww1
                        ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww2 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
fb55d5ae975fb474415fe883cf2c0852
  $w$c<=1 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww5
                        ww6
                        ww7
                        ww8
                        ww
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww9
                             ww4 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
868e0c1325f35210348d3279ead08251
  $w$c<=2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww2
                        ww of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww1 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
d1b427f6845a8ef0f276a7dc19efd7b8
  $w$c== ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a1
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> Data.Text.$fEqText_$c== a1 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a1
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.eqType
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          a1
                                          b1 of wild2 {
                                     GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j2 } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a1
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fEqProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$c==1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> $j } } } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$c==1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fEqText_$c== ww1 ww3 } }) -}
1c27a32f9f2ef37fd69bb9d68b2426d8
  $w$c==2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U><L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.SourceType)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.SourceType) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case ww3
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case ww8
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild1 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild3 { (#,#) ds1 ds5 ->
                                case GHC.Prim.narrow32Int# ds5 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> Language.PureScript.Types.eqType
                                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       ww4
                                       ww9 } } } } } } } }) -}
60c599d0289b3fc90de185766f47b756
  $w$c==3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Kinds.eqKind
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  ww3
                                  ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ Language.PureScript.Ide.Types.IdeInstance
                                  Language.PureScript.Ide.Types.$fEqIdeInstance
                                  ww4
                                  ww9 } } } }) -}
ba741be45097ff035ef883849d2be320
  $w$c==4 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.SourceType])
                   (ww3 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.SourceType])
                   (ww7 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Language.PureScript.Names.$fEqIdent_$c== ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Types.Type
                                       Language.PureScript.AST.SourcePos.SourceAnn)
                                  (Language.PureScript.Types.$fEqType
                                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                        [Language.PureScript.Comments.Comment]))
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.True
                                       GHC.Base.Just ipv -> GHC.Types.False }
                                  GHC.Base.Just a1
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.False
                                       GHC.Base.Just b1
                                       -> GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Types.Constraint
                                                 Language.PureScript.AST.SourcePos.SourceAnn)
                                            (Language.PureScript.Types.$fEqConstraint
                                               @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                  [Language.PureScript.Comments.Comment]))
                                            a1
                                            b1 } } } } }) -}
b4cd40978c3a203f62c7a099f7d0d4b7
  $w$c==5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.SourceType)
                   (ww4 :: Language.PureScript.Kinds.SourceKind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.SourceType)
                   (ww9 :: Language.PureScript.Kinds.SourceKind) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Types.eqType
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  ww3
                                  ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Language.PureScript.Kinds.eqKind
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  ww4
                                  ww9 } } } }) -}
27824fc3cbb9e1bf0d0938a92ab0fcc5
  $w$c==6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)]) ->
                 case GHC.Prim.==# ww2 ww7 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww5
                             (GHC.Prim.int2Word# ww6)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case Language.PureScript.Kinds.eqKind
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  ww3
                                  ww8 of wild1 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     Language.PureScript.Types.SourceType)
                                  Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
                                  ww4
                                  ww9 } } } }) -}
9696d726a4f887f7689d5c92c8c9e6c1
  $w$c==7 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.Names.$fEqIdent_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Language.PureScript.Types.eqType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        ww1
                        ww3 }) -}
73225b57e921762bc069476cf543992b
  $w$c==8 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$c==
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Language.PureScript.Ide.Types.$fEqIdeDeclaration_$c==
                        ww4
                        ww9 }) -}
c54bd52ec3c2bca3df224ddd0472cfaa
  $w$c==9 ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.ModuleName
    -> a -> Language.PureScript.Names.ModuleName -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ a w ww1 ww3 }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
fbe19f6c806cc21143fbbe7617e2010d
  $w$c>=1 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                             ww4
                             ww9 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
9e51320ab7f6c4b3b8a523a24a9c714e
  $w$c>=2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
225af319ff042082cbc9ef1ba1f7f46d
  $w$ccompare ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = let {
                       $j1 :: GHC.Types.Ordering <join 0>
                       = let {
                           $j2 :: GHC.Types.Ordering <join 0>
                           = case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.EQ
                                    GHC.Base.Just ipv -> GHC.Types.LT }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.GT
                                    GHC.Base.Just b1 -> Data.Text.$fOrdText_$ccompare a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Base.Just ipv -> GHC.Types.LT }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.GT
                                GHC.Base.Just b1
                                -> case Language.PureScript.Types.compareType
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                             [Language.PureScript.Comments.Comment])
                                          a2
                                          b1 of wild2 {
                                     GHC.Types.LT -> GHC.Types.LT
                                     GHC.Types.EQ -> $j2
                                     GHC.Types.GT -> GHC.Types.GT } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Base.Just ipv -> GHC.Types.LT }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.GT
                            GHC.Base.Just b1
                            -> case GHC.Classes.$fOrd[]_$ccompare
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fOrdProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      b1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.LT -> GHC.Types.LT
                                 GHC.Types.EQ -> $j1
                                 GHC.Types.GT -> GHC.Types.GT } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case a2 of ww8 { Language.PureScript.AST.SourcePos.SourceSpan ww9 ww10 ww11 ->
                           case b1 of ww12 { Language.PureScript.AST.SourcePos.SourceSpan ww13 ww14 ww15 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww9
                                  ww10
                                  ww11
                                  ww13
                                  ww14
                                  ww15 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> $j
                             GHC.Types.GT -> GHC.Types.GT } } } } }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$ccompare1 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3 } }) -}
052dbf0677e0cde9f53eb2b253d31375
  $w$ccompare2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U><S,U><S,U><S,U><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww4 :: Language.PureScript.Types.SourceType)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww9 :: Language.PureScript.Types.SourceType) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww3
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                      case ww8
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                      case Data.Text.$w$ccompare ww11 ww12 ww13 ww15 ww16 ww17 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
60c599d0289b3fc90de185766f47b756
  $w$ccompare3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [Language.PureScript.Ide.Types.IdeInstance])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.compareKind
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ Language.PureScript.Ide.Types.IdeInstance
                             Language.PureScript.Ide.Types.$fOrdIdeInstance
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
6e6ab8f16504b6cdad81dd0c1db82d1d
  $w$ccompare4 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.SourceType])
                   (ww3 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: Language.PureScript.Names.Ident)
                   (ww6 :: [Language.PureScript.Types.SourceType])
                   (ww7 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                             ww1
                             ww5 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Types.Type
                                       Language.PureScript.AST.SourcePos.SourceAnn)
                                  (Language.PureScript.Types.$fOrdType
                                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                        [Language.PureScript.Comments.Comment]))
                                  ww2
                                  ww6 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.EQ
                                       GHC.Base.Just ipv -> GHC.Types.LT }
                                  GHC.Base.Just a2
                                  -> case ww7 of wild4 {
                                       GHC.Base.Nothing -> GHC.Types.GT
                                       GHC.Base.Just b1
                                       -> GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Types.Constraint
                                                 Language.PureScript.AST.SourcePos.SourceAnn)
                                            (Language.PureScript.Types.$fOrdConstraint
                                               @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                  [Language.PureScript.Comments.Comment]))
                                            a2
                                            b1 } }
                             GHC.Types.GT -> GHC.Types.GT }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
c0c41222b371053a3bd1e6c27814534d
  $w$ccompare5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Types.SourceType)
                   (ww4 :: Language.PureScript.Kinds.SourceKind)
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Types.SourceType)
                   (ww9 :: Language.PureScript.Kinds.SourceKind) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Types.compareType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> Language.PureScript.Kinds.compareKind
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
ae296ade3910764490dead3a33b5043d
  $w$ccompare6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><L,1*U><L,1*U><S,U><S,U><S,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Kinds.SourceKind)
                   (ww4 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)])
                   (ww5 :: GHC.Prim.ByteArray#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: Language.PureScript.Kinds.SourceKind)
                   (ww9 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)]) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww5 ww6 ww7 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case Language.PureScript.Kinds.compareKind
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             ww3
                             ww8 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName,
                                Language.PureScript.Types.SourceType)
                             Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
                             ww4
                             ww9
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
0204f83f5a653029a9ca0f677e2d3ab4
  $w$ccompare7 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.Names.$fOrdIdent_$ccompare
                        ww
                        ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> Language.PureScript.Types.compareType
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        ww1
                        ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
64075f5189056b83e0bbac8b03397836
  $w$ccompare8 ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Language.PureScript.Ide.Types.IdeDeclaration)
                   (ww5 :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww7 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww8 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww9 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case Language.PureScript.Ide.Types.$w$ccompare
                        ww
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$ccompare
                        ww4
                        ww9
                   GHC.Types.GT -> GHC.Types.GT }) -}
17434a748d2e8110dfe72c2e4ecdc030
  $w$crnf ::
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> ()
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   $j :: () <join 0>
                   = let {
                       $j1 :: () <join 0>
                       = case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww3 of wild1 {
                                GHC.Base.Nothing -> GHC.Tuple.()
                                GHC.Base.Just x -> Data.Text.$fNFDataText_$crnf x }
                           GHC.Base.Just x
                           -> case Language.PureScript.Ide.Types.$fNFDataAnnotation1
                                     x of wild1 { () ->
                              case ww3 of wild2 {
                                GHC.Base.Nothing -> GHC.Tuple.()
                                GHC.Base.Just x1 -> Data.Text.$fNFDataText_$crnf x1 } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing -> $j1
                       GHC.Base.Just x
                       -> case Language.PureScript.Names.$fNFDataModuleName_go
                                 x `cast`
                                 (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                          $j1 } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> $j
                   GHC.Base.Just x
                   -> case x of ww4 { Language.PureScript.AST.SourcePos.SourceSpan ww5 ww6 ww7 ->
                      case ww6 of ww8 { Language.PureScript.AST.SourcePos.SourcePos ww9 ww10 ->
                      case ww9 of ww11 { GHC.Types.I# ipv ->
                      case ww10 of ww12 { GHC.Types.I# ipv1 ->
                      case ww7 of ww13 { Language.PureScript.AST.SourcePos.SourcePos ww14 ww15 ->
                      case ww14 of ww16 { GHC.Types.I# ipv2 ->
                      case ww15 of ww17 { GHC.Types.I# ipv3 ->
                      case Language.PureScript.AST.SourcePos.$fNFDataSourceSpan_go
                             ww5 of wild1 { () ->
                      $j } } } } } } } } }) -}
56463ae4d0d760d59d7e217b6bd5d179
  $w$crnf1 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.ValueOpName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> ()
  {- Arity: 6, Strictness: <L,A><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
ec1dbd27aedfa40715cb33b3ddada63b
  $w$crnf2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType -> ()
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType) ->
                 case ww of wild {
                   Language.PureScript.Names.Ident g1
                   -> case g1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Language.PureScript.Ide.Types.$fNFDataAnnotation1 ww1 }
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild1 {
                        GHC.Base.Nothing
                        -> case g2 of ds1 { DEFAULT ->
                           Language.PureScript.Ide.Types.$fNFDataAnnotation1 ww1 }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT ->
                           Language.PureScript.Ide.Types.$fNFDataAnnotation1 ww1 } } }
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Ide.Types.$fNFDataAnnotation1 ww1 }) -}
8880d20d01bbee2aa9aec1332729800a
  $w$crnf3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> ()
  {- Arity: 4, Strictness: <S,1*U><S,1*U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: [Language.PureScript.Types.SourceType])
                   (ww3 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint]) ->
                 case Language.PureScript.Names.$fNFDataModuleName_go
                        ww
                          `cast`
                        (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                 let {
                   $j :: () <join 0>
                   = let {
                       $j1 :: () <join 0>
                       = case ww3 of wild {
                           GHC.Base.Nothing -> GHC.Tuple.()
                           GHC.Base.Just x
                           -> Control.DeepSeq.$fNFData1NonEmpty_$cliftRnf1
                                @ (Language.PureScript.Types.Constraint
                                     Language.PureScript.AST.SourcePos.SourceAnn)
                                Language.PureScript.Ide.Types.$fNFDataIdeInstance1
                                x }
                     } in
                     letrec {
                       go :: [Language.PureScript.Types.Type
                                Language.PureScript.AST.SourcePos.SourceAnn]
                             -> ()
                         <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [Language.PureScript.Types.Type
                                     Language.PureScript.AST.SourcePos.SourceAnn]) ->
                         case ds of wild {
                           [] -> $j1
                           : x xs
                           -> case Language.PureScript.Ide.Types.$fNFDataAnnotation1
                                     x of wild2 { () ->
                              go xs } }
                     } in
                     go ww2
                 } in
                 case ww1 of wild {
                   Language.PureScript.Names.Ident g1
                   -> case g1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 -> $j }
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild2 {
                        GHC.Base.Nothing -> case g2 of ds1 { DEFAULT -> $j }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT -> $j } } }
                   Language.PureScript.Names.UnusedIdent -> $j } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  $w$cshow ::
    Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U,1*U,1*U)><L,1*U>,
     Inline: [0] -}
b7adc452fee80225b33eeab4345c5f9e
  $w$cshow1 ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U,1*U)><L,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeFileState)
                   (ww1 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeState4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Ide.Types.$fShowIdeState3
                      (case ww of ww2 { Language.PureScript.Ide.Types.IdeFileState ww3 ww4 ->
                       Language.PureScript.Ide.Types.$w$cshowsPrec6
                         0#
                         ww3
                         ww4
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fShowIdeState2
                               (case ww1 of ww5 { Language.PureScript.Ide.Types.IdeVolatileState ww6 ww7 ww8 ->
                                Language.PureScript.Ide.Types.$w$cshowsPrec11
                                  0#
                                  ww6
                                  ww7
                                  ww8
                                  Language.PureScript.Ide.Types.$fShowIdeState10 }))) }))) -}
bfe204032e8b91a1e9155f1b67ba6baa
  $w$cshow2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.Ident)
                   (ww1 :: Language.PureScript.Types.SourceType) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Ide.Types.$fShowIdeValue4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Ide.Types.$fShowIdeValue3
                      (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                         Language.PureScript.Ide.Types.$fFoldableAstData7
                         ww
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Types.$fShowIdeValue2
                               (Language.PureScript.Types.$w$cshowsPrec3
                                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                     [Language.PureScript.Comments.Comment])
                                  Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                                  0#
                                  ww1
                                  Language.PureScript.Ide.Types.$fShowIdeState10)))))) -}
a563a6cb4036ef5e779d625cb10df1c0
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
a433d742d266c5a84cd109a4a3bf8314
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww2 :: Data.Text.Internal.Text)
                   (w :: GHC.Base.String) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (eta :: GHC.Base.String)[OneShot] ->
                     case ww1 of wild {
                       Language.PureScript.Ide.Types.IdeNSValue
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                            eta
                       Language.PureScript.Ide.Types.IdeNSType
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                            eta
                       Language.PureScript.Ide.Types.IdeNSKind
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            Language.PureScript.Ide.Types.$fShowIdeNamespaced3
                            eta }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced2
                        (f14
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case Data.Text.Show.$w$cshowsPrec ww2 w of ww3 { (#,#) ww4 ww5 ->
                               GHC.Types.: @ GHC.Types.Char ww4 ww5 })))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeNamespaced2
                           (f14
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (case Data.Text.Show.$w$cshowsPrec
                                         ww2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w) of ww3 { (#,#) ww4 ww5 ->
                                  GHC.Types.: @ GHC.Types.Char ww4 ww5 })))) }) -}
a8b298be1790d16b02c754ee54086577
  $w$cshowsPrec10 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(1*U,1*U)><L,1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeFileState)
                   (ww2 :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Language.PureScript.Ide.Types.IdeFileState ww4 ww5 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec6 0# ww4 ww5 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Language.PureScript.Ide.Types.IdeVolatileState ww4 ww5 ww6 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec11 0# ww4 ww5 ww6 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeState4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeState2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeState3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeState2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
ce024ed586965227e512f43bcdd4a4bd
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Ide.Types.ModuleMap
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Externs.ExternsFile)
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.AstData
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: Language.PureScript.Ide.Types.ModuleMap
                             [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (ww3 :: GHC.Base.Maybe
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Externs.ExternsFile)) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Ide.Types.$w$s$cshowsPrec 0# ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowIdeState9
                       0#
                       ww2
                 } in
                 let {
                   f16 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Externs.ExternsFile)
                       Language.PureScript.Ide.Types.$fShowIdeState_$s$fShow(,)
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeState8
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState7
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeState6
                                    (f15
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeState5
                                             (f16
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x)))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeState8
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeState7
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeState6
                                       (f15
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Ide.Types.$fShowIdeState5
                                                (f16
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
16fcfeb0a93bc9254d145ba2d5d5da58
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Kinds.SourceKind
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,U>,
     Inline: [0] -}
60c599d0289b3fc90de185766f47b756
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Kinds.SourceKind
    -> [Language.PureScript.Ide.Types.IdeInstance]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (ww2 :: Language.PureScript.Kinds.SourceKind)
                   (ww3 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Kinds.$w$cshowsPrec
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       0#
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeTypeClass5
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeTypeClass4
                          (Language.PureScript.Names.$w$cshowsPrec2
                             @ 'Language.PureScript.Names.ClassName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeTypeClass3
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeTypeClass2
                                            (let {
                                               s :: GHC.Base.String
                                               = GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x
                                             } in
                                             case ww3 of wild {
                                               []
                                               -> GHC.CString.unpackAppendCString#
                                                    GHC.Show.showList__4
                                                    s
                                               : x1 xs
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__3
                                                    (case x1 of ww4 { Language.PureScript.Ide.Types.IdeInstance ww5 ww6 ww7 ww8 ->
                                                     Language.PureScript.Ide.Types.$w$cshowsPrec7
                                                       0#
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       (let {
                                                          lvl131 :: [GHC.Types.Char]
                                                          = GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showList__2
                                                              s
                                                        } in
                                                        letrec {
                                                          showl :: [Language.PureScript.Ide.Types.IdeInstance]
                                                                   -> GHC.Base.String
                                                            {- Arity: 1, Strictness: <S,1*U> -}
                                                          = \ (ds2 :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                                                            case ds2 of wild1 {
                                                              [] -> lvl131
                                                              : y ys
                                                              -> GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showList__1
                                                                   (case y of ww9 { Language.PureScript.Ide.Types.IdeInstance ww10 ww11 ww12 ww13 ->
                                                                    Language.PureScript.Ide.Types.$w$cshowsPrec7
                                                                      0#
                                                                      ww10
                                                                      ww11
                                                                      ww12
                                                                      ww13
                                                                      (showl ys) }) }
                                                        } in
                                                        showl xs) }) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
066853440edd8ab8fc7f01580089c59f
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Kinds.SourceKind
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U,U)><L,1*U(1*U,U)><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.AST.Operators.Precedence)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Kinds.SourceKind) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       0#
                       ww7
                       ww8 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Language.PureScript.Kinds.Kind
                            Language.PureScript.AST.SourcePos.SourceAnn)
                       Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$s$fShowKind
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww5
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeTypeOperator7
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeTypeOperator6
                          (Language.PureScript.Names.$w$cshowsPrec3
                             @ 'Language.PureScript.Names.TypeOpName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator5
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeTypeOperator4
                                            (case GHC.Show.$w$cshowsPrec4
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Ide.Types.$fShowIdeTypeOperator3
                                                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                                                             ww4
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                GHC.Show.showCommaSpace1
                                                                (GHC.CString.unpackAppendCString#
                                                                   Language.PureScript.Ide.Types.$fShowIdeTypeOperator2
                                                                   (f15
                                                                      (GHC.CString.unpackAppendCString#
                                                                         Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                                         x))))))) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
97c7e2b82f04ec05f50600ef0009294a
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> Language.PureScript.Kinds.SourceKind
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww2 :: Language.PureScript.Types.SourceType)
                   (ww3 :: Language.PureScript.Kinds.SourceKind) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$w$cshowsPrec3
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       0#
                       ww2
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Kinds.$w$cshowsPrec
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       0#
                       ww3
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeTypeSynonym5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeTypeSynonym4
                           (Language.PureScript.Names.$w$cshowsPrec2
                              @ 'Language.PureScript.Names.TypeName
                              0#
                              ww1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeTypeSynonym3
                                    (f14
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeTypeSynonym2
                                             (f15
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                   x)))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeTypeSynonym5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeTypeSynonym4
                              (Language.PureScript.Names.$w$cshowsPrec2
                                 @ 'Language.PureScript.Names.TypeName
                                 0#
                                 ww1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeTypeSynonym3
                                       (f14
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Ide.Types.$fShowIdeTypeSynonym2
                                                (f15
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x))))))))))) }) -}
d3a8b9ee2a2b4ee394d9948e09eb3611
  $w$cshowsPrec16 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (ww2 :: Language.PureScript.Types.SourceType) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$w$cshowsPrec3
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeValue4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeValue3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeValue2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeValue4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeValue3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeValue2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
5f6b696a1ee2dfb69a30d44f6ab4fdc6
  $w$cshowsPrec17 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.AST.Operators.Associativity
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U,U)><L,1*U(1*U,U)><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.AST.Operators.Precedence)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Types.SourceType) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww6 { Language.PureScript.Names.Qualified ww7 ww8 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName))
                       Language.PureScript.Ide.Types.$fShowIdeValueOperator_$s$fShowEither
                       0#
                       ww7
                       ww8 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ (Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn)
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww5
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeValueOperator7
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeValueOperator6
                          (Language.PureScript.Names.$w$cshowsPrec3
                             @ 'Language.PureScript.Names.ValueOpName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeValueOperator5
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeValueOperator4
                                            (case GHC.Show.$w$cshowsPrec4
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Ide.Types.$fShowIdeValueOperator3
                                                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                                                             ww4
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                GHC.Show.showCommaSpace1
                                                                (GHC.CString.unpackAppendCString#
                                                                   Language.PureScript.Ide.Types.$fShowIdeValueOperator2
                                                                   (f15
                                                                      (GHC.CString.unpackAppendCString#
                                                                         Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                                         x))))))) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
fb37c344e14b1371a6bc8438855d851a
  $w$cshowsPrec18 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Match a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,U><L,1*U(1*U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Language.PureScript.Ide.Types.Match a)
                   (w2 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowMatch1
                        (case w1
                                `cast`
                              (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww1 { (,) ww2 ww3 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (Language.PureScript.Names.$w$cshowsPrec
                              0#
                              ww2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo1
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2)
                                    (GHC.Show.showsPrec @ a w GHC.Show.$fShow(,)1 ww3)
                                    (GHC.Types.[] @ GHC.Show.ShowS)))) })
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowMatch1
                           (case w1
                                   `cast`
                                 (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of ww1 { (,) ww2 ww3 ->
                            GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)4
                              (Language.PureScript.Names.$w$cshowsPrec
                                 0#
                                 ww2
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showList__1
                                    (GHC.Show.$fShow(,)_$sgo1
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)2
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w2))
                                       (GHC.Show.showsPrec @ a w GHC.Show.$fShow(,)1 ww3)
                                       (GHC.Types.[] @ GHC.Show.ShowS)))) })) }) -}
b9eb2ae0777aa82b05464c5c85d22086
  $w$cshowsPrec19 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Success
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
9284e2b6bc8856b18ac5ac00ce4d4416
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> [Language.PureScript.Names.ModuleName]
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><L,U(U,U,U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
9aba136e4787324b77bd43f7f8f392cd
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Types.SourceType
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   (ww2 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (ww3 :: Language.PureScript.Types.SourceType) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$w$cshowsPrec3
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                       0#
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeDataConstructor6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor5
                          (Language.PureScript.Names.$w$cshowsPrec2
                             @ 'Language.PureScript.Names.ConstructorName
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeDataConstructor4
                                   (Language.PureScript.Names.$w$cshowsPrec2
                                      @ 'Language.PureScript.Names.TypeName
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeDataConstructor3
                                            (f14
                                               (GHC.CString.unpackAppendCString#
                                                  Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                  x)))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
0c91b1320f07da0ab07b77b49d64d462
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
b02d1e3d0d65a3bc0459005430392eb1
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(1*U,1*U,1*U,1*U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.Annotation)
                   (ww2 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Language.PureScript.Ide.Types.Annotation ww4 ww5 ww6 ww7 ->
                     Language.PureScript.Ide.Types.$w$cshowsPrec 0# ww4 ww5 ww6 ww7 }
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Ide.Types.$w$cshowsPrec4 0# ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
84544a9d16d461ce049fedee0ac20f56
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.ModuleMap
         Language.PureScript.Externs.ExternsFile
    -> Language.PureScript.Ide.Types.ModuleMap
         (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.ModuleMap
                             Language.PureScript.Externs.ExternsFile)
                   (ww2 :: Language.PureScript.Ide.Types.ModuleMap
                             (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ Language.PureScript.Externs.ExternsFile
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Externs.$fShowExternsFile
                       0#
                       ww1
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowIdeFileState_$s$fShow(,)
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Types.$fShowIdeFileState4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeFileState3
                           (f14
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Ide.Types.$fShowIdeFileState2
                                    (f15
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Types.$fShowIdeFileState4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Ide.Types.$fShowIdeFileState3
                              (f14
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Types.$fShowIdeFileState2
                                       (f15
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
e60b69c3e91eb54a10b92338972b6df7
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [Language.PureScript.Types.SourceType]
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,1*U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.Names.Ident)
                   (ww3 :: [Language.PureScript.Types.SourceType])
                   (ww4 :: GHC.Base.Maybe
                             [Language.PureScript.Types.SourceConstraint]) ->
                 let {
                   f14 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww2
                 } in
                 let {
                   f15 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [Language.PureScript.Types.SourceConstraint]
                       Language.PureScript.Ide.Types.$fShowIdeInstance7
                       Language.PureScript.Ide.Types.$fFoldableAstData7
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Types.$fShowIdeInstance6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Ide.Types.$fShowIdeInstance5
                          (Language.PureScript.Names.$w$cshowsPrec
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Ide.Types.$fShowIdeInstance4
                                   (f14
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Ide.Types.$fShowIdeInstance3
                                            (let {
                                               s :: GHC.Base.String
                                               = GHC.Base.++
                                                   @ GHC.Types.Char
                                                   GHC.Show.showCommaSpace1
                                                   (GHC.CString.unpackAppendCString#
                                                      Language.PureScript.Ide.Types.$fShowIdeInstance2
                                                      (f15
                                                         (GHC.CString.unpackAppendCString#
                                                            Language.PureScript.Ide.Types.$fShowIdeDataConstructor2
                                                            x)))
                                             } in
                                             case ww3 of wild {
                                               []
                                               -> GHC.CString.unpackAppendCString#
                                                    GHC.Show.showList__4
                                                    s
                                               : x1 xs
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__3
                                                    (Language.PureScript.Types.$w$cshowsPrec3
                                                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                          [Language.PureScript.Comments.Comment])
                                                       Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                                                       0#
                                                       x1
                                                       (let {
                                                          lvl131 :: [GHC.Types.Char]
                                                          = GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showList__2
                                                              s
                                                        } in
                                                        letrec {
                                                          showl :: [Language.PureScript.Types.Type
                                                                      (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                       [Language.PureScript.Comments.Comment])]
                                                                   -> GHC.Base.String
                                                            {- Arity: 1, Strictness: <S,1*U> -}
                                                          = \ (ds2 :: [Language.PureScript.Types.Type
                                                                         (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                          [Language.PureScript.Comments.Comment])]) ->
                                                            case ds2 of wild1 {
                                                              [] -> lvl131
                                                              : y ys
                                                              -> GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showList__1
                                                                   (Language.PureScript.Types.$w$cshowsPrec3
                                                                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                         [Language.PureScript.Comments.Comment])
                                                                      Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
                                                                      0#
                                                                      y
                                                                      (showl ys)) }
                                                        } in
                                                        showl xs)) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
ced15246fae5ac5968cfdab937d3b807
  $w$cshowsPrec8 ::
    Language.PureScript.Ide.Types.IdeLogLevel
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeLogLevel)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Ide.Types.LogDebug
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel9
                        w1
                   Language.PureScript.Ide.Types.LogPerf
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel7
                        w1
                   Language.PureScript.Ide.Types.LogAll
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel5
                        w1
                   Language.PureScript.Ide.Types.LogDefault
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel3
                        w1
                   Language.PureScript.Ide.Types.LogNone
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeLogLevel1
                        w1 }) -}
a433d742d266c5a84cd109a4a3bf8314
  $w$cshowsPrec9 ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Ide.Types.IdeNamespace)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced7
                        w1
                   Language.PureScript.Ide.Types.IdeNSType
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced5
                        w1
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowIdeNamespaced3
                        w1 }) -}
a3be10187faeae154b0e3daa91c704e8
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Ide.Types.AstData
                           Language.PureScript.AST.SourcePos.SourceSpan) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.Ide.Types.DefinitionSites
                            Language.PureScript.AST.SourcePos.SourceSpan,
                          Language.PureScript.Ide.Types.TypeAnnotations)
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Types.$fShowAstData3
                       11#
                       w `cast`
                       (Language.PureScript.Ide.Types.N:AstData[0]
                            <Language.PureScript.AST.SourcePos.SourceSpan>_R)
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Types.$fShowAstData1
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Types.$fShowAstData1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
de371f6014114d544c549a0980c1bf09
  $w$sencodeSuccess ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Errors.JSON.JSONError]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Errors.JSON.JSONError
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
4dd50d3e3298b36f0215daacd588f284
  $w$sencodeSuccess1 ::
    [Language.PureScript.Ide.Types.ModuleIdent]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Types.ModuleIdent]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Data.Text.Internal.Text
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.Internal.$WString
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
7e5b54907ba88c2ae865b1d4d7caa346
  $w$sencodeSuccess2 ::
    [Language.PureScript.AST.SourcePos.SourceSpan]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.AST.SourcePos.SourceSpan]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.AST.SourcePos.SourceSpan
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.AST.SourcePos.$fToJSONSourceSpan_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
aa783f44c8f327b301a91596ad1947cc
  $w$sencodeSuccess3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww4
                        ww5
                        ww6
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww8
                        ww9
                        ww10
                        (Data.Aeson.Types.Internal.String
                           (Data.Text.Internal.Text ww ww1 ww2))
                        z23 of dt { DEFAULT ->
                 (# dt #) } } } } }) -}
3acb0702ca7dc2b4544a9af10d21e8f7
  $w$sencodeSuccess4 ::
    [Language.PureScript.Ide.Types.Completion]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Types.Completion]) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Ide.Types.encodeSuccess_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Ide.Types.Completion
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Ide.Types.$fToJSONCompletion_$ctoJSON
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.Array dt)
                        z23 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } }) -}
1c844c2d8f15d2d4957a70eeb1eb55cc
  $wencodeImport ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
92931d586c08b4f2f7d40b7ce1cb5207
  $wencodeSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    a -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <S(C(S)LLL),1*U(1*C1(U),A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: a) ->
                 case Language.PureScript.Ide.Types.encodeSuccess5 of v2 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case Data.Aeson.Types.ToJSON.toJSON @ a w w1 of v1 { DEFAULT ->
                 case Language.PureScript.Ide.Types.encodeSuccess1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        v1
                        z23 of dt { DEFAULT ->
                 (# dt #) } } } } } }) -}
b02d1e3d0d65a3bc0459005430392eb1
  data Annotation
    = Annotation {_annLocation :: GHC.Base.Maybe
                                    Language.PureScript.AST.SourcePos.SourceSpan,
                  _annExportedFrom :: GHC.Base.Maybe
                                        Language.PureScript.Names.ModuleName,
                  _annTypeAnnotation :: GHC.Base.Maybe
                                          Language.PureScript.Types.SourceType,
                  _annDocumentation :: GHC.Base.Maybe Data.Text.Internal.Text}
85d67545a4541d73a5afab71bcc6a25d
  newtype AstData a
    = AstData (Language.PureScript.Ide.Types.ModuleMap
                 (Language.PureScript.Ide.Types.DefinitionSites a,
                  Language.PureScript.Ide.Types.TypeAnnotations))
4b4d2eb10040d397c113a23d1ee3051f
  data Completion
    = Completion {complModule :: Data.Text.Internal.Text,
                  complIdentifier :: Data.Text.Internal.Text,
                  complType :: Data.Text.Internal.Text,
                  complExpandedType :: Data.Text.Internal.Text,
                  complLocation :: GHC.Base.Maybe
                                     Language.PureScript.AST.SourcePos.SourceSpan,
                  complDocumentation :: GHC.Base.Maybe Data.Text.Internal.Text,
                  complExportedFrom :: [Language.PureScript.Names.ModuleName]}
c161e16528e3e8b1440d99e361f106f0
  type DefinitionSites a =
    Data.Map.Internal.Map Language.PureScript.Ide.Types.IdeNamespaced a
daf7e11ebbb1a4f28e92151bdfd877f7
  type Ide (m :: * -> *) =
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Reader.Class.MonadReader
       Language.PureScript.Ide.Types.IdeEnvironment m)
    :: GHC.Types.Constraint
60599607aeaddfb6ebe1e4768bb3aec5
  data IdeConfiguration
    = IdeConfiguration {confOutputPath :: GHC.IO.FilePath,
                        confLogLevel :: Language.PureScript.Ide.Types.IdeLogLevel,
                        confGlobs :: [GHC.IO.FilePath],
                        confEditorMode :: GHC.Types.Bool}
0c91b1320f07da0ab07b77b49d64d462
  data IdeDataConstructor
    = IdeDataConstructor {_ideDtorName :: Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName,
                          _ideDtorTypeName :: Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName,
                          _ideDtorType :: Language.PureScript.Types.SourceType}
0c91b1320f07da0ab07b77b49d64d462
  data IdeDeclaration
    = IdeDeclValue Language.PureScript.Ide.Types.IdeValue
    | IdeDeclType Language.PureScript.Ide.Types.IdeType
    | IdeDeclTypeSynonym Language.PureScript.Ide.Types.IdeTypeSynonym
    | IdeDeclDataConstructor Language.PureScript.Ide.Types.IdeDataConstructor
    | IdeDeclTypeClass Language.PureScript.Ide.Types.IdeTypeClass
    | IdeDeclValueOperator Language.PureScript.Ide.Types.IdeValueOperator
    | IdeDeclTypeOperator Language.PureScript.Ide.Types.IdeTypeOperator
    | IdeDeclKind (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.KindName)
b02d1e3d0d65a3bc0459005430392eb1
  data IdeDeclarationAnn
    = IdeDeclarationAnn {_idaAnnotation :: Language.PureScript.Ide.Types.Annotation,
                         _idaDeclaration :: Language.PureScript.Ide.Types.IdeDeclaration}
ae7ebb9016daec3c320aa4779032899f
  data IdeEnvironment
    = IdeEnvironment {ideStateVar :: GHC.Conc.Sync.TVar
                                       Language.PureScript.Ide.Types.IdeState,
                      ideConfiguration :: Language.PureScript.Ide.Types.IdeConfiguration}
2923622c53c0f0fcf77bbfd3720beec1
  data IdeFileState
    = IdeFileState {fsExterns :: Language.PureScript.Ide.Types.ModuleMap
                                   Language.PureScript.Externs.ExternsFile,
                    fsModules :: Language.PureScript.Ide.Types.ModuleMap
                                   (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)}
60c599d0289b3fc90de185766f47b756
  data IdeInstance
    = IdeInstance {_ideInstanceModule :: Language.PureScript.Names.ModuleName,
                   _ideInstanceName :: Language.PureScript.Names.Ident,
                   _ideInstanceTypes :: [Language.PureScript.Types.SourceType],
                   _ideInstanceConstraints :: GHC.Base.Maybe
                                                [Language.PureScript.Types.SourceConstraint]}
ced15246fae5ac5968cfdab937d3b807
  data IdeLogLevel
    = LogDebug | LogPerf | LogAll | LogDefault | LogNone
a433d742d266c5a84cd109a4a3bf8314
  data IdeNamespace = IdeNSValue | IdeNSType | IdeNSKind
a433d742d266c5a84cd109a4a3bf8314
  data IdeNamespaced
    = IdeNamespaced Language.PureScript.Ide.Types.IdeNamespace
                    Data.Text.Internal.Text
08b5f0405d44452524b8941687d080f4
  data IdeState
    = IdeState {ideFileState :: Language.PureScript.Ide.Types.IdeFileState,
                ideVolatileState :: Language.PureScript.Ide.Types.IdeVolatileState}
862d0466a921badc471ac4eb799b1c5c
  data IdeType
    = IdeType {_ideTypeName :: Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName,
               _ideTypeKind :: Language.PureScript.Kinds.SourceKind,
               _ideTypeDtors :: [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  Language.PureScript.Types.SourceType)]}
60c599d0289b3fc90de185766f47b756
  data IdeTypeClass
    = IdeTypeClass {_ideTCName :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName,
                    _ideTCKind :: Language.PureScript.Kinds.SourceKind,
                    _ideTCInstances :: [Language.PureScript.Ide.Types.IdeInstance]}
942db7ca1b475d96338060f9a58d09df
  data IdeTypeOperator
    = IdeTypeOperator {_ideTypeOpName :: Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName,
                       _ideTypeOpAlias :: Language.PureScript.Names.Qualified
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName),
                       _ideTypeOpPrecedence :: Language.PureScript.AST.Operators.Precedence,
                       _ideTypeOpAssociativity :: Language.PureScript.AST.Operators.Associativity,
                       _ideTypeOpKind :: GHC.Base.Maybe
                                           Language.PureScript.Kinds.SourceKind}
434cac5be7a927bb03b5196d1252e0b7
  data IdeTypeSynonym
    = IdeTypeSynonym {_ideSynonymName :: Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName,
                      _ideSynonymType :: Language.PureScript.Types.SourceType,
                      _ideSynonymKind :: Language.PureScript.Kinds.SourceKind}
c06af6ff55b70f882a784f9bfe7ed7d8
  data IdeValue
    = IdeValue {_ideValueIdent :: Language.PureScript.Names.Ident,
                _ideValueType :: Language.PureScript.Types.SourceType}
cf3c14901b432d2873d0b1d8733734a7
  data IdeValueOperator
    = IdeValueOperator {_ideValueOpName :: Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName,
                        _ideValueOpAlias :: Language.PureScript.Names.Qualified
                                              (Data.Either.Either
                                                 Language.PureScript.Names.Ident
                                                 (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName)),
                        _ideValueOpPrecedence :: Language.PureScript.AST.Operators.Precedence,
                        _ideValueOpAssociativity :: Language.PureScript.AST.Operators.Associativity,
                        _ideValueOpType :: GHC.Base.Maybe
                                             Language.PureScript.Types.SourceType}
534b3d7af0aa98600153a60583892e70
  data IdeVolatileState
    = IdeVolatileState {vsAstData :: Language.PureScript.Ide.Types.AstData
                                       Language.PureScript.AST.SourcePos.SourceSpan,
                        vsDeclarations :: Language.PureScript.Ide.Types.ModuleMap
                                            [Language.PureScript.Ide.Types.IdeDeclarationAnn],
                        vsCachedRebuild :: GHC.Base.Maybe
                                             (Language.PureScript.Names.ModuleName,
                                              Language.PureScript.Externs.ExternsFile)}
fb37c344e14b1371a6bc8438855d851a
  newtype Match a = Match (Language.PureScript.Names.ModuleName, a)
1c3e4fd0dbf40b15e17f651377822ef5
  type ModuleIdent = Data.Text.Internal.Text
70319f3e75143277feb6984fb77be89b
  type ModuleMap a =
    Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
b02d1e3d0d65a3bc0459005430392eb1
  axiom Language.PureScript.Ide.Types.Rep_Annotation::
      GHC.Generics.Rep Language.PureScript.Ide.Types.Annotation
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Annotation"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Annotation" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_annLocation")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_annExportedFrom")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_annTypeAnnotation")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (GHC.Base.Maybe Language.PureScript.Types.SourceType))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_annDocumentation")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe Data.Text.Internal.Text)))))
85d67545a4541d73a5afab71bcc6a25d
  axiom Language.PureScript.Ide.Types.Rep_AstData::
      GHC.Generics.Rep (Language.PureScript.Ide.Types.AstData a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "AstData"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "AstData" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Ide.Types.ModuleMap
                        (Language.PureScript.Ide.Types.DefinitionSites a,
                         Language.PureScript.Ide.Types.TypeAnnotations)))))
0c91b1320f07da0ab07b77b49d64d462
  axiom Language.PureScript.Ide.Types.Rep_IdeDataConstructor::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDataConstructor
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDataConstructor"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeDataConstructor" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideDtorName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideDtorTypeName")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideDtorType")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        Language.PureScript.Types.SourceType))))
0c91b1320f07da0ab07b77b49d64d462
  axiom Language.PureScript.Ide.Types.Rep_IdeDeclaration::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclaration
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDeclaration"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "IdeDeclValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeValue))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeType)))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.Ide.Types.IdeTypeSynonym))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclDataConstructor"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeDataConstructor))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "IdeDeclTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeTypeClass))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclValueOperator"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeValueOperator)))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "IdeDeclTypeOperator"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Ide.Types.IdeTypeOperator))
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "IdeDeclKind"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.KindName))))))
b02d1e3d0d65a3bc0459005430392eb1
  axiom Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeDeclarationAnn
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeDeclarationAnn"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeDeclarationAnn" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_idaAnnotation")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Ide.Types.Annotation)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "_idaDeclaration")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      Language.PureScript.Ide.Types.IdeDeclaration)))
60c599d0289b3fc90de185766f47b756
  axiom Language.PureScript.Ide.Types.Rep_IdeInstance::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeInstance
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeInstance"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeInstance" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideInstanceModule")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 Language.PureScript.Names.ModuleName)
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideInstanceName")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Names.Ident))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideInstanceTypes")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 [Language.PureScript.Types.SourceType])
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideInstanceConstraints")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe
                                                           [Language.PureScript.Types.SourceConstraint])))))
a433d742d266c5a84cd109a4a3bf8314
  axiom Language.PureScript.Ide.Types.Rep_IdeNamespace::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespace
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeNamespace"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeNSValue" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "IdeNSType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "IdeNSKind"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
a433d742d266c5a84cd109a4a3bf8314
  axiom Language.PureScript.Ide.Types.Rep_IdeNamespaced::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeNamespaced
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeNamespaced"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeNamespaced" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Ide.Types.IdeNamespace)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 Data.Text.Internal.Text)))
862d0466a921badc471ac4eb799b1c5c
  axiom Language.PureScript.Ide.Types.Rep_IdeType::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeType
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeType"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeType" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideTypeName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeKind")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Kinds.SourceKind)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideTypeDtors")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        [(Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName,
                                                          Language.PureScript.Types.SourceType)]))))
60c599d0289b3fc90de185766f47b756
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeClass::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeClass
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeClass"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeClass" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideTCName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTCKind")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Kinds.SourceKind)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideTCInstances")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        [Language.PureScript.Ide.Types.IdeInstance]))))
942db7ca1b475d96338060f9a58d09df
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeOperator::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeOperator
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeOperator"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideTypeOpName")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (Language.PureScript.Names.OpName
                         'Language.PureScript.Names.TypeOpName))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeOpAlias")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName))))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideTypeOpPrecedence")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.AST.Operators.Precedence)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideTypeOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.Operators.Associativity)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "_ideTypeOpKind")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (GHC.Base.Maybe
                                                                             Language.PureScript.Kinds.SourceKind))))))
434cac5be7a927bb03b5196d1252e0b7
  axiom Language.PureScript.Ide.Types.Rep_IdeTypeSynonym::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeTypeSynonym
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeTypeSynonym"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeTypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideSynonymName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideSynonymType")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.Types.SourceType)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "_ideSynonymKind")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        Language.PureScript.Kinds.SourceKind))))
c06af6ff55b70f882a784f9bfe7ed7d8
  axiom Language.PureScript.Ide.Types.Rep_IdeValue::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValue
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeValue"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeValue" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "_ideValueIdent")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Language.PureScript.Names.Ident)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "_ideValueType")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 Language.PureScript.Types.SourceType)))
cf3c14901b432d2873d0b1d8733734a7
  axiom Language.PureScript.Ide.Types.Rep_IdeValueOperator::
      GHC.Generics.Rep Language.PureScript.Ide.Types.IdeValueOperator
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IdeValueOperator"
               "Language.PureScript.Ide.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "IdeValueOperator" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "_ideValueOpName")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (Language.PureScript.Names.OpName
                         'Language.PureScript.Names.ValueOpName))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideValueOpAlias")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       (Language.PureScript.Names.Qualified
                                          (Data.Either.Either
                                             Language.PureScript.Names.Ident
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName)))))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "_ideValueOpPrecedence")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Language.PureScript.AST.Operators.Precedence)
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "_ideValueOpAssociativity")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.Operators.Associativity)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "_ideValueOpType")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (GHC.Base.Maybe
                                                                             Language.PureScript.Types.SourceType))))))
b9eb2ae0777aa82b05464c5c85d22086
  data Success
    = CompletionResult [Language.PureScript.Ide.Types.Completion]
    | TextResult Data.Text.Internal.Text
    | UsagesResult [Language.PureScript.AST.SourcePos.SourceSpan]
    | MultilineTextResult [Data.Text.Internal.Text]
    | ImportList (Language.PureScript.Names.ModuleName,
                  [(Language.PureScript.Names.ModuleName,
                    Language.PureScript.AST.Declarations.ImportDeclarationType,
                    GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
    | ModuleList [Language.PureScript.Ide.Types.ModuleIdent]
    | RebuildSuccess Language.PureScript.Errors.MultipleErrors
ccd1ccf94d43b6da534c378dbd72ecc7
  type TypeAnnotations =
    Data.Map.Internal.Map
      Language.PureScript.Names.Ident
      Language.PureScript.Types.SourceType
2a59d3a75e6ec43625d4ac73194fc132
  _IdeDeclDataConstructor ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeDataConstructor
                           -> f14 Language.PureScript.Ide.Types.IdeDataConstructor)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeDataConstructor
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclDataConstructor
                        (eta x) }) -}
1b3f572c45f77f55e51dccaac7ebe8b4
  _IdeDeclKind ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName))
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclKind x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclKind
                        (eta x) }) -}
5a85c0225b99d2057d2ce54ca7b67a42
  _IdeDeclType ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeType
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeType
                           -> f14 Language.PureScript.Ide.Types.IdeType)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclType x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeType
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclType
                        (eta x) }) -}
1c5e11849eaa2f03b374ba2b50a55ccb
  _IdeDeclTypeClass ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeClass
                           -> f14 Language.PureScript.Ide.Types.IdeTypeClass)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeClass x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeClass
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeClass
                        (eta x) }) -}
48e91b062c4e39088a3056ffc188426a
  _IdeDeclTypeOperator ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeOperator
                           -> f14 Language.PureScript.Ide.Types.IdeTypeOperator)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeOperator
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeOperator
                        (eta x) }) -}
1a34cbfe89c7ee34f024ee6ec31fbf20
  _IdeDeclTypeSynonym ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeTypeSynonym
                           -> f14 Language.PureScript.Ide.Types.IdeTypeSynonym)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeTypeSynonym
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclTypeSynonym
                        (eta x) }) -}
f69c0561e04acdd8727d69b166d26993
  _IdeDeclValue ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeValue
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeValue
                           -> f14 Language.PureScript.Ide.Types.IdeValue)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclValue x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeValue
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclValue
                        (eta x) }) -}
719b52cf16b49b15d6375afaac01e929
  _IdeDeclValueOperator ::
    Lens.Micro.Type.Traversal'
      Language.PureScript.Ide.Types.IdeDeclaration
      Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f14 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f14)
                   (eta :: Language.PureScript.Ide.Types.IdeValueOperator
                           -> f14 Language.PureScript.Ide.Types.IdeValueOperator)
                   (eta1 :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f14
                        $dApplicative
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        wild
                   Language.PureScript.Ide.Types.IdeDeclValueOperator x
                   -> GHC.Base.fmap
                        @ f14
                        (GHC.Base.$p1Applicative @ f14 $dApplicative)
                        @ Language.PureScript.Ide.Types.IdeValueOperator
                        @ Language.PureScript.Ide.Types.IdeDeclaration
                        Language.PureScript.Ide.Types.IdeDeclValueOperator
                        (eta x) }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _annDocumentation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _annExportedFrom ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _annLocation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _annTypeAnnotation ::
    Language.PureScript.Ide.Types.Annotation
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.Ide.Types.Annotation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _idaAnnotation ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.Annotation
  RecSel Left Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn ds1 ds2 ->
                 ds1 }) -}
b02d1e3d0d65a3bc0459005430392eb1
  _idaDeclaration ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclaration
  RecSel Left Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn ds1 ds2 ->
                 ds2 }) -}
0c91b1320f07da0ab07b77b49d64d462
  _ideDtorName ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds1 }) -}
0c91b1320f07da0ab07b77b49d64d462
  _ideDtorType ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds3 }) -}
0c91b1320f07da0ab07b77b49d64d462
  _ideDtorTypeName ::
    Language.PureScript.Ide.Types.IdeDataConstructor
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeDataConstructor
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor ds1 ds2 ds3 ->
                 ds2 }) -}
60c599d0289b3fc90de185766f47b756
  _ideInstanceConstraints ::
    Language.PureScript.Ide.Types.IdeInstance
    -> GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
60c599d0289b3fc90de185766f47b756
  _ideInstanceModule ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
60c599d0289b3fc90de185766f47b756
  _ideInstanceName ::
    Language.PureScript.Ide.Types.IdeInstance
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
60c599d0289b3fc90de185766f47b756
  _ideInstanceTypes ::
    Language.PureScript.Ide.Types.IdeInstance
    -> [Language.PureScript.Types.SourceType]
  RecSel Left Language.PureScript.Ide.Types.IdeInstance
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
434cac5be7a927bb03b5196d1252e0b7
  _ideSynonymKind ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Kinds.SourceKind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds3 }) -}
434cac5be7a927bb03b5196d1252e0b7
  _ideSynonymName ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds1 }) -}
434cac5be7a927bb03b5196d1252e0b7
  _ideSynonymType ::
    Language.PureScript.Ide.Types.IdeTypeSynonym
    -> Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.Ide.Types.IdeTypeSynonym
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym ds1 ds2 ds3 ->
                 ds2 }) -}
60c599d0289b3fc90de185766f47b756
  _ideTCInstances ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> [Language.PureScript.Ide.Types.IdeInstance]
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds3 }) -}
60c599d0289b3fc90de185766f47b756
  _ideTCKind ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Kinds.SourceKind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds2 }) -}
60c599d0289b3fc90de185766f47b756
  _ideTCName ::
    Language.PureScript.Ide.Types.IdeTypeClass
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeClass
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass ds1 ds2 ds3 ->
                 ds1 }) -}
862d0466a921badc471ac4eb799b1c5c
  _ideTypeDtors ::
    Language.PureScript.Ide.Types.IdeType
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         Language.PureScript.Types.SourceType)]
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds3 }) -}
862d0466a921badc471ac4eb799b1c5c
  _ideTypeKind ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Kinds.SourceKind
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds2 }) -}
862d0466a921badc471ac4eb799b1c5c
  _ideTypeName ::
    Language.PureScript.Ide.Types.IdeType
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Ide.Types.IdeType
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType ds1 ds2 ds3 ->
                 ds1 }) -}
942db7ca1b475d96338060f9a58d09df
  _ideTypeOpAlias ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
942db7ca1b475d96338060f9a58d09df
  _ideTypeOpAssociativity ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
942db7ca1b475d96338060f9a58d09df
  _ideTypeOpKind ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> GHC.Base.Maybe Language.PureScript.Kinds.SourceKind
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
942db7ca1b475d96338060f9a58d09df
  _ideTypeOpName ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
942db7ca1b475d96338060f9a58d09df
  _ideTypeOpPrecedence ::
    Language.PureScript.Ide.Types.IdeTypeOperator
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Ide.Types.IdeTypeOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  _ideValueIdent ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue ds1 ds2 ->
                 ds1 }) -}
cf3c14901b432d2873d0b1d8733734a7
  _ideValueOpAlias ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
cf3c14901b432d2873d0b1d8733734a7
  _ideValueOpAssociativity ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
cf3c14901b432d2873d0b1d8733734a7
  _ideValueOpName ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
cf3c14901b432d2873d0b1d8733734a7
  _ideValueOpPrecedence ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
cf3c14901b432d2873d0b1d8733734a7
  _ideValueOpType ::
    Language.PureScript.Ide.Types.IdeValueOperator
    -> GHC.Base.Maybe Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.Ide.Types.IdeValueOperator
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
c06af6ff55b70f882a784f9bfe7ed7d8
  _ideValueType ::
    Language.PureScript.Ide.Types.IdeValue
    -> Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.Ide.Types.IdeValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue ds1 ds2 ->
                 ds2 }) -}
d9e823154e68e2ce1d084a0bdcc5521a
  annDocumentation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Data.Text.Internal.Text)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Data.Text.Internal.Text
                           -> f14 (GHC.Base.Maybe Data.Text.Internal.Text))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Data.Text.Internal.Text)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                    Language.PureScript.Ide.Types.Annotation x x1 x2 y)
                   (f15 x3) }) -}
1a728ad6f0d92c8e64b52b01be9afcbb
  annExportedFrom ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
                           -> f14 (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                    Language.PureScript.Ide.Types.Annotation x y x2 x3)
                   (f15 x1) }) -}
1dc1c182076c3e0e19e15eac6330b48a
  annLocation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
                           -> f14 (GHC.Base.Maybe
                                     Language.PureScript.AST.SourcePos.SourceSpan))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe
                              Language.PureScript.AST.SourcePos.SourceSpan) ->
                    Language.PureScript.Ide.Types.Annotation y x1 x2 x3)
                   (f15 x) }) -}
9d9339f4e0b32df5258db3f65ce772f7
  annTypeAnnotation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.Annotation
      (GHC.Base.Maybe Language.PureScript.Types.SourceType)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Types.SourceType
                           -> f14 (GHC.Base.Maybe Language.PureScript.Types.SourceType))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   @ Language.PureScript.Ide.Types.Annotation
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Types.SourceType) ->
                    Language.PureScript.Ide.Types.Annotation x x1 y x3)
                   (f15 x2) }) -}
30b07c9f4bcb7d654ab6d8adfaab60ba
  anyOf ::
    Lens.Micro.Type.Getting Data.Semigroup.Internal.Any s a
    -> (a -> GHC.Types.Bool) -> s -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C(U))><L,C(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ a
                   (g :: Lens.Micro.Type.Getting Data.Semigroup.Internal.Any s a)
                   (p :: a -> GHC.Types.Bool) ->
                 let {
                   g1 :: s -> Data.Functor.Const.Const Data.Semigroup.Internal.Any s
                   = g (\ (x :: a) -> p x)
                         `cast`
                       (<a>_R
                        ->_R Sym (Data.Semigroup.Internal.N:Any[0]) ; Sym (Data.Functor.Const.N:Const[0]
                                                                               <*>_N
                                                                               <Data.Semigroup.Internal.Any>_R
                                                                               <a>_P))
                 } in
                 (\ (x :: s) -> g1 x)
                   `cast`
                 (<s>_R
                  ->_R Data.Functor.Const.N:Const[0]
                           <*>_N
                           <Data.Semigroup.Internal.Any>_R
                           <s>_P ; Data.Semigroup.Internal.N:Any[0])) -}
4b4d2eb10040d397c113a23d1ee3051f
  complDocumentation ::
    Language.PureScript.Ide.Types.Completion
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complExpandedType ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complExportedFrom ::
    Language.PureScript.Ide.Types.Completion
    -> [Language.PureScript.Names.ModuleName]
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complIdentifier ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complLocation ::
    Language.PureScript.Ide.Types.Completion
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complModule ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
4b4d2eb10040d397c113a23d1ee3051f
  complType ::
    Language.PureScript.Ide.Types.Completion -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Types.Completion
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.Completion) ->
                 case ds of wild { Language.PureScript.Ide.Types.Completion ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
60599607aeaddfb6ebe1e4768bb3aec5
  confEditorMode ::
    Language.PureScript.Ide.Types.IdeConfiguration -> GHC.Types.Bool
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
60599607aeaddfb6ebe1e4768bb3aec5
  confGlobs ::
    Language.PureScript.Ide.Types.IdeConfiguration -> [GHC.IO.FilePath]
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
60599607aeaddfb6ebe1e4768bb3aec5
  confLogLevel ::
    Language.PureScript.Ide.Types.IdeConfiguration
    -> Language.PureScript.Ide.Types.IdeLogLevel
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
60599607aeaddfb6ebe1e4768bb3aec5
  confOutputPath ::
    Language.PureScript.Ide.Types.IdeConfiguration -> GHC.IO.FilePath
  RecSel Left Language.PureScript.Ide.Types.IdeConfiguration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeConfiguration) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeConfiguration ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
c6db26e1c9b1e1721bc8c428d1f879f7
  emptyAnn :: Language.PureScript.Ide.Types.Annotation
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.Annotation
                   (GHC.Base.Nothing @ Language.PureScript.AST.SourcePos.SourceSpan)
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   (GHC.Base.Nothing @ Language.PureScript.Types.SourceType)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
53873654980084c6c06db1db0d5ae76a
  emptyFileState :: Language.PureScript.Ide.Types.IdeFileState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeFileState
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ Language.PureScript.Externs.ExternsFile)
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ (Language.PureScript.AST.Declarations.Module,
                         GHC.IO.FilePath))) -}
2f7666798faf85c52ce67be061aebd45
  emptyIdeState :: Language.PureScript.Ide.Types.IdeState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeState
                   Language.PureScript.Ide.Types.emptyFileState
                   Language.PureScript.Ide.Types.emptyVolatileState) -}
23ef99bb4665b10adcca52149b47281d
  emptyVolatileState ::
    Language.PureScript.Ide.Types.IdeVolatileState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Types.IdeVolatileState
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ (Language.PureScript.Ide.Types.DefinitionSites
                           Language.PureScript.AST.SourcePos.SourceSpan,
                         Language.PureScript.Ide.Types.TypeAnnotations))
                     `cast`
                   (Sym (Language.PureScript.Ide.Types.N:AstData[0]
                             <Language.PureScript.AST.SourcePos.SourceSpan>_R))
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.ModuleName
                      @ [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (GHC.Base.Nothing
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Externs.ExternsFile))) -}
c3cc24d7e0d9d568a63a41ab9bd254d9
  encodeImport ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                          GHC.Base.Maybe Language.PureScript.Names.ModuleName)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Types.$wencodeImport ww1 ww2 ww3 }) -}
61091852aacad894060ef442abd91c70
  encodeSuccess ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    a -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <S(C(S)LLL),1*U(1*C1(U),A,A,A)><L,U>m1,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Data.Aeson.Types.ToJSON.ToJSON a) (w1 :: a) ->
                 case Language.PureScript.Ide.Types.$wencodeSuccess
                        @ a
                        w
                        w1 of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
387bac1581b7a518fd6ce54e12e9d9ae
  encodeSuccess1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.encodeSuccess2) -}
559e6b2870665233adade1a748148650
  encodeSuccess2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("result"#) -}
c042b3465cb316a0fc564d0a673530de
  encodeSuccess3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Types.encodeSuccess4) -}
05a08920aca5cfbadb721b6a5e698168
  encodeSuccess4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("resultType"#) -}
9a5747fbe075ab25ae3f94d0ccf9a4f7
  encodeSuccess5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Ide.Types.encodeSuccess6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
f1f4c1ec4d9bd81ac8c15503d962c995
  encodeSuccess6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("success"#) -}
2e3e9bcc5e4ab1dd60a5198b3c07ab4a
  encodeSuccess_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
c201294211c9321e5b5d0c551f0fa2f2
  encodeSuccess_$sencodeSuccess1 ::
    [Language.PureScript.Ide.Types.ModuleIdent]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Ide.Types.ModuleIdent]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess1
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
95e1f24a2cc15e8cd69cc4c93b1a0d83
  encodeSuccess_$sencodeSuccess2 ::
    [Language.PureScript.AST.SourcePos.SourceSpan]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.AST.SourcePos.SourceSpan]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess2
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
20b925be6e4dfd583a6607647808348d
  encodeSuccess_$sencodeSuccess3 ::
    Data.Text.Internal.Text -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess3
                        ww1
                        ww2
                        ww3 of ww4 { Unit# ww5 ->
                 Data.Aeson.Types.Internal.Object ww5 } }) -}
5fbd3d2b566337597204f3b9aa758052
  encodeSuccess_$sencodeSuccess4 ::
    [Language.PureScript.Ide.Types.Completion]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Ide.Types.Completion]) ->
                 case Language.PureScript.Ide.Types.$w$sencodeSuccess4
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
2923622c53c0f0fcf77bbfd3720beec1
  fsExterns ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.ModuleMap
         Language.PureScript.Externs.ExternsFile
  RecSel Left Language.PureScript.Ide.Types.IdeFileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeFileState ds1 ds2 ->
                 ds1 }) -}
2923622c53c0f0fcf77bbfd3720beec1
  fsModules ::
    Language.PureScript.Ide.Types.IdeFileState
    -> Language.PureScript.Ide.Types.ModuleMap
         (Language.PureScript.AST.Declarations.Module, GHC.IO.FilePath)
  RecSel Left Language.PureScript.Ide.Types.IdeFileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeFileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeFileState ds1 ds2 ->
                 ds2 }) -}
0fdfd8b35ab07c15de959e014e8b293c
  idaAnnotation ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDeclarationAnn
      Language.PureScript.Ide.Types.Annotation
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Ide.Types.Annotation
                           -> f14 Language.PureScript.Ide.Types.Annotation)
                   (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Ide.Types.Annotation
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   (\ (y :: Language.PureScript.Ide.Types.Annotation) ->
                    Language.PureScript.Ide.Types.IdeDeclarationAnn y x1)
                   (f15 x) }) -}
52470585dda3a96f11d1deb064fffc24
  idaDeclaration ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDeclarationAnn
      Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Ide.Types.IdeDeclaration
                           -> f14 Language.PureScript.Ide.Types.IdeDeclaration)
                   (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Ide.Types.IdeDeclaration
                   @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                   (\ (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                    Language.PureScript.Ide.Types.IdeDeclarationAnn x y)
                   (f15 x1) }) -}
ae7ebb9016daec3c320aa4779032899f
  ideConfiguration ::
    Language.PureScript.Ide.Types.IdeEnvironment
    -> Language.PureScript.Ide.Types.IdeConfiguration
  RecSel Left Language.PureScript.Ide.Types.IdeEnvironment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeEnvironment) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeEnvironment ds1 ds2 ->
                 ds2 }) -}
f5cb16b133f56c5181009aa7f78d9703
  ideDtorName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName))
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor y x1 x2)
                   (f15 x) }) -}
39d15c8ff3b20d67ac734f8d16472e8c
  ideDtorType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      Language.PureScript.Types.SourceType
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.SourceType
                           -> f14 Language.PureScript.Types.SourceType)
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.SourceType
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Types.SourceType) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor x x1 y)
                   (f15 x2) }) -}
8722317caade6850b775626bc1244b04
  ideDtorTypeName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeDataConstructor
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeDataConstructor) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeDataConstructor
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeDataConstructor x y x2)
                   (f15 x1) }) -}
08b5f0405d44452524b8941687d080f4
  ideFileState ::
    Language.PureScript.Ide.Types.IdeState
    -> Language.PureScript.Ide.Types.IdeFileState
  RecSel Left Language.PureScript.Ide.Types.IdeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeState ds1 ds2 ->
                 ds1 }) -}
20f2e2b0cc8b342bb9b4bab74eafd289
  ideInstanceConstraints ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      (GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint]
                           -> f14 (GHC.Base.Maybe
                                     [Language.PureScript.Types.SourceConstraint]))
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe [Language.PureScript.Types.SourceConstraint])
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: GHC.Base.Maybe
                              [Language.PureScript.Types.SourceConstraint]) ->
                    Language.PureScript.Ide.Types.IdeInstance x x1 x2 y)
                   (f15 x3) }) -}
55c8f82fe1bf6169575dc0541f123478
  ideInstanceModule ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      Language.PureScript.Names.ModuleName
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ModuleName
                           -> f14 Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.ModuleName
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: Language.PureScript.Names.ModuleName) ->
                    Language.PureScript.Ide.Types.IdeInstance y x1 x2 x3)
                   (f15 x) }) -}
a11a9f01e545a5141b62b61deb53899d
  ideInstanceName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      Language.PureScript.Names.Ident
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Ident
                           -> f14 Language.PureScript.Names.Ident)
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: Language.PureScript.Names.Ident) ->
                    Language.PureScript.Ide.Types.IdeInstance x y x2 x3)
                   (f15 x1) }) -}
49ff12837712f4952b106125fe73b7a9
  ideInstanceTypes ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeInstance
      [Language.PureScript.Types.SourceType]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [Language.PureScript.Types.SourceType]
                           -> f14 [Language.PureScript.Types.SourceType])
                   (ds :: Language.PureScript.Ide.Types.IdeInstance) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeInstance x x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [Language.PureScript.Types.SourceType]
                   @ Language.PureScript.Ide.Types.IdeInstance
                   (\ (y :: [Language.PureScript.Types.SourceType]) ->
                    Language.PureScript.Ide.Types.IdeInstance x x1 y x3)
                   (f15 x2) }) -}
ae7ebb9016daec3c320aa4779032899f
  ideStateVar ::
    Language.PureScript.Ide.Types.IdeEnvironment
    -> GHC.Conc.Sync.TVar Language.PureScript.Ide.Types.IdeState
  RecSel Left Language.PureScript.Ide.Types.IdeEnvironment
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeEnvironment) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeEnvironment ds1 ds2 ->
                 ds1 }) -}
c38c08c49664012d9aaef2976130ce0f
  ideSynonymKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      Language.PureScript.Kinds.SourceKind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.SourceKind
                           -> f14 Language.PureScript.Kinds.SourceKind)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.SourceKind
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Kinds.SourceKind) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym x x1 y)
                   (f15 x2) }) -}
dba058d7cc24bbf5f5716fc90da609d5
  ideSynonymName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym y x1 x2)
                   (f15 x) }) -}
eb7e9815ca9a6fb050c3562bfd884f48
  ideSynonymType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeSynonym
      Language.PureScript.Types.SourceType
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.SourceType
                           -> f14 Language.PureScript.Types.SourceType)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeSynonym) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.SourceType
                   @ Language.PureScript.Ide.Types.IdeTypeSynonym
                   (\ (y :: Language.PureScript.Types.SourceType) ->
                    Language.PureScript.Ide.Types.IdeTypeSynonym x y x2)
                   (f15 x1) }) -}
5b59ca03b106fdeecf9e36acde0c63cd
  ideTCInstances ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      [Language.PureScript.Ide.Types.IdeInstance]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [Language.PureScript.Ide.Types.IdeInstance]
                           -> f14 [Language.PureScript.Ide.Types.IdeInstance])
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [Language.PureScript.Ide.Types.IdeInstance]
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: [Language.PureScript.Ide.Types.IdeInstance]) ->
                    Language.PureScript.Ide.Types.IdeTypeClass x x1 y)
                   (f15 x2) }) -}
474100277ac9c9c30997b77bff07c34c
  ideTCKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      Language.PureScript.Kinds.SourceKind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.SourceKind
                           -> f14 Language.PureScript.Kinds.SourceKind)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.SourceKind
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: Language.PureScript.Kinds.SourceKind) ->
                    Language.PureScript.Ide.Types.IdeTypeClass x y x2)
                   (f15 x1) }) -}
6707b0fb5bd9d8aacf896d456424bf01
  ideTCName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeClass
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeClass) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   @ Language.PureScript.Ide.Types.IdeTypeClass
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName) ->
                    Language.PureScript.Ide.Types.IdeTypeClass y x1 x2)
                   (f15 x) }) -}
4b9bddc6631c182d584f8530a50d7c85
  ideTypeDtors ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      [(Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName,
        Language.PureScript.Types.SourceType)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: [(Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName,
                             Language.PureScript.Types.SourceType)]
                           -> f14 [(Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName,
                                    Language.PureScript.Types.SourceType)])
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ [(Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName,
                       Language.PureScript.Types.SourceType)]
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: [(Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName,
                              Language.PureScript.Types.SourceType)]) ->
                    Language.PureScript.Ide.Types.IdeType x x1 y)
                   (f15 x2) }) -}
6702fd04c337d07b067bd4d1673884df
  ideTypeKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      Language.PureScript.Kinds.SourceKind
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Kinds.SourceKind
                           -> f14 Language.PureScript.Kinds.SourceKind)
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Kinds.SourceKind
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: Language.PureScript.Kinds.SourceKind) ->
                    Language.PureScript.Ide.Types.IdeType x y x2)
                   (f15 x1) }) -}
102b07c9135d8fc8731c934f05b32722
  ideTypeName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeType
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName
                           -> f14 (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                   (ds :: Language.PureScript.Ide.Types.IdeType) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   @ Language.PureScript.Ide.Types.IdeType
                   (\ (y :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName) ->
                    Language.PureScript.Ide.Types.IdeType y x1 x2)
                   (f15 x) }) -}
4596a313d73b37d761eb235ffabd911f
  ideTypeOpAlias ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                           -> f14 (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName)))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x y x2 x3 x4)
                   (f15 x1) }) -}
64bf98d832f8a4caf0eac66a914d1fed
  ideTypeOpAssociativity ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      Language.PureScript.AST.Operators.Associativity
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Associativity
                           -> f14 Language.PureScript.AST.Operators.Associativity)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Associativity
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.AST.Operators.Associativity) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 y x4)
                   (f15 x3) }) -}
4969765bdb09b7f55df33636901b3be4
  ideTypeOpKind ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Kinds.SourceKind
                           -> f14 (GHC.Base.Maybe Language.PureScript.Kinds.SourceKind))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Kinds.SourceKind) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 y)
                   (f15 x4) }) -}
08dd8715bd3877a439fc94b5ef8510e9
  ideTypeOpName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName
                           -> f14 (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.TypeOpName)
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator y x1 x2 x3 x4)
                   (f15 x) }) -}
e19fe189a9ca49678d50dc7b5741ee19
  ideTypeOpPrecedence ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeTypeOperator
      Language.PureScript.AST.Operators.Precedence
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Precedence
                           -> f14 Language.PureScript.AST.Operators.Precedence)
                   (ds :: Language.PureScript.Ide.Types.IdeTypeOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Precedence
                   @ Language.PureScript.Ide.Types.IdeTypeOperator
                   (\ (y :: Language.PureScript.AST.Operators.Precedence) ->
                    Language.PureScript.Ide.Types.IdeTypeOperator x x1 y x3 x4)
                   (f15 x2) }) -}
e8d6898aa2565d8b04f5faf56de63fbb
  ideValueIdent ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValue
      Language.PureScript.Names.Ident
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Ident
                           -> f14 Language.PureScript.Names.Ident)
                   (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Ide.Types.IdeValue
                   (\ (y :: Language.PureScript.Names.Ident) ->
                    Language.PureScript.Ide.Types.IdeValue y x1)
                   (f15 x) }) -}
d487c1bd631455a3c89133bc647988eb
  ideValueOpAlias ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName)))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))
                           -> f14 (Language.PureScript.Names.Qualified
                                     (Data.Either.Either
                                        Language.PureScript.Names.Ident
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName))))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.Qualified
                        (Data.Either.Either
                           Language.PureScript.Names.Ident
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)))
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName))) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x y x2 x3 x4)
                   (f15 x1) }) -}
8efbc9a7f551d136a39eafba6550edc0
  ideValueOpAssociativity ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      Language.PureScript.AST.Operators.Associativity
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Associativity
                           -> f14 Language.PureScript.AST.Operators.Associativity)
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Associativity
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.AST.Operators.Associativity) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 y x4)
                   (f15 x3) }) -}
2164408815ac127bc2a0c935191310ce
  ideValueOpName ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName
                           -> f14 (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.ValueOpName)
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName) ->
                    Language.PureScript.Ide.Types.IdeValueOperator y x1 x2 x3 x4)
                   (f15 x) }) -}
3994efc719093c593be99ca1da2d66fa
  ideValueOpPrecedence ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      Language.PureScript.AST.Operators.Precedence
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.AST.Operators.Precedence
                           -> f14 Language.PureScript.AST.Operators.Precedence)
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.AST.Operators.Precedence
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: Language.PureScript.AST.Operators.Precedence) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 y x3 x4)
                   (f15 x2) }) -}
f95f376bb24018902771fd5b8a1e1ceb
  ideValueOpType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValueOperator
      (GHC.Base.Maybe Language.PureScript.Types.SourceType)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: GHC.Base.Maybe Language.PureScript.Types.SourceType
                           -> f14 (GHC.Base.Maybe Language.PureScript.Types.SourceType))
                   (ds :: Language.PureScript.Ide.Types.IdeValueOperator) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ (GHC.Base.Maybe Language.PureScript.Types.SourceType)
                   @ Language.PureScript.Ide.Types.IdeValueOperator
                   (\ (y :: GHC.Base.Maybe Language.PureScript.Types.SourceType) ->
                    Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 y)
                   (f15 x4) }) -}
1bd8bbfe4d021fa85d0c2b7ac126a976
  ideValueType ::
    Lens.Micro.Type.Lens'
      Language.PureScript.Ide.Types.IdeValue
      Language.PureScript.Types.SourceType
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f14 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f14)
                   (f15 :: Language.PureScript.Types.SourceType
                           -> f14 Language.PureScript.Types.SourceType)
                   (ds :: Language.PureScript.Ide.Types.IdeValue) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeValue x x1 ->
                 GHC.Base.fmap
                   @ f14
                   $dFunctor
                   @ Language.PureScript.Types.SourceType
                   @ Language.PureScript.Ide.Types.IdeValue
                   (\ (y :: Language.PureScript.Types.SourceType) ->
                    Language.PureScript.Ide.Types.IdeValue x y)
                   (f15 x1) }) -}
08b5f0405d44452524b8941687d080f4
  ideVolatileState ::
    Language.PureScript.Ide.Types.IdeState
    -> Language.PureScript.Ide.Types.IdeVolatileState
  RecSel Left Language.PureScript.Ide.Types.IdeState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeState ds1 ds2 ->
                 ds2 }) -}
ae478beeecf584e8e13f5f277de55168
  identifierFromDeclarationRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> Data.Text.Internal.empty_
                   Language.PureScript.AST.Declarations.TypeRef ds1 name ds2
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P)
                   Language.PureScript.AST.Declarations.TypeOpRef ds1 op
                   -> Language.PureScript.Names.showOp
                        @ 'Language.PureScript.Names.TypeOpName
                        op
                   Language.PureScript.AST.Declarations.ValueRef ds1 ident
                   -> Language.PureScript.Names.runIdent ident
                   Language.PureScript.AST.Declarations.ValueOpRef ds1 op
                   -> Language.PureScript.Names.showOp
                        @ 'Language.PureScript.Names.ValueOpName
                        op
                   Language.PureScript.AST.Declarations.TypeClassRef ds1 name
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P)
                   Language.PureScript.AST.Declarations.KindRef ds1 name
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.KindName>_P) }) -}
534b3d7af0aa98600153a60583892e70
  vsAstData ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> Language.PureScript.Ide.Types.AstData
         Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds1 }) -}
534b3d7af0aa98600153a60583892e70
  vsCachedRebuild ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Externs.ExternsFile)
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds3 }) -}
534b3d7af0aa98600153a60583892e70
  vsDeclarations ::
    Language.PureScript.Ide.Types.IdeVolatileState
    -> Language.PureScript.Ide.Types.ModuleMap
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  RecSel Left Language.PureScript.Ide.Types.IdeVolatileState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeVolatileState) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeVolatileState ds1 ds2 ds3 ->
                 ds2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fEqAnnotation
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fEqAstData
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fEqCompletion
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fEqIdeDataConstructor
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fEqIdeDeclarationAnn
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fEqIdeInstance
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeLogLevel]
  = Language.PureScript.Ide.Types.$fEqIdeLogLevel
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fEqIdeNamespace
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fEqIdeNamespaced
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fEqIdeType
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fEqIdeTypeClass
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fEqIdeTypeOperator
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fEqIdeTypeSynonym
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fEqIdeValue
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fEqIdeValueOperator
instance GHC.Classes.Eq [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fEqMatch
instance Data.Foldable.Foldable [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fFoldableAstData
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fFromJSONIdeNamespace
instance GHC.Base.Functor [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fFunctorAstData
instance GHC.Base.Functor [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fFunctorMatch
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fGenericAnnotation
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fGenericAstData
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fGenericIdeDataConstructor
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fGenericIdeDeclaration
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fGenericIdeDeclarationAnn
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fGenericIdeInstance
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fGenericIdeNamespace
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fGenericIdeNamespaced
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fGenericIdeType
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeClass
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeOperator
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fGenericIdeTypeSynonym
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fGenericIdeValue
instance GHC.Generics.Generic [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fGenericIdeValueOperator
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fNFDataAnnotation
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fNFDataAstData
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fNFDataIdeDataConstructor
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fNFDataIdeDeclaration
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fNFDataIdeDeclarationAnn
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fNFDataIdeInstance
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fNFDataIdeNamespace
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fNFDataIdeNamespaced
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fNFDataIdeType
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeClass
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeOperator
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fNFDataIdeTypeSynonym
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fNFDataIdeValue
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fNFDataIdeValueOperator
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fOrdAnnotation
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fOrdAstData
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fOrdCompletion
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fOrdIdeDataConstructor
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fOrdIdeDeclaration
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fOrdIdeDeclarationAnn
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fOrdIdeInstance
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fOrdIdeNamespace
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fOrdIdeNamespaced
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fOrdIdeType
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeClass
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeOperator
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fOrdIdeTypeSynonym
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fOrdIdeValue
instance GHC.Classes.Ord [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fOrdIdeValueOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.$fShowAnnotation
instance GHC.Show.Show [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.$fShowAstData
instance GHC.Show.Show [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fShowCompletion
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.$fShowIdeDataConstructor
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.$fShowIdeDeclaration
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.$fShowIdeDeclarationAnn
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeFileState]
  = Language.PureScript.Ide.Types.$fShowIdeFileState
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.$fShowIdeInstance
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeLogLevel]
  = Language.PureScript.Ide.Types.$fShowIdeLogLevel
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.$fShowIdeNamespace
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.$fShowIdeNamespaced
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeState]
  = Language.PureScript.Ide.Types.$fShowIdeState
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.$fShowIdeType
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.$fShowIdeTypeClass
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.$fShowIdeTypeOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.$fShowIdeTypeSynonym
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.$fShowIdeValue
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.$fShowIdeValueOperator
instance GHC.Show.Show [Language.PureScript.Ide.Types.IdeVolatileState]
  = Language.PureScript.Ide.Types.$fShowIdeVolatileState
instance GHC.Show.Show [Language.PureScript.Ide.Types.Match]
  = Language.PureScript.Ide.Types.$fShowMatch
instance GHC.Show.Show [Language.PureScript.Ide.Types.Success]
  = Language.PureScript.Ide.Types.$fShowSuccess
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Ide.Types.Completion]
  = Language.PureScript.Ide.Types.$fToJSONCompletion
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Ide.Types.Success]
  = Language.PureScript.Ide.Types.$fToJSONSuccess
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.AstData]
  = Language.PureScript.Ide.Types.Rep_AstData
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeNamespaced]
  = Language.PureScript.Ide.Types.Rep_IdeNamespaced
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeNamespace]
  = Language.PureScript.Ide.Types.Rep_IdeNamespace
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  = Language.PureScript.Ide.Types.Rep_IdeDeclarationAnn
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.Annotation]
  = Language.PureScript.Ide.Types.Rep_Annotation
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDeclaration]
  = Language.PureScript.Ide.Types.Rep_IdeDeclaration
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeOperator]
  = Language.PureScript.Ide.Types.Rep_IdeTypeOperator
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeValueOperator]
  = Language.PureScript.Ide.Types.Rep_IdeValueOperator
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeClass]
  = Language.PureScript.Ide.Types.Rep_IdeTypeClass
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeInstance]
  = Language.PureScript.Ide.Types.Rep_IdeInstance
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeDataConstructor]
  = Language.PureScript.Ide.Types.Rep_IdeDataConstructor
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeTypeSynonym]
  = Language.PureScript.Ide.Types.Rep_IdeTypeSynonym
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeType]
  = Language.PureScript.Ide.Types.Rep_IdeType
family instance GHC.Generics.Rep [Language.PureScript.Ide.Types.IdeValue]
  = Language.PureScript.Ide.Types.Rep_IdeValue
"SPEC $cfoldMap @ Any _" forall @ a
                                ($dMonoid :: GHC.Base.Monoid Data.Semigroup.Internal.Any)
  Language.PureScript.Ide.Types.$fFoldableAstData_$cfoldMap @ Data.Semigroup.Internal.Any
                                                            @ a
                                                            $dMonoid
  = Language.PureScript.Ide.Types.$fFoldableAstData_$s$cfoldMap @ a
"SPEC encodeSuccess @ Text" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                  Data.Text.Internal.Text)
  Language.PureScript.Ide.Types.encodeSuccess @ Data.Text.Internal.Text
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess3
"SPEC encodeSuccess @ [Completion]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                          [Language.PureScript.Ide.Types.Completion])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.Ide.Types.Completion]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess4
"SPEC encodeSuccess @ [ModuleIdent]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                           [Language.PureScript.Ide.Types.ModuleIdent])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.Ide.Types.ModuleIdent]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess1
"SPEC encodeSuccess @ [SourceSpan]" forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                          [Language.PureScript.AST.SourcePos.SourceSpan])
  Language.PureScript.Ide.Types.encodeSuccess @ [Language.PureScript.AST.SourcePos.SourceSpan]
                                              $dToJSON
  = Language.PureScript.Ide.Types.encodeSuccess_$sencodeSuccess2
"SPEC/Language.PureScript.Ide.Types $fEq(,) @ (ProperName
                                                'ConstructorName) @ (Type SourceAnn)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                         (Language.PureScript.Types.Type
                                                                                                                                                                            Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                (v :: GHC.Classes.Eq
                                                                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                                                                           'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,) @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      @ (Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn)
                      v
                      v1
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)
"SPEC/Language.PureScript.Ide.Types $fEq(,)_$c/= @ (ProperName
                                                     'ConstructorName) @ (Type SourceAnn)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                      (Language.PureScript.Types.Type
                                                                                                                                                                                         Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                          ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,)_$c/= @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           @ (Language.PureScript.Types.Type
                                Language.PureScript.AST.SourcePos.SourceAnn)
                           $dEq
                           $dEq1
  = Language.PureScript.Ide.Types.$fEqIdeDeclaration_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Ide.Types $fEqMap @ Ident @ (Type
                                                        SourceAnn)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                         (Language.PureScript.Types.Type
                                                                                                                                                            Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                (v :: GHC.Classes.Eq
                                                                                                                                                        Language.PureScript.Names.Ident)
  Data.Map.Internal.$fEqMap @ Language.PureScript.Names.Ident
                            @ (Language.PureScript.Types.Type
                                 Language.PureScript.AST.SourcePos.SourceAnn)
                            v
                            v1
  = Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap
"SPEC/Language.PureScript.Ide.Types $fEqMap_$c/= @ Ident @ (Type
                                                             SourceAnn)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                      (Language.PureScript.Types.Type
                                                                                                                                                                         Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                          ($dEq :: GHC.Classes.Eq
                                                                                                                                                                     Language.PureScript.Names.Ident)
  Data.Map.Internal.$fEqMap_$c/= @ Language.PureScript.Names.Ident
                                 @ (Language.PureScript.Types.Type
                                      Language.PureScript.AST.SourcePos.SourceAnn)
                                 $dEq
                                 $dEq1
  = Language.PureScript.Ide.Types.$fEqAstData_$s$fEqMap_$c/=
"SPEC/Language.PureScript.Ide.Types $fOrd(,) @ (ProperName
                                                 'ConstructorName) @ (Type SourceAnn)" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                                                                                           (Language.PureScript.Types.Type
                                                                                                                                                                              Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                  (v :: GHC.Classes.Ord
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fOrd(,) @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName)
                       @ (Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn)
                       v
                       v1
  = Language.PureScript.Ide.Types.$fOrdIdeDeclaration_$s$fOrd(,)
"SPEC/Language.PureScript.Ide.Types $fOrdMap @ Ident @ (Type
                                                         SourceAnn)" [orphan] forall (v2 :: GHC.Classes.Ord
                                                                                                                                                           (Language.PureScript.Types.Type
                                                                                                                                                              Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                  (v1 :: GHC.Classes.Ord
                                                                                                                                                           Language.PureScript.Names.Ident)
  Data.Map.Internal.$fOrdMap @ Language.PureScript.Names.Ident
                             @ (Language.PureScript.Types.Type
                                  Language.PureScript.AST.SourcePos.SourceAnn)
                             v1
                             v2
  = Language.PureScript.Ide.Types.$fOrdAstData_$s$fOrdMap
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ Module @ [Char]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                          [GHC.Types.Char])
                                                                                 (v :: GHC.Show.Show
                                                                                         Language.PureScript.AST.Declarations.Module)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.Declarations.Module
                     @ [GHC.Types.Char]
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowIdeFileState_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ ModuleName @ ExternsFile" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                   Language.PureScript.Externs.ExternsFile)
                                                                                          (v :: GHC.Show.Show
                                                                                                  Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.Externs.ExternsFile
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowIdeState_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                 [Language.PureScript.Comments.Comment])
                                                                                        (v :: GHC.Show.Show
                                                                                                Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShow(,)
"SPEC/Language.PureScript.Ide.Types $fShowConstraint @ (SourceSpan,
                                                       [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                [Language.PureScript.Comments.Comment])
                                             v
  = Language.PureScript.Ide.Types.$fShowIdeInstance_$s$fShowConstraint
"SPEC/Language.PureScript.Ide.Types $fShowConstraint_$cshowList @ (SourceSpan,
                                                                  [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                          (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                           [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                           [Language.PureScript.Comments.Comment])
                                                        $dShow
  = Language.PureScript.Ide.Types.$s$fShowConstraint_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowConstraint_$cshowsPrec @ (SourceSpan,
                                                                   [Comment])" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                           (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                            [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint_$cshowsPrec @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                            [Language.PureScript.Comments.Comment])
                                                         w
  = Language.PureScript.Ide.Types.$s$fShowConstraint_$cshowsPrec
"SPEC/Language.PureScript.Ide.Types $fShowEither @ Ident @ (ProperName
                                                             'ConstructorName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                       (v :: GHC.Show.Show
                                                                                                                                                                               Language.PureScript.Names.Ident)
  Data.Either.$fShowEither @ Language.PureScript.Names.Ident
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           v
                           v1
  = Language.PureScript.Ide.Types.$fShowIdeValueOperator_$s$fShowEither
"SPEC/Language.PureScript.Ide.Types $fShowEither_$cshowList @ Ident @ (ProperName
                                                                        'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                                              'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                             ($dShow :: GHC.Show.Show
                                                                                                                                                                                                          Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowList @ Language.PureScript.Names.Ident
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)
                                      $dShow
                                      $dShow1
  = Language.PureScript.Ide.Types.$s$fShowEither_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowEither_$cshowsPrec @ Ident @ (ProperName
                                                                         'ConstructorName)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                   (w :: GHC.Show.Show
                                                                                                                                                                                                           Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowsPrec @ Language.PureScript.Names.Ident
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName)
                                       w
                                       w1
  = Language.PureScript.Ide.Types.$s$fShowEither_$cshowsPrec
"SPEC/Language.PureScript.Ide.Types $fShowKind @ (SourceSpan,
                                                 [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                   (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                    [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       v
  = Language.PureScript.Ide.Types.$fShowIdeTypeOperator_$s$fShowKind
"SPEC/Language.PureScript.Ide.Types $fShowKind_$cshow @ (SourceSpan,
                                                        [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                      (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                       [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind_$cshow @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                 [Language.PureScript.Comments.Comment])
                                              $dShow
  = Language.PureScript.Ide.Types.$s$fShowKind_$cshow
"SPEC/Language.PureScript.Ide.Types $fShowKind_$cshowList @ (SourceSpan,
                                                            [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                              (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                               [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                     [Language.PureScript.Comments.Comment])
                                                  $dShow
  = Language.PureScript.Ide.Types.$s$fShowKind_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowMap @ IdeNamespaced @ SourceSpan" forall (v1 :: GHC.Show.Show
                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   (v :: GHC.Show.Show
                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap @ Language.PureScript.Ide.Types.IdeNamespaced
                              @ Language.PureScript.AST.SourcePos.SourceSpan
                              v
                              v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap1
"SPEC/Language.PureScript.Ide.Types $fShowMap @ Ident @ (Type
                                                          SourceAnn)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                             (Language.PureScript.Types.Type
                                                                                                                                                                Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                    (v :: GHC.Show.Show
                                                                                                                                                            Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap @ Language.PureScript.Names.Ident
                              @ (Language.PureScript.Types.Type
                                   Language.PureScript.AST.SourcePos.SourceAnn)
                              v
                              v1
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShowMap
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshow @ IdeNamespaced @ SourceSpan" forall ($dShow1 :: GHC.Show.Show
                                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                          ($dShow :: GHC.Show.Show
                                                                                                       Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshow @ Language.PureScript.Ide.Types.IdeNamespaced
                                     @ Language.PureScript.AST.SourcePos.SourceSpan
                                     $dShow
                                     $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshow
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshow @ Ident @ (Type
                                                                 SourceAnn)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                (Language.PureScript.Types.Type
                                                                                                                                                                                   Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                  ($dShow :: GHC.Show.Show
                                                                                                                                                                               Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshow @ Language.PureScript.Names.Ident
                                     @ (Language.PureScript.Types.Type
                                          Language.PureScript.AST.SourcePos.SourceAnn)
                                     $dShow
                                     $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshow1
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowList @ IdeNamespaced @ SourceSpan" forall ($dShow1 :: GHC.Show.Show
                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                              ($dShow :: GHC.Show.Show
                                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshowList @ Language.PureScript.Ide.Types.IdeNamespaced
                                         @ Language.PureScript.AST.SourcePos.SourceSpan
                                         $dShow
                                         $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowList @ Ident @ (Type
                                                                     SourceAnn)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                        (Language.PureScript.Types.Type
                                                                                                                                                                                           Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                          ($dShow :: GHC.Show.Show
                                                                                                                                                                                       Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshowList @ Language.PureScript.Names.Ident
                                         @ (Language.PureScript.Types.Type
                                              Language.PureScript.AST.SourcePos.SourceAnn)
                                         $dShow
                                         $dShow1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowList1
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowsPrec @ IdeNamespaced @ SourceSpan" [0] forall (w1 :: GHC.Show.Show
                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                   (w :: GHC.Show.Show
                                                                                                           Language.PureScript.Ide.Types.IdeNamespaced)
  Data.Map.Internal.$fShowMap_$cshowsPrec @ Language.PureScript.Ide.Types.IdeNamespaced
                                          @ Language.PureScript.AST.SourcePos.SourceSpan
                                          w
                                          w1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowsPrec
"SPEC/Language.PureScript.Ide.Types $fShowMap_$cshowsPrec @ Ident @ (Type
                                                                      SourceAnn)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                         (Language.PureScript.Types.Type
                                                                                                                                                                                            Language.PureScript.AST.SourcePos.SourceAnn))
                                                                                                                                                                                (w :: GHC.Show.Show
                                                                                                                                                                                        Language.PureScript.Names.Ident)
  Data.Map.Internal.$fShowMap_$cshowsPrec @ Language.PureScript.Names.Ident
                                          @ (Language.PureScript.Types.Type
                                               Language.PureScript.AST.SourcePos.SourceAnn)
                                          w
                                          w1
  = Language.PureScript.Ide.Types.$s$fShowMap_$cshowsPrec3
"SPEC/Language.PureScript.Ide.Types $fShowType @ (SourceSpan,
                                                 [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                   (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                    [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       v
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShowType
"SPEC/Language.PureScript.Ide.Types $fShowType_$cshow @ (SourceSpan,
                                                        [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                      (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                       [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType_$cshow @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                 [Language.PureScript.Comments.Comment])
                                              $dShow
  = Language.PureScript.Ide.Types.$s$fShowType_$cshow
"SPEC/Language.PureScript.Ide.Types $fShowType_$cshowList @ (SourceSpan,
                                                            [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                              (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                               [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                     [Language.PureScript.Comments.Comment])
                                                  $dShow
  = Language.PureScript.Ide.Types.$s$fShowType_$cshowList
"SPEC/Language.PureScript.Ide.Types $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.Ide.Types.$fShowAstData_$s$fShow[]
"SPEC/Language.PureScript.Ide.Types $fShow[]_$cshow @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                            Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Comments.Comment
                           $dShow
  = Language.PureScript.Ide.Types.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Ide.Types $fShow[]_$cshowList @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Comments.Comment
                               $dShow
  = Language.PureScript.Ide.Types.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

