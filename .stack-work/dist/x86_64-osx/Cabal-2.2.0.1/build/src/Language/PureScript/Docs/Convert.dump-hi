
==================== FINAL INTERFACE ====================
2019-01-24 14:17:23.948575 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Convert 8043
  interface hash: 9c6f03c71fb2bc7cc06a75a5c4b7604d
  ABI hash: 18435db02a56362a919e921e545058eb
  export-list hash: a2c423199112c92ea661c100a398d5ae
  orphan hash: 7d2d965d40c78a9dc13803e97737c175
  flag hash: 94f2816997904b752beedc19c412f025
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.Convert.convertModules
  Language.PureScript.Docs.Convert.convertModulesInPackage
  Language.PureScript.Docs.Convert.convertModulesInPackageWithEnv
  Language.PureScript.Docs.Convert.convertModulesWithEnv
  Language.PureScript.Docs.Convert.convertTaggedModulesInPackage
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash
                     Language.PureScript.Docs.Convert.ReExports
                     Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.Prim Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta 762fc9d54b3452d3ab89a9561af46cd3
import  -/  bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal 2e82adc50425e6a0d9ef6a12e29999f7
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 86d872425bd48a2d67c0d1ce1a8ccc8b
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Control.Monad.Supply 95e15bedaf79f313b09bccb6a9122994
  evalSupplyT 324b9183ea553a363af9ce46190d7c70
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Module 3342e00ee072addfd009ee61e87fb865
  ModuleNotFound 7d08cbb5754760a5207e995e4aaee1c8
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
  importPrim 31ae0c55d3f2ad87be9893d84154e47e
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Docs.Convert.ReExports 6ed046e8df57420defdcc3cb1abfb90e
  exports: 9485f5888ed28a87028cb68398926974
  updateReExports cbb489a2dc8c22bfe5f07b2170045e66
import  -/  Language.PureScript.Docs.Convert.Single f999918640a4fd4d03e143bc691da9cc
  exports: 86077279760662a54c37b25c8d6f8653
  convertSingleModule 8841cefd2890d298e3870973ef84e460
import  -/  Language.PureScript.Docs.Prim 70f5b04e22ee666cd52b687c4289c336
  exports: a8970713d5c0f2ed46cd3df5f4659ada
  primModules 347250876eee07168d61afbb41b9d397
import  -/  Language.PureScript.Docs.Types 8ff7c3b28d1548ecbdf2d5a573cc163d
  exports: b81c2b0b69c0f139e99069fb9794db69
  Declaration 8d78dc6577f19e7ef0eb35e8f2e37d74
  FromDep 3ebce6f07f9a419938993ea93604c511
  InPackage 14acea96459ae0ba0727319f74cb7f69
  Local 559d6dc06930c426b5f0966492a5f5cd
  Module cce819b6566f028d040fc57bb265fd8d
  ValueDeclaration 88df482b8e23d1ca7c68e67d2bb84c5b
  declInfo cce819b6566f028d040fc57bb265fd8d
  declTitle cce819b6566f028d040fc57bb265fd8d
  modDeclarations cce819b6566f028d040fc57bb265fd8d
  modName cce819b6566f028d040fc57bb265fd8d
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  Environment 7eb61fe78108d98d82e39145869b2402
  initEnvironment 3ad13bed759e200214c30a8db150a0f5
  names 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  errorMessage 4308e76c0636918842d6acdb173a8e4b
import  -/  Language.PureScript.ModuleDependencies 76745f43818037b936a9569d78efb462
  sortModules 9064a8fe73bfe27487e0064715babcbf
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  isBuiltinModuleName eaf9d299339def0b7cc5606f802f45a1
import  -/  Language.PureScript.Parser.Common d20a7af8a890a4e56d3068b2fdbe8def
  parseIdent 6a6e6dc3aa2d481c9710a1965b07c4fa
  runTokenParser 9dae932fdac5969d57d0bce79e0d461b
import  -/  Language.PureScript.Parser.Lexer ea857194274ee8b3812ad62bbb2c9ed1
  TokenParser 6e8d7b68c7546ba407a16e8526c7556f
  lex 2288b6151bebf7b01b4d73039b433c5f
import  -/  Language.PureScript.Sugar 37cb953cff4350ac53f9ddefa4678501
  desugar a514609f156c4715941a87aaedf6cca2
import  -/  Language.PureScript.Sugar.CaseDeclarations 51bac23debbcaa425b8677cb7acafbb2
  desugarCasesModule 512b42b74fc324a9cc5d1e1536233a59
import  -/  Language.PureScript.Sugar.DoNotation c64acd871bffc273fda91bd47dc1d614
  desugarDoModule 80053627a6bada55016aba084d84b482
import  -/  Language.PureScript.Sugar.LetPattern 2e2d5506710afe15eb7237929bd2af8e
  desugarLetPatternModule 98f7913a1b50b205e5e62e6a9d0eeac4
import  -/  Language.PureScript.Sugar.Names 07ea3fdb360ca116350b995d48cbf3db
  desugarImportsWithEnv 7236deb978d551ace461b9e7500d9b1e
import  -/  Language.PureScript.Sugar.Names.Env 97518f893bef0c5e5749cfa9e4ca9265
  Env 2b6b2822bde15bda4afeb3aa3ef04e79
  primEnv 8c4c1c2bebe4ba66e6b4639be4e62264
import  -/  Language.PureScript.Sugar.Operators 154e23f059bf6b5c94e4715fd9a8dcff
  rebracketFiltered 512d4bdb322e2d6346774872b8138951
import  -/  Language.PureScript.Sugar.TypeDeclarations 74802a3f7b8c3fb35dc1ec4c58b32ab3
  desugarTypeDeclarationsModule b554719baea9fab04d8bf2d0d666a400
import  -/  Language.PureScript.TypeChecker b6c2a0e0dc8f070f588097af1ac535e7
  typeCheckModule 34a09b828651f7b998a9c6bf6af13279
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  checkEnv 9cc3cef00c43c0c2ac24a31e9b521e29
  emptyCheckState 702a26b401e2a266972b7fdf9b28e232
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  TypeWildcard e8def149f21247f8f38af9a4e50f9298
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
c2529a31c1c3fff1e1563efcb4b71c99
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Language.PureScript.Docs.Convert.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                     @ tok) -}
aeb1edacfd5e304920ed529f64da386b
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
3589aaa8342c2f069f8e4ef45b90d99a
  $sfromList ::
    [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ModuleName, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             @ a
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a)
                             (Data.Map.Internal.Tip
                                @ Language.PureScript.Names.ModuleName
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  kx `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ky `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             DEFAULT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Docs.Convert.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)) }
                             GHC.Types.LT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Docs.Convert.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a))
                                  1# } } } } } }) -}
eed8782c871bf6c4b29ae8b2253f04e6
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
26a9fe4213789fdc8954b60c14d8624d
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
dc931824334ba984691b24b95ca697e6
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
26c2092d35648ccec30487a49da10f0f
  $slookup3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2172fe86ceb0510859c93e043cb6b650
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
417aa7ba48cea867a876e1fdf3f15bfe
  $smember1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ff2ef99b2b31a667c31b8a6bac65d236
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.Convert.$trModule3
                   Language.PureScript.Docs.Convert.$trModule1) -}
a42e7b097ccb690cf3488bb48105b411
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.Convert.$trModule2) -}
0ac160f92ed86dfa7a54fab319670177
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Docs.Convert"#) -}
dcb0237bc1d5cc74b544a399828ddd80
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.Convert.$trModule4) -}
344c9f2bbcc11277506cd43ada28392f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
da5af3f4308ff80f0c087388d12a40ff
  convertModules ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    (Language.PureScript.Names.ModuleName
     -> Language.PureScript.Docs.Types.InPackage
          Language.PureScript.Names.ModuleName)
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.Docs.Types.Module]
  {- Arity: 2,
     Strictness: <L,U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,C(U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.Names.ModuleName
                           -> Language.PureScript.Docs.Types.InPackage
                                Language.PureScript.Names.ModuleName) ->
                 let {
                   f :: m ([Language.PureScript.Docs.Types.Module],
                           Language.PureScript.Sugar.Names.Env.Env)
                        -> m [Language.PureScript.Docs.Types.Module]
                   = GHC.Base.fmap
                       @ m
                       (GHC.Base.$p1Applicative
                          @ m
                          (GHC.Base.$p1Monad
                             @ m
                             (Control.Monad.Error.Class.$p1MonadError
                                @ Language.PureScript.Errors.MultipleErrors
                                @ m
                                $dMonadError)))
                       @ ([Language.PureScript.Docs.Types.Module],
                          Language.PureScript.Sugar.Names.Env.Env)
                       @ [Language.PureScript.Docs.Types.Module]
                       (Data.Tuple.fst
                          @ [Language.PureScript.Docs.Types.Module]
                          @ Language.PureScript.Sugar.Names.Env.Env)
                 } in
                 let {
                   g :: [Language.PureScript.AST.Declarations.Module]
                        -> m ([Language.PureScript.Docs.Types.Module],
                              Language.PureScript.Sugar.Names.Env.Env)
                   = Language.PureScript.Docs.Convert.convertModulesWithEnv
                       @ m
                       $dMonadError
                       eta
                 } in
                 \ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                 f (g x)) -}
1e1dbbcdc5fa4fe8184128d2e86bb4b5
  convertModulesInPackage ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Web.Bower.PackageMeta.Internal.PackageName
    -> m [Language.PureScript.Docs.Types.Module]
  {- Arity: 3,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [Language.PureScript.AST.Declarations.Module])
                   (eta1 :: Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName
                              Web.Bower.PackageMeta.Internal.PackageName) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Errors.MultipleErrors
                            @ m
                            $dMonadError)))
                   @ ([Language.PureScript.Docs.Types.Module],
                      Language.PureScript.Sugar.Names.Env.Env)
                   @ [Language.PureScript.Docs.Types.Module]
                   (Data.Tuple.fst
                      @ [Language.PureScript.Docs.Types.Module]
                      @ Language.PureScript.Sugar.Names.Env.Env)
                   (Language.PureScript.Docs.Convert.convertModulesInPackageWithEnv
                      @ m
                      $dMonadError
                      eta
                      eta1)) -}
ab71370a5bd743a9ef6178349236c22f
  convertModulesInPackageWithEnv ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Web.Bower.PackageMeta.Internal.PackageName
    -> m ([Language.PureScript.Docs.Types.Module],
          Language.PureScript.Sugar.Names.Env.Env)
  {- Arity: 3,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [Language.PureScript.AST.Declarations.Module])
                   (eta1 :: Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName
                              Web.Bower.PackageMeta.Internal.PackageName) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Errors.MultipleErrors
                            @ m
                            $dMonadError)))
                   @ ([Language.PureScript.Docs.Types.Module],
                      Language.PureScript.Sugar.Names.Env.Env)
                   @ ([Language.PureScript.Docs.Types.Module],
                      Language.PureScript.Sugar.Names.Env.Env)
                   (let {
                      $wf :: Language.PureScript.Names.ModuleName -> GHC.Types.Bool
                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                      = \ (ww :: Language.PureScript.Names.ModuleName) ->
                        case Language.PureScript.Docs.Convert.$smember1
                               @ Web.Bower.PackageMeta.Internal.PackageName
                               ww
                               eta1 of wild {
                          GHC.Types.False
                          -> case Language.PureScript.Names.isBuiltinModuleName ww of wild1 {
                               GHC.Types.False -> GHC.Types.True
                               GHC.Types.True -> GHC.Types.False }
                          GHC.Types.True -> GHC.Types.False }
                    } in
                    let {
                      f :: Language.PureScript.Docs.Types.Module -> GHC.Types.Bool
                        {- Arity: 1, Strictness: <S(SLLL),1*U(U,A,A,A)>, Inline: [0],
                           Unfolding: InlineRule (1, True, False)
                                      (\ (w :: Language.PureScript.Docs.Types.Module) ->
                                       case w of ww { Language.PureScript.Docs.Types.Module ww1 ww2 ww3 ww4 ->
                                       $wf ww1 }) -}
                      = \ (w :: Language.PureScript.Docs.Types.Module) ->
                        case w of ww { Language.PureScript.Docs.Types.Module ww1 ww2 ww3 ww4 ->
                        $wf ww1 }
                    } in
                    \ (ds :: ([Language.PureScript.Docs.Types.Module],
                              Language.PureScript.Sugar.Names.Env.Env)) ->
                    (case ds of wild { (,) a1 b1 ->
                     GHC.List.filter @ Language.PureScript.Docs.Types.Module f a1 },
                     case ds of wild { (,) a1 b1 -> b1 }))
                   (Language.PureScript.Docs.Convert.convertModulesWithEnv
                      @ m
                      $dMonadError
                      (\ (mn :: Language.PureScript.Names.ModuleName) ->
                       case Language.PureScript.Docs.Convert.$slookup3
                              @ Web.Bower.PackageMeta.Internal.PackageName
                              mn
                              eta1 of wild {
                         GHC.Base.Nothing
                         -> Language.PureScript.Docs.Types.Local
                              @ Language.PureScript.Names.ModuleName
                              mn
                         GHC.Base.Just pkgName
                         -> Language.PureScript.Docs.Types.FromDep
                              @ Language.PureScript.Names.ModuleName
                              pkgName
                              mn })
                      eta)) -}
5cf7e2a6c1a2dc739a61b5e1b06dc160
  convertModulesWithEnv ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    (Language.PureScript.Names.ModuleName
     -> Language.PureScript.Docs.Types.InPackage
          Language.PureScript.Names.ModuleName)
    -> [Language.PureScript.AST.Declarations.Module]
    -> m ([Language.PureScript.Docs.Types.Module],
          Language.PureScript.Sugar.Names.Env.Env)
  {- Arity: 2,
     Strictness: <L,U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,C(U)> -}
cc35c33f047348d3fba9c4665e8673e0
  convertTaggedModulesInPackage ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [(GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Web.Bower.PackageMeta.Internal.PackageName
    -> m [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [(GHC.IO.FilePath,
                             Language.PureScript.AST.Declarations.Module)])
                   (eta1 :: Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName
                              Web.Bower.PackageMeta.Internal.PackageName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   moduleNameToFileMap :: Data.Map.Internal.Map
                                            Language.PureScript.Names.ModuleName GHC.IO.FilePath
                   = Language.PureScript.Docs.Convert.$sfromList
                       @ [GHC.Types.Char]
                       (GHC.Base.map
                          @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                          @ (Language.PureScript.Names.ModuleName, GHC.IO.FilePath)
                          Language.PureScript.Docs.Convert.convertTaggedModulesInPackage1
                          eta)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ [Language.PureScript.Docs.Types.Module]
                   @ [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                   (Language.PureScript.Docs.Convert.convertModulesInPackage
                      @ m
                      $dMonadError
                      (GHC.Base.map
                         @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                         @ Language.PureScript.AST.Declarations.Module
                         (Data.Tuple.snd
                            @ GHC.IO.FilePath
                            @ Language.PureScript.AST.Declarations.Module)
                         eta)
                      eta1)
                   (let {
                      $dFunctor :: GHC.Base.Functor m
                      = GHC.Base.$p1Applicative @ m $dApplicative
                    } in
                    let {
                      z1 :: m [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                      = GHC.Base.pure
                          @ m
                          $dApplicative
                          @ [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                          (GHC.Types.[]
                             @ (GHC.IO.FilePath, Language.PureScript.Docs.Types.Module))
                    } in
                    letrec {
                      go2 :: [Language.PureScript.Docs.Types.Module]
                             -> m [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Language.PureScript.Docs.Types.Module]) ->
                        case ds of wild {
                          [] -> z1
                          : y ys
                          -> GHC.Base.liftA2
                               @ m
                               $dApplicative
                               @ (GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)
                               @ [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                               @ [(GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)]
                               (GHC.Types.:
                                  @ (GHC.IO.FilePath, Language.PureScript.Docs.Types.Module))
                               (GHC.Base.fmap
                                  @ m
                                  $dFunctor
                                  @ GHC.IO.FilePath
                                  @ (GHC.IO.FilePath, Language.PureScript.Docs.Types.Module)
                                  (\ (ds1 :: GHC.IO.FilePath) -> (ds1, y))
                                  (case y of wild1 { Language.PureScript.Docs.Types.Module ds1 ds2 ds3 ds4 ->
                                   case Language.PureScript.Docs.Convert.$slookup3
                                          @ [GHC.Types.Char]
                                          ds1
                                          moduleNameToFileMap of wild2 {
                                     GHC.Base.Nothing
                                     -> Control.Monad.Error.Class.throwError
                                          @ Language.PureScript.Errors.MultipleErrors
                                          @ m
                                          $dMonadError
                                          @ GHC.IO.FilePath
                                          (GHC.Types.:
                                             @ Language.PureScript.AST.Declarations.ErrorMessage
                                             (Language.PureScript.AST.Declarations.ErrorMessage
                                                (GHC.Types.[]
                                                   @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                                                (Language.PureScript.AST.Declarations.ModuleNotFound
                                                   ds1))
                                             (GHC.Types.[]
                                                @ Language.PureScript.AST.Declarations.ErrorMessage))
                                            `cast`
                                          (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                                     GHC.Base.Just filePath
                                     -> GHC.Base.pure
                                          @ m
                                          $dApplicative
                                          @ GHC.IO.FilePath
                                          filePath } }))
                               (go2 ys) }
                    } in
                    go2)) -}
daf54128ef16a9da0dcfa90649cebb15
  convertTaggedModulesInPackage1 ::
    (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
    -> (Language.PureScript.Names.ModuleName, GHC.IO.FilePath)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(A,A,1*U,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.IO.FilePath,
                          Language.PureScript.AST.Declarations.Module)) ->
                 case x of wild { (,) x1 y ->
                 (Language.PureScript.AST.Declarations.getModuleName y, x1) }) -}
"SPEC/Language.PureScript.Docs.Convert $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                                                    (v :: GHC.Base.Monad
                                                                                            Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Language.PureScript.Docs.Convert.$s$fStream[]mtok @ tok
"SPEC/Language.PureScript.Docs.Convert $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                                             ($dMonad :: GHC.Base.Monad
                                                                                                           Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Language.PureScript.Docs.Convert.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
      @ tok
"SPEC/Language.PureScript.Docs.Convert fromList @ ModuleName _" [orphan] forall @ a
                                                                                ($dOrd :: GHC.Classes.Ord
                                                                                            Language.PureScript.Names.ModuleName)
  Data.Map.Internal.fromList @ Language.PureScript.Names.ModuleName
                             @ a
                             $dOrd
  = Language.PureScript.Docs.Convert.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

