
==================== FINAL INTERFACE ====================
2019-01-24 14:16:40.533541 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Actions 8043
  interface hash: 741c655b7f691cbbc95eceb8e216fb95
  ABI hash: d964d3443f97c4366835ba8624e5a3fb
  export-list hash: 8913ee8e4ed0b29132c4ad60e50fbfbd
  orphan hash: b35f726f857405310842d08e3e9c3b5d
  flag hash: c8d8f450ed10350d849cb7e71446cfa1
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Make.Actions.buildMakeActions
  Language.PureScript.Make.Actions.checkForeignDecls
  Language.PureScript.Make.Actions.Externs
  Language.PureScript.Make.Actions.MakeActions{Language.PureScript.Make.Actions.MakeActions codegen ffiCodegen getInputTimestamp getOutputTimestamp progress readExterns}
  Language.PureScript.Make.Actions.ProgressMessage{Language.PureScript.Make.Actions.CompilingModule}
  Language.PureScript.Make.Actions.RebuildPolicy{Language.PureScript.Make.Actions.RebuildAlways Language.PureScript.Make.Actions.RebuildNever}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Make.Monad Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: colour-2.3.4:Data.Colour syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy.Internal af245ead1f52eca50149d040b0b86693
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  directory-1.3.1.5:System.Directory.Internal.Common 88eeec2dd4e3d7d63bc24c2d657e6981
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser fbf89a16f99af1afcc6e4509cec1cbf6
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.AST 4b3343c84045afd7e43ca1ee2b8b52cf
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.Parser 2d496c459b60c675679d78fbf6f9beaf
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Reader a496a2f5c2c54feee0ad154b4fe8533d
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 86d872425bd48a2d67c0d1ce1a8ccc8b
import  -/  Control.Monad.Supply 95e15bedaf79f313b09bccb6a9122994
  exports: 15e005f374fb6992e116699e0e7b7c5f
  SupplyT bb1f4fa577226d92c4e387a7717c5df6
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  CannotGetFileInfo 00441a2081d95e7fed8268777edabaad
  CannotWriteFile 182cf94a21f6ae610bfae1e998054ae7
  ErrorMessage b0470a74191782e72607e7c5b87318de
  ErrorParsingFFIModule 995f795a4388db3ef8492c2c3a840810
  InvalidFFIIdentifier 1644089749df6b45d4e9fbf3319ed8ca
  MissingFFIImplementations 471364375c7b113af9f9006bbad04a16
  MissingFFIModule 40159f8540b6290e57ee6090196f38c1
  UnnecessaryFFIModule f69963b37caa85cc0192500bcf206fd6
  UnusedFFIImplementations bf60bc9f2725ca66a0a79feae586d397
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourcePos 1f89874c7dcd77e53f0f74e4d28f0a8c
  SourcePos 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosColumn 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosLine 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Bundle e9fc080977a6cbbcf186d859a93ee390
  exports: 7e1ffaf1974cff705339929f1490c3b6
  ErrorMessage 1ae2233781eec58c6f5c05da01cc27d8
  UnableToParseModule fb5bbdeadc745da25e2829e497c1b284
  getExportedIdentifiers cf43c78f0f571cc04e04c40fb408a98c
import  -/  Language.PureScript.CodeGen.JS c31b6a7cf690e073ef42c354202a5dfb
  exports: d02c48d141d444addad0f177b56772e3
  moduleToJs ea0f584fe0419570518976a5ce59e209
import  -/  Language.PureScript.CodeGen.JS.Printer c611c84ef5597dd895af52d54793f53b
  exports: 28d3bed1235e9f28d33a71fec860933f
  prettyPrintJS 46d1a0807f6c8c52e747333b6b103e5e
  prettyPrintJSWithSourceMaps 974a560054489e802f991076e6faa7d0
import  -/  Language.PureScript.CoreFn 78a124ab2a2768521a0a6badbcf964b7
  exports: c4dde03505d5acac46f08d49121ce713
import  -/  Language.PureScript.CoreFn.Ann 0cc10e6f1cceeb9ce4110421e8890aeb
  Ann e57ea12399f1ca8b453bd48df393acd5
import  -/  Language.PureScript.CoreFn.Module 9dd7adb25f29cf9fbaca42c3a9ee6567
  Module b29880c812af4e08648f58735ebf94f4
  moduleForeign b29880c812af4e08648f58735ebf94f4
  moduleName b29880c812af4e08648f58735ebf94f4
  moduleSourceSpan b29880c812af4e08648f58735ebf94f4
import  -/  Language.PureScript.CoreFn.ToJSON 80a54456ba64dbac0a368957dc034b81
  exports: 8a4bdcf58814c4a056de006038d40d80
  moduleToJSON 37db4e5f523d212479a5cc29f9f3b4de
import  -/  Language.PureScript.CoreImp.AST e13d2052141e50eca2a5dfdad2a67d5a
  exports: d4ba1e9a31e7dde56b84028e789bb579
  App 5abf9416415bc5ba651add3314a10fff
  StringLiteral 60beb3f92e5b8969f2f1b00baaaee73d
  Var 22edb01eb085c313bbae6149799eeeee
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  Environment 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
import  -/  Language.PureScript.Make.Monad 31242626e8d67103dbe8824cd3d4896a
  exports: 41e56279602585a94789ab2db04fcf5f
  Make 2384e2052993ac0b8b29c8eccd939cb5
  makeIO 57242a678839a970dd53909b7207d2e8
  readTextFile 831c92e7074ddb1aeca50e6c8d41a6bc
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  Ident bad3562aa6138b6192713ac281080869
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  runModuleName 58b788b37f600c0f34fa85241d7748ad
import  -/  Language.PureScript.Options 2e36bd5fcc2b2ebbc36ff47b336cef60
  exports: 95606a481170637dfadecf960e8d7bae
  CodegenTarget 01549f9098408b4144e13364de301586
  CoreFn bf04e5f7bc63d028d39ffbe4fbf3aed7
  JS 3441edd8b85bea75090b37c255037f30
  JSSourceMap 7f9b66280f985c22787104640e211fa3
  optionsCodegenTargets 43e82b7ea0c416dc61c77c04548dbdd3
import  -/  Language.PureScript.Parser bc742b65ed1657f4aad0d05eb2bd920e
  exports: 3d7c8ec535fb33ab60b62f5949666b86
import  -/  Language.PureScript.Parser.Common d20a7af8a890a4e56d3068b2fdbe8def
  parseIdent 6a6e6dc3aa2d481c9710a1965b07c4fa
  runTokenParser 9dae932fdac5969d57d0bce79e0d461b
import  -/  Language.PureScript.Parser.Lexer ea857194274ee8b3812ad62bbb2c9ed1
  lex 2288b6151bebf7b01b4d73039b433c5f
import  -/  Language.PureScript.Pretty.Common 5ad137006c9d22dbc8d348caeed567b2
  exports: c21a0ba6e9877729208defe8b5d16c9a
  SMap fab289ef5c5c6bcb1f21a03937365284
  SMap 7ec2e2e33d995f0548cef8d68b0bba1b
import  -/  Paths_purescript b471cb3641a3834bb1f308b27437a78a
  exports: 011ad501fbfaff6e4e651a7af4df7ce9
  version 3901654c5f764cf9b152bdbd41b845d0
import  -/  sourcemap-0.1.6:SourceMap 46a5eda4d84cbb7bf492294c0e65b642
import  -/  sourcemap-0.1.6:SourceMap.Types b775770f549711c0150c5529f935d9d4
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Encoding 8e60367b574d8e5016309aaea7dc2100
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  time-1.8.0.2:Data.Time.Clock 38823c785626821df1f9ec84dba1c4d7
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime 509e80f9ead2e875ca9536acb5e422cc
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  utf8-string-1.0.1.1:Data.ByteString.Lazy.UTF8 90be7ca8da23b0b606aeffbca3d1d3af
5552996379e32ea3ff813e089c9bdfc9
  $fEqProgressMessage ::
    GHC.Classes.Eq Language.PureScript.Make.Actions.ProgressMessage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.ProgressMessage
                  Language.PureScript.Make.Actions.$fEqProgressMessage_$c==
                  Language.PureScript.Make.Actions.$fEqProgressMessage_$c/= -}
5552996379e32ea3ff813e089c9bdfc9
  $fEqProgressMessage_$c/= ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Make.Actions.ProgressMessage)
                   (y :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case x of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case y of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fEqProgressMessage_$c== ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Make.Actions.ProgressMessage)
                   (ds1 :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case ds of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case ds1 of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fEqProperName
                      @ 'Language.PureScript.Names.Namespace)
                   a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                   b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fEqRebuildPolicy ::
    GHC.Classes.Eq Language.PureScript.Make.Actions.RebuildPolicy
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.RebuildPolicy
                  Language.PureScript.Make.Actions.$fEqRebuildPolicy_$c==
                  Language.PureScript.Make.Actions.$fEqRebuildPolicy_$c/= -}
9e87da6e8f3d80dfe923a125596f291e
  $fEqRebuildPolicy_$c/= ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (y :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case x of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case y of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.False
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.True }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case y of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.True
                        Language.PureScript.Make.Actions.RebuildAlways
                        -> GHC.Types.False } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fEqRebuildPolicy_$c== ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (ds1 :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case ds of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case ds1 of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.True
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.False }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case ds1 of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.False
                        Language.PureScript.Make.Actions.RebuildAlways
                        -> GHC.Types.True } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage ::
    GHC.Classes.Ord Language.PureScript.Make.Actions.ProgressMessage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.ProgressMessage
                  Language.PureScript.Make.Actions.$fEqProgressMessage
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$ccompare
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$c<
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$c<=
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$c>
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$c>=
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$cmax
                  Language.PureScript.Make.Actions.$fOrdProgressMessage_$cmin -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$c< ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.ProgressMessage)
                   (b :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case a of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case b of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 Language.PureScript.Names.$fOrdModuleName6
                   a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                   b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$c<= ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.ProgressMessage)
                   (b :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case b of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case a of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$c> ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Make.Actions.ProgressMessage)
                   (b :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 Language.PureScript.Make.Actions.$fOrdProgressMessage_$c< b a) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$c>= ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.ProgressMessage)
                   (b :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case a of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case b of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$ccompare ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.ProgressMessage)
                   (b :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case a of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case b of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fOrdProperName
                      @ 'Language.PureScript.Names.Namespace)
                   a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                   b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$cmax ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Make.Actions.ProgressMessage)
                   (y :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case y of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case x of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   DEFAULT -> wild GHC.Types.LT -> wild1 } } }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fOrdProgressMessage_$cmin ::
    Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> Language.PureScript.Make.Actions.ProgressMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Make.Actions.ProgressMessage)
                   (y :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case y of wild { Language.PureScript.Make.Actions.CompilingModule a1 ->
                 case x of wild1 { Language.PureScript.Make.Actions.CompilingModule b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy ::
    GHC.Classes.Ord Language.PureScript.Make.Actions.RebuildPolicy
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.RebuildPolicy
                  Language.PureScript.Make.Actions.$fEqRebuildPolicy
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$ccompare
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$c<
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$c<=
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$c>
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$c>=
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$cmax
                  Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$cmin -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$c< ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (b :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case a of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case b of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.False
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.True }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$c<= ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (b :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case b of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case a of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.True
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.False }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$c> ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (b :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 Language.PureScript.Make.Actions.$fOrdRebuildPolicy_$c< b a) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$c>= ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (b :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case a of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case b of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.True
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.False }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$ccompare ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (b :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case a of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case b of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.EQ
                        Language.PureScript.Make.Actions.RebuildAlways -> GHC.Types.LT }
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case b of wild1 {
                        Language.PureScript.Make.Actions.RebuildNever -> GHC.Types.GT
                        Language.PureScript.Make.Actions.RebuildAlways
                        -> GHC.Types.EQ } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$cmax ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (y :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case y of wild {
                   Language.PureScript.Make.Actions.RebuildNever -> x
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Make.Actions.RebuildAlways } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fOrdRebuildPolicy_$cmin ::
    Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy
    -> Language.PureScript.Make.Actions.RebuildPolicy
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (y :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case y of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Make.Actions.RebuildNever }
                   Language.PureScript.Make.Actions.RebuildAlways -> x }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fShowProgressMessage ::
    GHC.Show.Show Language.PureScript.Make.Actions.ProgressMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.ProgressMessage
                  Language.PureScript.Make.Actions.$fShowProgressMessage_$cshowsPrec
                  Language.PureScript.Make.Actions.$fShowProgressMessage_$cshow
                  Language.PureScript.Make.Actions.$fShowProgressMessage_$cshowList -}
5552996379e32ea3ff813e089c9bdfc9
  $fShowProgressMessage1 ::
    Language.PureScript.Make.Actions.ProgressMessage -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Make.Actions.ProgressMessage)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Make.Actions.CompilingModule ww1 ->
                 Language.PureScript.Make.Actions.$w$cshowsPrec 0# ww1 w1 }) -}
da6890f7af303a7d0ef2dc4fb45e702c
  $fShowProgressMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompilingModule "#) -}
5552996379e32ea3ff813e089c9bdfc9
  $fShowProgressMessage_$cshow ::
    Language.PureScript.Make.Actions.ProgressMessage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Make.Actions.ProgressMessage) ->
                 case w of ww { Language.PureScript.Make.Actions.CompilingModule ww1 ->
                 Language.PureScript.Make.Actions.$w$cshow ww1 }) -}
5552996379e32ea3ff813e089c9bdfc9
  $fShowProgressMessage_$cshowList ::
    [Language.PureScript.Make.Actions.ProgressMessage]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Make.Actions.ProgressMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Make.Actions.ProgressMessage
                   Language.PureScript.Make.Actions.$fShowProgressMessage1
                   ls
                   s) -}
5552996379e32ea3ff813e089c9bdfc9
  $fShowProgressMessage_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Make.Actions.ProgressMessage
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Make.Actions.ProgressMessage)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Make.Actions.CompilingModule ww3 ->
                 Language.PureScript.Make.Actions.$w$cshowsPrec ww1 ww3 w2 } }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fShowRebuildPolicy ::
    GHC.Show.Show Language.PureScript.Make.Actions.RebuildPolicy
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Make.Actions.RebuildPolicy
                  Language.PureScript.Make.Actions.$fShowRebuildPolicy_$cshowsPrec
                  Language.PureScript.Make.Actions.$fShowRebuildPolicy_$cshow
                  Language.PureScript.Make.Actions.$fShowRebuildPolicy_$cshowList -}
9e87da6e8f3d80dfe923a125596f291e
  $fShowRebuildPolicy1 ::
    Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (eta7 :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Make.Actions.$fShowRebuildPolicy4)
                        eta7
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Make.Actions.$fShowRebuildPolicy2)
                        eta7 }) -}
4ed39fcee4eb3a365df38bdca4a7aba9
  $fShowRebuildPolicy2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Make.Actions.$fShowRebuildPolicy3) -}
30ddae5bb3fea62ebb45490bacf451a9
  $fShowRebuildPolicy3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RebuildAlways"#) -}
4639866d567009bde38d6cb76dcdc77e
  $fShowRebuildPolicy4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Make.Actions.$fShowRebuildPolicy5) -}
2315da85c43facc448f5b72fd1e1c190
  $fShowRebuildPolicy5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RebuildNever"#) -}
9e87da6e8f3d80dfe923a125596f291e
  $fShowRebuildPolicy_$cshow ::
    Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Make.Actions.RebuildPolicy) ->
                 case x of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> Language.PureScript.Make.Actions.$fShowRebuildPolicy4
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> Language.PureScript.Make.Actions.$fShowRebuildPolicy2 }) -}
9e87da6e8f3d80dfe923a125596f291e
  $fShowRebuildPolicy_$cshowList ::
    [Language.PureScript.Make.Actions.RebuildPolicy] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Make.Actions.RebuildPolicy])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Make.Actions.RebuildPolicy
                   Language.PureScript.Make.Actions.$fShowRebuildPolicy1
                   ls
                   s) -}
9e87da6e8f3d80dfe923a125596f291e
  $fShowRebuildPolicy_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Make.Actions.RebuildPolicy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Make.Actions.RebuildPolicy)
                   (eta7 :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Make.Actions.RebuildNever
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Make.Actions.$fShowRebuildPolicy4)
                        eta7
                   Language.PureScript.Make.Actions.RebuildAlways
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Make.Actions.$fShowRebuildPolicy2)
                        eta7 }) -}
fed94244b414a93c8a5b6273652884e8
  $s$fApplicativeSupplyT ::
    GHC.Base.Applicative
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  Language.PureScript.Make.Actions.$s$fApplicativeSupplyT_$s$fFunctorSupplyT
                  (\ @ a (eta7 :: a) (eta8 :: GHC.Integer.Type.Integer) ->
                   let {
                     x :: (a, GHC.Integer.Type.Integer) = (eta7, eta8)
                   } in
                   (\ (eta9 :: Language.PureScript.Options.Options)
                      (eta10 :: GHC.IORef.IORef
                                  Language.PureScript.Errors.MultipleErrors)
                      (eta11 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    (# eta11,
                       Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, GHC.Integer.Type.Integer)
                         x #))
                     `cast`
                   ((<Language.PureScript.Options.Options>_R
                     ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Language.PureScript.Errors.MultipleErrors
                                            (a,
                                             GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                        <Language.PureScript.Errors.MultipleErrors>_R
                                                                                        <Data.Either.Either
                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                           (a,
                                                                                            GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                     <Control.Monad.Logger.Logger
                                                                                                                                        Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                     <(a,
                                                                                                                                       GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <Language.PureScript.Options.Options>_R
                                                                                                                                                                                   <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                      (Control.Monad.Logger.Logger
                                                                                                                                                                                         Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                   <(a,
                                                                                                                                                                                     GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                                                                                                                                                                      GHC.Integer.Type.Integer)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N)
                  (Control.Monad.Supply.$fApplicativeSupplyT4
                     @ Language.PureScript.Make.Monad.Make
                     Language.PureScript.Make.Monad.$fMonadMake)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a
                                                                                                    -> b>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <b>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                  (\ @ a
                     @ b
                     @ c
                     (eta7 :: a -> b -> c)
                     (eta8 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make a)
                     (eta9 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make b)
                     (eta10 :: GHC.Integer.Type.Integer) ->
                   Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ Language.PureScript.Make.Monad.Make
                     @ GHC.Integer.Type.Integer
                     Language.PureScript.Make.Monad.$fFunctorMake
                     Language.PureScript.Make.Monad.$fMonadMake
                     @ a
                     @ b
                     @ c
                     eta7
                     eta8
                     eta9
                     eta10)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <c>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <c>_N)
                  (\ @ a
                     @ b
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make a)
                     (eta8 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make b)
                     (eta9 :: GHC.Integer.Type.Integer) ->
                   let {
                     m1 :: Language.PureScript.Make.Monad.Make
                             (a, GHC.Integer.Type.Integer)
                     = eta7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GHC.Integer.Type.Integer>_N
                            <Language.PureScript.Make.Monad.Make>_R
                            <a>_N)
                         eta9
                   } in
                   (\ (r1 :: Language.PureScript.Options.Options) ->
                    let {
                      ds :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)
                              (a, GHC.Integer.Type.Integer)
                      = m1
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                    GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <Language.PureScript.Options.Options>_R
                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                          (Control.Monad.Logger.Logger
                                                                                                             Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                       <(a,
                                                                                                         GHC.Integer.Type.Integer)>_N)
                          r1
                    } in
                    (\ (r2 :: GHC.IORef.IORef
                                Language.PureScript.Errors.MultipleErrors)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case (ds
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(a,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r2)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (a, GHC.Integer.Type.Integer)>_R)
                            s of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild {
                       Data.Either.Left e1
                       -> (# ipv,
                             Data.Either.Left
                               @ Language.PureScript.Errors.MultipleErrors
                               @ (b, GHC.Integer.Type.Integer)
                               e1 #)
                       Data.Either.Right x
                       -> (((eta8
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GHC.Integer.Type.Integer>_N
                                  <Language.PureScript.Make.Monad.Make>_R
                                  <b>_N)
                               (case x of wild1 { (,) a1 s' -> s' }))
                              `cast`
                            (Language.PureScript.Make.Monad.N:Make[0] <(b,
                                                                        GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <*>_N
                                                                                                           <Language.PureScript.Options.Options>_R
                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                              (Control.Monad.Logger.Logger
                                                                                                                 Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                           <(b,
                                                                                                             GHC.Integer.Type.Integer)>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(b,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (b,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r2)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (b, GHC.Integer.Type.Integer)>_R)
                            ipv } })
                      `cast`
                    ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors
                                       (b,
                                        GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <Data.Either.Either
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (b,
                                                                                       GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                <Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                <(b,
                                                                                                                                  GHC.Integer.Type.Integer)>_N))))
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Options.Options>_R
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors)>_R
                             <(b,
                               GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(b,
                                                                                                                GHC.Integer.Type.Integer)>_N))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <b>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                  (\ @ a
                     @ b
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make a)
                     (eta8 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make b)
                     (eta9 :: GHC.Integer.Type.Integer) ->
                   let {
                     m1 :: Language.PureScript.Make.Monad.Make
                             (a, GHC.Integer.Type.Integer)
                     = eta7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GHC.Integer.Type.Integer>_N
                            <Language.PureScript.Make.Monad.Make>_R
                            <a>_N)
                         eta9
                   } in
                   (\ (r1 :: Language.PureScript.Options.Options) ->
                    let {
                      ds :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)
                              (a, GHC.Integer.Type.Integer)
                      = m1
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                    GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <Language.PureScript.Options.Options>_R
                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                          (Control.Monad.Logger.Logger
                                                                                                             Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                       <(a,
                                                                                                         GHC.Integer.Type.Integer)>_N)
                          r1
                    } in
                    (\ (r2 :: GHC.IORef.IORef
                                Language.PureScript.Errors.MultipleErrors)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case (ds
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(a,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r2)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (a, GHC.Integer.Type.Integer)>_R)
                            s of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild {
                       Data.Either.Left x
                       -> (# ipv,
                             Data.Either.Left
                               @ Language.PureScript.Errors.MultipleErrors
                               @ (a, GHC.Integer.Type.Integer)
                               x #)
                       Data.Either.Right y
                       -> case (((eta8
                                    `cast`
                                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                       <GHC.Integer.Type.Integer>_N
                                       <Language.PureScript.Make.Monad.Make>_R
                                       <b>_N)
                                    (case y of wild1 { (,) a1 s' -> s' }))
                                   `cast`
                                 (Language.PureScript.Make.Monad.N:Make[0] <(b,
                                                                             GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                <*>_N
                                                                                                                <Language.PureScript.Options.Options>_R
                                                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                   (Control.Monad.Logger.Logger
                                                                                                                      Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                <(b,
                                                                                                                  GHC.Integer.Type.Integer)>_N)
                                   r1)
                                  `cast`
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Language.PureScript.Errors.MultipleErrors>_N
                                     <Control.Monad.Logger.Logger
                                        Language.PureScript.Errors.MultipleErrors>_R
                                     <(b,
                                       GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                          <Language.PureScript.Errors.MultipleErrors>_R
                                                                          <Data.Either.Either
                                                                             Language.PureScript.Errors.MultipleErrors
                                                                             (b,
                                                                              GHC.Integer.Type.Integer)>_R)
                                  r2)
                                 `cast`
                               (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors
                                       (b, GHC.Integer.Type.Integer)>_R)
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          case ipv3 of wild1 {
                            Data.Either.Left e1
                            -> (# ipv2,
                                  Data.Either.Left
                                    @ Language.PureScript.Errors.MultipleErrors
                                    @ (a, GHC.Integer.Type.Integer)
                                    e1 #)
                            Data.Either.Right x
                            -> (# ipv2,
                                  Data.Either.Right
                                    @ Language.PureScript.Errors.MultipleErrors
                                    @ (a, GHC.Integer.Type.Integer)
                                    (case y of wild2 { (,) a1 s' -> a1 },
                                     case x of wild2 { (,) x1 s'' -> s'' }) #) } } } })
                      `cast`
                    ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors
                                       (a,
                                        GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <Data.Either.Either
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (a,
                                                                                       GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                <Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                <(a,
                                                                                                                                  GHC.Integer.Type.Integer)>_N))))
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Options.Options>_R
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors)>_R
                             <(a,
                               GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                GHC.Integer.Type.Integer)>_N))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N) -}
9427149225f371286999bbc4801210e8
  $s$fApplicativeSupplyT_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,1*C1(C(C(C1(U(U,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Language.PureScript.Make.Monad.Make a)
                   (s1 :: s) ->
                 let {
                   m2 :: Language.PureScript.Make.Monad.Make (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Language.PureScript.Make.Monad.Make>_R <a>_N)
                       s1
                 } in
                 (\ (x :: Language.PureScript.Options.Options) ->
                  let {
                    ds :: Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors)
                            (a, s)
                    = m2
                        `cast`
                      (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                  s)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                              <*>_N
                                                                              <Language.PureScript.Options.Options>_R
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                 (Control.Monad.Logger.Logger
                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                              <(a, s)>_N)
                        x
                  } in
                  \ (r :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                    (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Logger.Logger
                                Language.PureScript.Errors.MultipleErrors>_R
                             <(a, s)>_N ; Control.Monad.Logger.N:Logger[0]
                                              <Language.PureScript.Errors.MultipleErrors>_R
                                              <Data.Either.Either
                                                 Language.PureScript.Errors.MultipleErrors
                                                 (a, s)>_R)
                          r)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Data.Either.Either
                               Language.PureScript.Errors.MultipleErrors (a, s)>_R)
                         s2 of ds1 { (#,#) ipv ipv1 ->
                  (# ipv,
                     case ipv1 of wild {
                       Data.Either.Left x1
                       -> Data.Either.Left
                            @ Language.PureScript.Errors.MultipleErrors
                            @ (b, s)
                            x1
                       Data.Either.Right y
                       -> Data.Either.Right
                            @ Language.PureScript.Errors.MultipleErrors
                            @ (b, s)
                            (f (case y of wild1 { (,) a1 s' -> a1 }),
                             case y of wild1 { (,) a1 s' -> s' }) } #) })
                   `cast`
                 ((<Language.PureScript.Options.Options>_R
                   ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either
                                          Language.PureScript.Errors.MultipleErrors
                                          (b, s)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                  <Language.PureScript.Errors.MultipleErrors>_R
                                                                  <Data.Either.Either
                                                                     Language.PureScript.Errors.MultipleErrors
                                                                     (b,
                                                                      s)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                        <Control.Monad.Logger.Logger
                                                                                           Language.PureScript.Errors.MultipleErrors>_R
                                                                                        <(b,
                                                                                          s)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <*>_N
                                                                                                               <Language.PureScript.Options.Options>_R
                                                                                                               <Control.Monad.Trans.Except.ExceptT
                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                  (Control.Monad.Logger.Logger
                                                                                                                     Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                               <(b,
                                                                                                                 s)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(b,
                                                                                                                                                                           s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Language.PureScript.Make.Monad.Make a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Language.PureScript.Make.Monad.Make>_R <b>_N)) -}
11ca31de1a691d34724f37fa628fd7d1
  $s$fApplicativeSupplyT_$s$fFunctorSupplyT ::
    GHC.Base.Functor
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  (Language.PureScript.Make.Actions.$s$fApplicativeSupplyT_$s$fFunctorStateT_$cfmap
                     @ GHC.Integer.Type.Integer)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make b)
                     (eta8 :: GHC.Integer.Type.Integer) ->
                   let {
                     m1 :: Language.PureScript.Make.Monad.Make
                             (b, GHC.Integer.Type.Integer)
                     = eta7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GHC.Integer.Type.Integer>_N
                            <Language.PureScript.Make.Monad.Make>_R
                            <b>_N)
                         eta8
                   } in
                   (\ (x1 :: Language.PureScript.Options.Options) ->
                    let {
                      ds :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)
                              (b, GHC.Integer.Type.Integer)
                      = m1
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <(b,
                                                                    GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <Language.PureScript.Options.Options>_R
                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                          (Control.Monad.Logger.Logger
                                                                                                             Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                       <(b,
                                                                                                         GHC.Integer.Type.Integer)>_N)
                          x1
                    } in
                    (\ (r :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case (ds
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(b,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (b,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (b, GHC.Integer.Type.Integer)>_R)
                            s of ds1 { (#,#) ipv ipv1 ->
                     (# ipv,
                        case ipv1 of wild {
                          Data.Either.Left x2
                          -> Data.Either.Left
                               @ Language.PureScript.Errors.MultipleErrors
                               @ (a, GHC.Integer.Type.Integer)
                               x2
                          Data.Either.Right y
                          -> Data.Either.Right
                               @ Language.PureScript.Errors.MultipleErrors
                               @ (a, GHC.Integer.Type.Integer)
                               (x, case y of wild1 { (,) a1 s' -> s' }) } #) })
                      `cast`
                    ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors
                                       (a,
                                        GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <Data.Either.Either
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (a,
                                                                                       GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                <Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                <(a,
                                                                                                                                  GHC.Integer.Type.Integer)>_N))))
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Options.Options>_R
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors)>_R
                             <(a,
                               GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                GHC.Integer.Type.Integer)>_N))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N) -}
830799609d01fd0d70da8502bddcd1d7
  $s$fMonadErrorSupplyT ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadSupplyT
                  (\ @ a
                     (eta7 :: Language.PureScript.Errors.MultipleErrors)
                     (s1 :: GHC.Integer.Type.Integer)
                     (r1 :: Language.PureScript.Options.Options)
                     (r2 :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s,
                      Data.Either.Left
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (a, GHC.Integer.Type.Integer)
                        eta7 #))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Errors.MultipleErrors>_R
                   ->_R (<GHC.Integer.Type.Integer>_R
                         ->_R (<Language.PureScript.Options.Options>_R
                               ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.Either.Either
                                                      Language.PureScript.Errors.MultipleErrors
                                                      (a,
                                                       GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                               <Control.Monad.Logger.Logger
                                                                                                                                                  Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                               <(a,
                                                                                                                                                 GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                             <*>_N
                                                                                                                                                                                             <Language.PureScript.Options.Options>_R
                                                                                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                (Control.Monad.Logger.Logger
                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                             <(a,
                                                                                                                                                                                               GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                                                                                                                                                                                GHC.Integer.Type.Integer)>_N)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                                                                                                                                                                                                           <GHC.Integer.Type.Integer>_N
                                                                                                                                                                                                                                                                                                                           <Language.PureScript.Make.Monad.Make>_R
                                                                                                                                                                                                                                                                                                                           <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N))
                  (\ @ a
                     (eta7 :: Control.Monad.Trans.State.Lazy.StateT
                                GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make a)
                     (eta8 :: Language.PureScript.Errors.MultipleErrors
                              -> Control.Monad.Trans.State.Lazy.StateT
                                   GHC.Integer.Type.Integer Language.PureScript.Make.Monad.Make a)
                     (eta9 :: GHC.Integer.Type.Integer) ->
                   let {
                     eta10 :: Language.PureScript.Make.Monad.Make
                                (a, GHC.Integer.Type.Integer)
                     = eta7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GHC.Integer.Type.Integer>_N
                            <Language.PureScript.Make.Monad.Make>_R
                            <a>_N)
                         eta9
                   } in
                   (\ (eta11 :: Language.PureScript.Options.Options) ->
                    let {
                      ds :: Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)
                              (a, GHC.Integer.Type.Integer)
                      = eta10
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                    GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <Language.PureScript.Options.Options>_R
                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                          (Control.Monad.Logger.Logger
                                                                                                             Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                       <(a,
                                                                                                         GHC.Integer.Type.Integer)>_N)
                          eta11
                    } in
                    (\ (r :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case (ds
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(a,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (a, GHC.Integer.Type.Integer)>_R)
                            s of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild {
                       Data.Either.Left l
                       -> ((((eta8 l)
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GHC.Integer.Type.Integer>_N
                                  <Language.PureScript.Make.Monad.Make>_R
                                  <a>_N)
                               eta9)
                              `cast`
                            (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                        GHC.Integer.Type.Integer)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <*>_N
                                                                                                           <Language.PureScript.Options.Options>_R
                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                              (Control.Monad.Logger.Logger
                                                                                                                 Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                           <(a,
                                                                                                             GHC.Integer.Type.Integer)>_N)
                              eta11)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors>_R
                                <(a,
                                  GHC.Integer.Type.Integer)>_N ; Control.Monad.Logger.N:Logger[0]
                                                                     <Language.PureScript.Errors.MultipleErrors>_R
                                                                     <Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a,
                                                                         GHC.Integer.Type.Integer)>_R)
                             r)
                            `cast`
                          (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors
                                  (a, GHC.Integer.Type.Integer)>_R)
                            ipv
                       Data.Either.Right r1 -> ds1 } })
                      `cast`
                    ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors
                                       (a,
                                        GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <Data.Either.Either
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (a,
                                                                                       GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                <Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                <(a,
                                                                                                                                  GHC.Integer.Type.Integer)>_N))))
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Options.Options>_R
                             <Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Logger.Logger
                                   Language.PureScript.Errors.MultipleErrors)>_R
                             <(a,
                               GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                GHC.Integer.Type.Integer)>_N))
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R (<Language.PureScript.Errors.MultipleErrors>_R
                         ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N)
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N) -}
4d3d17e7d852bf452baf89918f029e60
  $s$fMonadErrorSupplyT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Language.PureScript.Make.Monad.Make a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C(C1(U(U,1*U)))))><L,C(C1(C1(C1(U))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Language.PureScript.Make.Monad.Make a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Language.PureScript.Make.Monad.Make b)
                   (s1 :: s) ->
                 let {
                   m2 :: Language.PureScript.Make.Monad.Make (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Language.PureScript.Make.Monad.Make>_R <a>_N)
                       s1
                 } in
                 (\ (r1 :: Language.PureScript.Options.Options) ->
                  let {
                    ds :: Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors)
                            (a, s)
                    = m2
                        `cast`
                      (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                  s)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                              <*>_N
                                                                              <Language.PureScript.Options.Options>_R
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                 (Control.Monad.Logger.Logger
                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                              <(a, s)>_N)
                        r1
                  } in
                  (\ (r2 :: GHC.IORef.IORef
                              Language.PureScript.Errors.MultipleErrors)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <(a, s)>_N ; Control.Monad.Logger.N:Logger[0]
                                               <Language.PureScript.Errors.MultipleErrors>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (a, s)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors (a, s)>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Either.Left e1
                     -> (# ipv,
                           Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, s)
                             e1 #)
                     Data.Either.Right x
                     -> (((k `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <s>_N <Language.PureScript.Make.Monad.Make>_R <b>_N)
                             (case x of wild1 { (,) a1 s' -> s' }))
                            `cast`
                          (Language.PureScript.Make.Monad.N:Make[0] <(b,
                                                                      s)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                  <*>_N
                                                                                  <Language.PureScript.Options.Options>_R
                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                     (Control.Monad.Logger.Logger
                                                                                        Language.PureScript.Errors.MultipleErrors)>_R
                                                                                  <(b, s)>_N)
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <(b, s)>_N ; Control.Monad.Logger.N:Logger[0]
                                               <Language.PureScript.Errors.MultipleErrors>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (b, s)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors (b, s)>_R)
                          ipv } })
                    `cast`
                  ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     (b, s)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                             <Language.PureScript.Errors.MultipleErrors>_R
                                                             <Data.Either.Either
                                                                Language.PureScript.Errors.MultipleErrors
                                                                (b,
                                                                 s)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                   <Control.Monad.Logger.Logger
                                                                                      Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <(b, s)>_N))))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Language.PureScript.Options.Options>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)>_R
                           <(b, s)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(b,
                                                                                          s)>_N))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Language.PureScript.Make.Monad.Make a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Language.PureScript.Make.Monad.Make b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Language.PureScript.Make.Monad.Make>_R <b>_N)) -}
c376998f192f99177b7c9c5fa7206008
  $s$fMonadErrorSupplyT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s Language.PureScript.Make.Monad.Make a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s Language.PureScript.Make.Monad.Make b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C(C1(U(U,1*U)))))><L,C(C1(C1(C1(C1(U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Language.PureScript.Make.Monad.Make a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s Language.PureScript.Make.Monad.Make b)
                   (s1 :: s) ->
                 let {
                   m2 :: Language.PureScript.Make.Monad.Make (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Language.PureScript.Make.Monad.Make>_R <a>_N)
                       s1
                 } in
                 (\ (r1 :: Language.PureScript.Options.Options) ->
                  let {
                    ds :: Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors)
                            (a, s)
                    = m2
                        `cast`
                      (Language.PureScript.Make.Monad.N:Make[0] <(a,
                                                                  s)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                              <*>_N
                                                                              <Language.PureScript.Options.Options>_R
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                 (Control.Monad.Logger.Logger
                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                              <(a, s)>_N)
                        r1
                  } in
                  (\ (r2 :: GHC.IORef.IORef
                              Language.PureScript.Errors.MultipleErrors)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <(a, s)>_N ; Control.Monad.Logger.N:Logger[0]
                                               <Language.PureScript.Errors.MultipleErrors>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (a, s)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors (a, s)>_R)
                          s2 of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Either.Left e1
                     -> (# ipv,
                           Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ (b, s)
                             e1 #)
                     Data.Either.Right x
                     -> ((((k (case x of wild1 { (,) a1 s' -> a1 }))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <s>_N <Language.PureScript.Make.Monad.Make>_R <b>_N)
                             (case x of wild1 { (,) a1 s' -> s' }))
                            `cast`
                          (Language.PureScript.Make.Monad.N:Make[0] <(b,
                                                                      s)>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                  <*>_N
                                                                                  <Language.PureScript.Options.Options>_R
                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                     (Control.Monad.Logger.Logger
                                                                                        Language.PureScript.Errors.MultipleErrors)>_R
                                                                                  <(b, s)>_N)
                            r1)
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <(b, s)>_N ; Control.Monad.Logger.N:Logger[0]
                                               <Language.PureScript.Errors.MultipleErrors>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (b, s)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors (b, s)>_R)
                          ipv } })
                    `cast`
                  ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     (b, s)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                             <Language.PureScript.Errors.MultipleErrors>_R
                                                             <Data.Either.Either
                                                                Language.PureScript.Errors.MultipleErrors
                                                                (b,
                                                                 s)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                   <Control.Monad.Logger.Logger
                                                                                      Language.PureScript.Errors.MultipleErrors>_R
                                                                                   <(b, s)>_N))))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Language.PureScript.Options.Options>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)>_R
                           <(b, s)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(b,
                                                                                          s)>_N))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Language.PureScript.Make.Monad.Make a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT
                            s Language.PureScript.Make.Monad.Make b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Language.PureScript.Make.Monad.Make>_R <b>_N)) -}
bea27be482ec209f52108bba1b4cb4f0
  $s$fMonadErrorSupplyT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s Language.PureScript.Make.Monad.Make a
  {- Arity: 3, Strictness: <B,U><B,A><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 Language.PureScript.Make.Monad.$fMonadMake_$s$fMonadReaderT_$cfail
                   @ Language.PureScript.Options.Options
                   @ (a, s)
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R (<s>_R
                       ->_R Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                             s)>_N) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                               <s>_N
                                                                                               <Language.PureScript.Make.Monad.Make>_R
                                                                                               <a>_N)) -}
a7d2c479f78509c85ec8afd68e3fd990
  $s$fMonadErrorSupplyT_$s$fMonadSupplyT ::
    GHC.Base.Monad
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  Language.PureScript.Make.Actions.$s$fApplicativeSupplyT
                  (Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$c>>=
                     @ GHC.Integer.Type.Integer)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R (<a>_R
                         ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                  (Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$c>>
                     @ GHC.Integer.Type.Integer)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <b>_N)
                  (\ @ a (eta7 :: a) (eta8 :: GHC.Integer.Type.Integer) ->
                   let {
                     x :: (a, GHC.Integer.Type.Integer) = (eta7, eta8)
                   } in
                   (\ (eta9 :: Language.PureScript.Options.Options)
                      (eta10 :: GHC.IORef.IORef
                                  Language.PureScript.Errors.MultipleErrors)
                      (eta11 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    (# eta11,
                       Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, GHC.Integer.Type.Integer)
                         x #))
                     `cast`
                   ((<Language.PureScript.Options.Options>_R
                     ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Language.PureScript.Errors.MultipleErrors
                                            (a,
                                             GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                        <Language.PureScript.Errors.MultipleErrors>_R
                                                                                        <Data.Either.Either
                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                           (a,
                                                                                            GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                     <Control.Monad.Logger.Logger
                                                                                                                                        Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                     <(a,
                                                                                                                                       GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <Language.PureScript.Options.Options>_R
                                                                                                                                                                                   <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                      (Control.Monad.Logger.Logger
                                                                                                                                                                                         Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                   <(a,
                                                                                                                                                                                     GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                                                                                                                                                                      GHC.Integer.Type.Integer)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GHC.Integer.Type.Integer>_N
                                 <Language.PureScript.Make.Monad.Make>_R
                                 <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N)
                  (Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$cfail
                     @ GHC.Integer.Type.Integer)
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N) -}
cb1648ce777de73cccd0a7015ddb2976
  $s$fMonadReaderSupplyT ::
    Control.Monad.Reader.Class.MonadReader
      Language.PureScript.Options.Options
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Options.Options
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadSupplyT
                  (\ (eta7 :: GHC.Integer.Type.Integer)
                     (r1 :: Language.PureScript.Options.Options)
                     (r2 :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s,
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (Language.PureScript.Options.Options, GHC.Integer.Type.Integer)
                        (r1, eta7) #))
                    `cast`
                  ((<GHC.Integer.Type.Integer>_R
                    ->_R (<Language.PureScript.Options.Options>_R
                          ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Language.PureScript.Errors.MultipleErrors
                                                 (Language.PureScript.Options.Options,
                                                  GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (Language.PureScript.Options.Options,
                                                                                                 GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                          <Control.Monad.Logger.Logger
                                                                                                                                             Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                          <(Language.PureScript.Options.Options,
                                                                                                                                            GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                        <*>_N
                                                                                                                                                                                        <Language.PureScript.Options.Options>_R
                                                                                                                                                                                        <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                           (Control.Monad.Logger.Logger
                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                        <(Language.PureScript.Options.Options,
                                                                                                                                                                                          GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(Language.PureScript.Options.Options,
                                                                                                                                                                                                                                                                           GHC.Integer.Type.Integer)>_N)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                                                                                                                                                                                                      <GHC.Integer.Type.Integer>_N
                                                                                                                                                                                                                                                                                                                      <Language.PureScript.Make.Monad.Make>_R
                                                                                                                                                                                                                                                                                                                      <Language.PureScript.Options.Options>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <Language.PureScript.Options.Options>_N))
                  (\ @ a
                     (eta7 :: Language.PureScript.Options.Options
                              -> Language.PureScript.Options.Options) ->
                   Control.Monad.Trans.State.Lazy.mapStateT
                     @ Language.PureScript.Make.Monad.Make
                     @ a
                     @ GHC.Integer.Type.Integer
                     @ Language.PureScript.Make.Monad.Make
                     @ a
                     (Control.Monad.Trans.Reader.withReaderT
                        @ *
                        @ Language.PureScript.Options.Options
                        @ Language.PureScript.Options.Options
                        @ (Control.Monad.Trans.Except.ExceptT
                             Language.PureScript.Errors.MultipleErrors
                             (Control.Monad.Logger.Logger
                                Language.PureScript.Errors.MultipleErrors))
                        @ (a, GHC.Integer.Type.Integer)
                        eta7)
                       `cast`
                     (Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                       GHC.Integer.Type.Integer)>_N
                      ->_R Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                            GHC.Integer.Type.Integer)>_N))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Options.Options
                    -> Language.PureScript.Options.Options>_R
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N
                   ->_R Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N)
                  (\ @ a
                     (eta7 :: Language.PureScript.Options.Options -> a)
                     (s1 :: GHC.Integer.Type.Integer)
                     (r1 :: Language.PureScript.Options.Options) ->
                   let {
                     eta8 :: a = eta7 r1
                   } in
                   (\ (r2 :: GHC.IORef.IORef
                               Language.PureScript.Errors.MultipleErrors)
                      (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    (# s,
                       Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, GHC.Integer.Type.Integer)
                         (eta8, s1) #))
                     `cast`
                   ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors
                                      (a,
                                       GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                  <Language.PureScript.Errors.MultipleErrors>_R
                                                                                  <Data.Either.Either
                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                     (a,
                                                                                      GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                               <Control.Monad.Logger.Logger
                                                                                                                                  Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                               <(a,
                                                                                                                                 GHC.Integer.Type.Integer)>_N))))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Options.Options -> a>_R
                   ->_R (<GHC.Integer.Type.Integer>_R
                         ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Language.PureScript.Options.Options>_R
                                       <Control.Monad.Trans.Except.ExceptT
                                          Language.PureScript.Errors.MultipleErrors
                                          (Control.Monad.Logger.Logger
                                             Language.PureScript.Errors.MultipleErrors)>_R
                                       <(a,
                                         GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(a,
                                                                                                                          GHC.Integer.Type.Integer)>_N) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                                                    <GHC.Integer.Type.Integer>_N
                                                                                                                                                                    <Language.PureScript.Make.Monad.Make>_R
                                                                                                                                                                    <a>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <a>_N)) -}
930cf64f836b66985a84edfdacf48fb6
  $s$fMonadSupplySupplyT ::
    Control.Monad.Supply.Class.MonadSupply
      (Control.Monad.Supply.SupplyT Language.PureScript.Make.Monad.Make)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Supply.SupplyT
                       Language.PureScript.Make.Monad.Make)
                  Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadSupplyT
                  (\ (eta7 :: GHC.Integer.Type.Integer)
                     (r1 :: Language.PureScript.Options.Options)
                     (r2 :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s,
                      Data.Either.Right
                        @ Language.PureScript.Errors.MultipleErrors
                        @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                        (eta7,
                         GHC.Integer.Type.plusInteger
                           eta7
                           Control.Monad.Supply.Class.$fMonadSupplySupplyT2) #))
                    `cast`
                  ((<GHC.Integer.Type.Integer>_R
                    ->_R (<Language.PureScript.Options.Options>_R
                          ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.Either.Either
                                                 Language.PureScript.Errors.MultipleErrors
                                                 (GHC.Integer.Type.Integer,
                                                  GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (GHC.Integer.Type.Integer,
                                                                                                 GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                          <Control.Monad.Logger.Logger
                                                                                                                                             Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                          <(GHC.Integer.Type.Integer,
                                                                                                                                            GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                        <*>_N
                                                                                                                                                                                        <Language.PureScript.Options.Options>_R
                                                                                                                                                                                        <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                           (Control.Monad.Logger.Logger
                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                        <(GHC.Integer.Type.Integer,
                                                                                                                                                                                          GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(GHC.Integer.Type.Integer,
                                                                                                                                                                                                                                                                           GHC.Integer.Type.Integer)>_N)) ; (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                                                                                                                                                                                                                                      <GHC.Integer.Type.Integer>_N
                                                                                                                                                                                                                                                                                                                      <Language.PureScript.Make.Monad.Make>_R
                                                                                                                                                                                                                                                                                                                      <GHC.Integer.Type.Integer>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <GHC.Integer.Type.Integer>_N))
                  (\ (x :: GHC.Integer.Type.Integer) ->
                   let {
                     x1 :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer) = (x, x)
                   } in
                   (\ (eta7 :: Language.PureScript.Options.Options)
                      (eta8 :: GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors)
                      (eta9 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    (# eta9,
                       Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                         x1 #))
                     `cast`
                   ((<Language.PureScript.Options.Options>_R
                     ->_R (<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Data.Either.Either
                                            Language.PureScript.Errors.MultipleErrors
                                            (GHC.Integer.Type.Integer,
                                             GHC.Integer.Type.Integer)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                        <Language.PureScript.Errors.MultipleErrors>_R
                                                                                        <Data.Either.Either
                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                           (GHC.Integer.Type.Integer,
                                                                                            GHC.Integer.Type.Integer)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                     <Control.Monad.Logger.Logger
                                                                                                                                        Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                     <(GHC.Integer.Type.Integer,
                                                                                                                                       GHC.Integer.Type.Integer)>_N))) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <Language.PureScript.Options.Options>_R
                                                                                                                                                                                   <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                      (Control.Monad.Logger.Logger
                                                                                                                                                                                         Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                                                   <(GHC.Integer.Type.Integer,
                                                                                                                                                                                     GHC.Integer.Type.Integer)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <(GHC.Integer.Type.Integer,
                                                                                                                                                                                                                                                                      GHC.Integer.Type.Integer)>_N)))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GHC.Integer.Type.Integer>_N
                            <Language.PureScript.Make.Monad.Make>_R
                            <GHC.Integer.Type.Integer>_N) ; Sym (Control.Monad.Supply.N:SupplyT[0]) <Language.PureScript.Make.Monad.Make>_N <GHC.Integer.Type.Integer>_N) -}
9d4a6419fb491accfada5e55586bfcd7
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Language.PureScript.Make.Actions.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                     @ tok) -}
744ae72957771f08d8d17d19ac8e83f3
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
2843ed31048b00ad03b136ea79151f98
  $s$wsplitS ::
    Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> (# Data.Set.Internal.Set Language.PureScript.Names.Ident,
          Data.Set.Internal.Set Language.PureScript.Names.Ident #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [~] -}
ece36fafb7c7da4a9761dde0eeaa0af2
  $sdifference ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
6b226a9cde4c861ce2f9cc9ecff55404
  $sfromList ::
    [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.Ident]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.Ident
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.Ident
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident) }
                        : ipv ipv1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< x ipv of wild2 {
                             GHC.Types.False
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Make.Actions.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)) }
                             GHC.Types.True
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Make.Actions.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident))
                                  1# } } } }) -}
0df202b352c29aa24cf67a176b6b7b13
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
a07cb1fcf63cbe8ee837ce69a99fff54
  $sfromList_$sgo4 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
5d6b7a19a7a53389d8338e75846f495a
  $sinsert_$sgo3 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
51145c7183f72109340799e6377ab6aa
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a7c10e3ff3f36e7514dbca22e8549366
  $smember_$sgo1 ::
    Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3972f1b976b8dd5be6a938980c964730
  $smember_$sgo2 ::
    Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
feaec17b04b6b05b5605bec54e7a299d
  $smember_$sgo3 ::
    Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
537d4e293e074c2a0bfe86553931a7b9
  $tc'CompilingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14948554104761637372##
                   5627322054547931086##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tc'CompilingModule2
                   0#
                   Language.PureScript.Make.Actions.$tc'CompilingModule1) -}
e3ae1ee01616ba8e07bfde198767dfaa
  $tc'CompilingModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0fd3670c7e7fb10d5320a5c1b53eb462
  $tc'CompilingModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tc'CompilingModule3) -}
587b7a227eedeb503d8a550ad50a8f97
  $tc'CompilingModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompilingModule"#) -}
a09402d1cfe04dffc73ddb73a24edeb1
  $tc'MakeActions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   784244410379401427##
                   16215797580507501190##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tc'MakeActions2
                   1#
                   Language.PureScript.Make.Actions.$tc'MakeActions1) -}
d3253e098af1d99a97839326cee173ef
  $tc'MakeActions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d25d1fb0d5bb0d86d3ebccfbcdc8601d
  $tc'MakeActions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tc'MakeActions3) -}
d90e06a174fc73ef91ccd4b66f880c02
  $tc'MakeActions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MakeActions"#) -}
8a9945af078b201a5997a0d0d81d31ba
  $tc'RebuildAlways :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5258670380700868940##
                   5734591250661876709##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tc'RebuildAlways2
                   0#
                   Language.PureScript.Make.Actions.$tc'RebuildAlways1) -}
01e73d7ea7dd811ae058aec1e59b1e88
  $tc'RebuildAlways1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0adc53dd7c120cd9ee3b0cdbfe793184
  $tc'RebuildAlways2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tc'RebuildAlways3) -}
cc7cfcbd3fb101d99407a961374046e4
  $tc'RebuildAlways3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RebuildAlways"#) -}
042b6d0d138db7142d83336406f168b9
  $tc'RebuildNever :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9438158898994533873##
                   2873067394235400153##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tc'RebuildNever1
                   0#
                   Language.PureScript.Make.Actions.$tc'RebuildAlways1) -}
354116cb555e10111c2d269c93af7c95
  $tc'RebuildNever1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tc'RebuildNever2) -}
d44f522a26f2665392698774aff2b231
  $tc'RebuildNever2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RebuildNever"#) -}
7d0d049094a92d73c492ebb36d232f2c
  $tcMakeActions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13218112276366875016##
                   13164564488163558534##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tcMakeActions2
                   0#
                   Language.PureScript.Make.Actions.$tcMakeActions1) -}
c10fa6ed09c910b7587872cd78b1e186
  $tcMakeActions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7795f7bf6886ed0774c31056db87893c
  $tcMakeActions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tcMakeActions3) -}
32d8dddbf6b31f20ed7822604b645907
  $tcMakeActions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MakeActions"#) -}
812972a46d4c55d028311a84ae409e07
  $tcProgressMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8669776343385011091##
                   1621793515919123231##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tcProgressMessage1
                   0#
                   GHC.Types.krep$*) -}
439ef9849b2e56a2557657db80589a28
  $tcProgressMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tcProgressMessage2) -}
f01eab90f451a1f918ef3f9538b4ac78
  $tcProgressMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProgressMessage"#) -}
369f73e2fd645f9b01a8c0e26eb9606b
  $tcRebuildPolicy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13530792852320073977##
                   13096476889343940897##
                   Language.PureScript.Make.Actions.$trModule
                   Language.PureScript.Make.Actions.$tcRebuildPolicy1
                   0#
                   GHC.Types.krep$*) -}
df1208630defe386322176c8a74f6584
  $tcRebuildPolicy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$tcRebuildPolicy2) -}
1f324d61e663b6994668e0d2a22a30d3
  $tcRebuildPolicy2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RebuildPolicy"#) -}
15cc0d4097967a9d9bd9fc68649fc378
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Make.Actions.$trModule3
                   Language.PureScript.Make.Actions.$trModule1) -}
f193e9ef0fc812f3e2076dd7e9f33333
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$trModule2) -}
f4b2e59438fc5c6e61b334ca33260ab9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Make.Actions"#) -}
3bda9cefdd650c91ed442b865f9c889a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.Actions.$trModule4) -}
bfbd75ad6beff5b677b0ab19d9734b3e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
f7058b18e9565db0ad6a2369a472ed12
  $w$cshow :: Language.PureScript.Names.ModuleName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Make.Actions.$fShowProgressMessage2
                   (Language.PureScript.Names.$w$cshowsPrec
                      11#
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
8f1f98577c38d7d7da3d5c088827446e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Make.Actions.$fShowProgressMessage2
                        (Language.PureScript.Names.$w$cshowsPrec 11# ww1 w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Make.Actions.$fShowProgressMessage2
                           (Language.PureScript.Names.$w$cshowsPrec
                              11#
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
ae50d855c66a1cd7786793c4c0f3b318
  $wbuildMakeActions ::
    GHC.IO.FilePath
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Either.Either
            Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName GHC.IO.FilePath
    -> GHC.Types.Bool
    -> (# Language.PureScript.Names.ModuleName
          -> Language.PureScript.Make.Monad.Make
               (Data.Either.Either
                  Language.PureScript.Make.Actions.RebuildPolicy
                  (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)),
          Language.PureScript.Names.ModuleName
          -> Language.PureScript.Make.Monad.Make
               (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime),
          Language.PureScript.Names.ModuleName
          -> Language.PureScript.Make.Monad.Make
               (GHC.IO.FilePath, Language.PureScript.Make.Actions.Externs),
          Language.PureScript.CoreFn.Module.Module
            Language.PureScript.CoreFn.Ann.Ann
          -> Language.PureScript.Environment.Environment
          -> Language.PureScript.Make.Actions.Externs
          -> Control.Monad.Supply.SupplyT
               Language.PureScript.Make.Monad.Make (),
          Language.PureScript.CoreFn.Module.Module
            Language.PureScript.CoreFn.Ann.Ann
          -> Language.PureScript.Make.Monad.Make (),
          Language.PureScript.Make.Actions.ProgressMessage
          -> Language.PureScript.Make.Monad.Make () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,1*U>, Inline: [0] -}
4ffb2ad8a609a80bf7b3b56eaf9b3c54
  type Externs = Data.ByteString.Lazy.Internal.ByteString
b3e64d282c220fb028af7420464074c0
  data MakeActions (m :: * -> *)
    = MakeActions {getInputTimestamp :: Language.PureScript.Names.ModuleName
                                        -> m (Data.Either.Either
                                                Language.PureScript.Make.Actions.RebuildPolicy
                                                (GHC.Base.Maybe
                                                   Data.Time.Clock.Internal.UTCTime.UTCTime)),
                   getOutputTimestamp :: Language.PureScript.Names.ModuleName
                                         -> m (GHC.Base.Maybe
                                                 Data.Time.Clock.Internal.UTCTime.UTCTime),
                   readExterns :: Language.PureScript.Names.ModuleName
                                  -> m (GHC.IO.FilePath, Language.PureScript.Make.Actions.Externs),
                   codegen :: Language.PureScript.CoreFn.Module.Module
                                Language.PureScript.CoreFn.Ann.Ann
                              -> Language.PureScript.Environment.Environment
                              -> Language.PureScript.Make.Actions.Externs
                              -> Control.Monad.Supply.SupplyT m (),
                   ffiCodegen :: Language.PureScript.CoreFn.Module.Module
                                   Language.PureScript.CoreFn.Ann.Ann
                                 -> m (),
                   progress :: Language.PureScript.Make.Actions.ProgressMessage
                               -> m ()}
5552996379e32ea3ff813e089c9bdfc9
  data ProgressMessage
    = CompilingModule Language.PureScript.Names.ModuleName
9e87da6e8f3d80dfe923a125596f291e
  data RebuildPolicy = RebuildNever | RebuildAlways
ffd31c1d8bb38416a469a44f6d866eac
  buildMakeActions ::
    GHC.IO.FilePath
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         (Data.Either.Either
            Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName GHC.IO.FilePath
    -> GHC.Types.Bool
    -> Language.PureScript.Make.Actions.MakeActions
         Language.PureScript.Make.Monad.Make
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,1*U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.IO.FilePath)
                   (w1 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            (Data.Either.Either
                               Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath))
                   (w2 :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName GHC.IO.FilePath)
                   (w3 :: GHC.Types.Bool) ->
                 case Language.PureScript.Make.Actions.$wbuildMakeActions
                        w
                        w1
                        w2
                        w3 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Make.Actions.MakeActions
                   @ Language.PureScript.Make.Monad.Make
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
5df9c2af59786e7d8e2868d3e88309cf
  checkForeignDecls ::
    Language.PureScript.CoreFn.Module.Module ann
    -> GHC.IO.FilePath -> Language.PureScript.Make.Monad.Make ()
  {- Arity: 2, Strictness: <L,U(1*U,A,U,A,A,A,1*U,A)><L,U> -}
b3e64d282c220fb028af7420464074c0
  codegen ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.CoreFn.Module.Module
         Language.PureScript.CoreFn.Ann.Ann
    -> Language.PureScript.Environment.Environment
    -> Language.PureScript.Make.Actions.Externs
    -> Control.Monad.Supply.SupplyT m ()
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
b3e64d282c220fb028af7420464074c0
  ffiCodegen ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.CoreFn.Module.Module
         Language.PureScript.CoreFn.Ann.Ann
    -> m ()
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
b3e64d282c220fb028af7420464074c0
  getInputTimestamp ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.Names.ModuleName
    -> m (Data.Either.Either
            Language.PureScript.Make.Actions.RebuildPolicy
            (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime))
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
b3e64d282c220fb028af7420464074c0
  getOutputTimestamp ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.Names.ModuleName
    -> m (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
b3e64d282c220fb028af7420464074c0
  progress ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.Make.Actions.ProgressMessage -> m ()
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
b3e64d282c220fb028af7420464074c0
  readExterns ::
    Language.PureScript.Make.Actions.MakeActions m
    -> Language.PureScript.Names.ModuleName
    -> m (GHC.IO.FilePath, Language.PureScript.Make.Actions.Externs)
  RecSel Left Language.PureScript.Make.Actions.MakeActions
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   (ds :: Language.PureScript.Make.Actions.MakeActions m) ->
                 case ds of wild { Language.PureScript.Make.Actions.MakeActions ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
instance GHC.Classes.Eq [Language.PureScript.Make.Actions.ProgressMessage]
  = Language.PureScript.Make.Actions.$fEqProgressMessage
instance GHC.Classes.Eq [Language.PureScript.Make.Actions.RebuildPolicy]
  = Language.PureScript.Make.Actions.$fEqRebuildPolicy
instance GHC.Classes.Ord [Language.PureScript.Make.Actions.ProgressMessage]
  = Language.PureScript.Make.Actions.$fOrdProgressMessage
instance GHC.Classes.Ord [Language.PureScript.Make.Actions.RebuildPolicy]
  = Language.PureScript.Make.Actions.$fOrdRebuildPolicy
instance GHC.Show.Show [Language.PureScript.Make.Actions.ProgressMessage]
  = Language.PureScript.Make.Actions.$fShowProgressMessage
instance GHC.Show.Show [Language.PureScript.Make.Actions.RebuildPolicy]
  = Language.PureScript.Make.Actions.$fShowRebuildPolicy
"SPEC/Language.PureScript.Make.Actions $fApplicativeSupplyT @ Make" [orphan] forall (v :: GHC.Base.Monad
                                                                                            Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.$fApplicativeSupplyT @ Language.PureScript.Make.Monad.Make
                                            v
  = Language.PureScript.Make.Actions.$s$fApplicativeSupplyT
"SPEC/Language.PureScript.Make.Actions $fFunctorStateT_$cfmap @ Make _" [orphan] forall @ s
                                                                                        ($dFunctor :: GHC.Base.Functor
                                                                                                        Language.PureScript.Make.Monad.Make)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ Language.PureScript.Make.Monad.Make
                                                        @ s
                                                        $dFunctor
  = Language.PureScript.Make.Actions.$s$fApplicativeSupplyT_$s$fFunctorStateT_$cfmap
      @ s
"SPEC/Language.PureScript.Make.Actions $fFunctorSupplyT @ Make" [orphan] forall (v :: GHC.Base.Functor
                                                                                        Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.$fFunctorSupplyT @ Language.PureScript.Make.Monad.Make
                                        v
  = Language.PureScript.Make.Actions.$s$fApplicativeSupplyT_$s$fFunctorSupplyT
"SPEC/Language.PureScript.Make.Actions $fMonadErrorSupplyT @ MultipleErrors @ Make" [orphan] forall (v :: Control.Monad.Error.Class.MonadError
                                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                                            Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.$fMonadErrorSupplyT @ Language.PureScript.Errors.MultipleErrors
                                           @ Language.PureScript.Make.Monad.Make
                                           v
  = Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT
"SPEC/Language.PureScript.Make.Actions $fMonadReaderSupplyT @ Options @ Make" [orphan] forall (v :: Control.Monad.Reader.Class.MonadReader
                                                                                                      Language.PureScript.Options.Options
                                                                                                      Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.$fMonadReaderSupplyT @ Language.PureScript.Options.Options
                                            @ Language.PureScript.Make.Monad.Make
                                            v
  = Language.PureScript.Make.Actions.$s$fMonadReaderSupplyT
"SPEC/Language.PureScript.Make.Actions $fMonadStateT_$c>> @ Make _" [orphan] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  Language.PureScript.Make.Monad.Make)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ Language.PureScript.Make.Monad.Make
                                                    @ s
                                                    $dMonad
  = Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$c>>
      @ s
"SPEC/Language.PureScript.Make.Actions $fMonadStateT_$c>>= @ Make _" [orphan] forall @ s
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   Language.PureScript.Make.Monad.Make)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ Language.PureScript.Make.Monad.Make
                                                     @ s
                                                     $dMonad
  = Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/Language.PureScript.Make.Actions $fMonadStateT_$cfail @ Make _" [orphan] forall @ s
                                                                                      ($dMonad :: GHC.Base.Monad
                                                                                                    Language.PureScript.Make.Monad.Make)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ Language.PureScript.Make.Monad.Make
                                                      @ s
                                                      $dMonad
  = Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadStateT_$cfail
      @ s
"SPEC/Language.PureScript.Make.Actions $fMonadSupplySupplyT @ Make" [orphan] forall (v :: GHC.Base.Monad
                                                                                            Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.Class.$fMonadSupplySupplyT @ Language.PureScript.Make.Monad.Make
                                                  v
  = Language.PureScript.Make.Actions.$s$fMonadSupplySupplyT
"SPEC/Language.PureScript.Make.Actions $fMonadSupplyT @ Make" [orphan] forall (v :: GHC.Base.Monad
                                                                                      Language.PureScript.Make.Monad.Make)
  Control.Monad.Supply.$fMonadSupplyT @ Language.PureScript.Make.Monad.Make
                                      v
  = Language.PureScript.Make.Actions.$s$fMonadErrorSupplyT_$s$fMonadSupplyT
"SPEC/Language.PureScript.Make.Actions $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                                                    (v :: GHC.Base.Monad
                                                                                            Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Language.PureScript.Make.Actions.$s$fStream[]mtok @ tok
"SPEC/Language.PureScript.Make.Actions $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                                             ($dMonad :: GHC.Base.Monad
                                                                                                           Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Language.PureScript.Make.Actions.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
      @ tok
"SPEC/Language.PureScript.Make.Actions $wsplitS @ Ident" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                     Language.PureScript.Names.Ident)
  Data.Set.Internal.$wsplitS @ Language.PureScript.Names.Ident w
  = Language.PureScript.Make.Actions.$s$wsplitS
"SPEC/Language.PureScript.Make.Actions difference @ Ident" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                       Language.PureScript.Names.Ident)
  Data.Set.Internal.difference @ Language.PureScript.Names.Ident
                               $dOrd
  = Language.PureScript.Make.Actions.$sdifference
"SPEC/Language.PureScript.Make.Actions fromList @ Ident" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                     Language.PureScript.Names.Ident)
  Data.Set.Internal.fromList @ Language.PureScript.Names.Ident $dOrd
  = Language.PureScript.Make.Actions.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

