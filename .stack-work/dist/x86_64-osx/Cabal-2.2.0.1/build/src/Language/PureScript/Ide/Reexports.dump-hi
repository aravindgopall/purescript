
==================== FINAL INTERFACE ====================
2019-01-24 14:17:42.430399 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Reexports [family instance module] 8043
  interface hash: c3bd52fd0a2639944b135a64989fe781
  ABI hash: d5cc525b693f3dff317f0447e0c05c3f
  export-list hash: b4bf3c898ef6fb170bdebb576e26ba35
  orphan hash: 495184f69bd40911467bbe3b0ed0cd44
  flag hash: 7c888060b236033a64748d3dc5454882
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Reexports.prettyPrintReexportResult
  Language.PureScript.Ide.Reexports.reexportHasFailures
  Language.PureScript.Ide.Reexports.resolveReexports
  Language.PureScript.Ide.Reexports.resolveReexports'
  Language.PureScript.Ide.Reexports.ReexportResult{Language.PureScript.Ide.Reexports.ReexportResult reFailed reResolved}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Types
                     Language.PureScript.Ide.Util Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2 exceptions-0.10.0
                      fast-logger-2.4.11 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 monad-logger-0.3.28.5
                      monad-loops-0.4.3 mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4 stringsearch-0.3.6.6
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unix-time-0.3.8 unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: unix-time-0.3.8:Data.UnixTime.Diff
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  KindRef fdcf7f61e078f63d583e2e92289fb303
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  IdeDeclarationAnn b02d1e3d0d65a3bc0459005430392eb1
  ModuleMap 70319f3e75143277feb6984fb77be89b
  _IdeDeclDataConstructor 2a59d3a75e6ec43625d4ac73194fc132
  _IdeDeclKind 1b3f572c45f77f55e51dccaac7ebe8b4
  _IdeDeclType 5a85c0225b99d2057d2ce54ca7b67a42
  _IdeDeclTypeClass 1c5e11849eaa2f03b374ba2b50a55ccb
  _IdeDeclTypeOperator 48e91b062c4e39088a3056ffc188426a
  _IdeDeclTypeSynonym 1a34cbfe89c7ee34f024ee6ec31fbf20
  _IdeDeclValue f69c0561e04acdd8727d69b166d26993
  _IdeDeclValueOperator 719b52cf16b49b15d6375afaac01e929
  annExportedFrom 1a728ad6f0d92c8e64b52b01be9afcbb
  anyOf 30b07c9f4bcb7d654ab6d8adfaab60ba
  idaAnnotation 0fdfd8b35ab07c15de959e014e8b293c
  idaDeclaration 52470585dda3a96f11d1deb064fffc24
  ideDtorName f5cb16b133f56c5181009aa7f78d9703
  ideDtorTypeName 8722317caade6850b775626bc1244b04
  ideSynonymName dba058d7cc24bbf5f5716fc90da609d5
  ideTCName 6707b0fb5bd9d8aacf896d456424bf01
  ideTypeName 102b07c9135d8fc8731c934f05b32722
  ideTypeOpName 08dd8715bd3877a439fc94b5ef8510e9
  ideValueIdent e8d6898aa2565d8b04f5faf56de63fbb
  ideValueOpName 2164408815ac127bc2a0c935191310ce
import  -/  Language.PureScript.Ide.Util 23feade20e7d884b8e398315c4ffa11e
  exports: b783a834cebd9a63a606ae4111317a86
  discardAnn dda9d4fafbbc8df2d6404b8b09ac7a49
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  runModuleName 58b788b37f600c0f34fa85241d7748ad
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
50faffa175089c4d498aee15d818adb2
  $fEqReexportResult ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Reexports.ReexportResult a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Reexports.ReexportResult a)
                  (Language.PureScript.Ide.Reexports.$fEqReexportResult_$c== @ a v)
                  (Language.PureScript.Ide.Reexports.$fEqReexportResult_$c/=
                     @ a
                     v) -}
50faffa175089c4d498aee15d818adb2
  $fEqReexportResult_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,1*U)><S,1*U(U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Ide.Reexports.ReexportResult a)
                   (y :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case Language.PureScript.Ide.Reexports.$fEqReexportResult_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
50faffa175089c4d498aee15d818adb2
  $fEqReexportResult_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,1*U)><S,1*U(U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Language.PureScript.Ide.Reexports.ReexportResult a)
                   (w2 :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case w1 of ww { Language.PureScript.Ide.Reexports.ReexportResult ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Reexports.ReexportResult ww4 ww5 ->
                 Language.PureScript.Ide.Reexports.$w$c==
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
ee35707fd6d27e54561184c73b4b7ccf
  $fEqReexportResult_$s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.AST.Declarations.DeclarationRef)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.AST.Declarations.DeclarationRef)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.Declarations.DeclarationRef
                     Language.PureScript.Names.$fEqModuleName
                     Language.PureScript.AST.Declarations.$fEqDeclarationRef)
                  Language.PureScript.Ide.Reexports.$fEqReexportResult_$s$fEq(,)_$c/= -}
eaa4772a5c735da5d22a703e3daedf8f
  $fEqReexportResult_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.Declarations.DeclarationRef)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.Declarations.DeclarationRef)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.DeclarationRef))
                   (y :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.Declarations.DeclarationRef)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c==
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
50faffa175089c4d498aee15d818adb2
  $fFunctorReexportResult ::
    GHC.Base.Functor Language.PureScript.Ide.Reexports.ReexportResult
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Reexports.ReexportResult
                  Language.PureScript.Ide.Reexports.$fFunctorReexportResult_$cfmap
                  Language.PureScript.Ide.Reexports.$fFunctorReexportResult_$c<$ -}
50faffa175089c4d498aee15d818adb2
  $fFunctorReexportResult_$c<$ ::
    a
    -> Language.PureScript.Ide.Reexports.ReexportResult b
    -> Language.PureScript.Ide.Reexports.ReexportResult a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Ide.Reexports.ReexportResult b) ->
                 case ds of wild { Language.PureScript.Ide.Reexports.ReexportResult a1 a2 ->
                 Language.PureScript.Ide.Reexports.ReexportResult @ a z a2 }) -}
50faffa175089c4d498aee15d818adb2
  $fFunctorReexportResult_$cfmap ::
    (a -> b)
    -> Language.PureScript.Ide.Reexports.ReexportResult a
    -> Language.PureScript.Ide.Reexports.ReexportResult b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case ds of wild { Language.PureScript.Ide.Reexports.ReexportResult a1 a2 ->
                 Language.PureScript.Ide.Reexports.ReexportResult
                   @ b
                   (f a1)
                   a2 }) -}
50faffa175089c4d498aee15d818adb2
  $fGenericReexportResult ::
    GHC.Generics.Generic
      (Language.PureScript.Ide.Reexports.ReexportResult a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Language.PureScript.Ide.Reexports.ReexportResult a)
                  (Language.PureScript.Ide.Reexports.$fGenericReexportResult1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Ide.Reexports.ReexportResult a>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "ReexportResult"
                                     "Language.PureScript.Ide.Reexports"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "ReexportResult" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "reResolved")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R a)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "reFailed")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            [(Language.PureScript.Names.ModuleName,
                                                              Language.PureScript.AST.Declarations.DeclarationRef)]))>_R) ; Sub (Sym (Language.PureScript.Ide.Reexports.Rep_ReexportResult[0]
                                                                                                                                          <a>_N))) <x>_N)
                  (Language.PureScript.Ide.Reexports.$fGenericReexportResult_$cto
                     @ a) -}
50faffa175089c4d498aee15d818adb2
  $fGenericReexportResult1 ::
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ReexportResult" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "reResolved")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R a)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "reFailed")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ModuleName,
                                  Language.PureScript.AST.Declarations.DeclarationRef)]))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ x
                   (x1 :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case x1 of wild { Language.PureScript.Ide.Reexports.ReexportResult g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "reResolved")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R a))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "reFailed")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.AST.Declarations.DeclarationRef)]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N <GHC.Generics.R>_P <a>_R <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.S>_P
                                                                               <'GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "reResolved")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                               <GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  a>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <[(Language.PureScript.Names.ModuleName,
                                 Language.PureScript.AST.Declarations.DeclarationRef)]>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "reFailed")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   [(Language.PureScript.Names.ModuleName,
                                                     Language.PureScript.AST.Declarations.DeclarationRef)]>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "ReexportResult" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "reResolved")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R a)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "reFailed")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  [(Language.PureScript.Names.ModuleName,
                                                    Language.PureScript.AST.Declarations.DeclarationRef)])>_R) <x>_N) }) -}
50faffa175089c4d498aee15d818adb2
  $fGenericReexportResult_$cto ::
    GHC.Generics.Rep
      (Language.PureScript.Ide.Reexports.ReexportResult a) x
    -> Language.PureScript.Ide.Reexports.ReexportResult a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Ide.Reexports.ReexportResult a) x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Ide.Reexports.Rep_ReexportResult[0]
                                 <a>_N) ; (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.D>_P
                                               <'GHC.Generics.MetaData
                                                  "ReexportResult"
                                                  "Language.PureScript.Ide.Reexports"
                                                  "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "ReexportResult"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.True)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "reResolved")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1 GHC.Generics.R a)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         ('GHC.Base.Just "reFailed")
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         [(Language.PureScript.Names.ModuleName,
                                                                           Language.PureScript.AST.Declarations.DeclarationRef)]))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                            <*>_N
                                                                                                                                            <GHC.Generics.C>_P
                                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                                               "ReexportResult"
                                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                                               'GHC.Types.True>_P
                                                                                                                                            <GHC.Generics.M1
                                                                                                                                               GHC.Generics.S
                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                     "reResolved")
                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                  GHC.Generics.R
                                                                                                                                                  a)
                                                                                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                      "reFailed")
                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                   [(Language.PureScript.Names.ModuleName,
                                                                                                                                                                     Language.PureScript.AST.Declarations.DeclarationRef)])>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Ide.Reexports.ReexportResult
                   @ a
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "reResolved")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1 GHC.Generics.R a>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <a>_R
                                                                         <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "reFailed")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.DeclarationRef)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.R>_P
                                                                                                  <[(Language.PureScript.Names.ModuleName,
                                                                                                     Language.PureScript.AST.Declarations.DeclarationRef)]>_R
                                                                                                  <x>_P) }) -}
50faffa175089c4d498aee15d818adb2
  $fNFDataReexportResult ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData
      (Language.PureScript.Ide.Reexports.ReexportResult a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(H)><S(LS),1*U(U,1*U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.PureScript.Ide.Reexports.$fNFDataReexportResult_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Language.PureScript.Ide.Reexports.ReexportResult a>_N)) -}
50faffa175089c4d498aee15d818adb2
  $fNFDataReexportResult_$crnf ::
    Control.DeepSeq.NFData a =>
    Language.PureScript.Ide.Reexports.ReexportResult a -> ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(H)><S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNFData :: Control.DeepSeq.NFData a)
                   (eta :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case eta of wild { Language.PureScript.Ide.Reexports.ReexportResult g1 g2 ->
                 case $dNFData `cast` (Control.DeepSeq.N:NFData[0] <a>_N)
                        g1 of wild1 { () ->
                 Language.PureScript.Ide.Reexports.$fNFDataReexportResult_go
                   g2 } }) -}
98a9589b56fd694095a2be3094b5d7b5
  $fNFDataReexportResult_go ::
    [(Language.PureScript.Names.ModuleName,
      Language.PureScript.AST.Declarations.DeclarationRef)]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
50faffa175089c4d498aee15d818adb2
  $fShowReexportResult ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Reexports.ReexportResult a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Reexports.ReexportResult a)
                  (Language.PureScript.Ide.Reexports.$fShowReexportResult_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Ide.Reexports.$fShowReexportResult_$cshow
                     @ a
                     v)
                  (Language.PureScript.Ide.Reexports.$fShowReexportResult_$cshowList
                     @ a
                     v) -}
6397b783601899780791f32391293712
  $fShowReexportResult1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5841d4f10ae18b6c75546eca1999a3d5
  $fShowReexportResult2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Reexports.$fShowReexportResult3) -}
c8a0f84e191b0f6360ec3f6db18b9a71
  $fShowReexportResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReexportResult {"#) -}
82159bb56bee893c339458653ff197f1
  $fShowReexportResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
a0198bdef488a7a4e9e0cdc9cf92af9b
  $fShowReexportResult5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("reFailed = "#) -}
967e802c67469f11b55b5445589b9cd1
  $fShowReexportResult6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("reResolved = "#) -}
50faffa175089c4d498aee15d818adb2
  $fShowReexportResult_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 Language.PureScript.Ide.Reexports.$fShowReexportResult_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Ide.Reexports.$fShowReexportResult1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
50faffa175089c4d498aee15d818adb2
  $fShowReexportResult_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Reexports.ReexportResult a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Reexports.ReexportResult a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Reexports.ReexportResult a)
                   (Language.PureScript.Ide.Reexports.$fShowReexportResult_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Reexports.$fShowReexportResult1)
                   ls
                   s) -}
50faffa175089c4d498aee15d818adb2
  $fShowReexportResult_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Ide.Reexports.ReexportResult ww3 ww4 ->
                 Language.PureScript.Ide.Reexports.$w$cshowsPrec
                   @ a
                   w
                   ww1
                   ww3
                   ww4 } }) -}
263ec0296d5a1bbd20027afa035f74cd
  $sannExportedFrom ::
    (GHC.Base.Maybe Language.PureScript.Names.ModuleName
     -> Data.Functor.Identity.Identity
          (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
    -> Language.PureScript.Ide.Types.Annotation
    -> Data.Functor.Identity.Identity
         Language.PureScript.Ide.Types.Annotation
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*C1(U)><S,1*U(U,U,U,U)>m, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f15 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
                           -> Data.Functor.Identity.Identity
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                   (ds :: Language.PureScript.Ide.Types.Annotation) ->
                 case ds of wild { Language.PureScript.Ide.Types.Annotation x x1 x2 x3 ->
                 (Language.PureScript.Ide.Types.Annotation
                    x
                    (f15 x1)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_R)
                    x2
                    x3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Language.PureScript.Ide.Types.Annotation>_R)) }) -}
5c0d9e0934e39c66977e600dd42b1f06
  $sidaAnnotation ::
    (Language.PureScript.Ide.Types.Annotation
     -> Data.Functor.Identity.Identity
          Language.PureScript.Ide.Types.Annotation)
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Data.Functor.Identity.Identity
         Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f15 :: Language.PureScript.Ide.Types.Annotation
                           -> Data.Functor.Identity.Identity
                                Language.PureScript.Ide.Types.Annotation)
                   (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn x x1 ->
                 (Language.PureScript.Ide.Types.IdeDeclarationAnn
                    (f15 x)
                      `cast`
                    (Data.Functor.Identity.N:Identity[0]
                         <Language.PureScript.Ide.Types.Annotation>_R)
                    x1)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Language.PureScript.Ide.Types.IdeDeclarationAnn>_R)) }) -}
62b6132f21d3ac8d96fc9a73cad3bde3
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
422a3271718910d771492b0eada9e065
  $tc'ReexportResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11678851956922228089##
                   4457431516017777906##
                   Language.PureScript.Ide.Reexports.$trModule
                   Language.PureScript.Ide.Reexports.$tc'ReexportResult2
                   1#
                   Language.PureScript.Ide.Reexports.$tc'ReexportResult1) -}
c0d99e81e4f5e1199c454679a0d0fbea
  $tc'ReexportResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f88fb09480d59f0d880fe03b011f0d3e
  $tc'ReexportResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Reexports.$tc'ReexportResult3) -}
dc6bf28ca7c4d333e63d443551fec324
  $tc'ReexportResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReexportResult"#) -}
76b59ee31b1afb3ad4360bddb35ff1d3
  $tcReexportResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9957002769624697973##
                   11080162363119970823##
                   Language.PureScript.Ide.Reexports.$trModule
                   Language.PureScript.Ide.Reexports.$tcReexportResult1
                   0#
                   GHC.Types.krep$*Arr*) -}
5b08b25e52cf0c68c8954f62d842e011
  $tcReexportResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Reexports.$tcReexportResult2) -}
aae7b14272146e26f55bcb3e0e091a24
  $tcReexportResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReexportResult"#) -}
00b35ccac393fb17d16fac39afcb9d1a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Reexports.$trModule3
                   Language.PureScript.Ide.Reexports.$trModule1) -}
cb50082f45432b789a5ce7fefa9d7d60
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Reexports.$trModule2) -}
324dceb134c995320bf18d31156f5b77
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Ide.Reexports"#) -}
b04493c2ad7d33b0cc817f34bfe0f746
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Reexports.$trModule4) -}
74fd27d5aa8a87756688f3999d27333c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
4964b6773f466be5ef78a91ae827eb49
  $w$c== ::
    GHC.Classes.Eq a =>
    a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,1*U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.DeclarationRef)])
                   (ww2 :: a)
                   (ww3 :: [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.DeclarationRef)]) ->
                 case GHC.Classes.== @ a w ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.Declarations.DeclarationRef)
                        Language.PureScript.Ide.Reexports.$fEqReexportResult_$s$fEq(,)
                        ww1
                        ww3 }) -}
dbec50a06df95f25df39ba53c1a6fc96
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.Declarations.DeclarationRef)]) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Language.PureScript.Ide.Reexports.$fShowReexportResult1
                       ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Ide.Reexports.$fShowReexportResult6
                       (f (GHC.Base.++
                             @ GHC.Types.Char
                             GHC.Show.showCommaSpace1
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Ide.Reexports.$fShowReexportResult5
                                (let {
                                   s :: GHC.Base.String
                                   = GHC.CString.unpackAppendCString#
                                       Language.PureScript.Ide.Reexports.$fShowReexportResult4
                                       x
                                 } in
                                 case ww2 of wild {
                                   [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                                   : x1 xs
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__3
                                        (case x1 of ww3 { (,) ww4 ww5 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)4
                                           (Language.PureScript.Names.$w$cshowsPrec
                                              0#
                                              ww4
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (GHC.Show.$fShow(,)_$sgo1
                                                    (GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.$fShow(,)2
                                                       (let {
                                                          lvl43 :: [GHC.Types.Char]
                                                          = GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.showList__2
                                                              s
                                                        } in
                                                        letrec {
                                                          showl :: [(Language.PureScript.Names.ModuleName,
                                                                     Language.PureScript.AST.Declarations.DeclarationRef)]
                                                                   -> GHC.Base.String
                                                            {- Arity: 1, Strictness: <S,1*U> -}
                                                          = \ (ds2 :: [(Language.PureScript.Names.ModuleName,
                                                                        Language.PureScript.AST.Declarations.DeclarationRef)]) ->
                                                            case ds2 of wild1 {
                                                              [] -> lvl43
                                                              : y ys
                                                              -> GHC.Types.:
                                                                   @ GHC.Types.Char
                                                                   GHC.Show.showList__1
                                                                   (case y of ww6 { (,) ww7 ww8 ->
                                                                    GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      GHC.Show.$fShow(,)4
                                                                      (Language.PureScript.Names.$w$cshowsPrec
                                                                         0#
                                                                         ww7
                                                                         (GHC.Types.:
                                                                            @ GHC.Types.Char
                                                                            GHC.Show.showList__1
                                                                            (GHC.Show.$fShow(,)_$sgo1
                                                                               (GHC.Types.:
                                                                                  @ GHC.Types.Char
                                                                                  GHC.Show.$fShow(,)2
                                                                                  (showl ys))
                                                                               (Language.PureScript.AST.Declarations.$w$cshowsPrec3
                                                                                  0#
                                                                                  ww8)
                                                                               (GHC.Types.[]
                                                                                  @ GHC.Show.ShowS)))) }) }
                                                        } in
                                                        showl xs))
                                                    (Language.PureScript.AST.Declarations.$w$cshowsPrec3
                                                       0#
                                                       ww5)
                                                    (GHC.Types.[] @ GHC.Show.ShowS)))) }) }))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Reexports.$fShowReexportResult2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Reexports.$fShowReexportResult2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
cf8311af6567c806e191cf6be841a961
  $wprettyPrintReexportResult ::
    (a -> Data.Text.Internal.Text)
    -> a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <C(S(LSS)),1*C1(U(U,U,U))><L,U><S,1*U>,
     Inline: [0] -}
2deb4e87b3a3b07ee03326594c6e4085
  $wresolveReexports' ::
    Language.PureScript.Ide.Types.ModuleMap
      [Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> (# [Language.PureScript.Ide.Types.IdeDeclarationAnn],
          [(Language.PureScript.Names.ModuleName,
            Language.PureScript.AST.Declarations.DeclarationRef)] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0] -}
50faffa175089c4d498aee15d818adb2
  data ReexportResult a
    = ReexportResult {reResolved :: a,
                      reFailed :: [(Language.PureScript.Names.ModuleName,
                                    Language.PureScript.AST.Declarations.DeclarationRef)]}
50faffa175089c4d498aee15d818adb2
  axiom Language.PureScript.Ide.Reexports.Rep_ReexportResult::
      GHC.Generics.Rep
        (Language.PureScript.Ide.Reexports.ReexportResult a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ReexportResult"
               "Language.PureScript.Ide.Reexports"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ReexportResult" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "reResolved")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 a)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "reFailed")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0
                                      [(Language.PureScript.Names.ModuleName,
                                        Language.PureScript.AST.Declarations.DeclarationRef)])))
78d87f217dd855f547c1cda5f32a827c
  prettyPrintReexportResult ::
    (a -> Data.Text.Internal.Text)
    -> Language.PureScript.Ide.Reexports.ReexportResult a
    -> Data.Text.Internal.Text
  {- Arity: 2,
     Strictness: <C(S(LSS)),1*C1(U(U,U,U))><S(LS),1*U(U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: a -> Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case w1 of ww { Language.PureScript.Ide.Reexports.ReexportResult ww1 ww2 ->
                 Language.PureScript.Ide.Reexports.$wprettyPrintReexportResult
                   @ a
                   w
                   ww1
                   ww2 }) -}
50faffa175089c4d498aee15d818adb2
  reFailed ::
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
  RecSel Left Language.PureScript.Ide.Reexports.ReexportResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case ds of wild { Language.PureScript.Ide.Reexports.ReexportResult ds1 ds2 ->
                 ds2 }) -}
50faffa175089c4d498aee15d818adb2
  reResolved ::
    Language.PureScript.Ide.Reexports.ReexportResult a -> a
  RecSel Left Language.PureScript.Ide.Reexports.ReexportResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case ds of wild { Language.PureScript.Ide.Reexports.ReexportResult ds1 ds2 ->
                 ds1 }) -}
3f2ee3848c926e8bb9d1beedf3a7bb0a
  reexportHasFailures ::
    Language.PureScript.Ide.Reexports.ReexportResult a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Language.PureScript.Ide.Reexports.ReexportResult a) ->
                 case x of wild { Language.PureScript.Ide.Reexports.ReexportResult ds ds1 ->
                 case ds1 of wild1 {
                   [] -> GHC.Types.False : ds2 ds3 -> GHC.Types.True } }) -}
dd19f375670ce11694af989ae6fa3665
  resolveReexports ::
    Language.PureScript.Ide.Types.ModuleMap
      [(Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.Declarations.DeclarationRef)]
    -> Language.PureScript.Ide.Types.ModuleMap
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> Language.PureScript.Ide.Types.ModuleMap
         (Language.PureScript.Ide.Reexports.ReexportResult
            [Language.PureScript.Ide.Types.IdeDeclarationAnn])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: (\ (reexportRefs :: Language.PureScript.Ide.Types.ModuleMap
                                      [(Language.PureScript.Names.ModuleName,
                                        Language.PureScript.AST.Declarations.DeclarationRef)])
                   (modules :: Language.PureScript.Ide.Types.ModuleMap
                                 [Language.PureScript.Ide.Types.IdeDeclarationAnn]) ->
                 Data.Map.Internal.mapWithKey
                   @ Language.PureScript.Names.ModuleName
                   @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                   @ (Language.PureScript.Ide.Reexports.ReexportResult
                        [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (\ (moduleName :: Language.PureScript.Names.ModuleName)
                      (decls :: [Language.PureScript.Ide.Types.IdeDeclarationAnn])[OneShot] ->
                    case Language.PureScript.Ide.Reexports.$slookup1
                           @ [(Language.PureScript.Names.ModuleName,
                               Language.PureScript.AST.Declarations.DeclarationRef)]
                           moduleName
                           reexportRefs of wild {
                      GHC.Base.Nothing
                      -> Language.PureScript.Ide.Reexports.ReexportResult
                           @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                           decls
                           (GHC.Types.[]
                              @ (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.AST.Declarations.DeclarationRef))
                      GHC.Base.Just x
                      -> case Language.PureScript.Ide.Reexports.$wresolveReexports'
                                modules
                                x of ww { (#,#) ww1 ww2 ->
                         Language.PureScript.Ide.Reexports.ReexportResult
                           @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                           (GHC.Base.++
                              @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                              decls
                              ww1)
                           ww2 } })
                   modules) -}
65b4169d1b5b40b96006d2873dd20398
  resolveReexports' ::
    Language.PureScript.Ide.Types.ModuleMap
      [Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.AST.Declarations.DeclarationRef)]
    -> Language.PureScript.Ide.Reexports.ReexportResult
         [Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Types.ModuleMap
                           [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (w1 :: [(Language.PureScript.Names.ModuleName,
                            Language.PureScript.AST.Declarations.DeclarationRef)]) ->
                 case Language.PureScript.Ide.Reexports.$wresolveReexports'
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 Language.PureScript.Ide.Reexports.ReexportResult
                   @ [Language.PureScript.Ide.Types.IdeDeclarationAnn]
                   ww1
                   ww2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.$fEqReexportResult
instance GHC.Base.Functor [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.$fFunctorReexportResult
instance GHC.Generics.Generic [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.$fGenericReexportResult
instance Control.DeepSeq.NFData [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.$fNFDataReexportResult
instance GHC.Show.Show [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.$fShowReexportResult
family instance GHC.Generics.Rep [Language.PureScript.Ide.Reexports.ReexportResult]
  = Language.PureScript.Ide.Reexports.Rep_ReexportResult
"SPEC/Language.PureScript.Ide.Reexports $fEq(,) @ ModuleName @ DeclarationRef" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                        Language.PureScript.AST.Declarations.DeclarationRef)
                                                                                               (v :: GHC.Classes.Eq
                                                                                                       Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,) @ Language.PureScript.Names.ModuleName
                      @ Language.PureScript.AST.Declarations.DeclarationRef
                      v
                      v1
  = Language.PureScript.Ide.Reexports.$fEqReexportResult_$s$fEq(,)
"SPEC/Language.PureScript.Ide.Reexports $fEq(,)_$c/= @ ModuleName @ DeclarationRef" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                Language.PureScript.AST.Declarations.DeclarationRef)
                                                                                                    ($dEq :: GHC.Classes.Eq
                                                                                                               Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Names.ModuleName
                           @ Language.PureScript.AST.Declarations.DeclarationRef
                           $dEq
                           $dEq1
  = Language.PureScript.Ide.Reexports.$fEqReexportResult_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Ide.Reexports annExportedFrom @ Identity" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                                    Data.Functor.Identity.Identity)
  Language.PureScript.Ide.Types.annExportedFrom @ Data.Functor.Identity.Identity
                                                $dFunctor
  = Language.PureScript.Ide.Reexports.$sannExportedFrom
"SPEC/Language.PureScript.Ide.Reexports idaAnnotation @ Identity" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                                  Data.Functor.Identity.Identity)
  Language.PureScript.Ide.Types.idaAnnotation @ Data.Functor.Identity.Identity
                                              $dFunctor
  = Language.PureScript.Ide.Reexports.$sidaAnnotation
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

