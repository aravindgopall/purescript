
==================== FINAL INTERFACE ====================
2018-11-30 20:46:25.479243 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations [family instance module] 8043
  interface hash: a59bc09a91c195f0a65c63652cf8e169
  ABI hash: 568e046fbf27b243bfc96f09017d4782
  export-list hash: 576360d4491bba45e29e263c5de23a07
  orphan hash: bbedf1802738f276cf32c273f20233ac
  flag hash: b68a0649a232854c19b0af5e7eabe161
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.AST.Declarations.MkUnguarded
  Language.PureScript.AST.Declarations.TypeFixityDeclaration
  Language.PureScript.AST.Declarations.ValueDecl
  Language.PureScript.AST.Declarations.ValueFixityDeclaration
  Language.PureScript.AST.Declarations.addDefaultImport
  Language.PureScript.AST.Declarations.compDecRef
  Language.PureScript.AST.Declarations.declName
  Language.PureScript.AST.Declarations.declRefName
  Language.PureScript.AST.Declarations.declRefSourceSpan
  Language.PureScript.AST.Declarations.declSourceAnn
  Language.PureScript.AST.Declarations.declSourceSpan
  Language.PureScript.AST.Declarations.flattenDecls
  Language.PureScript.AST.Declarations.getFixityDecl
  Language.PureScript.AST.Declarations.getKindRef
  Language.PureScript.AST.Declarations.getModuleDeclarations
  Language.PureScript.AST.Declarations.getModuleName
  Language.PureScript.AST.Declarations.getModuleSourceSpan
  Language.PureScript.AST.Declarations.getTypeClassRef
  Language.PureScript.AST.Declarations.getTypeDeclaration
  Language.PureScript.AST.Declarations.getTypeOpRef
  Language.PureScript.AST.Declarations.getTypeRef
  Language.PureScript.AST.Declarations.getValueDeclaration
  Language.PureScript.AST.Declarations.getValueOpRef
  Language.PureScript.AST.Declarations.getValueRef
  Language.PureScript.AST.Declarations.importPrim
  Language.PureScript.AST.Declarations.isDataDecl
  Language.PureScript.AST.Declarations.isExplicit
  Language.PureScript.AST.Declarations.isExternDataDecl
  Language.PureScript.AST.Declarations.isExternDecl
  Language.PureScript.AST.Declarations.isExternKindDecl
  Language.PureScript.AST.Declarations.isFixityDecl
  Language.PureScript.AST.Declarations.isImplicit
  Language.PureScript.AST.Declarations.isImportDecl
  Language.PureScript.AST.Declarations.isModuleRef
  Language.PureScript.AST.Declarations.isTrueExpr
  Language.PureScript.AST.Declarations.isTypeClassDeclaration
  Language.PureScript.AST.Declarations.isTypeClassInstanceDeclaration
  Language.PureScript.AST.Declarations.isValueDecl
  Language.PureScript.AST.Declarations.mapTypeInstanceBody
  Language.PureScript.AST.Declarations.onTypeSearchTypes
  Language.PureScript.AST.Declarations.onTypeSearchTypesM
  Language.PureScript.AST.Declarations.overTypeDeclaration
  Language.PureScript.AST.Declarations.overValueDeclaration
  Language.PureScript.AST.Declarations.traverseTypeInstanceBody
  Language.PureScript.AST.Declarations.unwrapTypeDeclaration
  Language.PureScript.AST.Declarations.AssocList{Language.PureScript.AST.Declarations.AssocList runAssocList}
  Language.PureScript.AST.Declarations.CaseAlternative{Language.PureScript.AST.Declarations.CaseAlternative caseAlternativeBinders caseAlternativeResult}
  Language.PureScript.AST.Declarations.Context
  Language.PureScript.AST.Declarations.Declaration{Language.PureScript.AST.Declarations.BindingGroupDeclaration Language.PureScript.AST.Declarations.BoundValueDeclaration Language.PureScript.AST.Declarations.DataBindingGroupDeclaration Language.PureScript.AST.Declarations.DataDeclaration Language.PureScript.AST.Declarations.ExternDataDeclaration Language.PureScript.AST.Declarations.ExternDeclaration Language.PureScript.AST.Declarations.ExternKindDeclaration Language.PureScript.AST.Declarations.FixityDeclaration Language.PureScript.AST.Declarations.ImportDeclaration Language.PureScript.AST.Declarations.TypeClassDeclaration Language.PureScript.AST.Declarations.TypeDeclaration Language.PureScript.AST.Declarations.TypeInstanceDeclaration Language.PureScript.AST.Declarations.TypeSynonymDeclaration Language.PureScript.AST.Declarations.ValueDeclaration}
  Language.PureScript.AST.Declarations.DeclarationRef{Language.PureScript.AST.Declarations.KindRef Language.PureScript.AST.Declarations.ModuleRef Language.PureScript.AST.Declarations.ReExportRef Language.PureScript.AST.Declarations.TypeClassRef Language.PureScript.AST.Declarations.TypeInstanceRef Language.PureScript.AST.Declarations.TypeOpRef Language.PureScript.AST.Declarations.TypeRef Language.PureScript.AST.Declarations.ValueOpRef Language.PureScript.AST.Declarations.ValueRef}
  Language.PureScript.AST.Declarations.DoNotationElement{Language.PureScript.AST.Declarations.DoNotationBind Language.PureScript.AST.Declarations.DoNotationLet Language.PureScript.AST.Declarations.DoNotationValue Language.PureScript.AST.Declarations.PositionedDoNotationElement}
  Language.PureScript.AST.Declarations.ErrorMessage{Language.PureScript.AST.Declarations.ErrorMessage}
  Language.PureScript.AST.Declarations.ErrorMessageHint{Language.PureScript.AST.Declarations.ErrorCheckingAccessor Language.PureScript.AST.Declarations.ErrorCheckingGuard Language.PureScript.AST.Declarations.ErrorCheckingKind Language.PureScript.AST.Declarations.ErrorCheckingType Language.PureScript.AST.Declarations.ErrorInApplication Language.PureScript.AST.Declarations.ErrorInBindingGroup Language.PureScript.AST.Declarations.ErrorInDataBindingGroup Language.PureScript.AST.Declarations.ErrorInDataConstructor Language.PureScript.AST.Declarations.ErrorInExpression Language.PureScript.AST.Declarations.ErrorInForeignImport Language.PureScript.AST.Declarations.ErrorInInstance Language.PureScript.AST.Declarations.ErrorInModule Language.PureScript.AST.Declarations.ErrorInSubsumption Language.PureScript.AST.Declarations.ErrorInTypeClassDeclaration Language.PureScript.AST.Declarations.ErrorInTypeConstructor Language.PureScript.AST.Declarations.ErrorInTypeDeclaration Language.PureScript.AST.Declarations.ErrorInTypeSynonym Language.PureScript.AST.Declarations.ErrorInValueDeclaration Language.PureScript.AST.Declarations.ErrorInferringType Language.PureScript.AST.Declarations.ErrorSolvingConstraint Language.PureScript.AST.Declarations.ErrorUnifyingTypes Language.PureScript.AST.Declarations.PositionedError}
  Language.PureScript.AST.Declarations.Expr{Language.PureScript.AST.Declarations.Abs Language.PureScript.AST.Declarations.Accessor Language.PureScript.AST.Declarations.Ado Language.PureScript.AST.Declarations.AnonymousArgument Language.PureScript.AST.Declarations.App Language.PureScript.AST.Declarations.BinaryNoParens Language.PureScript.AST.Declarations.Case Language.PureScript.AST.Declarations.Constructor Language.PureScript.AST.Declarations.DeferredDictionary Language.PureScript.AST.Declarations.Do Language.PureScript.AST.Declarations.Hole Language.PureScript.AST.Declarations.IfThenElse Language.PureScript.AST.Declarations.Let Language.PureScript.AST.Declarations.Literal Language.PureScript.AST.Declarations.ObjectUpdate Language.PureScript.AST.Declarations.ObjectUpdateNested Language.PureScript.AST.Declarations.Op Language.PureScript.AST.Declarations.Parens Language.PureScript.AST.Declarations.PositionedValue Language.PureScript.AST.Declarations.TypeClassDictionary Language.PureScript.AST.Declarations.TypeClassDictionaryAccessor Language.PureScript.AST.Declarations.TypeClassDictionaryConstructorApp Language.PureScript.AST.Declarations.TypedValue Language.PureScript.AST.Declarations.UnaryMinus Language.PureScript.AST.Declarations.Var}
  Language.PureScript.AST.Declarations.Guard{Language.PureScript.AST.Declarations.ConditionGuard Language.PureScript.AST.Declarations.PatternGuard}
  Language.PureScript.AST.Declarations.GuardedExpr{Language.PureScript.AST.Declarations.GuardedExpr}
  Language.PureScript.AST.Declarations.HintCategory{Language.PureScript.AST.Declarations.CheckHint Language.PureScript.AST.Declarations.ExprHint Language.PureScript.AST.Declarations.KindHint Language.PureScript.AST.Declarations.OtherHint Language.PureScript.AST.Declarations.PositionHint Language.PureScript.AST.Declarations.SolverHint}
  Language.PureScript.AST.Declarations.ImportDeclarationType{Language.PureScript.AST.Declarations.Explicit Language.PureScript.AST.Declarations.Hiding Language.PureScript.AST.Declarations.Implicit}
  Language.PureScript.AST.Declarations.Module{Language.PureScript.AST.Declarations.Module}
  Language.PureScript.AST.Declarations.PathNode{Language.PureScript.AST.Declarations.Branch Language.PureScript.AST.Declarations.Leaf}
  Language.PureScript.AST.Declarations.PathTree{Language.PureScript.AST.Declarations.PathTree}
  Language.PureScript.AST.Declarations.SimpleErrorMessage{Language.PureScript.AST.Declarations.AdditionalProperty Language.PureScript.AST.Declarations.AmbiguousTypeVariables Language.PureScript.AST.Declarations.ArgListLengthsDiffer Language.PureScript.AST.Declarations.CannotDefinePrimModules Language.PureScript.AST.Declarations.CannotDerive Language.PureScript.AST.Declarations.CannotDeriveNewtypeForData Language.PureScript.AST.Declarations.CannotFindDerivingType Language.PureScript.AST.Declarations.CannotGeneralizeRecursiveFunction Language.PureScript.AST.Declarations.CannotGetFileInfo Language.PureScript.AST.Declarations.CannotReadFile Language.PureScript.AST.Declarations.CannotUseBindWithDo Language.PureScript.AST.Declarations.CannotWriteFile Language.PureScript.AST.Declarations.CaseBinderLengthDiffers Language.PureScript.AST.Declarations.ClassInstanceArityMismatch Language.PureScript.AST.Declarations.ConstrainedTypeUnified Language.PureScript.AST.Declarations.CycleInDeclaration Language.PureScript.AST.Declarations.CycleInModules Language.PureScript.AST.Declarations.CycleInTypeSynonym Language.PureScript.AST.Declarations.DeclConflict Language.PureScript.AST.Declarations.DuplicateExportRef Language.PureScript.AST.Declarations.DuplicateImport Language.PureScript.AST.Declarations.DuplicateImportRef Language.PureScript.AST.Declarations.DuplicateInstance Language.PureScript.AST.Declarations.DuplicateLabel Language.PureScript.AST.Declarations.DuplicateModule Language.PureScript.AST.Declarations.DuplicateSelectiveImport Language.PureScript.AST.Declarations.DuplicateTypeArgument Language.PureScript.AST.Declarations.DuplicateTypeClass Language.PureScript.AST.Declarations.DuplicateValueDeclaration Language.PureScript.AST.Declarations.ErrorParsingFFIModule Language.PureScript.AST.Declarations.ErrorParsingModule Language.PureScript.AST.Declarations.EscapedSkolem Language.PureScript.AST.Declarations.ExpectedType Language.PureScript.AST.Declarations.ExpectedTypeConstructor Language.PureScript.AST.Declarations.ExpectedWildcard Language.PureScript.AST.Declarations.ExportConflict Language.PureScript.AST.Declarations.ExprDoesNotHaveType Language.PureScript.AST.Declarations.ExtraneousClassMember Language.PureScript.AST.Declarations.HidingImport Language.PureScript.AST.Declarations.HoleInferredType Language.PureScript.AST.Declarations.ImplicitImport Language.PureScript.AST.Declarations.ImplicitQualifiedImport Language.PureScript.AST.Declarations.ImplicitQualifiedImportReExport Language.PureScript.AST.Declarations.ImportHidingModule Language.PureScript.AST.Declarations.IncompleteExhaustivityCheck Language.PureScript.AST.Declarations.IncorrectAnonymousArgument Language.PureScript.AST.Declarations.IncorrectConstructorArity Language.PureScript.AST.Declarations.InfiniteKind Language.PureScript.AST.Declarations.InfiniteType Language.PureScript.AST.Declarations.IntOutOfRange Language.PureScript.AST.Declarations.InvalidDerivedInstance Language.PureScript.AST.Declarations.InvalidDoBind Language.PureScript.AST.Declarations.InvalidDoLet Language.PureScript.AST.Declarations.InvalidFFIIdentifier Language.PureScript.AST.Declarations.InvalidInstanceHead Language.PureScript.AST.Declarations.InvalidNewtype Language.PureScript.AST.Declarations.InvalidNewtypeInstance Language.PureScript.AST.Declarations.InvalidOperatorInBinder Language.PureScript.AST.Declarations.KindsDoNotUnify Language.PureScript.AST.Declarations.MisleadingEmptyTypeImport Language.PureScript.AST.Declarations.MissingClassMember Language.PureScript.AST.Declarations.MissingFFIImplementations Language.PureScript.AST.Declarations.MissingFFIModule Language.PureScript.AST.Declarations.MissingNewtypeSuperclassInstance Language.PureScript.AST.Declarations.MissingTypeDeclaration Language.PureScript.AST.Declarations.MixedAssociativityError Language.PureScript.AST.Declarations.ModuleNotFound Language.PureScript.AST.Declarations.MultipleTypeOpFixities Language.PureScript.AST.Declarations.MultipleValueOpFixities Language.PureScript.AST.Declarations.NameIsUndefined Language.PureScript.AST.Declarations.NoInstanceFound Language.PureScript.AST.Declarations.NonAssociativeError Language.PureScript.AST.Declarations.OrphanInstance Language.PureScript.AST.Declarations.OrphanTypeDeclaration Language.PureScript.AST.Declarations.OverlappingArgNames Language.PureScript.AST.Declarations.OverlappingInstances Language.PureScript.AST.Declarations.OverlappingNamesInLet Language.PureScript.AST.Declarations.OverlappingPattern Language.PureScript.AST.Declarations.PartiallyAppliedSynonym Language.PureScript.AST.Declarations.PossiblyInfiniteInstance Language.PureScript.AST.Declarations.PropertyIsMissing Language.PureScript.AST.Declarations.RedefinedIdent Language.PureScript.AST.Declarations.ScopeConflict Language.PureScript.AST.Declarations.ScopeShadowing Language.PureScript.AST.Declarations.ShadowedName Language.PureScript.AST.Declarations.ShadowedTypeVar Language.PureScript.AST.Declarations.TransitiveDctorExportError Language.PureScript.AST.Declarations.TransitiveExportError Language.PureScript.AST.Declarations.TypeSynonymInstance Language.PureScript.AST.Declarations.TypesDoNotUnify Language.PureScript.AST.Declarations.UndefinedTypeVariable Language.PureScript.AST.Declarations.UnknownClass Language.PureScript.AST.Declarations.UnknownExport Language.PureScript.AST.Declarations.UnknownExportDataConstructor Language.PureScript.AST.Declarations.UnknownImport Language.PureScript.AST.Declarations.UnknownImportDataConstructor Language.PureScript.AST.Declarations.UnknownName Language.PureScript.AST.Declarations.UnnecessaryFFIModule Language.PureScript.AST.Declarations.UnusableDeclaration Language.PureScript.AST.Declarations.UnusedDctorExplicitImport Language.PureScript.AST.Declarations.UnusedDctorImport Language.PureScript.AST.Declarations.UnusedExplicitImport Language.PureScript.AST.Declarations.UnusedFFIImplementations Language.PureScript.AST.Declarations.UnusedImport Language.PureScript.AST.Declarations.UnusedTypeVar Language.PureScript.AST.Declarations.UnverifiableSuperclassInstance Language.PureScript.AST.Declarations.UserDefinedWarning Language.PureScript.AST.Declarations.WildcardInferredType}
  Language.PureScript.AST.Declarations.TypeDeclarationData{Language.PureScript.AST.Declarations.TypeDeclarationData tydeclIdent tydeclSourceAnn tydeclType}
  Language.PureScript.AST.Declarations.TypeFixity{Language.PureScript.AST.Declarations.TypeFixity}
  Language.PureScript.AST.Declarations.TypeInstanceBody{Language.PureScript.AST.Declarations.DerivedInstance Language.PureScript.AST.Declarations.ExplicitInstance Language.PureScript.AST.Declarations.NewtypeInstance Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary}
  Language.PureScript.AST.Declarations.TypeSearch{Language.PureScript.AST.Declarations.TSAfter Language.PureScript.AST.Declarations.TSBefore tsAfterIdentifiers tsAfterRecordFields}
  Language.PureScript.AST.Declarations.ValueDeclarationData{Language.PureScript.AST.Declarations.ValueDeclarationData valdeclBinders valdeclExpression valdeclIdent valdeclName valdeclSourceAnn}
  Language.PureScript.AST.Declarations.ValueFixity{Language.PureScript.AST.Declarations.ValueFixity}
  Language.PureScript.AST.Declarations.WhereProvenance{Language.PureScript.AST.Declarations.FromLet Language.PureScript.AST.Declarations.FromWhere}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Binders
                     Language.PureScript.AST.Literals Language.PureScript.AST.Operators
                     Language.PureScript.AST.SourcePos Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: stm-2.4.5.0:Control.Monad.STM
         syb-0.7:Data.Generics.Instances
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson.Encoding.Internal f04efae65181ca66f15bea14741e502d
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Identity ca9e9b9bfa404d3d70994a432bbadd6d
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  Language.PureScript.AST.Binders 9d60985147b34b89300370e810fed430
  exports: 052659e0ac5b7424bfe7dc118cef8c0d
  Binder 50aa153193e190eabd8ac7530e604f9c
import  -/  Language.PureScript.AST.Literals 3440d35205601002007fae6139f2b416
  exports: a6d23ec6b024fefaa1b9450acf6240d0
  BooleanLiteral 242415ff3d034091eec7910a2e553d43
  Literal 9e9b6c02bfac90a56d53685e90c059b8
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  exports: e51e64160c99c756a027910b5259d686
  Associativity 17f2097426b72eb751701f86cd97792c
  Fixity 17f2097426b72eb751701f86cd97792c
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  exports: cd99f4b22e2d3cec892dcb31686df02f
  SourceAnn cab2aecd85882b7f3973d54e49bcad4f
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Bundle 850a0b3ac8794bcad3be1a1d23d53dc5
  exports: 436e6291784d08551205d74d8d15119b
  ErrorMessage b76460e7f9aa17db386324a975b25223
import  -/  Language.PureScript.Comments f344ceddf328cf61908be13dd1f90917
  exports: b1904caad26a3e7c6a77f0a1156c2d62
  Comment 23fbbb637db19d35ca8339b51dc9ecf5
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  Prim 526fb67181f59b1cece2de8af2fc4f1f
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  DataDeclType c291d940fae22a3f1400d8c90f26bdd4
  Environment c291d940fae22a3f1400d8c90f26bdd4
  FunctionalDependency ef672654cffb5adb82634076fd85ad4a
  NameKind 90ac7b5e1c331fe4ca4a3a5c9b2afcbd
import  -/  Language.PureScript.Kinds bf1fc2fd18b06658330fcf93fe50e737
  exports: 2c2448e43e622d2466a59b9cd8f4db91
  Kind 3e1e213eb647453235d33b0d1b36ec59
import  -/  Language.PureScript.Label ac3bc484eb8b3b2ccf228cc34cdb537c
  exports: 62e65d694c1e96c81750d9cacc93e898
  Label 61523a5f4fc28a2f2f6f00cce17ce1bb
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  AnyOpName 8ed35138f6d4683151cf37bc21ae3857
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident 0ccd7f2221de64569e50634367691253
  Ident ab98a56ffa88760dad1380079e8ee35a
  IdentName 5b06dbfa684a1a4686ae5dc3b60a0a36
  KiName 3988b2e6728e13d6e386f74a6394b09e
  KindName 681d490d18bc7da009f3503010a994f8
  ModName 3aadbf737116de1d7bcb446bea8a25af
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  Name 184494d9e734645f374e2a0fce32bfac
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TyClassName 21009befdac7827e5cfc4e5a7606bd0e
  TyName 2de556166e59a0005c7143bf3b600f7e
  TyOpName 66cc4d214f55e6f0f298e52eab8013ac
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  ValOpName f03a1a616a24e6d18322d9bb9fa39c73
  ValueOpName 1d06f91abd827e7b0c072b254546708a
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  PSString 0c2d9eac7fc8cff2b3ca27abf6053439
import  -/  Language.PureScript.TypeClassDictionaries 85b2520728908ad345f56b1c2cbe3fca
  exports: cc9c93841004965313696be0c74a01eb
  NamedDict 1c7eb5af0357b976dbe077e65975eac8
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  Constraint 93223f8afa90d0facc05a03f863dc72d
  Type 93223f8afa90d0facc05a03f863dc72d
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
import  -/  vector-0.12.0.1:Data.Vector f729e70597cc595442dc4fc6c91177bf
import  -/  vector-0.12.0.1:Data.Vector.Mutable e09e8bccd569472cc65f5c99a3d45010
15153449c33ff4d6a8ad5c32058026c2
  $bMkUnguarded ::
    Language.PureScript.AST.Declarations.Expr
    -> Language.PureScript.AST.Declarations.GuardedExpr
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (e :: Language.PureScript.AST.Declarations.Expr) ->
                 Language.PureScript.AST.Declarations.GuardedExpr
                   (GHC.Types.[] @ Language.PureScript.AST.Declarations.Guard)
                   e) -}
980be1934d96ad834ab1ce1a722557c6
  $bTypeFixityDeclaration ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m11,
     Unfolding: InlineRule (4, True, False)
                (\ (sa :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (fixity :: Language.PureScript.AST.Operators.Fixity)
                   (name :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                   (op :: Language.PureScript.Names.OpName
                            'Language.PureScript.Names.TypeOpName) ->
                 Language.PureScript.AST.Declarations.FixityDeclaration
                   sa
                   (Data.Either.Right
                      @ Language.PureScript.AST.Declarations.ValueFixity
                      @ Language.PureScript.AST.Declarations.TypeFixity
                      (Language.PureScript.AST.Declarations.TypeFixity
                         fixity
                         name
                         op))) -}
81193542bc05e791a71375d0dcb1ca43
  $bValueDecl ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Environment.NameKind
    -> [Language.PureScript.AST.Binders.Binder]
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U(U,U)><S,1*U><S,1*U><S,1*U><S,1*U>m5,
     Unfolding: InlineRule (5, True, False)
                (\ (sann :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (ident :: Language.PureScript.Names.Ident)
                   (name :: Language.PureScript.Environment.NameKind)
                   (binders :: [Language.PureScript.AST.Binders.Binder])
                   (expr :: [Language.PureScript.AST.Declarations.GuardedExpr]) ->
                 case sann of dt { (,) ipv ipv1 ->
                 case ident of dt1 { DEFAULT ->
                 case name of dt2 { DEFAULT ->
                 case binders of dt3 { DEFAULT ->
                 case expr of dt4 { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclaration
                   dt
                   dt1
                   dt2
                   dt3
                   dt4 } } } } }) -}
64829125ebc14fd2b4ec3a1c50153aed
  $bValueFixityDeclaration ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m11,
     Unfolding: InlineRule (4, True, False)
                (\ (sa :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (fixity :: Language.PureScript.AST.Operators.Fixity)
                   (name :: Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)))
                   (op :: Language.PureScript.Names.OpName
                            'Language.PureScript.Names.ValueOpName) ->
                 Language.PureScript.AST.Declarations.FixityDeclaration
                   sa
                   (Data.Either.Left
                      @ Language.PureScript.AST.Declarations.ValueFixity
                      @ Language.PureScript.AST.Declarations.TypeFixity
                      (Language.PureScript.AST.Declarations.ValueFixity
                         fixity
                         name
                         op))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fEqAssocList ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Classes.Eq k)
                      (v1 :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fEqAssocList2 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fEqAssocList1 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Bool>_R) -}
7054bb861e6f4b3a8e5a7b724d5084bb
  $fEqAssocList1 ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dEq :: GHC.Classes.Eq k)
                   ($dEq1 :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c/=
                   @ (k, t)
                   (GHC.Classes.$fEq(,) @ k @ t $dEq $dEq1)) -}
08c051514f69715ae462957cf7b7adea
  $fEqAssocList2 ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dEq :: GHC.Classes.Eq k)
                   ($dEq1 :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c==
                   @ (k, t)
                   (GHC.Classes.$fEq(,) @ k @ t $dEq $dEq1)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fEqDeclaration ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.Declaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Declaration
                  Language.PureScript.AST.Declarations.$fEqDeclaration_$c==
                  Language.PureScript.AST.Declarations.$fEqDeclaration_$c/= -}
94774c486336f8e5506cdd09fd95b3a3
  $fEqDeclaration1 :: GHC.Types.Bool
  {- Strictness: x -}
9de74e8b46bfd07e044a72617cc5da5c
  $fEqDeclarationRef ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c==
                  Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c/= -}
9de74e8b46bfd07e044a72617cc5da5c
  $fEqDeclarationRef_$c/= ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.DeclarationRef)
                   (y :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fEqDeclarationRef_$c== ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fEqDeclaration_$c/= ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration)
                   (y :: Language.PureScript.AST.Declarations.Declaration) ->
                 case Language.PureScript.AST.Declarations.$fEqDeclaration_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fEqDeclaration_$c== ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (d1 :: Language.PureScript.AST.Declarations.Declaration)
                   (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> case dt4 of wild1 {
                        [] -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                        : ds1 ds2
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.GuardedExpr ds3 ds4 ->
                           case ds4 of wild3 {
                             DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                             Language.PureScript.AST.Declarations.PositionedValue ds5 ds6 ds7
                             -> case ds7 of wild4 {
                                  DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                                  Language.PureScript.AST.Declarations.Var ds8 ds9
                                  -> case ds9 of wild5 { Language.PureScript.Names.Qualified m d2 ->
                                     case ds2 of wild6 {
                                       []
                                       -> case d1 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.PureScript.AST.Declarations.ValueDeclaration dt5 dt6 dt7 dt8 dt9
                                            -> Language.PureScript.Names.$fEqIdent_$c== dt6 d2
                                            Language.PureScript.AST.Declarations.ExternDeclaration ds10 n ds11
                                            -> Language.PureScript.Names.$fEqIdent_$c== n d2
                                            Language.PureScript.AST.Declarations.FixityDeclaration ds10 ds11
                                            -> case ds11 of wild8 {
                                                 Data.Either.Left ds12
                                                 -> case ds12 of wild9 { Language.PureScript.AST.Declarations.ValueFixity ds13 ds14 n ->
                                                    GHC.Types.False }
                                                 Data.Either.Right ds12
                                                 -> case ds12 of wild9 { Language.PureScript.AST.Declarations.TypeFixity ds13 ds14 n ->
                                                    GHC.Types.False } }
                                            Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds10 ds11 ds12 n ds13 ds14 ds15 ds16
                                            -> Language.PureScript.Names.$fEqIdent_$c== n d2 }
                                       : ipv ipv1
                                       -> Language.PureScript.AST.Declarations.$fEqDeclaration1 } } } } } } }) -}
5a4eef1c21520364cf5b424feb83c38c
  $fEqHintCategory ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.HintCategory
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.HintCategory
                  Language.PureScript.AST.Declarations.$fEqHintCategory_$c==
                  Language.PureScript.AST.Declarations.$fEqHintCategory_$c/= -}
5a4eef1c21520364cf5b424feb83c38c
  $fEqHintCategory_$c/= ::
    Language.PureScript.AST.Declarations.HintCategory
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.HintCategory)
                   (y :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.ExprHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.KindHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.KindHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.CheckHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.CheckHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.PositionHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.PositionHint
                        -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.SolverHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.SolverHint
                        -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.OtherHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.OtherHint
                        -> GHC.Types.False } }) -}
5a4eef1c21520364cf5b424feb83c38c
  $fEqHintCategory_$c== ::
    Language.PureScript.AST.Declarations.HintCategory
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.HintCategory)
                   (ds1 :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.ExprHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.KindHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.KindHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.CheckHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.CheckHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.PositionHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.PositionHint
                        -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.SolverHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.SolverHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.OtherHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.OtherHint
                        -> GHC.Types.True } }) -}
f900e8c96b49d573d3e54286bc8fd980
  $fEqImportDeclarationType ::
    GHC.Classes.Eq
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c==
                  Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c/= -}
f900e8c96b49d573d3e54286bc8fd980
  $fEqImportDeclarationType_$c/= ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (y :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f900e8c96b49d573d3e54286bc8fd980
  $fEqImportDeclarationType_$c== ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ds1 :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Implicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Implicit -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.Explicit a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Explicit b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.AST.Declarations.DeclarationRef
                             Language.PureScript.AST.Declarations.$fEqDeclarationRef
                             a1
                             b1 }
                   Language.PureScript.AST.Declarations.Hiding a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Hiding b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.AST.Declarations.DeclarationRef
                             Language.PureScript.AST.Declarations.$fEqDeclarationRef
                             a1
                             b1 } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathNode ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fEqPathNode_$c== @ t v)
                  (Language.PureScript.AST.Declarations.$fEqPathNode_$c/= @ t v) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathNode_$c/= ::
    GHC.Classes.Eq t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fEqPathNode_$c==
                        @ t
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathNode_$c== ::
    GHC.Classes.Eq t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathTree ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fEqPathTree2 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fEqPathTree1 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Bool>_R) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathTree1 ::
    GHC.Classes.Eq t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dEq :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c/=
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fEq(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fEqPSString
                      (Language.PureScript.AST.Declarations.$fEqPathNode @ t $dEq))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fEqPathTree2 ::
    GHC.Classes.Eq t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dEq :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c==
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fEq(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fEqPSString
                      (Language.PureScript.AST.Declarations.$fEqPathNode @ t $dEq))) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fEqTypeDeclarationData ::
    GHC.Classes.Eq
      Language.PureScript.AST.Declarations.TypeDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeDeclarationData
                  Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c==
                  Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c/= -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fEqTypeDeclarationData_$c/= ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)><S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (y :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fEqTypeDeclarationData_$c== ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)><S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (ds1 :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData a1 a2 a3 ->
                 case a1 of ww { (,) ww1 ww2 ->
                 case ds1 of wild1 { Language.PureScript.AST.Declarations.TypeDeclarationData b1 b2 b3 ->
                 case b1 of ww3 { (,) ww4 ww5 ->
                 case ww1 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                 case ww4 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                 case Language.PureScript.AST.SourcePos.$w$c==1
                        ww8
                        ww9
                        ww10
                        ww12
                        ww6
                        ww13 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.Comments.Comment
                             Language.PureScript.Comments.$fEqComment
                             ww2
                             ww5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case a2 of wild4 {
                             Language.PureScript.Names.Ident a4
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.Ident b4
                                  -> case a4 of wild6 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case b4 of wild7 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild9 {
                                            DEFAULT -> GHC.Types.False
                                            0#
                                            -> Language.PureScript.Types.$fEqType_$c==
                                                 a3
                                                 b3 } } } } } }
                             Language.PureScript.Names.GenIdent a4 a5
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.GenIdent b4 b5
                                  -> case a4 of wild6 {
                                       GHC.Base.Nothing
                                       -> case b4 of wild7 {
                                            GHC.Base.Nothing
                                            -> case GHC.Integer.Type.eqInteger# a5 b5 of wild8 {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> Language.PureScript.Types.$fEqType_$c== a3 b3 }
                                            GHC.Base.Just ipv -> GHC.Types.False }
                                       GHC.Base.Just a6
                                       -> case b4 of wild7 {
                                            GHC.Base.Nothing -> GHC.Types.False
                                            GHC.Base.Just b6
                                            -> case a6 of wild8 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case b6 of wild9 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               case GHC.Prim.==# dt2 dt5 of lwild {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild10 { (#,#) ds2 ds3 ->
                                                    case GHC.Prim.narrow32Int# ds3 of wild11 {
                                                      DEFAULT -> GHC.Types.False
                                                      0#
                                                      -> case GHC.Integer.Type.eqInteger#
                                                                a5
                                                                b5 of wild12 {
                                                           DEFAULT -> GHC.Types.False
                                                           1#
                                                           -> Language.PureScript.Types.$fEqType_$c==
                                                                a3
                                                                b3 } } } } } } } } }
                             Language.PureScript.Names.UnusedIdent
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.UnusedIdent
                                  -> Language.PureScript.Types.$fEqType_$c==
                                       a3
                                       b3 } } } } } } } } } }) -}
0d8e4197926d6b0160725c9c154c1438
  $fEqTypeFixity ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fEqTypeFixity_$c==
                  Language.PureScript.AST.Declarations.$fEqTypeFixity_$c/= -}
0d8e4197926d6b0160725c9c154c1438
  $fEqTypeFixity_$c/= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fEqTypeFixity_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0d8e4197926d6b0160725c9c154c1438
  $fEqTypeFixity_$c== ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c==
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fEqValueFixity ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fEqValueFixity_$c==
                  Language.PureScript.AST.Declarations.$fEqValueFixity_$c/= -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fEqValueFixity_$c/= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fEqValueFixity_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fEqValueFixity_$c== ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c==1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList ::
    Data.Foldable.Foldable
      (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfold
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldMap
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr'
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl'
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr1
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl1
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$ctoList
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cnull
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$clength
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$celem
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cmaximum
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cminimum
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList2 @ k)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList1 @ k)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.AssocList k a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,1*C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 letrec {
                   go6 :: [(k, a)] -> Data.Semigroup.Internal.Product a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 -> a2 })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.AssocList k a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidSum1
                 } in
                 letrec {
                   go6 :: [(k, a)] -> Data.Semigroup.Internal.Sum a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 -> a2 })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
e91154f3a30ec5e5e47259347208126a
  $fFoldableAssocList3 :: a
  {- Strictness: x -}
530ab4638d638d4500664ce987640a00
  $fFoldableAssocList4 :: a
  {- Strictness: x -}
9c13a1196176e88a3b9044d4243e6de2
  $fFoldableAssocList5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2b4ad18ce2a247dc06b6a7d49e1e42be
  $fFoldableAssocList6 :: a
  {- Strictness: x -}
f4193cf2625fd8f6aadc7207e19af588
  $fFoldableAssocList7 :: a
  {- Strictness: x -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ k @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f156 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                  letrec {
                    go6 :: [(k, a)] -> Data.Semigroup.Internal.Any
                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                    = \ (ds1 :: [(k, a)]) ->
                      case ds1 of wild {
                        []
                        -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                        : y ys
                        -> case y of wild1 { (,) a1 a2 ->
                           case f156 a2 of wild2 {
                             GHC.Types.False -> go6 ys
                             GHC.Types.True
                             -> GHC.Types.True
                                  `cast`
                                (Sym (Data.Semigroup.Internal.N:Any[0])) } } }
                  } in
                  go6
                    ds
                      `cast`
                    (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                   `cast`
                 (<Language.PureScript.AST.Declarations.AssocList k a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.AssocList k m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ k
                   @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k m) ->
                 let {
                   z2 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go6 :: [(k, m)] -> m {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, m)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            $dMonoid
                            (case y of wild1 { (,) a1 a2 -> a2 })
                            (go6 ys) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <m>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.AssocList k a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ k
                   @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f156 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go6 :: [(k, a)] -> m {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            $dMonoid
                            (case y of wild1 { (,) a1 a2 -> f156 a2 })
                            (go6 ys) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b -> b <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys -> go6 ys (case y of wild1 { (,) a1 a2 -> f156 eta a2 }) }
                 } in
                 go6
                   t1
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   z2) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b -> b <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case f156 eta a2 of vx { DEFAULT -> go6 ys vx } } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   z0) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Base.Maybe a -> a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [(k, a)]) (eta :: GHC.Base.Maybe a) ->
                     case ds of wild {
                       []
                       -> case eta of wild1 {
                            GHC.Base.Nothing
                            -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                            GHC.Base.Just v -> v }
                       : y ys
                       -> go6
                            ys
                            (case y of wild1 { (,) a1 a2 ->
                             GHC.Base.Just
                               @ a
                               (case eta of wild2 {
                                  GHC.Base.Nothing -> a2 GHC.Base.Just x -> f156 x a2 }) }) }
                 } in
                 let {
                   $sgo :: [(k, a)] -> a <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (sc :: [(k, a)]) ->
                     case sc of wild {
                       [] -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                       : y ys
                       -> go6 ys (case y of wild1 { (,) a1 a2 -> GHC.Base.Just @ a a2 }) }
                 } in
                 $sgo
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldr ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys -> case y of wild1 { (,) a1 a2 -> f156 a2 (go6 ys) } }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> (b -> b) -> b -> b
                     <join 3> {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U)><L,U> -}
                   = \ (ds :: [(k, a)]) (eta :: b -> b) (eta1 :: b) ->
                     case ds of wild {
                       [] -> eta eta1
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          go6
                            ys
                            (\ (z2 :: b)[OneShot] ->
                             case f156 a2 z2 of vx { DEFAULT -> eta vx })
                            eta1 } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   (GHC.Base.id @ b)
                   z0) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cfoldr1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Base.Maybe a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       [] -> GHC.Base.Nothing @ a
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          GHC.Base.Just
                            @ a
                            (case go6 ys of wild2 {
                               GHC.Base.Nothing -> a2 GHC.Base.Just y1 -> f156 a2 y1 }) } }
                 } in
                 case go6
                        xs
                          `cast`
                        (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <k>_R <a>_R) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                   GHC.Base.Just v -> v }) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$clength ::
    Language.PureScript.AST.Declarations.AssocList k a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ k
                   @ a
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Types.Int -> GHC.Types.Int
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: GHC.Types.Int) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case eta of wild2 { GHC.Types.I# x ->
                          go6 ys (GHC.Types.I# (GHC.Prim.+# x 1#)) } } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> Data.Functor.Utils.Max a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                       : y ys
                       -> case (go6 ys)
                                 `cast`
                               (Data.Functor.Utils.N:Max[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> case y of wild2 { (,) a1 a2 ->
                               (GHC.Base.Just @ a a2)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) }
                            GHC.Base.Just ipv
                            -> case y of wild2 { (,) a1 a2 ->
                               case GHC.Classes.>= @ a $dOrd a2 ipv of wild3 {
                                 GHC.Types.False
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a a2)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } } } }
                 } in
                 case (go6
                         eta
                           `cast`
                         (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                   GHC.Base.Just v -> v }) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> Data.Functor.Utils.Min a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                       : y ys
                       -> case (go6 ys)
                                 `cast`
                               (Data.Functor.Utils.N:Min[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> case y of wild2 { (,) a1 a2 ->
                               (GHC.Base.Just @ a a2)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) }
                            GHC.Base.Just ipv
                            -> case y of wild2 { (,) a1 a2 ->
                               case GHC.Classes.<= @ a $dOrd a2 ipv of wild3 {
                                 GHC.Types.False
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a a2)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } } } }
                 } in
                 case (go6
                         eta
                           `cast`
                         (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                   GHC.Base.Just v -> v }) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$cnull ::
    Language.PureScript.AST.Declarations.AssocList k a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ a
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.List.null
                   @ (k, a)
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFoldableAssocList_$ctoList ::
    Language.PureScript.AST.Declarations.AssocList k a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ k
                   @ a
                   (t1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr
                      @ k
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfold
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl'
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr2
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cnull
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$clength
                  Language.PureScript.AST.Declarations.$fFoldablePathNode4
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Classes.Eq a>_R
                   ->_R <a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Any[0])
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cminimum
                  Language.PureScript.AST.Declarations.$fFoldablePathNode3
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldablePathNode1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Product a)
                   = Data.Semigroup.Internal.$fMonoidProduct @ a $dNum
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> a1 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ (Data.Semigroup.Internal.Product a)
                        @ a
                        $dMonoid
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                        a1 }) -}
e1bb3af7132389e5fab5f396f99ff753
  $fFoldablePathNode2 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode3 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Sum a)
                   = Data.Semigroup.Internal.$fMonoidSum @ a $dNum
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> a1 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ (Data.Semigroup.Internal.Sum a)
                        @ a
                        $dMonoid
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                        a1 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode4 ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f156 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> (f156 a1) `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
                        @ a
                        f156 `cast` (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))
                        a1 }) -}
6e4e281f84de7433039831a47549f378
  $fFoldablePathNode5 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z2 :: GHC.Types.Int) ->
                 case z2 of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode6 ::
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode a)]
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.PathNode m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.PathNode m) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ m
                        @ m
                        $dMonoid
                        (GHC.Base.id @ m)
                        a1 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.PathTree a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldMap1 ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.PathNode a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f156 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f156 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ m
                        @ a
                        $dMonoid
                        f156
                        a1 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case t1 of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f156 z2 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
                         @ a
                         (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                            @ b)
                         (\ (x :: a) (y :: b) -> f156 y x)
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                         a1)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                        z2 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f156 z0 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (b -> b)
                        (\ (x :: a) (k :: b -> b)[OneShot] (z2 :: b) ->
                         case f156 z2 x of vx { DEFAULT -> k vx })
                        (GHC.Base.id @ b)
                        a1
                        z0 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Semigroup.Internal.Dual
                                   (Data.Semigroup.Internal.Endo (GHC.Base.Maybe a)))
                              @ a
                              (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                                 @ (GHC.Base.Maybe a))
                              (\ (x :: a) (y :: GHC.Base.Maybe a) ->
                               GHC.Base.Just
                                 @ a
                                 (case y of wild1 {
                                    GHC.Base.Nothing -> x GHC.Base.Just x1 -> f156 x1 x }))
                                `cast`
                              (<a>_R
                               ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                             (Data.Semigroup.Internal.N:Endo[0]
                                                  <GHC.Base.Maybe a>_R)))
                              a1)
                             `cast`
                           (Data.Semigroup.Internal.N:Dual[0]
                                (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R))
                             (GHC.Base.Nothing @ a) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                        GHC.Base.Just v -> v } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldr ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f156 a1 z0
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (b -> b)))
                         @ a
                         (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                            @ (b -> b))
                         (\ (x :: a) (y :: b -> b) (z2 :: b) ->
                          case f156 x z2 of vx { DEFAULT -> y vx })
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R)))
                         a1)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R))
                        (GHC.Base.id @ b)
                        z0 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldr1 ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f156 a1 z2
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ b
                        f156
                        z2
                        a1 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cfoldr2 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                             @ a
                             @ (GHC.Base.Maybe a)
                             (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                              GHC.Base.Just
                                @ a
                                (case m of wild1 {
                                   GHC.Base.Nothing -> x GHC.Base.Just y -> f156 x y }))
                             (GHC.Base.Nothing @ a)
                             a1 of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                        GHC.Base.Just v -> v } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$clength ::
    Language.PureScript.AST.Declarations.PathNode a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> GHC.Types.I# 1#
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode5 @ a)
                        (GHC.Base.id @ GHC.Types.Int)
                        a1
                        Language.PureScript.AST.Declarations.$fFoldableAssocList5 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Functor.Utils.Max a)
                              @ a
                              g
                              (GHC.Base.Just @ a)
                                `cast`
                              (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                              a1)
                             `cast`
                           (Data.Functor.Utils.N:Max[0] <a>_N) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                        GHC.Base.Just v -> v } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Functor.Utils.Min a)
                              @ a
                              g
                              (GHC.Base.Just @ a)
                                `cast`
                              (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                              a1)
                             `cast`
                           (Data.Functor.Utils.N:Min[0] <a>_N) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                        GHC.Base.Just v -> v } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$cnull ::
    Language.PureScript.AST.Declarations.PathNode a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf ds1 -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode6
                         @ a
                         a1
                           `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$ctoList ::
    Language.PureScript.AST.Declarations.PathNode a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.AST.Declarations.PathNode a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr1
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
836fe78789aa1b2cabeac613c3cc0877
  $fFoldablePathNode_$dMonoid ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
  {- Unfolding: (\ @ b ->
                 Data.Semigroup.Internal.$fMonoidDual
                   @ (Data.Semigroup.Internal.Endo b)
                   (Data.Semigroup.Internal.$fMonoidEndo @ b)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathNode_$s$cfoldMap ::
    (a -> Data.Semigroup.Internal.Any)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfold
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl'
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldr1
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldablePathTree3
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:All[0])
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$clength
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$celem
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cminimum
                  Language.PureScript.AST.Declarations.$fFoldablePathTree2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldablePathTree1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl279 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Product a)
                   = Data.Semigroup.Internal.$fMonoidProduct @ a $dNum
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Semigroup.Internal.Product a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> lvl279 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 ->
                              case a2 of wild2 {
                                Language.PureScript.AST.Declarations.Leaf a4 -> a4
                                Language.PureScript.AST.Declarations.Branch a4
                                -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Semigroup.Internal.Product a)
                                      @ a
                                      $dMonoid
                                      (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                                      a4)
                                     `cast`
                                   (Data.Semigroup.Internal.N:Product[0] <a>_R) } })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl279 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidSum1
                 } in
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Sum a)
                   = Data.Semigroup.Internal.$fMonoidSum @ a $dNum
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Semigroup.Internal.Sum a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       [] -> lvl279 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 ->
                              case a2 of wild2 {
                                Language.PureScript.AST.Declarations.Leaf a4 -> a4
                                Language.PureScript.AST.Declarations.Branch a4
                                -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum a)
                                      @ a
                                      $dMonoid
                                      (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                                      a4)
                                     `cast`
                                   (Data.Semigroup.Internal.N:Sum[0] <a>_R) } })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree3 ::
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode6
                   @ a
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.PathTree a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f156 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                  letrec {
                    go6 :: [(Language.PureScript.PSString.PSString,
                             Language.PureScript.AST.Declarations.PathNode a)]
                           -> Data.Semigroup.Internal.Any
                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                    = \ (ds1 :: [(Language.PureScript.PSString.PSString,
                                  Language.PureScript.AST.Declarations.PathNode a)]) ->
                      case ds1 of wild {
                        []
                        -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                        : y ys
                        -> case y of wild1 { (,) a1 a2 ->
                           case a2 of wild2 {
                             Language.PureScript.AST.Declarations.Leaf a4
                             -> case f156 a4 of wild3 {
                                  GHC.Types.False -> go6 ys
                                  GHC.Types.True
                                  -> GHC.Types.True
                                       `cast`
                                     (Sym (Data.Semigroup.Internal.N:Any[0])) }
                             Language.PureScript.AST.Declarations.Branch a4
                             -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
                                        @ a
                                        f156
                                          `cast`
                                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))
                                        a4)
                                       `cast`
                                     (Data.Semigroup.Internal.N:Any[0]) of wild3 {
                                  GHC.Types.False -> go6 ys
                                  GHC.Types.True
                                  -> GHC.Types.True
                                       `cast`
                                     (Sym (Data.Semigroup.Internal.N:Any[0])) } } } }
                  } in
                  go6
                    ds
                      `cast`
                    (Language.PureScript.AST.Declarations.N:PathTree[0]
                         <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                     <Language.PureScript.PSString.PSString>_R
                                     <Language.PureScript.AST.Declarations.PathNode a>_R))
                   `cast`
                 (<Language.PureScript.AST.Declarations.PathTree a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.PathTree m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,U,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 let {
                   f157 :: a -> b -> b
                     {- Arity: 2, Strictness: <L,U><L,U>,
                        Unfolding: InlineRule (2, True, True)
                                   (\ (x :: a) (y :: b) -> f156 y x) -}
                   = \ (x :: a) (y :: b) -> f156 y x
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> b -> b
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)])
                       (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go6
                            ys
                            (case y of wild1 { (,) a1 a2 ->
                             case a2 of wild2 {
                               Language.PureScript.AST.Declarations.Leaf a4 -> f156 eta a4
                               Language.PureScript.AST.Declarations.Branch a4
                               -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                     @ (Data.Semigroup.Internal.Dual
                                          (Data.Semigroup.Internal.Endo b))
                                     @ a
                                     (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                                        @ b)
                                     f157
                                       `cast`
                                     (<a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                                    (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                                     a4)
                                    `cast`
                                  (Data.Semigroup.Internal.N:Dual[0]
                                       (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                                    eta } }) }
                 } in
                 go6
                   t1
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)
                   z2) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x :: a) (k :: b -> b)[OneShot] (z2 :: b) ->
                    case f156 z2 x of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                        @ (GHC.Base.Maybe a)
                        @ a
                        (\ (m :: GHC.Base.Maybe a) (y :: a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> y GHC.Base.Just x -> f156 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                   GHC.Base.Just v -> v }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                   @ (b -> b)
                   @ a
                   (\ (k :: b -> b) (x :: a)[OneShot] (z2 :: b) ->
                    case f156 x z2 of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cfoldr1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x GHC.Base.Just y -> f156 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                   GHC.Base.Just v -> v }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$clength ::
    Language.PureScript.AST.Declarations.PathTree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Language.PureScript.AST.Declarations.$fFoldablePathNode5 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   xs
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Functor.Utils.Max a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case a2 of wild2 {
                            Language.PureScript.AST.Declarations.Leaf a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Max[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> (GHC.Base.Just @ a a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                 GHC.Base.Just ipv
                                 -> case GHC.Classes.>= @ a $dOrd a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      GHC.Types.True
                                      -> (GHC.Base.Just @ a a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } }
                            Language.PureScript.AST.Declarations.Branch a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Max[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Functor.Utils.Max a)
                                      @ a
                                      g
                                      (GHC.Base.Just @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      a4
                                 GHC.Base.Just ipv
                                 -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                            @ (Data.Functor.Utils.Max a)
                                            @ a
                                            g
                                            (GHC.Base.Just @ a)
                                              `cast`
                                            (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                            a4)
                                           `cast`
                                         (Data.Functor.Utils.N:Max[0] <a>_N) of wild4 {
                                      GHC.Base.Nothing
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      GHC.Base.Just x
                                      -> case GHC.Classes.>= @ a $dOrd x ipv of wild5 {
                                           GHC.Types.False
                                           -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                           GHC.Types.True
                                           -> wild4
                                                `cast`
                                              (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } } } } } }
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case (go6
                         x `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                   GHC.Base.Just v -> v }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Functor.Utils.Min a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case a2 of wild2 {
                            Language.PureScript.AST.Declarations.Leaf a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Min[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> (GHC.Base.Just @ a a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                 GHC.Base.Just ipv
                                 -> case GHC.Classes.<= @ a $dOrd a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      GHC.Types.True
                                      -> (GHC.Base.Just @ a a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } }
                            Language.PureScript.AST.Declarations.Branch a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Min[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Functor.Utils.Min a)
                                      @ a
                                      g
                                      (GHC.Base.Just @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      a4
                                 GHC.Base.Just ipv
                                 -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                            @ (Data.Functor.Utils.Min a)
                                            @ a
                                            g
                                            (GHC.Base.Just @ a)
                                              `cast`
                                            (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                            a4)
                                           `cast`
                                         (Data.Functor.Utils.N:Min[0] <a>_N) of wild4 {
                                      GHC.Base.Nothing
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      GHC.Base.Just x
                                      -> case GHC.Classes.<= @ a $dOrd x ipv of wild5 {
                                           GHC.Types.False
                                           -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                           GHC.Types.True
                                           -> wild4
                                                `cast`
                                              (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } } } } } }
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case (go6
                         x `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                   GHC.Base.Just v -> v }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFoldablePathTree_$ctoList ::
    Language.PureScript.AST.Declarations.PathTree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfold
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldMap
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cnull
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$clength
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$celem
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.ValueDeclarationData
                           a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.ValueDeclarationData
                           a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f156 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                  case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                  (f156 a5) `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<Language.PureScript.AST.Declarations.ValueDeclarationData a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.ValueDeclarationData m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            m) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U)><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f156 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f156 a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cfoldl ::
    (b -> a -> b)
    -> b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f156 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case t1 of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f156 z2 a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (f156 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cfoldr' ::
    (a -> b -> b)
    -> b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f156 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f156 a5 z0 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$clength ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Types.I# 1# }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.AST.Declarations.valdeclExpression @ a) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$cnull ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 GHC.Types.False }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFoldableValueDeclarationData_$ctoList ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (t1 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    case t1 of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                    c a5 n })) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fFromJSONDeclarationRef ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$cparseJSON
                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$cparseJSONList -}
d6f2c233c3dfff277ccb322fc573aa19
  $fFromJSONDeclarationRef1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
438620199b5cdb04186f15b24c21798a
  $fFromJSONDeclarationRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
b6428f63c055049979f45595eb2f3513
  $fFromJSONDeclarationRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fFromJSONDeclarationRef4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, Strictness: <S,U> -}
58a339842dbff31ea71a8c187212a530
  $fFromJSONDeclarationRef5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef6) -}
c30f1963c5a5a71dc7f2e3211925ead9
  $fFromJSONDeclarationRef6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations.DeclarationRef"#) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fFromJSONDeclarationRef_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.AST.Declarations.DeclarationRef
                        Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fFromJSONDeclarationRef_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f156 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f156 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.AST.Declarations.DeclarationRef] f156 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.AST.Declarations.DeclarationRef]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_go
                        0#
                        ($wgo 0#) } }) -}
cc29090eb3283038eb69d815fd6d773d
  $fFromJSONDeclarationRef_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
ea86571fe412334224055a55552bbfd3
  $fFromJSONDeclarationRef_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
21102d07721bc43d30b0b4d8c19ed6d9
  $fFromJSONDeclarationRef_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
9de74e8b46bfd07e044a72617cc5da5c
  $fFromJSONDeclarationRef_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
f900e8c96b49d573d3e54286bc8fd980
  $fFromJSONImportDeclarationType ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$cparseJSON
                  Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$cparseJSONList -}
f900e8c96b49d573d3e54286bc8fd980
  $fFromJSONImportDeclarationType1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.ImportDeclarationType
  {- Arity: 1, Strictness: <S,U> -}
1f1a5975ba201ab2c9839aba023f3aef
  $fFromJSONImportDeclarationType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType3) -}
39beac8cc8957ee71890e64253a45dfb
  $fFromJSONImportDeclarationType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations.ImportDeclarationType"#) -}
f900e8c96b49d573d3e54286bc8fd980
  $fFromJSONImportDeclarationType_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.ImportDeclarationType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.AST.Declarations.ImportDeclarationType
                        Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType2
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
f900e8c96b49d573d3e54286bc8fd980
  $fFromJSONImportDeclarationType_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.ImportDeclarationType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f156 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f156 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.AST.Declarations.ImportDeclarationType]
                                   f156
                                   r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.AST.Declarations.ImportDeclarationType]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_go
                        0#
                        ($wgo 0#) } }) -}
b340b32e677c6c0cd48a005e55e7de28
  $fFromJSONImportDeclarationType_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
e7f0bdcc3f42e6dd2e47edfbec8179ce
  $fFromJSONImportDeclarationType_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
98b5a6b46e8377ea2e590c3a20197dc2
  $fFromJSONImportDeclarationType_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
f900e8c96b49d573d3e54286bc8fd980
  $fFromJSONImportDeclarationType_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.ImportDeclarationType]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
6bb793796adb411b63074cabb1cd2dc5
  $fFunctorAssocList ::
    GHC.Base.Functor (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList2 @ k)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <b>_R))
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList1 @ k)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k b>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <a>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFunctorAssocList1 ::
    a -> Language.PureScript.AST.Declarations.AssocList k b -> [(k, a)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k b) ->
                 GHC.Base.build
                   @ (k, a)
                   (\ @ b1 (c :: (k, a) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (k, b)
                      @ b1
                      (GHC.Base.mapFB
                         @ (k, a)
                         @ b1
                         @ (k, b)
                         c
                         (\ (b3 :: (k, b)) -> case b3 of wild { (,) a1 a2 -> (a1, z2) }))
                      n
                      ds
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <b>_R))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fFunctorAssocList2 ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.AssocList k a -> [(k, b)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ a
                   @ b
                   (f156 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.Base.build
                   @ (k, b)
                   (\ @ b1 (c :: (k, b) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (k, a)
                      @ b1
                      (GHC.Base.mapFB
                         @ (k, b)
                         @ b1
                         @ (k, a)
                         c
                         (\ (b2 :: (k, a)) ->
                          case b2 of wild { (,) a1 a2 -> (a1, f156 a2) }))
                      n
                      ds
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <a>_R))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathNode ::
    GHC.Base.Functor Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFunctorPathNode_$cfmap
                  Language.PureScript.AST.Declarations.$fFunctorPathNode_$c<$ -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathNode1 ::
    a
    -> Language.PureScript.AST.Declarations.PathTree b
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode a)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathNode2 ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode b)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathNode_$c<$ ::
    a
    -> Language.PureScript.AST.Declarations.PathNode b
    -> Language.PureScript.AST.Declarations.PathNode a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.PathNode b) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> Language.PureScript.AST.Declarations.Leaf @ a z2
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.Branch
                        @ a
                        (Language.PureScript.AST.Declarations.$fFunctorPathNode1
                           @ a
                           @ b
                           z2
                           a1)
                          `cast`
                        (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     a>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <a>_R)) }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathNode_$cfmap ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> Language.PureScript.AST.Declarations.PathNode b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f156 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> Language.PureScript.AST.Declarations.Leaf @ b (f156 a1)
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.Branch
                        @ b
                        (Language.PureScript.AST.Declarations.$fFunctorPathNode2
                           @ a
                           @ b
                           f156
                           a1)
                          `cast`
                        (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     b>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <b>_R)) }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fFunctorPathTree ::
    GHC.Base.Functor Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFunctorPathNode2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <Language.PureScript.PSString.PSString>_R
                                 <Language.PureScript.AST.Declarations.PathNode
                                    b>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                     <b>_R))
                  Language.PureScript.AST.Declarations.$fFunctorPathNode1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree b>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <Language.PureScript.PSString.PSString>_R
                                 <Language.PureScript.AST.Declarations.PathNode
                                    a>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                     <a>_R)) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFunctorValueDeclarationData ::
    GHC.Base.Functor
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData_$cfmap
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData_$c<$ -}
0c2d915175f1072d8eeca07af2b73e20
  $fFunctorValueDeclarationData_$c<$ ::
    a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(SSSSL),1*U(U,U,U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            b) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 case z2 of dt { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclarationData
                   @ a
                   a1
                   a2
                   a3
                   a4
                   dt } }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fFunctorValueDeclarationData_$cfmap ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f156 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 case f156 a5 of dt { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclarationData
                   @ b
                   a1
                   a2
                   a3
                   a4
                   dt } }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fGenericDeclarationRef ::
    GHC.Generics.Generic
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fGenericDeclarationRef1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.AST.Declarations.DeclarationRef>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "DeclarationRef"
                                     "Language.PureScript.AST.Declarations"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             Language.PureScript.AST.SourcePos.SourceSpan)
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                'GHC.Base.Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   [Language.PureScript.Names.ProperName
                                                                                      'Language.PureScript.Names.ConstructorName]))))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TypeOpRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.OpName
                                                                                  'Language.PureScript.Names.TypeOpName))))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "ValueRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Names.Ident))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ValueOpRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.OpName
                                                                                                   'Language.PureScript.Names.ValueOpName)))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TypeClassRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ClassName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TypeInstanceRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.Ident)))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ModuleRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName))
                                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "KindRef"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.False)
                                                                                           (GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                     'Language.PureScript.Names.KindName)))
                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                            GHC.Generics.C
                                                                                                            ('GHC.Generics.MetaCons
                                                                                                               "ReExportRef"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.False)
                                                                                                            (GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                 GHC.Generics.S
                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                    'GHC.Base.Nothing
                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                 (GHC.Generics.K1
                                                                                                                                    GHC.Generics.R
                                                                                                                                    Language.PureScript.Names.ModuleName)
                                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                  GHC.Generics.S
                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                     GHC.Generics.R
                                                                                                                                                     Language.PureScript.AST.Declarations.DeclarationRef))))))>_R) ; Sub (Sym (Language.PureScript.AST.Declarations.Rep_DeclarationRef[0]))) <x>_N)
                  Language.PureScript.AST.Declarations.$fGenericDeclarationRef_$cto -}
9de74e8b46bfd07e044a72617cc5da5c
  $fGenericDeclarationRef1 ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
              GHC.Generics.:*: (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.K1
                                     GHC.Generics.R
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName))
                                GHC.Generics.:*: GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         [Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName]))))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.TypeOpName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName)))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
              GHC.Generics.:*: GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.Ident)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                            GHC.Generics.:+: (GHC.Generics.M1
                                                GHC.Generics.C
                                                ('GHC.Generics.MetaCons
                                                   "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName)))
                                              GHC.Generics.:+: GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "ReExportRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: (GHC.Generics.M1
                                                                                      GHC.Generics.S
                                                                                      ('GHC.Generics.MetaSel
                                                                                         'GHC.Base.Nothing
                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                         'GHC.Generics.DecidedLazy)
                                                                                      (GHC.Generics.K1
                                                                                         GHC.Generics.R
                                                                                         Language.PureScript.Names.ModuleName)
                                                                                    GHC.Generics.:*: GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.AST.Declarations.DeclarationRef))))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (x1 :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case x1 of wild {
                   Language.PureScript.AST.Declarations.TypeRef g1 g2 g3
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Base.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (GHC.Base.Maybe
                                                                               [Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName])))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (GHC.Base.Maybe
                                                             [Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName])))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe
                                               [Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ConstructorName])))
                                    @ x
                                    g2
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                                    g3
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <GHC.Base.Maybe
                                                 [Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName]>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (GHC.Base.Maybe
                                                                      [Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName])>_R) <x>_N)))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 'GHC.Base.Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    [Language.PureScript.Names.ProperName
                                                                                       'Language.PureScript.Names.ConstructorName])))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeOpRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Base.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (GHC.Base.Maybe
                                                                               [Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName])))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.OpName
                                              'Language.PureScript.Names.TypeOpName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.OpName
                                                                   'Language.PureScript.Names.TypeOpName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.TypeOpName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ValueRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.Ident>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.Ident>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.Ident)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ValueOpRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.OpName
                                              'Language.PureScript.Names.ValueOpName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.OpName
                                                                   'Language.PureScript.Names.ValueOpName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.ValueOpName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeClassRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.ClassName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeInstanceRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.Ident>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.Ident>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeInstanceRef"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.Ident)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ModuleRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.ModuleName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.ModuleName>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.ModuleName)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.KindRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.L1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.KindName))))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "ReExportRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Declarations.DeclarationRef))))
                                 @ x
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.KindName)))
                                    @ x
                                    g1
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                    g2
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N))
                                   `cast`
                                 (Sym (GHC.Generics.N:M1[0]
                                           <*>_N
                                           <GHC.Generics.C>_P
                                           <'GHC.Generics.MetaCons
                                              "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                           <GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Base.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1
                                                 GHC.Generics.R
                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                            GHC.Generics.:*: GHC.Generics.M1
                                                               GHC.Generics.S
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Base.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.K1
                                                                  GHC.Generics.R
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.KindName))>_R) <x>_N))))
                   Language.PureScript.AST.Declarations.ReExportRef g1 g2 g3
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.R1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.KindName))))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "ReExportRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Declarations.DeclarationRef))))
                                 @ x
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Declarations.DeclarationRef))
                                    @ x
                                    g1
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                    (GHC.Generics.:*:
                                       @ *
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R Language.PureScript.Names.ModuleName))
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.Declarations.DeclarationRef))
                                       @ x
                                       g2
                                         `cast`
                                       (Sym (GHC.Generics.N:K1[0]
                                                 <*>_N
                                                 <GHC.Generics.R>_P
                                                 <Language.PureScript.Names.ModuleName>_R
                                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName>_R) <x>_N)
                                       g3
                                         `cast`
                                       (Sym (GHC.Generics.N:K1[0]
                                                 <*>_N
                                                 <GHC.Generics.R>_P
                                                 <Language.PureScript.AST.Declarations.DeclarationRef>_R
                                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.Declarations.DeclarationRef>_R) <x>_N)))
                                   `cast`
                                 (Sym (GHC.Generics.N:M1[0]
                                           <*>_N
                                           <GHC.Generics.C>_P
                                           <'GHC.Generics.MetaCons
                                              "ReExportRef"
                                              'GHC.Generics.PrefixI
                                              'GHC.Types.False>_P
                                           <GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Base.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1
                                                 GHC.Generics.R
                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                GHC.Generics.S
                                                                ('GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy)
                                                                (GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.Names.ModuleName)
                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                 GHC.Generics.S
                                                                                 ('GHC.Generics.MetaSel
                                                                                    'GHC.Base.Nothing
                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                    'GHC.Generics.DecidedLazy)
                                                                                 (GHC.Generics.K1
                                                                                    GHC.Generics.R
                                                                                    Language.PureScript.AST.Declarations.DeclarationRef))>_R) <x>_N)))) }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fGenericDeclarationRef_$cto ::
    GHC.Generics.Rep
      Language.PureScript.AST.Declarations.DeclarationRef x
    -> Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.AST.Declarations.DeclarationRef x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.AST.Declarations.Rep_DeclarationRef[0]) ; GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.D>_P
                                                                                               <'GHC.Generics.MetaData
                                                                                                  "DeclarationRef"
                                                                                                  "Language.PureScript.AST.Declarations"
                                                                                                  "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                  'GHC.Types.False>_P
                                                                                               <((GHC.Generics.M1
                                                                                                    GHC.Generics.C
                                                                                                    ('GHC.Generics.MetaCons
                                                                                                       "TypeRef"
                                                                                                       'GHC.Generics.PrefixI
                                                                                                       'GHC.Types.False)
                                                                                                    (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                         GHC.Generics.S
                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                            'GHC.Base.Nothing
                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                         (GHC.Generics.K1
                                                                                                                            GHC.Generics.R
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.TypeName))
                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                          GHC.Generics.S
                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                          (GHC.Generics.K1
                                                                                                                                             GHC.Generics.R
                                                                                                                                             (GHC.Base.Maybe
                                                                                                                                                [Language.PureScript.Names.ProperName
                                                                                                                                                   'Language.PureScript.Names.ConstructorName]))))
                                                                                                  GHC.Generics.:+: GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "TypeOpRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                               'Language.PureScript.Names.TypeOpName))))
                                                                                                 GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "ValueRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.Names.Ident))
                                                                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "ValueOpRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                                                'Language.PureScript.Names.ValueOpName)))))
                                                                                                GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "TypeClassRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                               'Language.PureScript.Names.ClassName)))
                                                                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "TypeInstanceRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             Language.PureScript.Names.Ident)))
                                                                                                                  GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "ModuleRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             Language.PureScript.Names.ModuleName))
                                                                                                                                    GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                                                        GHC.Generics.C
                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                           "KindRef"
                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                           'GHC.Types.False)
                                                                                                                                                        (GHC.Generics.M1
                                                                                                                                                           GHC.Generics.S
                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                              'GHC.Base.Nothing
                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                           (GHC.Generics.K1
                                                                                                                                                              GHC.Generics.R
                                                                                                                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                               'GHC.Base.Nothing
                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                  'Language.PureScript.Names.KindName)))
                                                                                                                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                                                         GHC.Generics.C
                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                            "ReExportRef"
                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                            'GHC.Types.False)
                                                                                                                                                                         (GHC.Generics.M1
                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                               'GHC.Base.Nothing
                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 'GHC.Base.Nothing
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 Language.PureScript.Names.ModuleName)
                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                  Language.PureScript.AST.Declarations.DeclarationRef))))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: (GHC.Generics.M1
                                                               GHC.Generics.S
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Base.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.K1
                                                                  GHC.Generics.R
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.TypeName))
                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                GHC.Generics.S
                                                                                ('GHC.Generics.MetaSel
                                                                                   'GHC.Base.Nothing
                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                   'GHC.Generics.DecidedLazy)
                                                                                (GHC.Generics.K1
                                                                                   GHC.Generics.R
                                                                                   (GHC.Base.Maybe
                                                                                      [Language.PureScript.Names.ProperName
                                                                                         'Language.PureScript.Names.ConstructorName])))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                case ds5 of wild4 { GHC.Generics.:*: ds6 ds7 ->
                                Language.PureScript.AST.Declarations.TypeRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds6
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.R>_P
                                                                                                 <Language.PureScript.Names.ProperName
                                                                                                    'Language.PureScript.Names.TypeName>_R
                                                                                                 <x>_P)
                                  ds7
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             [Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName])>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.R>_P
                                                                                                            <GHC.Base.Maybe
                                                                                                               [Language.PureScript.Names.ProperName
                                                                                                                  'Language.PureScript.Names.ConstructorName]>_R
                                                                                                            <x>_P) } }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.OpName
                                                                    'Language.PureScript.Names.TypeOpName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeOpRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.R>_P
                                                                                                   <Language.PureScript.Names.OpName
                                                                                                      'Language.PureScript.Names.TypeOpName>_R
                                                                                                   <x>_P) } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.Ident)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ValueRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.Ident>_R
                                                                                         <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.OpName
                                                                    'Language.PureScript.Names.ValueOpName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ValueOpRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                    <*>_N
                                                                                                    <GHC.Generics.R>_P
                                                                                                    <Language.PureScript.Names.OpName
                                                                                                       'Language.PureScript.Names.ValueOpName>_R
                                                                                                    <x>_P) } } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeClassRef"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.ProperName
                                                                    'Language.PureScript.Names.ClassName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeClassRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.R>_P
                                                                                                  <Language.PureScript.Names.ProperName
                                                                                                     'Language.PureScript.Names.ClassName>_R
                                                                                                  <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeInstanceRef"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.Ident)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeInstanceRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.Ident>_R
                                                                                         <x>_P) } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.ModuleName)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ModuleRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                              <*>_N
                                                                                              <GHC.Generics.R>_P
                                                                                              <Language.PureScript.Names.ModuleName>_R
                                                                                              <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3 of wild3 {
                                  GHC.Generics.L1 ds4
                                  -> case ds4
                                            `cast`
                                          (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "KindRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName))>_R <x>_N) of wild4 { GHC.Generics.:*: ds5 ds6 ->
                                     Language.PureScript.AST.Declarations.KindRef
                                       ds5
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                           <*>_N
                                                                                                           <GHC.Generics.R>_P
                                                                                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                           <x>_P)
                                       ds6
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               (Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.KindName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.KindName>_R
                                                                                                      <x>_P) }
                                  GHC.Generics.R1 ds4
                                  -> case ds4
                                            `cast`
                                          (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "ReExportRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.Names.ModuleName)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.Declarations.DeclarationRef))>_R <x>_N) of wild4 { GHC.Generics.:*: ds5 ds6 ->
                                     case ds6 of wild5 { GHC.Generics.:*: ds7 ds8 ->
                                     Language.PureScript.AST.Declarations.ReExportRef
                                       ds5
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                           <*>_N
                                                                                                           <GHC.Generics.R>_P
                                                                                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                           <x>_P)
                                       ds7
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.R>_P
                                                                                                   <Language.PureScript.Names.ModuleName>_R
                                                                                                   <x>_P)
                                       ds8
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.Declarations.DeclarationRef>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.R>_P
                                                                                                                  <Language.PureScript.AST.Declarations.DeclarationRef>_R
                                                                                                                  <x>_P) } } } } } }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fNFDataDeclarationRef ::
    Control.DeepSeq.NFData
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.AST.Declarations.$fNFDataDeclarationRef_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.AST.Declarations.DeclarationRef>_N)) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fNFDataDeclarationRef_$crnf ::
    Language.PureScript.AST.Declarations.DeclarationRef -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    GHC.Classes.Ord
      (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Classes.Ord k)
                      (v1 :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cp1Ord
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList1 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c<
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c<=
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c>
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c>=
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cmax
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cmin
                     @ k
                     @ t
                     v
                     v1) -}
88c109da246aa61462c7f28818770f34
  $fOrdAssocList1 ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (k, t)
                   (GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$c< ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$c<= ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$c> ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$c>= ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$cmax ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> y GHC.Types.GT -> x })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$cmin ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> x GHC.Types.GT -> y })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fOrdAssocList_$cp1Ord ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.AssocList k t)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqAssocList
                   @ k
                   @ t
                   (GHC.Classes.$p1Ord @ k $dOrd)
                   (GHC.Classes.$p1Ord @ t $dOrd1)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode ::
    GHC.Classes.Ord t =>
    GHC.Classes.Ord (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cp1Ord @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$ccompare
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c< @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c<= @ t v)
                  (\ (a :: Language.PureScript.AST.Declarations.PathNode t)
                     (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                   Language.PureScript.AST.Declarations.$fOrdPathNode_$c< @ t v b a)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c>= @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cmax @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cmin @ t v) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$c< ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$c<= ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (a :: Language.PureScript.AST.Declarations.PathNode t)
                   (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$c>= ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (a :: Language.PureScript.AST.Declarations.PathNode t)
                   (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$ccompare ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$cmax ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$cmin ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathNode_$cp1Ord ::
    GHC.Classes.Ord t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqPathNode
                   @ t
                   (GHC.Classes.$p1Ord @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree ::
    GHC.Classes.Ord t =>
    GHC.Classes.Ord (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree_$cp1Ord @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree7 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree6 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree5 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree4 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree3 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree2 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                 <t>_R))
                  (Language.PureScript.AST.Declarations.$fOrdPathTree1 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                 <t>_R)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree1 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$cmin
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree2 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$cmax
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree3 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c>=
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree4 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c>
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree5 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c<=
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree6 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c<
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree7 ::
    GHC.Classes.Ord t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fOrd(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fOrdPSString
                      (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fOrdPathTree_$cp1Ord ::
    GHC.Classes.Ord t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathTree t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqPathTree
                   @ t
                   (GHC.Classes.$p1Ord @ t $dOrd)) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity ::
    GHC.Classes.Ord Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fEqTypeFixity
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$ccompare
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<=
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c>
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c>=
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$cmax
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$cmin -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$c< ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c<
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$c<= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$c> ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c< b a) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$c>= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$ccompare ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$ccompare
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$cmax ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0d8e4197926d6b0160725c9c154c1438
  $fOrdTypeFixity_$cmin ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity ::
    GHC.Classes.Ord Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fEqValueFixity
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$ccompare
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<=
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c>
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c>=
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$cmax
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$cmin -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$c< ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c<1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$c<= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$c> ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 Language.PureScript.AST.Declarations.$fOrdValueFixity_$c< b a) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$c>= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$ccompare ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$ccompare1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$cmax ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fOrdValueFixity_$cmin ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
6bb793796adb411b63074cabb1cd2dc5
  $fShowAssocList ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Show.Show k)
                      (v1 :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshow
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowList
                     @ k
                     @ t
                     v
                     v1) -}
7d1f988c304e358c768bd3a3a98ca3f7
  $fShowAssocList1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
2aec1968a533adccc1ab569b3b438f3f
  $fShowAssocList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runAssocList = "#) -}
b8392dcf73ad4f2fa93e64eb61fd018d
  $fShowAssocList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssocList {"#) -}
6bb793796adb411b63074cabb1cd2dc5
  $fShowAssocList_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ t
                   ($dShow1 :: GHC.Show.Show k)
                   ($dShow2 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.AssocList k t) ->
                 Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                   @ k
                   @ t
                   $dShow1
                   $dShow2
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fShowAssocList_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    [Language.PureScript.AST.Declarations.AssocList k t]
    -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ t
                   ($dShow1 :: GHC.Show.Show k)
                   ($dShow2 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.AssocList k t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.AssocList k t)
                   (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                      @ k
                      @ t
                      $dShow1
                      $dShow2
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
6bb793796adb411b63074cabb1cd2dc5
  $fShowAssocList_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ k
                   @ t
                   (w :: GHC.Show.Show k)
                   (w1 :: GHC.Show.Show t)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Language.PureScript.AST.Declarations.AssocList k t)
                   (w4 :: GHC.Base.String) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec
                   @ k
                   @ t
                   w
                   w1
                   ww1
                   w3
                   w4 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowCaseAlternative ::
    GHC.Show.Show Language.PureScript.AST.Declarations.CaseAlternative
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.CaseAlternative
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshow
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowCaseAlternative1 ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.CaseAlternative)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.AST.Declarations.CaseAlternative ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec1
                   0#
                   ww1
                   ww2
                   w1 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowCaseAlternative_$cshow ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowCaseAlternative_$cshowList ::
    [Language.PureScript.AST.Declarations.CaseAlternative]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.CaseAlternative])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.CaseAlternative
                   Language.PureScript.AST.Declarations.$fShowCaseAlternative1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowCaseAlternative_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.CaseAlternative)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.CaseAlternative ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   w2 } }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDeclaration ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Declaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Declaration
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshow
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDeclaration1 ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Declaration) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec2 0# w) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fShowDeclarationRef ::
    GHC.Show.Show Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshow
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowList -}
9de74e8b46bfd07e044a72617cc5da5c
  $fShowDeclarationRef1 ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec3 0# w) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fShowDeclarationRef_$cshow ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fShowDeclarationRef_$cshowList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.DeclarationRef])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fShowDeclarationRef1
                   ls
                   s) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fShowDeclarationRef_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec3 ww1 w1 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDeclaration_$cshow ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration) ->
                 Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDeclaration_$cshowList ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Declaration])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Declaration
                   Language.PureScript.AST.Declarations.$fShowDeclaration1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDeclaration_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Declaration) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec2 ww1 w1 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDoNotationElement ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.DoNotationElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DoNotationElement
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshow
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDoNotationElement1 ::
    Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec4 0# w) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDoNotationElement_$cshow ::
    Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDoNotationElement_$cshowList ::
    [Language.PureScript.AST.Declarations.DoNotationElement]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.DoNotationElement])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.DoNotationElement
                   Language.PureScript.AST.Declarations.$fShowDoNotationElement1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowDoNotationElement_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec4 ww1 w1 }) -}
cebd18718f7c34278cac50a2f0ab0386
  $fShowErrorMessage ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ErrorMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ErrorMessage
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec2
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshow
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowList -}
cebd18718f7c34278cac50a2f0ab0386
  $fShowErrorMessage1 ::
    Language.PureScript.AST.Declarations.ErrorMessage -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec5
                   0#
                   ww1
                   ww2 }) -}
9d40af24f02d951415d09c01fa64f85d
  $fShowErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessage "#) -}
f0e5e26c08b700dd6e33ac1febbdd4f0
  $fShowErrorMessage3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowErrorMessageHint ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ErrorMessageHint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ErrorMessageHint
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowErrorMessageHint_$cshow
                  Language.PureScript.AST.Declarations.$fShowErrorMessageHint_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowErrorMessageHint1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowErrorMessageHint_$cshow ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessageHint) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowErrorMessageHint_$cshowList ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ErrorMessageHint
                   Language.PureScript.AST.Declarations.$fShowErrorMessageHint1
                   ls
                   s) -}
cebd18718f7c34278cac50a2f0ab0386
  $fShowErrorMessage_$cshow ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec2
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cebd18718f7c34278cac50a2f0ab0386
  $fShowErrorMessage_$cshowList ::
    [Language.PureScript.AST.Declarations.ErrorMessage]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ErrorMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   Language.PureScript.AST.Declarations.$fShowErrorMessage1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowErrorMessage_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
33c1a345bb3f2be69a13531f80c78fbd
  $fShowErrorMessage_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
cebd18718f7c34278cac50a2f0ab0386
  $fShowErrorMessage_$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.ErrorMessage ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec5
                   ww1
                   ww3
                   ww4 } }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowExpr ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Expr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Expr
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshow
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowExpr1 ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowExpr_$cshow ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Expr) ->
                 Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowExpr_$cshowList ::
    [Language.PureScript.AST.Declarations.Expr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Expr])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Expr
                   Language.PureScript.AST.Declarations.$fShowExpr1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuard ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Guard
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Guard
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshow
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuard1 ::
    Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Guard) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec6 0# w) -}
21cff9599961569e7efd2a93d2d35312
  $fShowGuard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PatternGuard "#) -}
aead06f4e6ada9e3f52b3ed400e843a0
  $fShowGuard3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowGuard4) -}
cfa463a5fdc0261b890d7f050fa97dda
  $fShowGuard4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConditionGuard "#) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuard_$cshow ::
    Language.PureScript.AST.Declarations.Guard -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Guard) ->
                 Language.PureScript.AST.Declarations.$fShowGuard_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuard_$cshowList ::
    [Language.PureScript.AST.Declarations.Guard] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Guard])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Guard
                   Language.PureScript.AST.Declarations.$fShowGuard1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuard_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Guard) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec6 ww1 w1 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuardedExpr ::
    GHC.Show.Show Language.PureScript.AST.Declarations.GuardedExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.GuardedExpr
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshow
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuardedExpr1 ::
    Language.PureScript.AST.Declarations.GuardedExpr -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case w of ww { Language.PureScript.AST.Declarations.GuardedExpr ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec7
                   0#
                   ww1
                   ww2 }) -}
18ffff9ff71ab78c8ec5d9315d15c36e
  $fShowGuardedExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GuardedExpr "#) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuardedExpr_$cshow ::
    Language.PureScript.AST.Declarations.GuardedExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuardedExpr_$cshowList ::
    [Language.PureScript.AST.Declarations.GuardedExpr]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.GuardedExpr])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.GuardedExpr
                   Language.PureScript.AST.Declarations.$fShowGuardedExpr1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowGuardedExpr_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.GuardedExpr
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.GuardedExpr ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec7
                   ww1
                   ww3
                   ww4 } }) -}
5a4eef1c21520364cf5b424feb83c38c
  $fShowHintCategory ::
    GHC.Show.Show Language.PureScript.AST.Declarations.HintCategory
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.HintCategory
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshow
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshowList -}
a75412f671001a5702db18b8b7bf3734
  $fShowHintCategory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory2) -}
c0d96d01c83197918d644abed29c5e02
  $fShowHintCategory10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KindHint"#) -}
1896085379f780494f22a1b2ce8ee657
  $fShowHintCategory11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory12) -}
54701a47f2f3b80a665030a4026125e7
  $fShowHintCategory12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExprHint"#) -}
21dfcef000bcf58ecfbd4b2b227f8d46
  $fShowHintCategory2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherHint"#) -}
943eec3508cb98df70f3d374766d310a
  $fShowHintCategory3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory4) -}
5523c2429e6df24fb61b523b2009966d
  $fShowHintCategory4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SolverHint"#) -}
9bf1f6652033258e016e413bb9b5265e
  $fShowHintCategory5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory6) -}
d7cce43107a4fd90db595994e7f59632
  $fShowHintCategory6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PositionHint"#) -}
bb1c2404d3b9c14a5fe547f56a1ed2e4
  $fShowHintCategory7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory8) -}
cb34995b073ef0a29d527f3fd953b8a5
  $fShowHintCategory8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CheckHint"#) -}
d2caea83e0e0dc8f58889b83fde3d617
  $fShowHintCategory9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory10) -}
5a4eef1c21520364cf5b424feb83c38c
  $fShowHintCategory_$cshow ::
    Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory11
                   Language.PureScript.AST.Declarations.KindHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory9
                   Language.PureScript.AST.Declarations.CheckHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory7
                   Language.PureScript.AST.Declarations.PositionHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory5
                   Language.PureScript.AST.Declarations.SolverHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory3
                   Language.PureScript.AST.Declarations.OtherHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory1 }) -}
5a4eef1c21520364cf5b424feb83c38c
  $fShowHintCategory_$cshowList ::
    [Language.PureScript.AST.Declarations.HintCategory]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.HintCategory])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.HintCategory
                   Language.PureScript.AST.Declarations.$w$cshowsPrec8
                   ls
                   s) -}
5a4eef1c21520364cf5b424feb83c38c
  $fShowHintCategory_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.HintCategory)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec8 w1 w2) -}
f900e8c96b49d573d3e54286bc8fd980
  $fShowImportDeclarationType ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshow
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowList -}
f900e8c96b49d573d3e54286bc8fd980
  $fShowImportDeclarationType1 ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
f900e8c96b49d573d3e54286bc8fd980
  $fShowImportDeclarationType_$cshow ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f900e8c96b49d573d3e54286bc8fd980
  $fShowImportDeclarationType_$cshowList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ImportDeclarationType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ImportDeclarationType
                   Language.PureScript.AST.Declarations.$fShowImportDeclarationType1
                   ls
                   s) -}
f900e8c96b49d573d3e54286bc8fd980
  $fShowImportDeclarationType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
7cf4b96f7d4b51b446726a099ab87bb6
  $fShowModule ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Module
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Module
                  Language.PureScript.AST.Declarations.$fShowModule_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowModule_$cshow
                  Language.PureScript.AST.Declarations.$fShowModule_$cshowList -}
7cf4b96f7d4b51b446726a099ab87bb6
  $fShowModule1 ::
    Language.PureScript.AST.Declarations.Module -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec9
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
2c6f830451831f254801a52f02e936dc
  $fShowModule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowModule3) -}
6d5e854c631208d69c95d024e8982765
  $fShowModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module "#) -}
3ba8513e34f0c686ef2dde5f33d30c8a
  $fShowModule4 ::
    GHC.Show.Show [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fShowDeclarationRef) -}
7cf4b96f7d4b51b446726a099ab87bb6
  $fShowModule_$cshow ::
    Language.PureScript.AST.Declarations.Module -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Module) ->
                 Language.PureScript.AST.Declarations.$fShowModule_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7cf4b96f7d4b51b446726a099ab87bb6
  $fShowModule_$cshowList ::
    [Language.PureScript.AST.Declarations.Module] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Module])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Module
                   Language.PureScript.AST.Declarations.$fShowModule1
                   ls
                   s) -}
7cf4b96f7d4b51b446726a099ab87bb6
  $fShowModule_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Module -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.Module ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec9
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathNode ::
    GHC.Show.Show t =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshow @ t v)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowList
                     @ t
                     v) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathNode_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.AST.Declarations.PathNode t -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   ($dShow1 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t) ->
                 Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                   @ t
                   $dShow1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathNode_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.AST.Declarations.PathNode t] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow1 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.PathNode t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                      @ t
                      $dShow1
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathNode_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   (w :: GHC.Show.Show t)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec10
                   @ t
                   w
                   ww1
                   w2 }) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathTree ::
    GHC.Show.Show t =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshow @ t v)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowList
                     @ t
                     v) -}
21b7520bd7c3fdb33202cb724ce83de2
  $fShowPathTree1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowPathTree2) -}
f7b220c7ce66ffc5e55f8d642dbfba92
  $fShowPathTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathTree "#) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathTree_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.AST.Declarations.PathTree t -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   ($dShow1 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.PathTree t) ->
                 Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                   @ t
                   $dShow1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathTree_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.AST.Declarations.PathTree t] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow1 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.PathTree t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.PathTree t)
                   (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                      @ t
                      $dShow1
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fShowPathTree_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.PathTree t
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ t ($dShow1 :: GHC.Show.Show t) ->
                 let {
                   $dShow2 :: GHC.Show.Show
                                (Language.PureScript.AST.Declarations.PathNode t)
                   = Language.PureScript.AST.Declarations.$fShowPathNode @ t $dShow1
                 } in
                 \ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.AST.Declarations.PathTree t)
                   (eta :: GHC.Base.String) ->
                 case a of wild { GHC.Types.I# x ->
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowPathTree1
                        (Language.PureScript.AST.Declarations.$w$cshowsPrec
                           @ Language.PureScript.PSString.PSString
                           @ (Language.PureScript.AST.Declarations.PathNode t)
                           Language.PureScript.PSString.$fShowPSString
                           $dShow2
                           11#
                           ds
                             `cast`
                           (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                           eta)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowPathTree1
                           (Language.PureScript.AST.Declarations.$w$cshowsPrec
                              @ Language.PureScript.PSString.PSString
                              @ (Language.PureScript.AST.Declarations.PathNode t)
                              Language.PureScript.PSString.$fShowPSString
                              $dShow2
                              11#
                              ds
                                `cast`
                              (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }) -}
33c1a345bb3f2be69a13531f80c78fbd
  $fShowSimpleErrorMessage ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.SimpleErrorMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.SimpleErrorMessage
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                  Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage_$cshow
                  Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage_$cshowList -}
33c1a345bb3f2be69a13531f80c78fbd
  $fShowSimpleErrorMessage1 ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
33c1a345bb3f2be69a13531f80c78fbd
  $fShowSimpleErrorMessage_$cshow ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
33c1a345bb3f2be69a13531f80c78fbd
  $fShowSimpleErrorMessage_$cshowList ::
    [Language.PureScript.AST.Declarations.SimpleErrorMessage]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.SimpleErrorMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.SimpleErrorMessage
                   Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage1
                   ls
                   s) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fShowTypeDeclarationData ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.TypeDeclarationData
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeDeclarationData
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowList -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fShowTypeDeclarationData1 ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeDeclarationData ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec11
                   0#
                   ww5
                   ww6
                   ww2
                   ww3 } }) -}
55691af3b8dc887fb61ae29fa4c2ba20
  $fShowTypeDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclType = "#) -}
63f4f8e499480cc544d56c42f566e4cf
  $fShowTypeDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclIdent = "#) -}
dc82171feb47b3b4cb81dd4f8d9fc94f
  $fShowTypeDeclarationData4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclSourceAnn = "#) -}
491c6d3b0fc1f07d77f832812c9279e7
  $fShowTypeDeclarationData5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeDeclarationData {"#) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fShowTypeDeclarationData_$cshow ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fShowTypeDeclarationData_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeDeclarationData]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeDeclarationData])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeDeclarationData
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData1
                   ls
                   s) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  $fShowTypeDeclarationData_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.TypeDeclarationData ww3 ww4 ww5 ->
                 case ww3 of ww6 { (,) ww7 ww8 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec11
                   ww1
                   ww7
                   ww8
                   ww4
                   ww5 } } }) -}
0d8e4197926d6b0160725c9c154c1438
  $fShowTypeFixity ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowList -}
0d8e4197926d6b0160725c9c154c1438
  $fShowTypeFixity1 ::
    Language.PureScript.AST.Declarations.TypeFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec12
                   0#
                   ww1
                   ww2
                   ww3 }) -}
1ad543acc7af375a530ab707145b78ab
  $fShowTypeFixity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeFixity3) -}
6ac958c17d128338f81bab4f1a749f5b
  $fShowTypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeFixity "#) -}
0d8e4197926d6b0160725c9c154c1438
  $fShowTypeFixity_$cshow ::
    Language.PureScript.AST.Declarations.TypeFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0d8e4197926d6b0160725c9c154c1438
  $fShowTypeFixity_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeFixity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeFixity
                   Language.PureScript.AST.Declarations.$fShowTypeFixity1
                   ls
                   s) -}
0d8e4197926d6b0160725c9c154c1438
  $fShowTypeFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.TypeFixity ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec12
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowTypeInstanceBody ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeInstanceBody
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeInstanceBody
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowList -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowTypeInstanceBody1 ::
    Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
d9ad90f87d704b8a08f38501f9ae6748
  $fShowTypeInstanceBody10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody11) -}
cd41bbbef038be3a9bfb31956b0efdf2
  $fShowTypeInstanceBody11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DerivedInstance"#) -}
94fc047a5fa4d5227e36220b2439360b
  $fShowTypeInstanceBody2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody3) -}
3b41ac69cd86851cc5e2a3b8666ec1d9
  $fShowTypeInstanceBody3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExplicitInstance "#) -}
d67c09c2fe8d9ab2532f53d113e324dd
  $fShowTypeInstanceBody4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody5) -}
97672b731969f364bfa5ff2a92450470
  $fShowTypeInstanceBody5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeInstanceWithDictionary "#) -}
77365842593c82b12416cd49a73684ce
  $fShowTypeInstanceBody6 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody7) -}
27dd204e2b8c0db362847f8d0b9153f1
  $fShowTypeInstanceBody7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody8) -}
d2b138a041f3bead793647419c09fa4f
  $fShowTypeInstanceBody8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeInstance"#) -}
404495ad7ec5fc23080dec2fec095564
  $fShowTypeInstanceBody9 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody10) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowTypeInstanceBody_$cshow ::
    Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowTypeInstanceBody_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeInstanceBody]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeInstanceBody])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeInstanceBody
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody1
                   ls
                   s) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $fShowTypeInstanceBody_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case ds1 of wild {
                   Language.PureScript.AST.Declarations.DerivedInstance
                   -> Language.PureScript.AST.Declarations.$fShowTypeInstanceBody9
                   Language.PureScript.AST.Declarations.NewtypeInstance
                   -> Language.PureScript.AST.Declarations.$fShowTypeInstanceBody6
                   Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowTypeInstanceBody4
                             (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowTypeInstanceBody4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.AST.Declarations.ExplicitInstance b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowTypeInstanceBody2
                             (case b1 of wild2 {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x1
                                : x2 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                        0#
                                        x2
                                        (let {
                                           lvl279 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x1
                                         } in
                                         letrec {
                                           showl :: [Language.PureScript.AST.Declarations.Declaration]
                                                    -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                             case ds2 of wild3 {
                                               [] -> lvl279
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                                       0#
                                                       y
                                                       (showl ys)) }
                                         } in
                                         showl xs)) })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowTypeInstanceBody2
                                (let {
                                   s :: GHC.Base.String
                                   = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1
                                 } in
                                 case b1 of wild2 {
                                   [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                                   : x2 xs
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__3
                                        (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                           0#
                                           x2
                                           (let {
                                              lvl279 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                            } in
                                            letrec {
                                              showl :: [Language.PureScript.AST.Declarations.Declaration]
                                                       -> GHC.Base.String
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ (ds2 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                case ds2 of wild3 {
                                                  [] -> lvl279
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                                          0#
                                                          y
                                                          (showl ys)) }
                                            } in
                                            showl xs)) })) } } }) -}
9f93487d1a91f557ef94e379878c19dd
  $fShowTypeSearch ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeSearch
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeSearch
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowList -}
9f93487d1a91f557ef94e379878c19dd
  $fShowTypeSearch1 ::
    Language.PureScript.AST.Declarations.TypeSearch -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec13 0# w) -}
9f93487d1a91f557ef94e379878c19dd
  $fShowTypeSearch_$cshow ::
    Language.PureScript.AST.Declarations.TypeSearch -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9f93487d1a91f557ef94e379878c19dd
  $fShowTypeSearch_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeSearch] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeSearch])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeSearch
                   Language.PureScript.AST.Declarations.$fShowTypeSearch1
                   ls
                   s) -}
9f93487d1a91f557ef94e379878c19dd
  $fShowTypeSearch_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec13 ww1 w1 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fShowValueDeclarationData ::
    GHC.Show.Show a =>
    GHC.Show.Show
      (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshow
                     @ a
                     v)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowList
                     @ a
                     v) -}
0c2d915175f1072d8eeca07af2b73e20
  $fShowValueDeclarationData_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(SSSSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Language.PureScript.AST.Declarations.ValueDeclarationData
                           a) ->
                 Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                   @ a
                   $dShow1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c2d915175f1072d8eeca07af2b73e20
  $fShowValueDeclarationData_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.AST.Declarations.ValueDeclarationData a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow1 :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.AST.Declarations.ValueDeclarationData
                             a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                      @ a
                      $dShow1
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
0c2d915175f1072d8eeca07af2b73e20
  $fShowValueDeclarationData_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S(SSSSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.AST.Declarations.ValueDeclarationData ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { (,) ww9 ww10 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec14
                   @ a
                   w
                   ww1
                   ww9
                   ww10
                   ww4
                   ww5
                   ww6
                   ww7 } } }) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fShowValueFixity ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshow
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowList -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fShowValueFixity1 ::
    Language.PureScript.AST.Declarations.ValueFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec15
                   0#
                   ww1
                   ww2
                   ww3 }) -}
961e800c68f8b954be986cc0b9e06d30
  $fShowValueFixity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowValueFixity3) -}
1172127cec846f2dc3a8d0759a745d42
  $fShowValueFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueFixity "#) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fShowValueFixity_$cshow ::
    Language.PureScript.AST.Declarations.ValueFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fShowValueFixity_$cshowList ::
    [Language.PureScript.AST.Declarations.ValueFixity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ValueFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ValueFixity
                   Language.PureScript.AST.Declarations.$fShowValueFixity1
                   ls
                   s) -}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  $fShowValueFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.ValueFixity ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec15
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
3fdd563d54764090525e0b0257d09016
  $fShowValueFixity_$s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Language.PureScript.Names.$fShowProperName_$cshowsPrec
                             @ 'Language.PureScript.Names.ConstructorName
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
65c0e50d69c9739c7a05491cae312524
  $fShowWhereProvenance ::
    GHC.Show.Show Language.PureScript.AST.Declarations.WhereProvenance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.WhereProvenance
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshow
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshowList -}
65c0e50d69c9739c7a05491cae312524
  $fShowWhereProvenance1 ::
    Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.WhereProvenance)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance4)
                        eta
                   Language.PureScript.AST.Declarations.FromLet
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance2)
                        eta }) -}
9ce0984cb4fea89c8a575eb04a7c68b5
  $fShowWhereProvenance2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance3) -}
7b74aa5e19ff59a009f29507e1dddb7d
  $fShowWhereProvenance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromLet"#) -}
985ada01ac3e7da4550332cf813e8d35
  $fShowWhereProvenance4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance5) -}
d3171ebd672913b367386c760ea61f4c
  $fShowWhereProvenance5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromWhere"#) -}
65c0e50d69c9739c7a05491cae312524
  $fShowWhereProvenance_$cshow ::
    Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.WhereProvenance) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> Language.PureScript.AST.Declarations.$fShowWhereProvenance4
                   Language.PureScript.AST.Declarations.FromLet
                   -> Language.PureScript.AST.Declarations.$fShowWhereProvenance2 }) -}
65c0e50d69c9739c7a05491cae312524
  $fShowWhereProvenance_$cshowList ::
    [Language.PureScript.AST.Declarations.WhereProvenance]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.WhereProvenance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.WhereProvenance
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance1
                   ls
                   s) -}
65c0e50d69c9739c7a05491cae312524
  $fShowWhereProvenance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.AST.Declarations.WhereProvenance)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance4)
                        eta
                   Language.PureScript.AST.Declarations.FromLet
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance2)
                        eta }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fToJSONDeclarationRef ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncoding
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSONList
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncodingList -}
9de74e8b46bfd07e044a72617cc5da5c
  $fToJSONDeclarationRef_$ctoEncoding ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
9de74e8b46bfd07e044a72617cc5da5c
  $fToJSONDeclarationRef_$ctoEncodingList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncoding) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fToJSONDeclarationRef_$ctoJSON ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case Language.PureScript.AST.Declarations.$w$ctoJSON
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $fToJSONDeclarationRef_$ctoJSONList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.DeclarationRef
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.AST.Declarations.DeclarationRef
                                     c
                                     Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON)
                                  n1
                                  x)))))) -}
f900e8c96b49d573d3e54286bc8fd980
  $fToJSONImportDeclarationType ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSON
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncoding
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSONList
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncodingList -}
ebf8c47cb9a05cde79fe20b3b58293c3
  $fToJSONImportDeclarationType1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType2 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
d3501fcd4f514089e6ff92b460497f6c
  $fToJSONImportDeclarationType10 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType11
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
3e651ddd2dca24429967452554564323
  $fToJSONImportDeclarationType11 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType13,
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType12)) -}
700fcd008a1af72bf8573bb515a5fb88
  $fToJSONImportDeclarationType12 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                ipv of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              0#
                              ipv3 #) } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
7f3292390196edde9814b8ffb75f8b60
  $fToJSONImportDeclarationType13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType14 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
907d1a3236e5c824b072b8b02c4330cf
  $fToJSONImportDeclarationType14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType15
                   0#
                   ipv1 }) -}
5743be7694f812e8d1b305f7dcb5bc0d
  $fToJSONImportDeclarationType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType16) -}
80c3f48ae4f0b2e3d40b3db404cdaaee
  $fToJSONImportDeclarationType16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Implicit"#) -}
ab78b0663fafc99ff9fda6f1b644f100
  $fToJSONImportDeclarationType2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType3
                   0#
                   ipv1 }) -}
fb763a701019b1742bac87b154dd3573
  $fToJSONImportDeclarationType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType4) -}
c048ed070e6a8d7819bda35f6006d8be
  $fToJSONImportDeclarationType4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hiding"#) -}
e47a05399078d7d477d184cf71f9ceaf
  $fToJSONImportDeclarationType5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType6 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
8267235f995c5325581fabd43ccff053
  $fToJSONImportDeclarationType6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType7
                   0#
                   ipv1 }) -}
31adfa2517dbbc1c14a084e545a5ff0d
  $fToJSONImportDeclarationType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType8) -}
84a2a04c0d00484d116c59b8e8edc520
  $fToJSONImportDeclarationType8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Explicit"#) -}
8fb6c1522b4e10dd6d9bc51a38d48a05
  $fToJSONImportDeclarationType9 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType10
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
f900e8c96b49d573d3e54286bc8fd980
  $fToJSONImportDeclarationType_$ctoEncoding ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
f900e8c96b49d573d3e54286bc8fd980
  $fToJSONImportDeclarationType_$ctoEncodingList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.AST.Declarations.ImportDeclarationType
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncoding) -}
f900e8c96b49d573d3e54286bc8fd980
  $fToJSONImportDeclarationType_$ctoJSON ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case value of wild {
                   Language.PureScript.AST.Declarations.Implicit
                   -> Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType9
                   Language.PureScript.AST.Declarations.Explicit arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType5,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$s$wfoldlM_loop
                                      ipv
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      (GHC.Base.map
                                         @ Language.PureScript.AST.Declarations.DeclarationRef
                                         @ Data.Aeson.Types.Internal.Value
                                         Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                                         arg1)
                                      0#
                                      ipv1
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N)
                                         <Data.Aeson.Types.Internal.Value>_R)_R
                                      0#
                                      0# }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.AST.Declarations.Hiding arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType1,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$s$wfoldlM_loop
                                      ipv
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      (GHC.Base.map
                                         @ Language.PureScript.AST.Declarations.DeclarationRef
                                         @ Data.Aeson.Types.Internal.Value
                                         Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                                         arg1)
                                      0#
                                      ipv1
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N)
                                         <Data.Aeson.Types.Internal.Value>_R)_R
                                      0#
                                      0# }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) }) -}
f900e8c96b49d573d3e54286bc8fd980
  $fToJSONImportDeclarationType_$ctoJSONList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.AST.Declarations.ImportDeclarationType]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.AST.Declarations.ImportDeclarationType
                                     c
                                     Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSON)
                                  n1
                                  x)))))) -}
cb740574b27ff76ea81522a60572cbd0
  $fToJSONImportDeclarationType_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
6bb793796adb411b63074cabb1cd2dc5
  $fTraversableAssocList ::
    Data.Traversable.Traversable
      (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$csequenceA
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$cmapM
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$csequence
                     @ k) -}
997992824875f3fa6e650b0cdb57e848
  $fTraversableAssocList1 :: [(k, b)] -> [(k, b)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k @ b (b1 :: [(k, b)]) -> b1) -}
6bb793796adb411b63074cabb1cd2dc5
  $fTraversableAssocList_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> m (Language.PureScript.AST.Declarations.AssocList k b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
6bb793796adb411b63074cabb1cd2dc5
  $fTraversableAssocList_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.AssocList k (m a)
    -> m (Language.PureScript.AST.Declarations.AssocList k a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fTraversableAssocList_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.AssocList k (f a)
    -> f (Language.PureScript.AST.Declarations.AssocList k a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k
                   @ f156 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f156) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ f156
                   @ (f156 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f156 a))) -}
6bb793796adb411b63074cabb1cd2dc5
  $fTraversableAssocList_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> f (Language.PureScript.AST.Declarations.AssocList k b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A)><L,C(U)><L,1*U>,
     Unfolding: (\ @ k
                   @ f156 :: * -> *
                   @ a
                   @ b
                   ($dApplicative :: GHC.Base.Applicative f156)
                   (eta :: a -> f156 b)
                   (eta1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f156
                   = GHC.Base.$p1Applicative @ f156 $dApplicative
                 } in
                 GHC.Base.fmap
                   @ f156
                   $dFunctor
                   @ [(k, b)]
                   @ (Language.PureScript.AST.Declarations.AssocList k b)
                   (Language.PureScript.AST.Declarations.$fTraversableAssocList1
                      @ k
                      @ b)
                     `cast`
                   (<[(k, b)]>_R
                    ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <k>_R <b>_R))
                   (let {
                      z2 :: f156 [(k, b)]
                      = GHC.Base.pure
                          @ f156
                          $dApplicative
                          @ [(k, b)]
                          (GHC.Types.[] @ (k, b))
                    } in
                    letrec {
                      go6 :: [(k, a)] -> f156 [(k, b)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(k, a)]) ->
                        case ds of wild {
                          [] -> z2
                          : y ys
                          -> GHC.Base.liftA2
                               @ f156
                               $dApplicative
                               @ (k, b)
                               @ [(k, b)]
                               @ [(k, b)]
                               (GHC.Types.: @ (k, b))
                               (case y of wild1 { (,) a1 a2 ->
                                GHC.Base.fmap
                                  @ f156
                                  $dFunctor
                                  @ b
                                  @ (k, b)
                                  (\ (b2 :: b) -> (a1, b2))
                                  (eta a2) })
                               (go6 ys) }
                    } in
                    go6
                      eta1
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <a>_R))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathNode ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFunctorPathNode
                  Language.PureScript.AST.Declarations.$fFoldablePathNode
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$csequence -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathNode_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> m (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathNode_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.PathNode (m a)
    -> m (Language.PureScript.AST.Declarations.PathNode a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathNode_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.PathNode (f a)
    -> f (Language.PureScript.AST.Declarations.PathNode a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f156 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f156) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ f156
                   @ (f156 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f156 a))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathNode_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> f (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,C(U)><S,1*U> -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFunctorPathTree
                  Language.PureScript.AST.Declarations.$fFoldablePathTree
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$csequence -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree1 ::
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode b)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ b
                   (b1 :: Language.PureScript.AST.Declarations.AssocList
                            Language.PureScript.PSString.PSString
                            (Language.PureScript.AST.Declarations.PathNode b)) ->
                 b1) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> m (Language.PureScript.AST.Declarations.PathTree b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.PathTree (m a)
    -> m (Language.PureScript.AST.Declarations.PathTree a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.PathTree (f a)
    -> f (Language.PureScript.AST.Declarations.PathTree a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f156 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f156) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ f156
                   @ (f156 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f156 a))) -}
927a4a1acceccbe5ab77b4ee8603376a
  $fTraversablePathTree_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> f (Language.PureScript.AST.Declarations.PathTree b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,C(U)><L,1*U>,
     Unfolding: (\ @ f156 :: * -> *
                   @ a
                   @ b
                   ($dApplicative :: GHC.Base.Applicative f156)
                   (eta :: a -> f156 b)
                   (eta1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 GHC.Base.fmap
                   @ f156
                   (GHC.Base.$p1Applicative @ f156 $dApplicative)
                   @ (Language.PureScript.AST.Declarations.AssocList
                        Language.PureScript.PSString.PSString
                        (Language.PureScript.AST.Declarations.PathNode b))
                   @ (Language.PureScript.AST.Declarations.PathTree b)
                   (Language.PureScript.AST.Declarations.$fTraversablePathTree1 @ b)
                     `cast`
                   (<Language.PureScript.AST.Declarations.AssocList
                       Language.PureScript.PSString.PSString
                       (Language.PureScript.AST.Declarations.PathNode b)>_R
                    ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                  <b>_R))
                   (Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                      @ Language.PureScript.PSString.PSString
                      @ f156
                      @ (Language.PureScript.AST.Declarations.PathNode a)
                      @ (Language.PureScript.AST.Declarations.PathNode b)
                      $dApplicative
                      (Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                         @ f156
                         @ a
                         @ b
                         $dApplicative
                         eta)
                      eta1
                        `cast`
                      (Language.PureScript.AST.Declarations.N:PathTree[0] <a>_R))) -}
0c2d915175f1072d8eeca07af2b73e20
  $fTraversableValueDeclarationData ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$csequence -}
0c2d915175f1072d8eeca07af2b73e20
  $fTraversableValueDeclarationData_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> m (Language.PureScript.AST.Declarations.ValueDeclarationData b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><L,1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
0c2d915175f1072d8eeca07af2b73e20
  $fTraversableValueDeclarationData_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.ValueDeclarationData (m a)
    -> m (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             (m a)) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m $dApplicative)
                   @ a
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (\ (b5 :: a) ->
                    Language.PureScript.AST.Declarations.$WValueDeclarationData
                      @ a
                      a1
                      a2
                      a3
                      a4
                      b5)
                   a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fTraversableValueDeclarationData_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.ValueDeclarationData (f a)
    -> f (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f156 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f156)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             (f156 a)) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Base.fmap
                   @ f156
                   (GHC.Base.$p1Applicative @ f156 $dApplicative)
                   @ a
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (\ (b5 :: a) ->
                    Language.PureScript.AST.Declarations.$WValueDeclarationData
                      @ a
                      a1
                      a2
                      a3
                      a4
                      b5)
                   a5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  $fTraversableValueDeclarationData_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> f (Language.PureScript.AST.Declarations.ValueDeclarationData b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f156 :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f156)
                   (w1 :: a -> f156 b)
                   (w2 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.ValueDeclarationData ww1 ww2 ww3 ww4 ww5 ->
                 GHC.Base.fmap
                   @ f156
                   (GHC.Base.$p1Applicative @ f156 w)
                   @ b
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData b)
                   (\ (b5 :: b) ->
                    case b5 of dt { DEFAULT ->
                    Language.PureScript.AST.Declarations.ValueDeclarationData
                      @ b
                      ww1
                      ww2
                      ww3
                      ww4
                      dt })
                   (w1 ww5) }) -}
bf1f45a01cc4ac8e7c3103a5eb461794
  $mMkUnguarded ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.GuardedExpr
    -> (Language.PureScript.AST.Declarations.Expr -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U)><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.GuardedExpr)
                   (cont :: Language.PureScript.AST.Declarations.Expr -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild { Language.PureScript.AST.Declarations.GuardedExpr ds e ->
                 case ds of wild1 {
                   [] -> cont e : ipv ipv1 -> fail GHC.Prim.void# } }) -}
7df7a4820a38eed0b802bd3274e56ad7
  $mTypeFixityDeclaration ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.AST.Operators.Fixity
        -> Language.PureScript.Names.Qualified
             (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)
        -> Language.PureScript.Names.OpName
             'Language.PureScript.Names.TypeOpName
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(U))))><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.AST.Operators.Fixity
                            -> Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
                            -> Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.FixityDeclaration sa ds
                   -> case ds of wild1 {
                        Data.Either.Left ipv -> fail GHC.Prim.void#
                        Data.Either.Right ds1
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.TypeFixity fixity name op ->
                           cont sa fixity name op } } }) -}
31652ca89429b5477d90fdeb090250a3
  $mValueDecl ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.Names.Ident
        -> Language.PureScript.Environment.NameKind
        -> [Language.PureScript.AST.Binders.Binder]
        -> [Language.PureScript.AST.Declarations.GuardedExpr]
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(C1(U)))))><L,1*C1(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.Names.Ident
                            -> Language.PureScript.Environment.NameKind
                            -> [Language.PureScript.AST.Binders.Binder]
                            -> [Language.PureScript.AST.Declarations.GuardedExpr]
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> cont dt dt1 dt2 dt3 dt4 }) -}
1e90172022e899483b2063e7e94d2acf
  $mValueFixityDeclaration ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.AST.Operators.Fixity
        -> Language.PureScript.Names.Qualified
             (Data.Either.Either
                Language.PureScript.Names.Ident
                (Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ConstructorName))
        -> Language.PureScript.Names.OpName
             'Language.PureScript.Names.ValueOpName
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(U))))><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.AST.Operators.Fixity
                            -> Language.PureScript.Names.Qualified
                                 (Data.Either.Either
                                    Language.PureScript.Names.Ident
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName))
                            -> Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.FixityDeclaration sa ds
                   -> case ds of wild1 {
                        Data.Either.Left ds1
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.ValueFixity fixity name op ->
                           cont sa fixity name op }
                        Data.Either.Right ipv -> fail GHC.Prim.void# } }) -}
097a51736ab8673f490febcd8157e48d
  $s$fShow(,)1 ::
    GHC.Show.Show
      (Language.PureScript.Names.Ident, Language.PureScript.Types.Type)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Ident, Language.PureScript.Types.Type)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Types.$fShowType)
                  (\ (x :: (Language.PureScript.Names.Ident,
                            Language.PureScript.Types.Type)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Types.$fShowType
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Ident, Language.PureScript.Types.Type)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Types.$fShowType
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
bc7a0a5ba05237cfdba9d5d9e118eafb
  $s$fShow(,)2 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName),
       Language.PureScript.AST.Operators.Associativity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName),
                     Language.PureScript.AST.Operators.Associativity)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                     Language.PureScript.AST.Operators.$fShowAssociativity)
                  (\ (x :: (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.AnyOpName),
                            Language.PureScript.AST.Operators.Associativity)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                     Language.PureScript.AST.Operators.$fShowAssociativity
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.AnyOpName),
                              Language.PureScript.AST.Operators.Associativity)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName),
                        Language.PureScript.AST.Operators.Associativity)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName))
                        @ Language.PureScript.AST.Operators.Associativity
                        Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                        Language.PureScript.AST.Operators.$fShowAssociativity
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
1d15ac2901fcb3e5e9b8ba310988f2c8
  $s$fShow(,)3 ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
b095308addd094904525d7f9ed266f95
  $s$fShow(,)_$cshow1 ::
    (Language.PureScript.Names.Ident, Language.PureScript.Types.Type)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (Language.PureScript.Names.Ident,
                          Language.PureScript.Types.Type)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ Language.PureScript.Types.Type
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.Types.$fShowType
                   GHC.Show.$fShow(,)1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b8730b3daf9d89ce37ca81300032658f
  $s$fShow(,)_$cshowList1 ::
    [(Language.PureScript.Names.Ident, Language.PureScript.Types.Type)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [(Language.PureScript.Names.Ident,
                            Language.PureScript.Types.Type)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Ident, Language.PureScript.Types.Type)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Types.Type
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Types.$fShowType
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
ab82531ada7061b0ccb09eeb8d43bfd2
  $s$fShow(,)_$cshowsPrec5 ::
    GHC.Types.Int
    -> (Language.PureScript.Names.Ident,
        Language.PureScript.Types.Type)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,1*U)><L,U>m2, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: (Language.PureScript.Names.Ident,
                           Language.PureScript.Types.Type))
                   (w4 :: GHC.Base.String) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                      GHC.Show.$fShow(,)1
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                               GHC.Show.$fShow(,)1
                               ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
b0b43282d15ea7d320f738fb0f34eb48
  $s$fShow(,)_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.AnyOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.AnyOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.AnyOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.AnyOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
d3adecaab031dd753c50692e694d3d0e
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
23ad21711b2732cd51592fdb4415287c
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       Language.PureScript.Names.Ident
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
490c0b037140b43e5cd08406c3e66e09
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.$fShowIdent
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   w3 }) -}
0bc8d2533625dbc6a272684b35553bd5
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)))
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope)
                  (\ (x :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident))) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)
                               (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                  (Language.PureScript.Names.Qualified
                                     Language.PureScript.Names.Ident))])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                          (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)))
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident))
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
76d9cde6c29b0865b07337e4331e75d5
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                           (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident))) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
01e85e0f58d277263469a0d3457c5807
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          Language.PureScript.Names.Ident)
       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident))]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident))])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)))
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident))
                      Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                      Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
4c9d101ee062f16f63290da50a6bea37
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident))
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident))) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                   ww1
                   w3 }) -}
ccef525178aca4e91126df753bee13ba
  $s$fShowMap_$cshowsPrec2 ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Unfolding: (Data.Map.Internal.$fShowMap
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        Language.PureScript.TypeClassDictionaries.NamedDict)
                   Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap) -}
4cb35040361e546bb5ff8748910f379f
  $s$fShowMap_$cshowsPrec_$s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fShowModuleName)
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe Language.PureScript.Names.ModuleName])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Names.$fShowModuleName
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
d67740bbf225315b9578c2e5c9a431a0
  $s$fShowMap_$cshowsPrec_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
734913d52617ac087b44c894f66ca119
  $s$fShowMap_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent)
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
9f4fb7891daf883462c455bbff840546
  $s$fShowMap_$s$fShowTypeClassDictionaryInScope ::
    GHC.Show.Show
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident))
                  (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified)
                  (\ (x :: Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)) ->
                   Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1)
                     ls
                     s) -}
74f9cd68085381608abd8700b42dbea0
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe Language.PureScript.Names.ModuleName]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe Language.PureScript.Names.ModuleName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Language.PureScript.Names.ModuleName
                      Language.PureScript.Names.$fShowModuleName
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
9f1227cf446be57bd0a2c825b76bbaf3
  $s$fShowNonEmpty_$cshowsPrec7 ::
    GHC.Show.Show
      ((Language.PureScript.AST.SourcePos.SourceAnn,
        Language.PureScript.Names.Ident),
       Language.PureScript.Environment.NameKind,
       Language.PureScript.AST.Declarations.Expr)
  {- Unfolding: (GHC.Show.$fShow(,,)
                   @ (Language.PureScript.AST.SourcePos.SourceAnn,
                      Language.PureScript.Names.Ident)
                   @ Language.PureScript.Environment.NameKind
                   @ Language.PureScript.AST.Declarations.Expr
                   Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowsPrec8
                   Language.PureScript.Environment.$fShowNameKind
                   Language.PureScript.AST.Declarations.$fShowExpr) -}
0cb5a9a5dcf7643aa577f8f450deacc7
  $s$fShowNonEmpty_$cshowsPrec8 ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceAnn,
       Language.PureScript.Names.Ident)
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.AST.Declarations.$s$fShow(,)3
                   Language.PureScript.Names.$fShowIdent) -}
255e5181d823424c8a06527e34ffb1df
  $s$fShowQualified_$cshowList1 ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
99381ab433ba2a611847591a91b978b3
  $s$fShowQualified_$cshowList2 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ClassName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
277c6ffe1a64d1d5135d6a893de11afe
  $s$fShowQualified_$cshowList3 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.AnyOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.AnyOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.AnyOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.AnyOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
2f0a9161803143c18923a3c5609217fa
  $s$fShowQualified_$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent
                   ww1
                   ww3
                   ww4 } }) -}
42a0085e8c6399c349605b1ddc3139d6
  $s$fShowQualified_$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ClassName)
                   ww1
                   ww3
                   ww4 } }) -}
479fe0c0b63b3ed2f7fdfff3e721c9fe
  $s$fShowQualified_$cshowsPrec7 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.AnyOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.AnyOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.AnyOpName)
                   ww1
                   ww3
                   ww4 } }) -}
0c01ed0da29f04779880d9e5515356a7
  $s$fShow[] ::
    GHC.Show.Show
      [(Language.PureScript.Label.Label, Language.PureScript.Types.Type)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Language.PureScript.Label.Label,
                      Language.PureScript.Types.Type)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(Language.PureScript.Label.Label,
                              Language.PureScript.Types.Type)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Label.Label
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Label.$fShowLabel
                        Language.PureScript.Types.$fShowType
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(Language.PureScript.Label.Label,
                             Language.PureScript.Types.Type)]) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Label.Label
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Label.$fShowLabel
                        Language.PureScript.Types.$fShowType
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(Language.PureScript.Label.Label,
                               Language.PureScript.Types.Type)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(Language.PureScript.Label.Label,
                         Language.PureScript.Types.Type)]
                     (\ (ls1 :: [(Language.PureScript.Label.Label,
                                  Language.PureScript.Types.Type)])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ Language.PureScript.Label.Label
                           @ Language.PureScript.Types.Type
                           Language.PureScript.Label.$fShowLabel
                           Language.PureScript.Types.$fShowType
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
b7fa8fa58b6ab534b0cf8aae4b7b73d3
  $s$fShow[]1 ::
    GHC.Show.Show
      [Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Names.$fShowProperName_$cshowList
                     @ 'Language.PureScript.Names.ConstructorName)
                  (\ (x :: [Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName1
                        @ 'Language.PureScript.Names.ConstructorName)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     (Language.PureScript.Names.$fShowProperName_$cshowList
                        @ 'Language.PureScript.Names.ConstructorName)
                     ls
                     s) -}
f3efac5cfb3afd7830c9e0d54eaccc32
  $s$fShow[]_$cshow1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName]) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName1
                      @ 'Language.PureScript.Names.ConstructorName)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63fbcbbf5091ae450d47fa4d848cc1ab
  $s$fShow[]_$cshow2 ::
    [Language.PureScript.Comments.Comment] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dc013eeb94ee2672d2432e94aa66ce4e
  $s$fShow[]_$cshowList1 ::
    [[Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName]
                   (Language.PureScript.Names.$fShowProperName_$cshowList
                      @ 'Language.PureScript.Names.ConstructorName)
                   ls
                   s) -}
2e9047427a520ca8b07c219d7c8786df
  $s$fShow[]_$cshowList2 ::
    [[Language.PureScript.Comments.Comment]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Comments.Comment]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Comments.Comment]
                   Language.PureScript.Comments.$fShowComment_$cshowList
                   ls
                   s) -}
221ea57acfc74ebaa457a10d2a2203cc
  $sconcatMap :: (a -> [b]) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (f156 :: a -> [b]) (xs :: [a]) ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 (c :: b -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (\ (x :: a) (b2 :: b1)[OneShot] ->
                       GHC.Base.foldr @ b @ b1 c b2 (f156 x))
                      n
                      xs)) -}
cfa4edf175c8ac9e236fe55facbdcfcc
  $tc'Abs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7070516931400982432##
                   4265703991486155396##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Abs2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Abs1) -}
d286fe3f16b7c452fc51362ba94cdc6f
  $tc'Abs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0a932c9fee1528a9fb020a4d3d6d06f
  $tc'Abs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Abs3) -}
1c81b34ce08e847fa6f41743c8f7867d
  $tc'Abs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Abs"#) -}
ed5a2f0d64fc1883a385afd20d24f134
  $tc'Accessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8014354749142548595##
                   2114646690603754664##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Accessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Accessor1) -}
4db2d31529e2e6d22e1b7fdd63ac8d35
  $tc'Accessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f543fc80b501f5951e19e25564670634
  $tc'Accessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Accessor3) -}
f44d9fdb256ea0df187be9efba869f83
  $tc'Accessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Accessor"#) -}
574f34fc21f4b18845c5075c1e160d5d
  $tc'AdditionalProperty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13451072205649921196##
                   12130260255851288169##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty1) -}
ddda2dbda49cfb7137b3cb31f9ed1ffc
  $tc'AdditionalProperty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9dba9b53b6b14d74c8fc6feda770b6c7
  $tc'AdditionalProperty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty3) -}
ecbfe624b09623ffec5a520e72490ae5
  $tc'AdditionalProperty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AdditionalProperty"#) -}
69780760148b621027220a99bb0c3821
  $tc'Ado :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6176724632873291332##
                   15823923990102450691##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Ado2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Ado1) -}
44c3c80cc1b8fd5493a50b8a727b821b
  $tc'Ado1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eb4952b9bc4a81aa853793ccf0e078b2
  $tc'Ado2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Ado3) -}
3047e55c11832fdbab1908fca61f8827
  $tc'Ado3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ado"#) -}
4f96598e1fd6e9af57243222ec8dd1af
  $tc'AmbiguousTypeVariables :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5067989852209418995##
                   9866495807531741803##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables1) -}
90f19ba2970043e0a99baf398ede85d4
  $tc'AmbiguousTypeVariables1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a56de937880bc7642c865d5a6720c00
  $tc'AmbiguousTypeVariables2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables3) -}
dabb385c983ece39a2a7bed6be81bca8
  $tc'AmbiguousTypeVariables3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AmbiguousTypeVariables"#) -}
fa60acdd7a30fe972d2c165451a846c9
  $tc'AnonymousArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12188918874799257097##
                   16126644875347819392##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument1) -}
8b111f4355874ed83143397934c86ac7
  $tc'AnonymousArgument1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
197d8168487e2edd91b9500f556835ba
  $tc'AnonymousArgument2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument3) -}
4a9e2b7339ba349047b0b4b2e5ee9862
  $tc'AnonymousArgument3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AnonymousArgument"#) -}
ebb7476017ec3d7e5e01ac6a2d01a1cc
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3642031365294799998##
                   13994078386973169497##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'App2
                   0#
                   Language.PureScript.AST.Declarations.$tc'App1) -}
b473d36250401643a5bc042b8920a89f
  $tc'App1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
683a9eddbb534a62259d162845b0f835
  $tc'App2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'App3) -}
b20d358068e8c09f18fe17eacce3585e
  $tc'App3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'App"#) -}
bce9d6386a09a46a5f31390fc3ab7f3e
  $tc'ArgListLengthsDiffer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9286087577572204307##
                   7039345611995657281##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
62cc1e16d9b5b56a28aca925d708ce53
  $tc'ArgListLengthsDiffer1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
506e56202773aca41676a9fd0b2ead66
  $tc'ArgListLengthsDiffer2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer3) -}
65b5ebcff7147c892d99b0b1ad167f4c
  $tc'ArgListLengthsDiffer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgListLengthsDiffer"#) -}
077336059a5adffffebc3bcf74cab195
  $tc'AssocList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13411487628250171017##
                   11153111092977493100##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AssocList2
                   2#
                   Language.PureScript.AST.Declarations.$tc'AssocList1) -}
0c40209307b452345b76e1948a7921e4
  $tc'AssocList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e58ba84ea1d143543d54a19749231373
  $tc'AssocList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AssocList3) -}
8194be0083f17dc87312746f50310abb
  $tc'AssocList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AssocList"#) -}
4150d91b23e335a85c0133789610946f
  $tc'BinaryNoParens :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10973643769622357930##
                   12518703185354440481##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens1) -}
a1aee20f99e3bde98fe0419d167838ed
  $tc'BinaryNoParens1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb65171410e657fb074a1ebfaf979e70
  $tc'BinaryNoParens2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens3) -}
b4d93408b722c82daed7f364a6b4f05c
  $tc'BinaryNoParens3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryNoParens"#) -}
ffdd9e842355610ad97d8faf00fd47d7
  $tc'BindingGroupDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8416578593331815190##
                   11437619315023451007##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration1) -}
c495fab77e8e7e9964391110ab77a5c9
  $tc'BindingGroupDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1655d8345d2221a6821eb291e529be5c
  $tc'BindingGroupDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration3) -}
4301e4d871e32b9e12f2df3b65cf3210
  $tc'BindingGroupDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BindingGroupDeclaration"#) -}
0108e4673c0f62b9e935172261aef54a
  $tc'BoundValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8987231095190712397##
                   2062787915071091730##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration1) -}
fac0021844cf2cd50a2f35ecc08aa4aa
  $tc'BoundValueDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e449a2aae9f96dbb17689b391d9081c
  $tc'BoundValueDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration3) -}
b067d9ce4fa958c247eca3ccd697261d
  $tc'BoundValueDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoundValueDeclaration"#) -}
46efe2b5462ad39f28e2ced2c4a5bc47
  $tc'Branch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9388893655465433414##
                   6140888273371279295##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Branch2
                   1#
                   Language.PureScript.AST.Declarations.$tc'Branch1) -}
6ec065a7bb2e12717ebf1ae38fe78607
  $tc'Branch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d4bbf7ee6f139d864e28dce85030fc13
  $tc'Branch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Branch3) -}
48e08ee4f0f0794f0ec0e0fe97ad5d35
  $tc'Branch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Branch"#) -}
59cf7c4ec01f6acb8b0ec7ec29aa05eb
  $tc'CannotDefinePrimModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5442972219889411654##
                   10774329685826455054##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
4317d1597721489fad18a6f12772f4f6
  $tc'CannotDefinePrimModules1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
06ecb3284f51687cd3cabda6fe6314bd
  $tc'CannotDefinePrimModules2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules3) -}
f81259efd219f630ec7a754294146e59
  $tc'CannotDefinePrimModules3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDefinePrimModules"#) -}
f85dbbe26b31ebe995e9d0a805efc8c2
  $tc'CannotDerive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15898722815867777226##
                   8391967334926133522##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDerive2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
a12ecac9d28e7b8746ff15d195a5465c
  $tc'CannotDerive1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cffe4d232b3716ef00b4c133f3fb6d88
  $tc'CannotDerive2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDerive3) -}
73cfd95686ee6780bd43918c3cef9249
  $tc'CannotDerive3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDerive"#) -}
0bde75614e9227b611b3a14d5ada6154
  $tc'CannotDeriveNewtypeForData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15519829775492928231##
                   8716875909299708061##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
fcdf2ecb453c13332cb7d2a7cb6411e7
  $tc'CannotDeriveNewtypeForData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d4ab520fecae158964f9c7b47594d4d3
  $tc'CannotDeriveNewtypeForData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData3) -}
0bcdc34191436988031e71724905046f
  $tc'CannotDeriveNewtypeForData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDeriveNewtypeForData"#) -}
6fb448cc445d663f81d70059d9129095
  $tc'CannotFindDerivingType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2442141847387194977##
                   12639218377367387101##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotFindDerivingType1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
a526fdc3ba93fcc7e51a6fa85d46b13d
  $tc'CannotFindDerivingType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotFindDerivingType2) -}
116b0744c399d2d4e417ed4bb67a8812
  $tc'CannotFindDerivingType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotFindDerivingType"#) -}
9dfddc2b75ba4da88050139f4813f07e
  $tc'CannotGeneralizeRecursiveFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6539248942029078137##
                   15901013558984908184##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction1) -}
97a892b7be184f82754315eecd5f94d4
  $tc'CannotGeneralizeRecursiveFunction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c85dec027f2a28902273b6981acc3901
  $tc'CannotGeneralizeRecursiveFunction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction3) -}
daabb2fff0411d23829c49c7f2a8fb6e
  $tc'CannotGeneralizeRecursiveFunction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'CannotGeneralizeRecursiveFunction"#) -}
0b83dc27137f13622db9614da19adc01
  $tc'CannotGetFileInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4288664516091775388##
                   5262696373092465512##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
b25a05bff4f79364c3a28adcea59730e
  $tc'CannotGetFileInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fccb65c354d4c45e17403380669210ba
  $tc'CannotGetFileInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo3) -}
d04f0b3b076d06d1ef6deac1dacbc83f
  $tc'CannotGetFileInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotGetFileInfo"#) -}
d7cfb1cf782c936b48ebda73100fb3ad
  $tc'CannotReadFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9754495769584429368##
                   15886731975905832704##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotReadFile1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
1b0d05f7c7fa863ef8a5bc629d382d18
  $tc'CannotReadFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotReadFile2) -}
ff09802f69e5d39f2d31313884a49a46
  $tc'CannotReadFile2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotReadFile"#) -}
cd90cece5b7e22916f6491e695dde6f3
  $tc'CannotUseBindWithDo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8148702338948677492##
                   3350539050349198749##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotUseBindWithDo1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
ce4a4213e34c9e2c279ef5b444f8c0d1
  $tc'CannotUseBindWithDo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotUseBindWithDo2) -}
4316ed542d2fc039d3e0ab8c3749fb5c
  $tc'CannotUseBindWithDo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotUseBindWithDo"#) -}
a36a5089457bb10a29a753e37f08f6bc
  $tc'CannotWriteFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6708142584162923477##
                   10559487637075872952##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotWriteFile1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
870c0c0d2be8cfca552d3a90ed8b7b12
  $tc'CannotWriteFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotWriteFile2) -}
445554529cb89ba8e9bfab036bd67273
  $tc'CannotWriteFile2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotWriteFile"#) -}
4328687c10b5a4d0a345f4d4ad9fd0f0
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17334643439595762849##
                   15944213883558926879##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Case2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Case1) -}
328b3bd737b21d0c3885ef48f91713b7
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bffcaadc584e3c025d3f23ce1df90111
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Case3) -}
85cb3e91136ecfec9e98863d88aa001f
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
cf9fa16826501e696d7d4cd6b815147d
  $tc'CaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3975253865071137153##
                   8140736556601008428##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative1) -}
74f98862778514186b0e4ce45f0b48c4
  $tc'CaseAlternative1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a01b239746b16cbfeed459976e901395
  $tc'CaseAlternative2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative3) -}
49a2bd21e50d7fa0d0ff7fe20cf406ea
  $tc'CaseAlternative3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseAlternative"#) -}
9ae52bad2f35c2806d277d211fee47b8
  $tc'CaseBinderLengthDiffers :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8980408106929812673##
                   6938721602039974858##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers1) -}
bca83c39d96496dfbe3866610c44c11d
  $tc'CaseBinderLengthDiffers1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
24f527605fddb81c3a7733d35a648184
  $tc'CaseBinderLengthDiffers2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers3) -}
05bad854dd0e89e89cfc17d26ffdefe4
  $tc'CaseBinderLengthDiffers3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseBinderLengthDiffers"#) -}
f5efa87b86d5d2947b6c2b0b168f392a
  $tc'CheckHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5694761786285646481##
                   3744896283300700627##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CheckHint2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
dad996926cea2f926691059bd28095c9
  $tc'CheckHint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
843e6b69c1c6d394e4cce46fd8194d9b
  $tc'CheckHint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CheckHint3) -}
0a797c33707afd7ea7343d792bd72c3e
  $tc'CheckHint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CheckHint"#) -}
178e4985be3fa5fe7f8f24e5759def97
  $tc'ClassInstanceArityMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16069137743939397105##
                   7559658586821437681##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch1) -}
6035e02d3e941a881e5841d770c5397c
  $tc'ClassInstanceArityMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a68bd5a0d28f4b0a47d88212b9e435bb
  $tc'ClassInstanceArityMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch3) -}
0964069da36b02eb05732d40f6042d06
  $tc'ClassInstanceArityMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClassInstanceArityMismatch"#) -}
40d47c4555d58c503ce7c88ee5ab8093
  $tc'ConditionGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7263307921330643080##
                   10899704404220894609##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard1) -}
c1d80ff62066e1d96693d1f8b01e8e1d
  $tc'ConditionGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c194c597712554ca90b4c79f5b524e85
  $tc'ConditionGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard3) -}
8f351a0aa501043fd8234566a81066ac
  $tc'ConditionGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConditionGuard"#) -}
d816031f2a3edb09875cd10870a3d8be
  $tc'ConstrainedTypeUnified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17096769968251207310##
                   11615882034746926088##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified1) -}
a5dba6f4a2469f0295a272944fd3ebb6
  $tc'ConstrainedTypeUnified1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e0dd2d270bc61c745e0c73d120e6c167
  $tc'ConstrainedTypeUnified2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified3) -}
155a60d2d4198168d582544cc9b7932f
  $tc'ConstrainedTypeUnified3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstrainedTypeUnified"#) -}
f2b708ca32f924c9a10e9d0f388389d5
  $tc'Constructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7600892111348322965##
                   8622952457876632557##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Constructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Constructor1) -}
8cfb020da5e268c1c20f2ce395e5fd27
  $tc'Constructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f500e4715dd549a5ddfb329a15df65ec
  $tc'Constructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Constructor3) -}
0484e0bb55f51f4cba26a25e081b25e9
  $tc'Constructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Constructor"#) -}
08bdd2aeda9af9336e4f1383e4b0f001
  $tc'CycleInDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6034437118894255472##
                   5665170274078527344##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
786e74b38263f5199a96fd7115ec88bf
  $tc'CycleInDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInDeclaration2) -}
4dfe342d990911be80cf351aa071d0b7
  $tc'CycleInDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInDeclaration"#) -}
8fab2f46526733fcb8eb248d134d4d44
  $tc'CycleInModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10403130209971120815##
                   2807922853673879923##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInModules2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CycleInModules1) -}
3a6d97cffddfafb7117ca47500b47407
  $tc'CycleInModules1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a33f72c352dfa1299e74f733f9ab519a
  $tc'CycleInModules2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInModules3) -}
964744293d6e7f550b2e041d9b8cdb9c
  $tc'CycleInModules3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInModules"#) -}
1d66d712aca2027ca2d57cd8cb411a4a
  $tc'CycleInTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8962018615264464091##
                   11916985578772672328##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym1) -}
70f52364ac34769ead6fa74181eba094
  $tc'CycleInTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3eb677449df751122132152c8fabd296
  $tc'CycleInTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym3) -}
751c1667cb9cb9e99f0538c2cd637095
  $tc'CycleInTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInTypeSynonym"#) -}
03a0c0713f1f77e4404622656eec348e
  $tc'DataBindingGroupDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11819398831229625836##
                   11710032388018513312##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration1) -}
f14296777f162a4e0968e74d43f12b66
  $tc'DataBindingGroupDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f7b148c52908b895ea8f44a742070207
  $tc'DataBindingGroupDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration3) -}
d69d4c866d3dfb51ddd6ad5c54be4c6b
  $tc'DataBindingGroupDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DataBindingGroupDeclaration"#) -}
fec47351cfdedc43de65d2712f78acff
  $tc'DataDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17751436713770240500##
                   15487174168266073743##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration1) -}
d9dec02bc9b2caeb31986788706e3826
  $tc'DataDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4168778513d091600ebf8aa2ab2f9e00
  $tc'DataDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration3) -}
9734a9a57b9e24452d775fb4575c68e8
  $tc'DataDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DataDeclaration"#) -}
1eb3c205bcaace824627325ddb58533d
  $tc'DeclConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17489191199456678042##
                   7031495168205457133##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DeclConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DeclConflict1) -}
cfd83faf09d20bdb297d9cc327091d3f
  $tc'DeclConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8633b68a0869a87f002b497e23fbdff6
  $tc'DeclConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DeclConflict3) -}
f8fa606bc34b3a93192ee933a3a4fdc1
  $tc'DeclConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DeclConflict"#) -}
0e5a8de98f8f982f5ff1bb5242e81175
  $tc'DeferredDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9682314775773947875##
                   1189373538230707883##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary1) -}
32279f50703e0de6d495ea88ecc8c8a8
  $tc'DeferredDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
964b1cd0c3f2fb83db3283f2715f872d
  $tc'DeferredDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary3) -}
fdc00cd678c57cf179c012a90e4a82ac
  $tc'DeferredDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DeferredDictionary"#) -}
f8eccdd1812365655f3c49a201dc6088
  $tc'DerivedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18057800399462334484##
                   3770114636634122244##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance1) -}
620e43e0eb04fa6291bcf58fb9acfbca
  $tc'DerivedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
448d211552a954233d93a2b15be20024
  $tc'DerivedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance3) -}
659a3ed789c7539a470aa9fe42e70e91
  $tc'DerivedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DerivedInstance"#) -}
e41006c251b565a026f55053efe6c9e2
  $tc'Do :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13074130047222845358##
                   13705957433583610249##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Do2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Do1) -}
58b91e98de05d0d75a35fe0bb05ff139
  $tc'Do1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
43bc5920b0fe65d1e1d22933b68aa728
  $tc'Do2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Do3) -}
53a21e246f4ccd7c08b84eef37311474
  $tc'Do3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Do"#) -}
07b80c378ecad220aa2551a35bbbcb1b
  $tc'DoNotationBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   318713938550887655##
                   7896894165941642594##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind1) -}
a90cf0b153f46c7926970ab49141093e
  $tc'DoNotationBind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e5dc921c56ff811b86b416167cbd9076
  $tc'DoNotationBind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind3) -}
23a269c340f99d9fcb518bc558fac729
  $tc'DoNotationBind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationBind"#) -}
965e7f7174a0a5176aca3034f27722e0
  $tc'DoNotationLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2675922786746655903##
                   384935977336298187##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet1) -}
4ee3ede8fc8a16021f27e526bb4ca610
  $tc'DoNotationLet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bc5cfc14fc849fe527c8275e0dfcb915
  $tc'DoNotationLet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet3) -}
df33211230930c6355fd690e9088869c
  $tc'DoNotationLet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationLet"#) -}
141a96bb3c9dbea80c3b07d5bb61089f
  $tc'DoNotationValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2776202815035276580##
                   4775838780648488261##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue1) -}
f1c4aad5b82460165c685955a83d5360
  $tc'DoNotationValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c4c22b444245e4930c994ef904048d2
  $tc'DoNotationValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue3) -}
35478b209930b7dec1747c677bd1c38d
  $tc'DoNotationValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationValue"#) -}
52d233762b388490c8cdfdc050e23e3b
  $tc'DuplicateExportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4934472176584128117##
                   1100525975111562279##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
1817ff899fd010193af3bc9bc942104c
  $tc'DuplicateExportRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8f2331f759f93ccef9d1c7ef640043d5
  $tc'DuplicateExportRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef3) -}
8ee8dc6797207b1fe5ba6062c14b99a9
  $tc'DuplicateExportRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateExportRef"#) -}
905a3e2599bff1238d1f865ecb7561a7
  $tc'DuplicateImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2645935877741434145##
                   8454305535868900617##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport1) -}
05a124e8be2e3df5fdb3b2a77b251ead
  $tc'DuplicateImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a8b1207f7dea8a52fe74027ab5310de
  $tc'DuplicateImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport3) -}
dae1045039c6db376d79c54023dc09c1
  $tc'DuplicateImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateImport"#) -}
c4c8c3461c59c404b43e16e99e0d9b98
  $tc'DuplicateImportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6151236603620198091##
                   7601896221877098335##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateImportRef1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
cbc2a601b544ebdb99dae2da6a1326c7
  $tc'DuplicateImportRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateImportRef2) -}
54f407f02b01e8a490e6b77cbca6ea57
  $tc'DuplicateImportRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateImportRef"#) -}
3039e6d70a7fcb90b9237c0225d6a76a
  $tc'DuplicateInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5732656912923712510##
                   14593033800747700590##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance1) -}
c11f0c92ad2a4dd2c0a41e42bd52875c
  $tc'DuplicateInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a8e21cf489b53414cd4de349baed0946
  $tc'DuplicateInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance3) -}
238433abb80128bb86d982e5b84b258b
  $tc'DuplicateInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateInstance"#) -}
06d70bd32420c385e557facb3fab1990
  $tc'DuplicateLabel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3994592906455353824##
                   7154146385790286396##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel1) -}
eabd6743c1cf45de838d29ff72b7e2fb
  $tc'DuplicateLabel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e058335c8836073b011e6ceda3373d0f
  $tc'DuplicateLabel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel3) -}
62bcc5f3ce1b889a2f0b6c49d204f3be
  $tc'DuplicateLabel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateLabel"#) -}
3d2333e2b7ac06ce20aac0ac606f9d5b
  $tc'DuplicateModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17292335282592935269##
                   7356234635243200752##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
c11c5aebbc02799da0fafb2ab9e429e0
  $tc'DuplicateModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateModule2) -}
28e0503636ca661fcc92de767e0dc157
  $tc'DuplicateModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateModule"#) -}
42b7d004dd3f636059854f0b5d00fd66
  $tc'DuplicateSelectiveImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18120457495185315038##
                   2283809727194646895##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateSelectiveImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
6b0310e5534619c7683be58c3b3a52d1
  $tc'DuplicateSelectiveImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateSelectiveImport2) -}
0c8c319c2ea7bfad1c2e6d1e1a1fe47f
  $tc'DuplicateSelectiveImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateSelectiveImport"#) -}
aba9db2b926d10953d2e09a1e73b1cf1
  $tc'DuplicateTypeArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7977387376661828777##
                   9913621981619113377##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
47d7bfde615732cc33e027c03eb24c1c
  $tc'DuplicateTypeArgument1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
692911fb1dc6463dc9ff4107e2d5e9fc
  $tc'DuplicateTypeArgument2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument3) -}
697fc6371e43b91db29500f34a91790a
  $tc'DuplicateTypeArgument3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateTypeArgument"#) -}
382d7f4989c1b9704e699cd19ef963b8
  $tc'DuplicateTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8684875189610373854##
                   15217750941435863882##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass1) -}
b46dc43b077276965b8927f8873ec7b8
  $tc'DuplicateTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d1ba97b3f29d8b201890d39ba9055f6d
  $tc'DuplicateTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass3) -}
54ec5c457f646cfd9d5b209e17c9072b
  $tc'DuplicateTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateTypeClass"#) -}
1b6f7f0e7cdffacbdd127798fe9e4ffd
  $tc'DuplicateValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13490608704266894029##
                   12296611782975775108##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateValueDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
1fd0fa7a767fe474480eb1299b14192f
  $tc'DuplicateValueDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateValueDeclaration2) -}
d56a87428543ecc4474390461e8a3aa7
  $tc'DuplicateValueDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateValueDeclaration"#) -}
a8083f3e8b8a6ab1bbee0e9a5f03eace
  $tc'ErrorCheckingAccessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9828683124298721675##
                   8480586227853564221##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor1) -}
cb703ce55b5e7953d75484c4a6c967bb
  $tc'ErrorCheckingAccessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3479d0e2d58af148f9f6d27e28eaa01c
  $tc'ErrorCheckingAccessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor3) -}
b9dcbc028a610ecc17334696d82c9e70
  $tc'ErrorCheckingAccessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingAccessor"#) -}
f1bd23cbef5cdfe36db4c9f135f4c579
  $tc'ErrorCheckingGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9986698452208361855##
                   16629708010858278836##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard1) -}
07f5e0b90e184bd08317e01ec93af149
  $tc'ErrorCheckingGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b50aebb0594e662a1b328d0376be0b98
  $tc'ErrorCheckingGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard3) -}
0106762a014df24661d94e9cf317a440
  $tc'ErrorCheckingGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingGuard"#) -}
7b9da6ff6bccf78cef549bc8af65bd36
  $tc'ErrorCheckingKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3021794893680626548##
                   2151421639878244046##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind1) -}
8823888a494f47897e45b73c2a6a8bfc
  $tc'ErrorCheckingKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4f38fd5f5bd83e0dddf37e03a04d26a7
  $tc'ErrorCheckingKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind3) -}
5c700554b6b10835350155f7e14f3389
  $tc'ErrorCheckingKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingKind"#) -}
d248e50f18b1caf8d35ba50450a62554
  $tc'ErrorCheckingType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13525502534324633548##
                   11235975990962405424##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType1) -}
57724e1c6b2d3d87cd2f8f033960f574
  $tc'ErrorCheckingType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
57e319e768f355843add4e56ac38f434
  $tc'ErrorCheckingType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType3) -}
f593735a09ec64b1afd43dc2aa74e80e
  $tc'ErrorCheckingType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingType"#) -}
69830361570a4b7b7df8e7652c5f4490
  $tc'ErrorInApplication :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17787560813054503342##
                   15104170614678143111##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication1) -}
c891faffa49cba7fb784b59b1d5618be
  $tc'ErrorInApplication1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7389ce4d4186e6581e7baff1202fcee
  $tc'ErrorInApplication2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication3) -}
f3cf899ba7891ea8413a504a0712942f
  $tc'ErrorInApplication3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInApplication"#) -}
33e04d06d891fd369e56af20fd56419f
  $tc'ErrorInBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6679176931325927510##
                   12969932390202818848##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup1) -}
ac569374227b96de43d6b2b6dbab1517
  $tc'ErrorInBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
12dce2c2eea7ba5718704dd257d6b93a
  $tc'ErrorInBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup3) -}
9912e4a3ec5cd75c6402506d0b442e08
  $tc'ErrorInBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInBindingGroup"#) -}
79421b4e99c22fb943ea9ed4754ff058
  $tc'ErrorInDataBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5275579734751172628##
                   13069780247895164621##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup1) -}
f4ab02ebd272094cfeac2f2329dd608e
  $tc'ErrorInDataBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3daebf880a7d19f00f54ecb492a62558
  $tc'ErrorInDataBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup3) -}
ce8a60937a656195a460bc48185b134a
  $tc'ErrorInDataBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInDataBindingGroup"#) -}
0b714248421f1c8c2244e53f7a360ee5
  $tc'ErrorInDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3387659180818348173##
                   13145346908246338847##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor1) -}
7ca543c12ecfab3cee2ee4bf182cb069
  $tc'ErrorInDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ed8a83bfd36e5afea2d6461f89987912
  $tc'ErrorInDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor3) -}
4ee0b355709fede1ec7de86836f8d931
  $tc'ErrorInDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInDataConstructor"#) -}
bee15244b0bd230c224ccb2c38c15bb5
  $tc'ErrorInExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6673034887568197040##
                   1791126150392246374##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression1) -}
8edef6fe958b34787c19c65d9838debd
  $tc'ErrorInExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
095e34e4c0fe59d68f3ae5a64a72646a
  $tc'ErrorInExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression3) -}
ffca669d087104bc183d78d7412793a8
  $tc'ErrorInExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInExpression"#) -}
bd0ef6c183778af897f59faa776c429b
  $tc'ErrorInForeignImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15413870919183180157##
                   11875077142654113537##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
a97c4c1a3842c63455b58ab44748176a
  $tc'ErrorInForeignImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
761c4ed8f85369542b0ef946a8341d06
  $tc'ErrorInForeignImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport3) -}
019858d0ffae5ae86e12e1ddcc325f96
  $tc'ErrorInForeignImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInForeignImport"#) -}
15fc840705fbee92e88db0a37fa86d75
  $tc'ErrorInInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8008777108817530359##
                   10907722482749431981##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance1) -}
4b61fdfe3e549b725ae25da77bbd5636
  $tc'ErrorInInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0a77dbc75364ca9944ce85e1135dcea5
  $tc'ErrorInInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance3) -}
efc2ca9ff14c63d3f9d2e0e0da8fec5f
  $tc'ErrorInInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInInstance"#) -}
6f28fd584cddb3d5da42e84da06ec386
  $tc'ErrorInModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11538662306517380089##
                   13145142385363121280##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule1) -}
6e41807c86ac0f9468b78bdc398f2aca
  $tc'ErrorInModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
26f5c2988188b469a79f2b5857955c03
  $tc'ErrorInModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule3) -}
85fec3cf71f26fdda95f6d1e821d7244
  $tc'ErrorInModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInModule"#) -}
a4a8e640b80a9b2aceb3ae159319c4e3
  $tc'ErrorInSubsumption :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18285252207573350331##
                   11441177177172434557##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption1) -}
bbbb9c5a5ff3d8879872d45942972c83
  $tc'ErrorInSubsumption1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
679fd6bf130746a856937e6e91b6a2a7
  $tc'ErrorInSubsumption2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption3) -}
0f630f1bf70fa75af315123c6ae50fab
  $tc'ErrorInSubsumption3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInSubsumption"#) -}
578eef1d1863e511207024a716235036
  $tc'ErrorInTypeClassDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5855644741083616247##
                   7098400744117913275##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration1) -}
63e9d9c1c95ddfa70396b3b66b9ae1a9
  $tc'ErrorInTypeClassDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e027586ddd83fabe106848306ea31cc3
  $tc'ErrorInTypeClassDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration3) -}
9255026f916e4ec8e642041b8fc65a1d
  $tc'ErrorInTypeClassDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeClassDeclaration"#) -}
4edce577f16190badd84a507a4540f21
  $tc'ErrorInTypeConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3341539220037802385##
                   2078706352492938730##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor1) -}
f539b082dca94ce5667eb7f3cf2b99aa
  $tc'ErrorInTypeConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
339d3040f2c8702af130f45047e8eb9c
  $tc'ErrorInTypeConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor3) -}
6e448ebd237ca34a90ba312a449522ce
  $tc'ErrorInTypeConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeConstructor"#) -}
341b712ea9b7a90f970579e09d9e9394
  $tc'ErrorInTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5287271303012671636##
                   17473058074946964696##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
35173df62979401760a70b942cd2d8fe
  $tc'ErrorInTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeDeclaration2) -}
7a722c939e8365fb63b771e252d3717a
  $tc'ErrorInTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeDeclaration"#) -}
b22c75aca3a45c2704e8df98e1144971
  $tc'ErrorInTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15449476324901288641##
                   8543442727949574125##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeSynonym1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor1) -}
8c1d816efb21926e31cf35331cb72447
  $tc'ErrorInTypeSynonym1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeSynonym2) -}
b2eafde1088f5353dbaac32566d3c3b9
  $tc'ErrorInTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeSynonym"#) -}
9e4946d87bcb89d974322572b52390d8
  $tc'ErrorInValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16524838070757676413##
                   9638284933633183833##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInValueDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
4b74b42f60400f8328e413cf1c2ca499
  $tc'ErrorInValueDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInValueDeclaration2) -}
dad35aafd00d66aa68749d8711df4a43
  $tc'ErrorInValueDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInValueDeclaration"#) -}
8cf30d6ff7cd30f20727dca0a7bf5ad6
  $tc'ErrorInferringType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7974894778002852799##
                   14625650156458200997##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInferringType1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression1) -}
e2bad8039f9f05eb2beea391bcc6eca6
  $tc'ErrorInferringType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInferringType2) -}
36c79af10f741225eab68b66f5550015
  $tc'ErrorInferringType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInferringType"#) -}
1c9b72cf57693a63a110ab6710031da8
  $tc'ErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14717722012345993161##
                   12127513316441152607##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage1) -}
de5796a2be64f7b31e5045ea9355cfa9
  $tc'ErrorMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a2dc98ed2f4e89d366d5ec8435c1922a
  $tc'ErrorMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage3) -}
fd92cfe34149074b576d7a37a6ee4fa5
  $tc'ErrorMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorMessage"#) -}
e6216cbb96037f1a58363e58d89f0c25
  $tc'ErrorParsingFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12700641608839876393##
                   17965572065230335419##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule1) -}
914f845402ee49afdf295166f367f89b
  $tc'ErrorParsingFFIModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c50f721f32469e6cb64897ccd9921bac
  $tc'ErrorParsingFFIModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule3) -}
bab7964a76ba909a6845b24942f22ffe
  $tc'ErrorParsingFFIModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorParsingFFIModule"#) -}
90517b555040336610ea96a2bb7d2cc1
  $tc'ErrorParsingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14209125956497704944##
                   15861549394138653047##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule1) -}
a0647106bd74353d8bd3645ad3b2f5f1
  $tc'ErrorParsingModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1e941b9d57ea27f605119a954d8125af
  $tc'ErrorParsingModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule3) -}
a155678922f6044d7a5206730947bf9e
  $tc'ErrorParsingModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorParsingModule"#) -}
ca8d034594986fa9892d19271534b206
  $tc'ErrorSolvingConstraint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13965595825250906395##
                   12988026058799390633##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint1) -}
a828e728a5475e51c43136a2639fc433
  $tc'ErrorSolvingConstraint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f9c142a19bddec5039961e53264202d2
  $tc'ErrorSolvingConstraint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint3) -}
72f160ed3f26298a83c54e2dbcfe3159
  $tc'ErrorSolvingConstraint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorSolvingConstraint"#) -}
4cbdd15441ace4d2d1884b55400a8c4e
  $tc'ErrorUnifyingTypes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6188483955966140753##
                   5075773019945681800##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorUnifyingTypes1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption1) -}
4a5d5698a1793706f50fcc08bfe4631a
  $tc'ErrorUnifyingTypes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorUnifyingTypes2) -}
721b4e15c140654a2f28bdbe590ecdb6
  $tc'ErrorUnifyingTypes2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorUnifyingTypes"#) -}
805cbb7a1fd9e2f1b96127ba194176d0
  $tc'EscapedSkolem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1951929167175871029##
                   13396601739048869800##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem2
                   0#
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem1) -}
091e1902409ce375c748d7b19a30aba2
  $tc'EscapedSkolem1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a908ecbb804999076768cec9bffea70c
  $tc'EscapedSkolem2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem3) -}
4601097381e664647f587a7c653f4613
  $tc'EscapedSkolem3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EscapedSkolem"#) -}
0888413d8e6a1a00ef0c5a07e5eceb48
  $tc'ExpectedType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11328141261681229924##
                   7262755769423585425##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExpectedType1) -}
932c7016de418988a12f26679e34ea65
  $tc'ExpectedType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b2094996819cc066e8272e99d13bd32d
  $tc'ExpectedType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedType3) -}
d3fd6dee8bb559d5b5925ceedcd7e76d
  $tc'ExpectedType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedType"#) -}
5e66fb93defb03c1d8c1ee8b5f6ab694
  $tc'ExpectedTypeConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17273259808332799617##
                   5385192332696084737##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor1) -}
86390c298ca20bc2cf3138d31127214e
  $tc'ExpectedTypeConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cbafe7334f32d47d0028e6704ad5507f
  $tc'ExpectedTypeConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor3) -}
9e52b695d2571016e6b6fd4172ae3c22
  $tc'ExpectedTypeConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedTypeConstructor"#) -}
1d81ed28214f3c995d02537d956fdeac
  $tc'ExpectedWildcard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15258971350952547170##
                   17556095253274163472##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedWildcard1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
29a1a925ad3ab3a43131fd671a8f2b1c
  $tc'ExpectedWildcard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedWildcard2) -}
94cb4faa9e3231ed4284cffa3e6b9406
  $tc'ExpectedWildcard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedWildcard"#) -}
a3f0604fb1b8a7cbee3240dd8594c85a
  $tc'Explicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9935582984497920091##
                   7646348580453869000##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Explicit2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Explicit1) -}
7fd1690c46220ca7c9448f8e0cd5e976
  $tc'Explicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dcaddfff6444eff331360ccc2feeb637
  $tc'Explicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Explicit3) -}
e9052a684ffeeba8b14ac86537f80bc6
  $tc'Explicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Explicit"#) -}
a23ea75649fa575be06a6ec9b710b5ed
  $tc'ExplicitInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9182163737001189285##
                   7110496028895379176##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance1) -}
6f106ccaafb2991f1cf9087d99fe71bc
  $tc'ExplicitInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9295635dc4b03ef5fa251e1411c3cef
  $tc'ExplicitInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance3) -}
664e9b39b04329a723fd10918137891a
  $tc'ExplicitInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExplicitInstance"#) -}
8d0506da515c07f12adff1ca602c61a8
  $tc'ExportConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7839119975783913307##
                   4075782205514466225##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExportConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExportConflict1) -}
b6f99de8e94cefaafd98aab70ff08318
  $tc'ExportConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9b55f6a3635c571b340963d8b53a4f9f
  $tc'ExportConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExportConflict3) -}
3a05ae6cef6ccbbd23e23501ae314d30
  $tc'ExportConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExportConflict"#) -}
6c8f62340b356f0c079a0b83e8c3cee9
  $tc'ExprDoesNotHaveType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7933525710018869173##
                   12577901293473981990##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType1) -}
7b78be202a0f310f791be0d4f5445722
  $tc'ExprDoesNotHaveType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
691fc5b46fffad1135a01cf2e3a9b315
  $tc'ExprDoesNotHaveType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType3) -}
237c503fc8000ebef2096ac4e38bcf0a
  $tc'ExprDoesNotHaveType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExprDoesNotHaveType"#) -}
8c06bc4f8d318e204700cd922cfcbef9
  $tc'ExprHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15532489901767121627##
                   704369257645638476##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExprHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
27e1650c22b00c3dde9013cab30bd870
  $tc'ExprHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExprHint2) -}
c12399360c3e673caf2fef0347f93018
  $tc'ExprHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExprHint"#) -}
d4e2f7f80c75e37fb47163d5feab1d16
  $tc'ExternDataDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6773367565192952657##
                   12554989275474336006##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration1) -}
b393bc07f422791cb9c6143896ae6233
  $tc'ExternDataDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ac0b66c64868e12eae228abaad3e63b8
  $tc'ExternDataDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration3) -}
1ef3e77c94d02a25c7022c7d8c9247cf
  $tc'ExternDataDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternDataDeclaration"#) -}
2a44525931aff4ef33ac386fda90fdd9
  $tc'ExternDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   580726687946612468##
                   8109526437391932225##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration1) -}
2f0d9108bb00443be1cf813cee5045a5
  $tc'ExternDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
16ef19cb13d75fd45722126982106205
  $tc'ExternDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration3) -}
4ea03259c30fe525becec2cd619c585f
  $tc'ExternDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternDeclaration"#) -}
7460e19c5eb7894c3b90434c8a769772
  $tc'ExternKindDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18020346453599971222##
                   4468568375936622203##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration1) -}
889bd17ec725eeb58e6665ab141a5943
  $tc'ExternKindDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
623c68e1b9b02ae678a78294c6dc4b95
  $tc'ExternKindDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration3) -}
7e3cb8a03c6f6593dc1d2795841384c5
  $tc'ExternKindDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternKindDeclaration"#) -}
0774026fd2e7d937dac39325677d6267
  $tc'ExtraneousClassMember :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4801233124489868753##
                   3477200814653907301##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember1) -}
d93bdb0df1b935172938c16deb5196cf
  $tc'ExtraneousClassMember1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e9a64680eac19f84c6a99287d9a634ac
  $tc'ExtraneousClassMember2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember3) -}
9eded12266cff969b389b8ded9445c22
  $tc'ExtraneousClassMember3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExtraneousClassMember"#) -}
6e2d05995ca0357f7f4bf6d851817868
  $tc'FixityDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14143134105517415603##
                   13185908970490178579##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration1) -}
8c019843bef60edfb12d169b61d07859
  $tc'FixityDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
72bcc3a9909d45872468610187f5e52e
  $tc'FixityDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration3) -}
313464e067bc69047b4bd5828b6cb431
  $tc'FixityDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FixityDeclaration"#) -}
c33f46f188ab8760447b1e67577628bb
  $tc'FromLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14432393642144534403##
                   6139641081794962167##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FromLet2
                   0#
                   Language.PureScript.AST.Declarations.$tc'FromLet1) -}
e2933133e6d55e6be28eb9de5ba5c72b
  $tc'FromLet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
bae7cae3e2abcbe4b61dc4d0f977c1a1
  $tc'FromLet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FromLet3) -}
1003755336541982002f63e430de91fe
  $tc'FromLet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromLet"#) -}
3bcbd768dde7a5f5fa70291508601d30
  $tc'FromWhere :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6889611628763613256##
                   16007238174189101837##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FromWhere1
                   0#
                   Language.PureScript.AST.Declarations.$tc'FromLet1) -}
adcccd42e68b8f5d450d86da434af198
  $tc'FromWhere1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FromWhere2) -}
de6e7a6bdc29c3f6caddaa5e1f68137a
  $tc'FromWhere2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromWhere"#) -}
8ed9c47b61fbc8e4f17e1578f693f586
  $tc'GuardedExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4524742840814765124##
                   7147506386460016424##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr2
                   0#
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr1) -}
8fa365ebd566eff9866928bbcf0de0a1
  $tc'GuardedExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3cb410aec8a1d681f272fcefa7c2bcd7
  $tc'GuardedExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr3) -}
80f49cb503e30a320431c08206dc09f8
  $tc'GuardedExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GuardedExpr"#) -}
ebe92ac837bf01370d0d1a39bb993bc9
  $tc'Hiding :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7047784646816313278##
                   594486106534142443##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Hiding1
                   0#
                   Language.PureScript.AST.Declarations.$tc'Explicit1) -}
471bb8c3daf8300dbb279dcffd579d8b
  $tc'Hiding1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Hiding2) -}
ca21fed1d6790bcd88af08d1403c55c9
  $tc'Hiding2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hiding"#) -}
f479f897daf329c83c36fc59d9eb94a7
  $tc'HidingImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4539485299556825580##
                   1407680562773297647##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'HidingImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'HidingImport1) -}
d7bb770644fd1c5e10b94ad7a7e9930c
  $tc'HidingImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3095a3c3058501a7c5274c09d010be83
  $tc'HidingImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'HidingImport3) -}
28fc142d4db8d4299cbb5adb2190d12d
  $tc'HidingImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HidingImport"#) -}
e24c9125b00cabf75a7af0ae7c9ae784
  $tc'Hole :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14813236415796151811##
                   7167829725643254081##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Hole2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Hole1) -}
06df5c5b5f2c74c8b998ab89363a87a8
  $tc'Hole1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0d4181cff00921e64fefc610473daa55
  $tc'Hole2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Hole3) -}
74cf78987b13f24e5257390cf90e1f1c
  $tc'Hole3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hole"#) -}
a8322cfb1d9ca5cdaca4d194cc91fc75
  $tc'HoleInferredType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16088469147742255516##
                   8745592975349649548##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType1) -}
264b3145375f03d866de762af1662a08
  $tc'HoleInferredType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4c554f7e5c615e124afc373b8236ba7d
  $tc'HoleInferredType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType3) -}
90c73734e1a8191dbc7dde2192fac321
  $tc'HoleInferredType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HoleInferredType"#) -}
f7d7924c292831795707ed02ea04a142
  $tc'IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14683666446525326350##
                   11703236835683421947##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IfThenElse1
                   0#
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens1) -}
ddbc4514f7289ea6ad484ae52af01674
  $tc'IfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IfThenElse2) -}
0a00c0edadea0bb960b1c78f2062addd
  $tc'IfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElse"#) -}
f6cbd7b8a8d93a2e4029b3200ae35856
  $tc'Implicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6819075369008500111##
                   14857889293506856081##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Implicit2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Implicit1) -}
2b1d846fef70ec2472203a22df7f7cd1
  $tc'Implicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
03d8c6c5b86c91c534232c3d15812ad3
  $tc'Implicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Implicit3) -}
0221b697e08a1678594654ef1913a803
  $tc'Implicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Implicit"#) -}
e34dc1409ad4f18d7c8740f86e083808
  $tc'ImplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3872752097471760745##
                   8949199711694597697##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'HidingImport1) -}
bd75f07e9dfa9fe86576d97791ca5dee
  $tc'ImplicitImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitImport2) -}
8c326186b67f552fcd131305e42234d9
  $tc'ImplicitImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImplicitImport"#) -}
51c93bf92cf65c6bcdfadfcdeda97f83
  $tc'ImplicitQualifiedImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17727680466010690437##
                   7178863313825171875##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport1) -}
0363e1f6e457c8ddccde0d62cffacfd9
  $tc'ImplicitQualifiedImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e1739fbb80e4064ec663523eae58e2a7
  $tc'ImplicitQualifiedImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport3) -}
c082c4792352ef79074287d710ea1b96
  $tc'ImplicitQualifiedImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImplicitQualifiedImport"#) -}
3a9aa9a0bd5a17cd81a301b28aa96c31
  $tc'ImplicitQualifiedImportReExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12419139476991927763##
                   13458225696533032431##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImportReExport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport1) -}
a5da80ee06d11f64c38e0450cf4b0092
  $tc'ImplicitQualifiedImportReExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImportReExport2) -}
55dc359bafced812b4ac0a607fe73a8a
  $tc'ImplicitQualifiedImportReExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'ImplicitQualifiedImportReExport"#) -}
dab8653ac6f77cb23f58e575fefee368
  $tc'ImportDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   664817639235128145##
                   11244213141806294652##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration1) -}
8642252369da776e1446904395f7ac66
  $tc'ImportDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
107a4b882ba007e0c4caac4c431ab810
  $tc'ImportDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration3) -}
065231e7cc2bffc105afca76fa40a9dd
  $tc'ImportDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportDeclaration"#) -}
c8a1fa5f7de11f133641f0124c77ebdf
  $tc'ImportHidingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4811000674152226386##
                   4971865590705542975##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImportHidingModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
8849d3876ccbc89b626c73a400954520
  $tc'ImportHidingModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImportHidingModule2) -}
9e9693ecb917da8bb936053312958e13
  $tc'ImportHidingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportHidingModule"#) -}
222dda8bfa670a88447c18b89dc41a9c
  $tc'IncompleteExhaustivityCheck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4138629405065707257##
                   14966708472446263767##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
5d10f24975fbbc8b64ee46348505b444
  $tc'IncompleteExhaustivityCheck1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
628dee53978827781b85c1fb4cb9bf30
  $tc'IncompleteExhaustivityCheck2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck3) -}
b333fca4ae6303030407672028c50087
  $tc'IncompleteExhaustivityCheck3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncompleteExhaustivityCheck"#) -}
81f57ab35c89470ae12af77b0d4420cb
  $tc'IncorrectAnonymousArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16915515474603891039##
                   5270210702300994604##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncorrectAnonymousArgument1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
96c7d21117dc2c85ed3810898377e3c8
  $tc'IncorrectAnonymousArgument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncorrectAnonymousArgument2) -}
2879f77bbe0b8a6381e29070fdfcb660
  $tc'IncorrectAnonymousArgument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncorrectAnonymousArgument"#) -}
72c3588cb7145bea48d3d9b51e59be57
  $tc'IncorrectConstructorArity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11945763486324369535##
                   16390623925484751454##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity1) -}
4255d39e5abb12d7331b2441071f6e67
  $tc'IncorrectConstructorArity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c2a263d963309f4da878f7b15ddb388
  $tc'IncorrectConstructorArity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity3) -}
f6b983bc68b5e9e56e6876a646c0144a
  $tc'IncorrectConstructorArity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncorrectConstructorArity"#) -}
c753e59bd874ccb974615864326d23ea
  $tc'InfiniteKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15449006971184400970##
                   2994084061427402088##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind1) -}
43fc82ffa9ea34b0c24832fc867a9ff7
  $tc'InfiniteKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f41908259411c8ee45c40ec9bd94b3a7
  $tc'InfiniteKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind3) -}
5fd4a4828a396b40df7b9601c65e66c5
  $tc'InfiniteKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InfiniteKind"#) -}
264d64c6d188eb2b1e8b14b492fd5692
  $tc'InfiniteType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14940104662598128189##
                   10421266008103202618##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InfiniteType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
187c42c9620134d0dced324670011a43
  $tc'InfiniteType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b55c26e73b5fe35ec3c653b49dfce9ce
  $tc'InfiniteType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InfiniteType3) -}
b962d79bb7e045b3792d3741eb11e404
  $tc'InfiniteType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InfiniteType"#) -}
db9e71054f13152c5f8e779f0c4e79fb
  $tc'IntOutOfRange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11512772315643346066##
                   4668275198858751483##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange1) -}
6975db696b1fdbb90599a718fbb342af
  $tc'IntOutOfRange1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0659f20430e75b9fe02fa95668d6e3a
  $tc'IntOutOfRange2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange3) -}
1f86802696f71694b5b2c359c3b5119a
  $tc'IntOutOfRange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntOutOfRange"#) -}
41d049383829b93f9da2946e9f7b79d0
  $tc'InvalidDerivedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12583692496048206634##
                   2222405732701624184##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance1) -}
e9adfedb4fd154ae03982fbe7071d818
  $tc'InvalidDerivedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3c1ea1728e54d0f1036e393055ca16fa
  $tc'InvalidDerivedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance3) -}
1b79d13400378e4dc0feafacd403bf34
  $tc'InvalidDerivedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDerivedInstance"#) -}
53ce945c62b155eb7cf9cab9eb785429
  $tc'InvalidDoBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5115693168225558141##
                   14584119430056810846##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDoBind1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
2e7cb5ba28d4243eb7f51bbfd0b0b731
  $tc'InvalidDoBind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDoBind2) -}
7d6d26a5a72466e27a89f82a4f21e5c8
  $tc'InvalidDoBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDoBind"#) -}
3a8046330ec34c8668902b62bb656076
  $tc'InvalidDoLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9781118821077985323##
                   16693842330715921182##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDoLet1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
e0f8b72374f193524d495af0d946e29e
  $tc'InvalidDoLet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDoLet2) -}
f61e3d0a180504ed38ea51a94cb8d348
  $tc'InvalidDoLet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDoLet"#) -}
b330b02fbed195b17fc70bbc89d2df04
  $tc'InvalidFFIIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8215243993483523438##
                   91967828814710874##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier1) -}
cc0a4b222f38f77042823ef56a05b274
  $tc'InvalidFFIIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4aa3950fe10b14debf3ae3991e0bb482
  $tc'InvalidFFIIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier3) -}
bad2482c7861a6be99963065a1e2fcae
  $tc'InvalidFFIIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidFFIIdentifier"#) -}
a6c8569f316e75525f01324fea2fb04a
  $tc'InvalidInstanceHead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12217767924997165493##
                   6651329326607287957##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidInstanceHead1
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
cc24ad0c6c1815325723c50be4936b4e
  $tc'InvalidInstanceHead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidInstanceHead2) -}
497e68d25ab30088d381d72eb136b473
  $tc'InvalidInstanceHead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidInstanceHead"#) -}
9912cdbbd95a2ed77755acebf8c5477b
  $tc'InvalidNewtype :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12568168381219943323##
                   17980804171074377990##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtype1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
1e7c07870956572ccd8158e08934d421
  $tc'InvalidNewtype1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtype2) -}
609a6c57a7c66ca9aff64198edf45d2b
  $tc'InvalidNewtype2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidNewtype"#) -}
c216131a133a81326de8cbc617b1cdbb
  $tc'InvalidNewtypeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14619673159705868822##
                   6580992313175658286##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtypeInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
c6854cd4a7ba95e9389379d5eb3b101c
  $tc'InvalidNewtypeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtypeInstance2) -}
41552f88cf4fca3ef22bbffcb53aec6c
  $tc'InvalidNewtypeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidNewtypeInstance"#) -}
39cd13fbe209cce7a4b0ca51e3cc8623
  $tc'InvalidOperatorInBinder :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   280279826188861242##
                   11341594368147948150##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder1) -}
8272730b50c11afdc29effd79f1f7e63
  $tc'InvalidOperatorInBinder1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8ea92b28b1f4451f4e9692cb709f7630
  $tc'InvalidOperatorInBinder2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder3) -}
a2a341ab03631279d646f03594190c92
  $tc'InvalidOperatorInBinder3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidOperatorInBinder"#) -}
387830f37fdb1feda6423b4aa575f385
  $tc'KindHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16209158985767238326##
                   17032716634410774926##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
05528b8a310490281033128cb9c7fbb9
  $tc'KindHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindHint2) -}
fb32d8ad8023a233ccfc2113fa70e253
  $tc'KindHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindHint"#) -}
3711d5b1df14a08109831814d64250d1
  $tc'KindRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2106118044353447943##
                   835864152343351040##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'KindRef1) -}
b7e9060bda7c87301dca49e70f7234a7
  $tc'KindRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5487279b930b9ac17d172f5c6ec43180
  $tc'KindRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindRef3) -}
ce94051309576c9482e5cd506ad8273e
  $tc'KindRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindRef"#) -}
b993cd44757c3e4f1176f1c7ff1fa77a
  $tc'KindsDoNotUnify :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8925013453465510988##
                   10313960003961678956##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify2
                   0#
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify1) -}
c21e240934dfeaa9c4498c2c4c1131af
  $tc'KindsDoNotUnify1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
31b15f537eb8582cb278045c266fa6de
  $tc'KindsDoNotUnify2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify3) -}
11a288b7594cfabfd250b60883df44f6
  $tc'KindsDoNotUnify3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindsDoNotUnify"#) -}
b779ae35ab82a878b784006d267f400e
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317053113052222632##
                   10551132092717719105##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Leaf2
                   1#
                   Language.PureScript.AST.Declarations.$tc'Leaf1) -}
24cc5683c70fc70a13d020ab4251e65f
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98e9faa8163ecb746a254e2fd7fb808e
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Leaf3) -}
5f59c1e88ae1d83623645de504c2f2f2
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
dd9d31e38c9ebab6f41380f521c66af9
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5003074547476829797##
                   13415176711167642860##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Let2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Let1) -}
b3d36b7d93300b2b5d64d741fe89b12a
  $tc'Let1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ac1b5981c9955cc0952e17904ec0bf08
  $tc'Let2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Let3) -}
d3aca49647771807e5b9ad701dc40f1b
  $tc'Let3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Let"#) -}
2125ae466344dd19dfe87f2d59223b63
  $tc'Literal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6331676725045222460##
                   10029026848426498890##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Literal2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Literal1) -}
14c829679d32d033c5b3f7e83dd6e570
  $tc'Literal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dfcb898ffbdf88bb9c0770ae9f31d296
  $tc'Literal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Literal3) -}
f1e703202c7e5d570eb92dcabb74effc
  $tc'Literal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Literal"#) -}
eed22ff2555051972752b15e61322177
  $tc'MisleadingEmptyTypeImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2298501841350284908##
                   12482755392970845124##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport1) -}
150ed39607106f876ff25914bca81431
  $tc'MisleadingEmptyTypeImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb7858f893abf9f9996e52cb457cabed
  $tc'MisleadingEmptyTypeImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport3) -}
a8a297d2f3fda1e04b40acff246aa830
  $tc'MisleadingEmptyTypeImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MisleadingEmptyTypeImport"#) -}
26905818cd5eb32280cb82b1817e2360
  $tc'MissingClassMember :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15302393927922682050##
                   12021868592009445752##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember1) -}
32b6003728d32848a9da49e223cd1de1
  $tc'MissingClassMember1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c7bc61d26e9ae71790bc9da2f9f5c06
  $tc'MissingClassMember2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember3) -}
a18a7676ce6156eed172290f5562ff13
  $tc'MissingClassMember3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingClassMember"#) -}
c46906d8c69452755f2ebb5ec68fd2cb
  $tc'MissingFFIImplementations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16589574296680796575##
                   12184631419939262833##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations1) -}
5b1ace21b49f1ceae9d16b1e08b4e917
  $tc'MissingFFIImplementations1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b046fad3e1d6a0bda773babad7498e9f
  $tc'MissingFFIImplementations2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations3) -}
064d7d04834a1a7375f5685b500ef393
  $tc'MissingFFIImplementations3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingFFIImplementations"#) -}
9e5eba9aff38a20945e545896ae2579c
  $tc'MissingFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1649094650292467823##
                   1237192556008866282##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingFFIModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
3987b694c391fd1128b268c1adf71208
  $tc'MissingFFIModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingFFIModule2) -}
86f3587b875462a7555525cd8c0b828b
  $tc'MissingFFIModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingFFIModule"#) -}
9e2f127580396740688cfbd549f0e2d5
  $tc'MissingNewtypeSuperclassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13367867723203172027##
                   10155474645109165270##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance1) -}
d95f57131717a08918926b6bd914675c
  $tc'MissingNewtypeSuperclassInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c8ab331385369cf137135b670b04525
  $tc'MissingNewtypeSuperclassInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance3) -}
82d9cc75fa6ccfe9339fb0bb8c05912a
  $tc'MissingNewtypeSuperclassInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'MissingNewtypeSuperclassInstance"#) -}
66baf2890c64c52472ce173e3894d299
  $tc'MissingTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17295218009822609161##
                   12671767602108169573##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction1) -}
ef7cb5267c9abcb63b3c3cd7ab37e97d
  $tc'MissingTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingTypeDeclaration2) -}
4370d6cae5814dbb1bdaed79b22953ca
  $tc'MissingTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingTypeDeclaration"#) -}
ec34d987c5b9b6d2f4656f0535271ab1
  $tc'MixedAssociativityError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2695419489633037239##
                   11009508295391447585##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError1) -}
6388276dc44f569c1f5b5b3ec95dc829
  $tc'MixedAssociativityError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bb8fa668c3ab044fbc84c01531baa3e1
  $tc'MixedAssociativityError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError3) -}
fc8159b73704f0f453cefc9f0eb2b0c4
  $tc'MixedAssociativityError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MixedAssociativityError"#) -}
e753762afc225cde127b3e2d62d47e6e
  $tc'Module :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10562595703715849864##
                   386729819106350363##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Module2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Module1) -}
4d8a35699b2a5d18a10186caab5d68c0
  $tc'Module1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dfd30693b5248bd115e8809e646e277e
  $tc'Module2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Module3) -}
6591fe45f6fe6ce13182142f92b7f430
  $tc'Module3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Module"#) -}
7fae394f259031fb5de30d9ca95afa7f
  $tc'ModuleNotFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13739754139949421216##
                   5923768645431367794##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ModuleNotFound1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
1820ac016b0a25012f49d63f2dd16e11
  $tc'ModuleNotFound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ModuleNotFound2) -}
d8e609b9cf600f25fa0be9e937887a39
  $tc'ModuleNotFound2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleNotFound"#) -}
022379febbed2817167b3b1d185a9a83
  $tc'ModuleRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3881314018983552368##
                   8322507005177487095##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ModuleRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ModuleRef1) -}
eea81cfb9dbe271776dbc7d0f42fca4d
  $tc'ModuleRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
caa6a839ad20af01366b0d0b2146779d
  $tc'ModuleRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ModuleRef3) -}
0409a20131556a87634ec2da62356d34
  $tc'ModuleRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleRef"#) -}
afd6c8a10e1e0f563d1e935fe36c06b1
  $tc'MultipleTypeOpFixities :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2392336018642245196##
                   14022206472511292191##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities1) -}
5e9faa0d9664ad4b4d60ee91941cf171
  $tc'MultipleTypeOpFixities1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4abfc77b9f8b7c03afbda0cfe94d4ed2
  $tc'MultipleTypeOpFixities2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities3) -}
7f9d9e244b619584adf6481cac9c6543
  $tc'MultipleTypeOpFixities3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleTypeOpFixities"#) -}
1dc548281964c43b7565aed952ed914e
  $tc'MultipleValueOpFixities :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11603023966205612815##
                   662191061413329073##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities1) -}
437656b6a64b3fedb5ca5b4feb8a4b43
  $tc'MultipleValueOpFixities1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6faef587705ff3a3d3756d30f83d234b
  $tc'MultipleValueOpFixities2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities3) -}
4a0429e88b65be635a00a99762003dc7
  $tc'MultipleValueOpFixities3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleValueOpFixities"#) -}
121376c404299b99ebcd87b932637018
  $tc'NameIsUndefined :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16851117833118301274##
                   10285635940886485157##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NameIsUndefined1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
b2712af33661474c56ec87af336970ec
  $tc'NameIsUndefined1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NameIsUndefined2) -}
55d4f3da0fac88f321f6f39b6b9c3927
  $tc'NameIsUndefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NameIsUndefined"#) -}
67dc6bc845443b981767d3f228fd24c5
  $tc'NewtypeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15963592494479766122##
                   3832063748302561989##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance1) -}
8ad3dbd3182b3ed390a8bfb7126881a1
  $tc'NewtypeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstance2) -}
74ff4567b4fda7c6e05452b4498f4024
  $tc'NewtypeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeInstance"#) -}
b6b32a913674dee5e3d61c234561869d
  $tc'NewtypeInstanceWithDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9123537166983252541##
                   17576928659362171926##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary1) -}
0b7740c9ad2b0b3113635e669d728e97
  $tc'NewtypeInstanceWithDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8bbd397cb964ff0001f19c75390c332d
  $tc'NewtypeInstanceWithDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary3) -}
c821a713a5dfcafc74db1d59e207915b
  $tc'NewtypeInstanceWithDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeInstanceWithDictionary"#) -}
766c933b483e7cbd57be929c36372eb7
  $tc'NoInstanceFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18034763258302382514##
                   3472761696657975107##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound1) -}
fe718dbdc6473f029783afd521a843bc
  $tc'NoInstanceFound1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a2ea96ad138270056766aa91b5e61c89
  $tc'NoInstanceFound2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound3) -}
5db7ce73259cad41ab722b9fcafaef65
  $tc'NoInstanceFound3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoInstanceFound"#) -}
394b4b016a46253fe6934e9b6809de92
  $tc'NonAssociativeError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15459495261775537996##
                   457670536092123374##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError1) -}
03bd279ff04437ab661b25f27936e38c
  $tc'NonAssociativeError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
48e92c15e1877d31df0b646849d5bbdc
  $tc'NonAssociativeError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError3) -}
27566a6e4b41bbfdd6df3b17e1f84e2e
  $tc'NonAssociativeError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonAssociativeError"#) -}
97e43ae2c8d9b4030d6694edf66d6d07
  $tc'ObjectUpdate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4601430128086972873##
                   5209904833994015097##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate1) -}
e5a932b6ab8d54de876f054c93bdd820
  $tc'ObjectUpdate1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1a735f0411977aad0dcb1275027e58a2
  $tc'ObjectUpdate2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate3) -}
93a5f1bef3c471a1c6c78bd6a3d386b6
  $tc'ObjectUpdate3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectUpdate"#) -}
2448bd00da791e9eff96343db1b642cf
  $tc'ObjectUpdateNested :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17684845149192552520##
                   15893446465070831977##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested1) -}
0fa2010dedbcf1e2527533863ab7b772
  $tc'ObjectUpdateNested1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c4e07b929dfb9c79fbe882e2f2afc897
  $tc'ObjectUpdateNested2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested3) -}
97a21581e99ea29f0a8573f09504f665
  $tc'ObjectUpdateNested3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectUpdateNested"#) -}
35e985f90326d2392ef2149030f57f54
  $tc'Op :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15197954218415143315##
                   9891134414526850662##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Op2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Op1) -}
9212c0176ca711cfbea6346f0db88256
  $tc'Op1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fc4315d7bfe3d30656a5b308aafc0bf1
  $tc'Op2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Op3) -}
20b62d0e1b0d44fea8eca529b83d5caf
  $tc'Op3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Op"#) -}
87ecc8d5fe941eda82de7b44ee63e510
  $tc'OrphanInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10181219058314054347##
                   477885915751582916##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance1) -}
d83366ac69b23f2f60d977214ffe6348
  $tc'OrphanInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ecc29b6b5017b938e62eca14c7da7107
  $tc'OrphanInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance3) -}
29264d64b80e1375a01ed9d108c44a45
  $tc'OrphanInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OrphanInstance"#) -}
5f39f1ed9efda11ebfeca56298b4fd44
  $tc'OrphanTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4194462712715213379##
                   5510282093457790829##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OrphanTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
c414caf6f94fd920af8e397d11eeb9d4
  $tc'OrphanTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OrphanTypeDeclaration2) -}
9ca4912605e029e74e033597856dd88f
  $tc'OrphanTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OrphanTypeDeclaration"#) -}
cb7e26541aef3f69dcaf948278d66679
  $tc'OtherHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12276146509626906359##
                   53569241195662945##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OtherHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
01537e6e8406481fdaa1773e664d824e
  $tc'OtherHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OtherHint2) -}
c704bfe099300f8756cb6eaefea7d2b6
  $tc'OtherHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OtherHint"#) -}
f1a3315dc6d0d3bbef5225315d00d891
  $tc'OverlappingArgNames :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14952223147002509370##
                   10422111586413394576##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames1) -}
61847ecca1be88e5a6258d31a6de6128
  $tc'OverlappingArgNames1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dfd666aec8a9aac2fc2b3cb7f5c6ec8e
  $tc'OverlappingArgNames2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames3) -}
c34e91cb820ddca873fed1304d87ac31
  $tc'OverlappingArgNames3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingArgNames"#) -}
276fea0c85e7df6a8ab3758e68f2eda9
  $tc'OverlappingInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   853500665893095979##
                   3126429613107514499##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances1) -}
1e665ae497190a834d7b9de19dea61eb
  $tc'OverlappingInstances1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ef8d0e735f6ca79e3c0ca64b0cfa6ae9
  $tc'OverlappingInstances2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances3) -}
c4d7184fbfea27e1375aec9a651416b0
  $tc'OverlappingInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingInstances"#) -}
29d26309778fc9b3bab421be6b910f2f
  $tc'OverlappingNamesInLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   61282922838322461##
                   16077932302365520183##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingNamesInLet1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
95e7f272b8619d606c3a43b41e05e557
  $tc'OverlappingNamesInLet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingNamesInLet2) -}
8779744ee11a4c887833c40d6a08d839
  $tc'OverlappingNamesInLet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingNamesInLet"#) -}
cbb4ca16060c307259caa92284ee3f93
  $tc'OverlappingPattern :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11960744825427171434##
                   1520314008483358318##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern1) -}
65c5a9cbf931047c6b92dfc3be7f349c
  $tc'OverlappingPattern1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8c080a876f638868fe5057cfb03a8fc9
  $tc'OverlappingPattern2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern3) -}
94f00f792ed9dbfe142f7d89b04676fd
  $tc'OverlappingPattern3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingPattern"#) -}
6bd06f7d93fbb1950f2b8b6967478957
  $tc'Parens :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14622819063455430700##
                   18389413459108140370##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Parens2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Parens1) -}
23651ab1ec58ca1efe643e7f9eb8f182
  $tc'Parens1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6766083c0c49dd696e20bb748c413f5f
  $tc'Parens2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Parens3) -}
33dc37731e096efe3dc6c2cb104f944f
  $tc'Parens3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Parens"#) -}
7cbaef67c3cc387d18f24d99df59e2ee
  $tc'PartiallyAppliedSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11594700896517925899##
                   13484729303284879899##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym1) -}
993413242ffbe8b159dfca3968b906a5
  $tc'PartiallyAppliedSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
26180e8d58e7f56042679f2aeb30e4ab
  $tc'PartiallyAppliedSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym3) -}
52ef7cddd853efc1c29cae6fd28ddddc
  $tc'PartiallyAppliedSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PartiallyAppliedSynonym"#) -}
1ac4d3b8c9f9f95a8eb12a4bc52e8fc4
  $tc'PathTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15559111717121988605##
                   10916738608955480867##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PathTree2
                   1#
                   Language.PureScript.AST.Declarations.$tc'PathTree1) -}
e99461818271368aed0c9acc0c0f28e8
  $tc'PathTree1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
84a987f87b1f0d20f4e4f1bf55cec4ab
  $tc'PathTree2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PathTree3) -}
358bcb56755c9bcf52351912ae83c48d
  $tc'PathTree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PathTree"#) -}
663a5a5c2fc61c881b54b8697e3fe0c4
  $tc'PatternGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9697696482562752422##
                   3271690662924202221##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PatternGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PatternGuard1) -}
2c994e70a2ee2fc5d696244cb013ca0a
  $tc'PatternGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7120dc5ec3390482b7e4605d7e7a4a0c
  $tc'PatternGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PatternGuard3) -}
d6600baf380a617ed7cbe86fad7b5d78
  $tc'PatternGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PatternGuard"#) -}
da5ee558f652cd46a0e12f81199ce6c8
  $tc'PositionHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4970322452130442105##
                   18357302627123468362##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
b3a2ee37b5966d1da055398519c9fa03
  $tc'PositionHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionHint2) -}
501de5bb0f45dc9464fddcaffd85d6ba
  $tc'PositionHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionHint"#) -}
cf796c6885e50b451f193c97434059db
  $tc'PositionedDoNotationElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6455996083666873526##
                   814627589014339677##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement1) -}
43d559d7c683ed57695e75e657f992ca
  $tc'PositionedDoNotationElement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9f246b1627de7ec6e3204a971a65425
  $tc'PositionedDoNotationElement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement3) -}
54b8b7481317cf6ee09fbc122689fc98
  $tc'PositionedDoNotationElement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedDoNotationElement"#) -}
bf2298d4c063061cd15d62aa71fd4e91
  $tc'PositionedError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17845466161766973548##
                   4311998286440933896##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedError1) -}
4692c0a85ce3a7fdfdb93257bcc339a1
  $tc'PositionedError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e9268ee5a07723278d9e5bbc3c66852c
  $tc'PositionedError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedError3) -}
c4941076ce19e31159af9b570dee056d
  $tc'PositionedError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedError"#) -}
3dab7831d2a4256aacf9a9c8c69db83b
  $tc'PositionedValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15922233998898359116##
                   10551131778732318148##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedValue1) -}
0b064515751e1ab738324f993e6cf09c
  $tc'PositionedValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
05d990d3eacd35f518948a5b12a5c739
  $tc'PositionedValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedValue3) -}
94c4c6e419e0d02b8bb1b9029258b22d
  $tc'PositionedValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedValue"#) -}
05d5a6a3322cb729e738d02a389996e7
  $tc'PossiblyInfiniteInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6539690012171551775##
                   5144715680711539943##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PossiblyInfiniteInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
86d9f037a6f7f0b48222ab09ae8b9c68
  $tc'PossiblyInfiniteInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PossiblyInfiniteInstance2) -}
7310a53ef34d360a73fb0b9f1f6a4633
  $tc'PossiblyInfiniteInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PossiblyInfiniteInstance"#) -}
54cc34a7baf0b4bdd2c3220788597bca
  $tc'PropertyIsMissing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18056851986742072180##
                   16519563275229832714##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PropertyIsMissing1
                   0#
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty1) -}
21bc6a6223d5eb6a3047ced1911ba485
  $tc'PropertyIsMissing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PropertyIsMissing2) -}
62676417b71abb690c76344086c74555
  $tc'PropertyIsMissing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PropertyIsMissing"#) -}
24541cc4fc5531531c989c350030afef
  $tc'ReExportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14356077100080755889##
                   3505943337744813140##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ReExportRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ReExportRef1) -}
66893eb3e417625fc212a28d4ae2c975
  $tc'ReExportRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e97b965a48523eb1d65e7db099073174
  $tc'ReExportRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ReExportRef3) -}
fb9628b4a2317e8b0991567640b3ecdf
  $tc'ReExportRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReExportRef"#) -}
09fa5aa9bcc7e547bee356f3e8d27e75
  $tc'RedefinedIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7391811996150194779##
                   858420198316715426##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'RedefinedIdent1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
d509af923bb0d79b8dee6eeec5987218
  $tc'RedefinedIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'RedefinedIdent2) -}
01b1bd35ebd029f7ae4151ded51e461e
  $tc'RedefinedIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RedefinedIdent"#) -}
72e63c34c38bb53fec528debaae5aed5
  $tc'ScopeConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10158257260774920522##
                   15238171821333933363##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict1) -}
b407701c78c5ef8ad980ab40f2a10093
  $tc'ScopeConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1fcb91039ad71e5f4f9aeb5475087a27
  $tc'ScopeConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict3) -}
1bc6a93f2512a6709f5226e9af996410
  $tc'ScopeConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScopeConflict"#) -}
d999e16c37278af190ef5ed7b0a12024
  $tc'ScopeShadowing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14176329495716921768##
                   17867709264259299276##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing1) -}
061336c4b1432d0e6ff3a4aac7d8f152
  $tc'ScopeShadowing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4427a6f610f09973f19d40d33bf8960
  $tc'ScopeShadowing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing3) -}
2cc2cf3c087cba86fea000bff7526da8
  $tc'ScopeShadowing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScopeShadowing"#) -}
86bcddf66add3097459eda24598a5d49
  $tc'ShadowedName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3950242429832026561##
                   7353042921908222257##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ShadowedName1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
a3c179ea047dca5ffbee9464f2f14d81
  $tc'ShadowedName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ShadowedName2) -}
d51011416ecadda1dfce800af1291c66
  $tc'ShadowedName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShadowedName"#) -}
b7bda31e005184ff5200d9e08aec3264
  $tc'ShadowedTypeVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16357110291001786373##
                   17656575823781518069##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ShadowedTypeVar1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
e4a3952ccd5c92d860b46dd2ca99dca3
  $tc'ShadowedTypeVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ShadowedTypeVar2) -}
7e2c35ae1e66ca4a4d61f07cc49690ac
  $tc'ShadowedTypeVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShadowedTypeVar"#) -}
9cfadb0afc6f89e05be9247d23256500
  $tc'SolverHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6327789796630909163##
                   668552919041525054##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'SolverHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
1ff8751d816fb559a19ade8794d6354a
  $tc'SolverHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'SolverHint2) -}
aeb7df4f61115705e37f49732804ceb8
  $tc'SolverHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SolverHint"#) -}
13dcfc6b57f06ffd2377bdff87d3313c
  $tc'TSAfter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16435196546987002156##
                   12617911581881512409##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TSAfter2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TSAfter1) -}
7d2f7136fefb41bbe1c8b2d7f98c6047
  $tc'TSAfter1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3c7afe8f38ce155f124ba795839baaed
  $tc'TSAfter2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TSAfter3) -}
3d2ae006a41359762048a8815e62fa32
  $tc'TSAfter3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TSAfter"#) -}
17f150ff1297622c4ce0224260ab687d
  $tc'TSBefore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15028353620384663142##
                   1229667474657402382##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TSBefore2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TSBefore1) -}
b40fab945be221d7228ec059e61d6173
  $tc'TSBefore1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2b54045632e4bc48972653cc63c50dcf
  $tc'TSBefore2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TSBefore3) -}
7a54a8b212840dd5b69454143d403a03
  $tc'TSBefore3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TSBefore"#) -}
dcf64d84517e8e6aa124223a829937c3
  $tc'TransitiveDctorExportError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9828462115513271165##
                   7665750327955870985##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError1) -}
30461d820e9da3ef6d132adbd809cb33
  $tc'TransitiveDctorExportError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
90f80292a880dd1508c1d28f1a83a74f
  $tc'TransitiveDctorExportError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError3) -}
2b0aaf0a14987634e66d860bb6f2b789
  $tc'TransitiveDctorExportError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TransitiveDctorExportError"#) -}
5187884fabb9b52a393dce46d4c756d2
  $tc'TransitiveExportError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3782031653715774798##
                   8658485108810668833##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError1) -}
9d3e097f3495d46c1959ce4c5910ced8
  $tc'TransitiveExportError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85e7390d755bbf9d53fab14ab386cf7d
  $tc'TransitiveExportError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError3) -}
f107ff4ff8f409453e2ff3ec74eab86c
  $tc'TransitiveExportError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TransitiveExportError"#) -}
941504f7f7a54ba8843f4a8b80737d21
  $tc'TypeClassDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5889402215878802968##
                   5275742501230268503##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration1) -}
bd5964d751cdfe25daebbc0cf2a46a77
  $tc'TypeClassDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
398e39209a61077b675cb4a422357557
  $tc'TypeClassDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration3) -}
be9f528dcc21e8e0fcc54fde6cb31edb
  $tc'TypeClassDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDeclaration"#) -}
6eca562d5783de5aff04c17392f5aecf
  $tc'TypeClassDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2256885733400616122##
                   16599790216136529091##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary1) -}
0a05d862beb0de919075b3f0b15d7485
  $tc'TypeClassDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
94a4805f72db944f3ff5fe441a8f047a
  $tc'TypeClassDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary3) -}
9109722bcee5420fba84c7a7c34fa414
  $tc'TypeClassDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDictionary"#) -}
b981a1be3dae95c05131a410468a0876
  $tc'TypeClassDictionaryAccessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1383521037929158302##
                   11864391909756541220##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor1) -}
9cbf38589ddbc0a63ee0e63dc74ed460
  $tc'TypeClassDictionaryAccessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8bd9c0ce163923f515748de8b7ea33bc
  $tc'TypeClassDictionaryAccessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor3) -}
483380e33b20c11ca39339b91da033a9
  $tc'TypeClassDictionaryAccessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDictionaryAccessor"#) -}
be4edc66fe4ccc254ea4e6527cc0da74
  $tc'TypeClassDictionaryConstructorApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1538207416994671464##
                   9892202134549859337##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp1) -}
71a06b3befa053bd03e41c55c927cb46
  $tc'TypeClassDictionaryConstructorApp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
28a622a010d20818f47ccfe6e675c606
  $tc'TypeClassDictionaryConstructorApp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp3) -}
f238580e84b85135bc6884ba2464c1b0
  $tc'TypeClassDictionaryConstructorApp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'TypeClassDictionaryConstructorApp"#) -}
4b1380f0bd7da153b2b5fb8537de3f29
  $tc'TypeClassRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16771942103838586835##
                   17155342427939971534##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef1) -}
adbaed6673e4553614163546ea034017
  $tc'TypeClassRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b1bd4d0a890df7a99447350ae7a962b
  $tc'TypeClassRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef3) -}
94a158f10018bcd2464220997fb71d6e
  $tc'TypeClassRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassRef"#) -}
e17adfd836ef8ed62a150331bc927bf5
  $tc'TypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4432007885801435287##
                   4789152454335556062##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration1) -}
1ab4c94188a87f1f4bab589d475c2dd7
  $tc'TypeDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
543c95fb69c7492d315bbc40276b5cf5
  $tc'TypeDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration3) -}
4ff6ba39f287c61dd3816583bd9e14c3
  $tc'TypeDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeDeclaration"#) -}
43797742225a2786286afc1981b25f16
  $tc'TypeDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9437976908334720391##
                   6349686257979992183##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData1) -}
1a5a8a39ed88a9621d8c08929edba4d5
  $tc'TypeDeclarationData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f1b65a4c32ae8daf4c63a04b72c41930
  $tc'TypeDeclarationData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData3) -}
05e952960449988191794702e3c0a1d4
  $tc'TypeDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeDeclarationData"#) -}
ab7c7b209ea3c8122306c1104fd54d9d
  $tc'TypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4265218557441821332##
                   6894167667902659839##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeFixity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeFixity1) -}
2b4bfae0e154f43157970659da814327
  $tc'TypeFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a962b5ddc69c76c2e70e4fb072a27e85
  $tc'TypeFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeFixity3) -}
3a1944ad47ed9464f3fd4804b33d69f7
  $tc'TypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeFixity"#) -}
9903cc98b68a4c958b566f60f2598c3e
  $tc'TypeInstanceDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13398146061446930485##
                   5454058155837070884##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration1) -}
2f2f260e77dd864f5b68fca3f3fc691d
  $tc'TypeInstanceDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e7f2fa41710f7fe8416e88cb5e1092c
  $tc'TypeInstanceDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration3) -}
0fb5e8aba0f4f90ce430aa1a73f6505b
  $tc'TypeInstanceDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeInstanceDeclaration"#) -}
a52040f48aea98e60d472c49cb346a91
  $tc'TypeInstanceRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3522562920365843060##
                   146030314577689482##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef1) -}
0116a689a0dc607f02e9b096b3756af6
  $tc'TypeInstanceRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9022b03df88cf7b191356751fb152dff
  $tc'TypeInstanceRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef3) -}
252c28c345088d25606f9c3ef441398f
  $tc'TypeInstanceRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeInstanceRef"#) -}
c105e66cad9e4361f4dbbb6732287de2
  $tc'TypeOpRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1097222756523519476##
                   15829990244986894483##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef1) -}
7a9296bb3f8a099d52a2bbd60ce74219
  $tc'TypeOpRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
237c95ada9da377631ede47ad04c4edf
  $tc'TypeOpRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef3) -}
5ea683935dc2f2a776467fc141471f48
  $tc'TypeOpRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOpRef"#) -}
313cf113a51a66668e338578d512e50f
  $tc'TypeRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7391184004570533596##
                   12940409089393380281##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeRef1) -}
04cf228eaf797c2ad5bc66e6d68fd582
  $tc'TypeRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f14942aae35dd97d30c076dcf86a29c
  $tc'TypeRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeRef3) -}
49ee6e243ae8ca3f5dcb85e923f9e02b
  $tc'TypeRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeRef"#) -}
d3b3d45899bbc2b892546441db7a64ab
  $tc'TypeSynonymDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2552567703567709564##
                   1232263025523235931##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration1) -}
ed882dcdb87bcae7f3dbaf79916f4be9
  $tc'TypeSynonymDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4034c85a3d3e51a89007bc8098515cdd
  $tc'TypeSynonymDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration3) -}
bd5132eec468d196b55ab1bedec356a3
  $tc'TypeSynonymDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeSynonymDeclaration"#) -}
321f3a605aa4e2434f4c9ac01d35f4cc
  $tc'TypeSynonymInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4183466816239954407##
                   16833002921413801920##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
2bbf7051ea45328d11e1e43f283f10cc
  $tc'TypeSynonymInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymInstance2) -}
07c6e77de1a548d3ea9d996a80e71f8f
  $tc'TypeSynonymInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeSynonymInstance"#) -}
9392c0b565cb156477d045046fbbb3a1
  $tc'TypedValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4229836648006907385##
                   12196647479945584360##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypedValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypedValue1) -}
8ee12ab481389f0400bebcf11429b735
  $tc'TypedValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3c10470f69be4614f3a901ad74585127
  $tc'TypedValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypedValue3) -}
9a8f609063fb713982589a3142cb8b82
  $tc'TypedValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypedValue"#) -}
b47c5483271054b864148591d1a1843d
  $tc'TypesDoNotUnify :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5752459958621268835##
                   5164947269643353957##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypesDoNotUnify1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified1) -}
924cea9ad27e1eaeb150452d369fdc61
  $tc'TypesDoNotUnify1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypesDoNotUnify2) -}
0740e0731000f0be488423e5521bfb65
  $tc'TypesDoNotUnify2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypesDoNotUnify"#) -}
fe54366286f0be8cfbd4239115e00e4d
  $tc'UnaryMinus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2933022915288532909##
                   14028772418509653051##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus1) -}
5325e9c38a207260efd1b5b67f88ee5a
  $tc'UnaryMinus1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
337d27ec825b93e9b97625cfffd82422
  $tc'UnaryMinus2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus3) -}
badc3bfbbc55ca635d21ccfa84212002
  $tc'UnaryMinus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryMinus"#) -}
b5de9bb32cfc5c920bd2469591b5e878
  $tc'UndefinedTypeVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2089747766493355511##
                   11012545452833647990##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UndefinedTypeVariable1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
a0d24cd520791f1d746c27662d2009ba
  $tc'UndefinedTypeVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UndefinedTypeVariable2) -}
106f49c2c569d0f2e7fd9d9c16261d42
  $tc'UndefinedTypeVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UndefinedTypeVariable"#) -}
6f84985132947f83f4ee17045c40dff0
  $tc'UnknownClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7762698731645012140##
                   3836178273994259233##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownClass2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownClass1) -}
f4915efa638a68f1dd71c1221e252203
  $tc'UnknownClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
77b45fed5742a6ce92d9f1c69148e2d5
  $tc'UnknownClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownClass3) -}
83a807e17257f2f38851e4a5c9164677
  $tc'UnknownClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownClass"#) -}
83740e9b614c3b1af759dd646672c348
  $tc'UnknownExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2327096060651405890##
                   9889662626254787352##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownExport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
13f65e2ab3359c38d9706f6d8a1c25c1
  $tc'UnknownExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownExport2) -}
2df12bcbae654d17ecb7a7349a9877bf
  $tc'UnknownExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownExport"#) -}
d470a26af2d3ddc0632d5a684226eaf0
  $tc'UnknownExportDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10015695915105152984##
                   13984103112752932735##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor1) -}
7c09fbf46b1881439194c360d8192de5
  $tc'UnknownExportDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
67af79d176f0d6960d71d814eb8260ab
  $tc'UnknownExportDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor3) -}
87d14b7a640396804ba96535009e7378
  $tc'UnknownExportDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownExportDataConstructor"#) -}
613ba0bd7f4b8745dd73e05749d434a3
  $tc'UnknownImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17899756629814112221##
                   9558884803155612692##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownImport1) -}
a880c0007a018f7f1f5722c166ef9c30
  $tc'UnknownImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1a0acb47e8a7443135d547fd9ed3b66d
  $tc'UnknownImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownImport3) -}
d6dbd92d861e487c6f6118fde3af2dd9
  $tc'UnknownImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownImport"#) -}
4279ed5935041c8ca86c56b5fcff4c0d
  $tc'UnknownImportDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9631735345512069182##
                   17155569241422458692##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor1) -}
cccc6293d90effebaf57c57a6f5c19e1
  $tc'UnknownImportDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c6381b0018d3e28c69bcbe028b79c01b
  $tc'UnknownImportDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor3) -}
8ceb6a4a136d48e6b1746d526e9c6036
  $tc'UnknownImportDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownImportDataConstructor"#) -}
90d5bd277e3e0bcb40457d02b8d5ed1a
  $tc'UnknownName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5206512843774681680##
                   12582332622174406008##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownName2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownName1) -}
fff7f45e052ee0b142d093535295363d
  $tc'UnknownName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
99271233357691911df62a205689d9e7
  $tc'UnknownName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownName3) -}
f7588b6cfd33eef16b39b3def8129fda
  $tc'UnknownName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownName"#) -}
dc16faaf156cd24219ccd25c799afd39
  $tc'UnnecessaryFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9504438690871753419##
                   4903094962621713431##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule1) -}
47eeea1d639b234e470a7c3ff6a9eff1
  $tc'UnnecessaryFFIModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d024394ed8432d358d89bbbc011f9ffe
  $tc'UnnecessaryFFIModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule3) -}
0225678ef63d5f7cd7b3c6f0d4613e6f
  $tc'UnnecessaryFFIModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnnecessaryFFIModule"#) -}
f23878e52444ee417472ad8da3863497
  $tc'UnusableDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15689940876232286485##
                   4962805930579070470##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration1) -}
fb04f41db93c3aa7f55521634a12c0e7
  $tc'UnusableDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9d7051ff1359366a04995f224cc8f3f
  $tc'UnusableDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration3) -}
4240904c0e52904266137292955753cb
  $tc'UnusableDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusableDeclaration"#) -}
1def1129b8abaac763a7791b88f46697
  $tc'UnusedDctorExplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3273540788055015921##
                   4353596938684130046##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport1) -}
33900877993c03e643d87530deba2159
  $tc'UnusedDctorExplicitImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7d73abcf824b06eb6ba9c787810749a6
  $tc'UnusedDctorExplicitImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport3) -}
b50907c4084ae3e0b62bcfca6153e667
  $tc'UnusedDctorExplicitImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedDctorExplicitImport"#) -}
6877038aee817433511b706807fe79c1
  $tc'UnusedDctorImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9047268536444216108##
                   9604819150486883716##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport1) -}
303adf93d584daa73f7c2da156cf7f1b
  $tc'UnusedDctorImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ff582c44fa56d638173f60802ee61c03
  $tc'UnusedDctorImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport3) -}
573104962873e90101d74f76fe806d9e
  $tc'UnusedDctorImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedDctorImport"#) -}
40acb6414229ad754c70101a8179d280
  $tc'UnusedExplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18109367079894305155##
                   7635432002214513817##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport1) -}
992d9b3dd1273bd28d02eafd73813da9
  $tc'UnusedExplicitImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e8c668e9c116f6dab0655ca1996500a
  $tc'UnusedExplicitImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport3) -}
966a313f0262847a2e65490762c67b0d
  $tc'UnusedExplicitImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedExplicitImport"#) -}
20fd59e6f68d4f5fc5f863c0c4c93e49
  $tc'UnusedFFIImplementations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13506589365722412111##
                   16915735104506837719##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedFFIImplementations1
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations1) -}
49e391dce3c35509e75aa9e98fbb3421
  $tc'UnusedFFIImplementations1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedFFIImplementations2) -}
88b8913ed40cc7d1ef7221c6aa0368de
  $tc'UnusedFFIImplementations2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedFFIImplementations"#) -}
ac8af30f9fe69a4c824636d9821e3314
  $tc'UnusedImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7425007346553268529##
                   3687859413837277940##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
130e75107c8d7a72e41b78d6940374e6
  $tc'UnusedImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedImport2) -}
17f508760099a482a83c4f1700bc9d7f
  $tc'UnusedImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedImport"#) -}
96fada861ce38fc5f4d89b4000523ca1
  $tc'UnusedTypeVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8910230875866558862##
                   9402810796978282845##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedTypeVar1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
4f1cf3d65f556b873db2a2bead099053
  $tc'UnusedTypeVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedTypeVar2) -}
9e7201b1203d751f73a11c6bd6474bcf
  $tc'UnusedTypeVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedTypeVar"#) -}
8e5c2740b1a44f422592a247f6127369
  $tc'UnverifiableSuperclassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8595087504831409998##
                   14038292754676998893##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnverifiableSuperclassInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance1) -}
8d3bc1220fef1a260e082c153d90b66f
  $tc'UnverifiableSuperclassInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnverifiableSuperclassInstance2) -}
fb3987cce964f41ca6241b2378d8d7a1
  $tc'UnverifiableSuperclassInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnverifiableSuperclassInstance"#) -}
ef8f4ce6146c2f0bf4d0067f6e7ac6e6
  $tc'UserDefinedWarning :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9407022237532187751##
                   17423985592505340644##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UserDefinedWarning1
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
a86c64a09dd8e66135887ff23094f19c
  $tc'UserDefinedWarning1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UserDefinedWarning2) -}
7a7cb1a9917445cc8ee8167ff8904652
  $tc'UserDefinedWarning2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UserDefinedWarning"#) -}
4a1f1fe28e51330cbe63ef6c2a30f777
  $tc'ValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3630756392998018476##
                   11546648707042979399##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration1) -}
63f622e21196c3e16ceccc27b0169e6f
  $tc'ValueDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a80266325e3b9f56ae10719a69879fe
  $tc'ValueDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration3) -}
fa4d6f94f84f22391f172ad69753e777
  $tc'ValueDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueDeclaration"#) -}
df4c7d41ffcabc1c9bc791b1de529373
  $tc'ValueDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10789286283738709981##
                   1066084231581476582##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData2
                   1#
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData1) -}
a98471853dda1a1b61fd7f5da44b467a
  $tc'ValueDeclarationData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
822d7ba0b151a3d31a43e45da95552e0
  $tc'ValueDeclarationData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData3) -}
bf826c958fa268ae1ec685f65da8ad13
  $tc'ValueDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueDeclarationData"#) -}
bf192080b8c23b05083541f547e8729e
  $tc'ValueFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2153714906668660581##
                   5006437616670436231##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueFixity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueFixity1) -}
1e5830c46246b416d02ce12794b591ba
  $tc'ValueFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
422f63c398a6b921e349b829a35baeab
  $tc'ValueFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueFixity3) -}
0a7f2b76e0f2ce399a8758dced074568
  $tc'ValueFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueFixity"#) -}
01e43063384a7b39240d61996c222f76
  $tc'ValueOpRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   934610087501120255##
                   9406901645315704420##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef1) -}
7f8a0d1f41d9492d6cff37354d9af325
  $tc'ValueOpRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d0c0e101bbf5b618f8695acb9b2156c2
  $tc'ValueOpRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef3) -}
9df3b38e397f2820ec2fd347bf74fc6e
  $tc'ValueOpRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueOpRef"#) -}
c4a697b83282388a08681f5cbae160f7
  $tc'ValueRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18303848994088785995##
                   9412168969181631187##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueRef1
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef1) -}
4912c5e5eacdff174a9cbd64a2e1f368
  $tc'ValueRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueRef2) -}
3f0d4d7be00a664cb8dc06ce6c72b755
  $tc'ValueRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueRef"#) -}
14de812ee90c1844eb294a407b2c479a
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7302900312770444607##
                   7452109427980380574##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Var2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Var1) -}
737d657a83c9f58500fd194a69cadc62
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
08a943f5c2e58282dd092f8aa3714360
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Var3) -}
467ac422c17b9442a0b38398a6cce838
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
42e5ca167c65fb055af1c20a996700bc
  $tc'WildcardInferredType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4776145565657939788##
                   4017406903938462648##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType1) -}
f1f59a79b1967b8db362747092ad4d1f
  $tc'WildcardInferredType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
432737dd8de0b8af2948df17691254de
  $tc'WildcardInferredType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType3) -}
50fa51945d21139814b62478b63a1f08
  $tc'WildcardInferredType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WildcardInferredType"#) -}
4ed334a33b79df43b4617cccbb075272
  $tcAssocList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5480323183674663353##
                   6237340915248697793##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcAssocList1
                   0#
                   GHC.Types.krep$*->*->*) -}
7b781f8527215cdce8a9dc5535ac5fab
  $tcAssocList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcAssocList2) -}
a2b59c578d6bbfa623cab8e1474d9c93
  $tcAssocList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssocList"#) -}
c62d98283841304e4a1b99172c63e2f5
  $tcCaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2031023968093146243##
                   6564256702921938756##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcCaseAlternative1
                   0#
                   GHC.Types.krep$*) -}
57da10f2d9e8763fe86fe6dcc7922ade
  $tcCaseAlternative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcCaseAlternative2) -}
54e459199dd5f42d6c1e0204c4d76f26
  $tcCaseAlternative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CaseAlternative"#) -}
24e68f946ac1d4e610d3cdaece76615e
  $tcDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17501620526561750916##
                   2192969668867221965##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDeclaration1
                   0#
                   GHC.Types.krep$*) -}
8514049c5d1057dc1ad979adf9a6faf8
  $tcDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDeclaration2) -}
0248a4aaacefd942609cc89d85a2d641
  $tcDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Declaration"#) -}
fd530c5a6ed1032ec5e7f46ae7ebb4c4
  $tcDeclarationRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12864799423534532921##
                   8319156633869603894##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDeclarationRef1
                   0#
                   GHC.Types.krep$*) -}
d0d54522913ba2f297d52d9b75c5b41b
  $tcDeclarationRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDeclarationRef2) -}
3b5bcb80ac012e26ff92754436ad44c2
  $tcDeclarationRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DeclarationRef"#) -}
f95ebf2d697d03978315b0c17b35105f
  $tcDoNotationElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7322901700208554081##
                   12501272632507114552##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDoNotationElement1
                   0#
                   GHC.Types.krep$*) -}
7802fe99daedff75bca3fd75f126d71b
  $tcDoNotationElement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDoNotationElement2) -}
8c9858632763722509ca3fdf2701eacb
  $tcDoNotationElement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DoNotationElement"#) -}
38a48f05b78bd0d30e7a34412ca81c37
  $tcErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8292492254139450049##
                   9451264864701489394##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcErrorMessage1
                   0#
                   GHC.Types.krep$*) -}
8e1956c32884ff23782f104a1dc97c7e
  $tcErrorMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcErrorMessage2) -}
bcb93372cb8e5a628aa9b89cce93f512
  $tcErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessage"#) -}
22b0f06854a68f586c2f46c5d6e52f3f
  $tcErrorMessageHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15966854608582918118##
                   2548571153030612610##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcErrorMessageHint1
                   0#
                   GHC.Types.krep$*) -}
55e02455e3d5eb22daad2d42f4e54861
  $tcErrorMessageHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcErrorMessageHint2) -}
c287e7a0da12636649dc15646b8262ca
  $tcErrorMessageHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessageHint"#) -}
8d9b58b0cea95c93e3eb76af3c2e0e8f
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9176314674868826844##
                   18201498230511509748##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcExpr1
                   0#
                   GHC.Types.krep$*) -}
f8265cf15db3c2e69a8ef044f768ae28
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcExpr2) -}
6c4af3c4fbd7d1ccf789fb326c5c76c7
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
782ad8131ec0cecfe3fd824bae9bff64
  $tcGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2719290527755798320##
                   1451639567752438508##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcGuard1
                   0#
                   GHC.Types.krep$*) -}
18bcbd95124ebadc218f5bd086425b57
  $tcGuard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcGuard2) -}
fde950be9056144f4a57d1296f749f22
  $tcGuard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Guard"#) -}
28e12e3bbae0acd25d2a282118b18061
  $tcGuardedExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15129549122423197605##
                   15242991834774234247##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcGuardedExpr1
                   0#
                   GHC.Types.krep$*) -}
03cd26d3ccf14aaf6ed6e7b6545e73b2
  $tcGuardedExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcGuardedExpr2) -}
b9ffd3116eb94b39fe139317e9e64d04
  $tcGuardedExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GuardedExpr"#) -}
4b0087994112673a2aa7e1d6878f2f4b
  $tcHintCategory :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15843076262188468456##
                   8543817405451319583##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcHintCategory1
                   0#
                   GHC.Types.krep$*) -}
8ef84bb527de5ce21370756df02ea1a8
  $tcHintCategory1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcHintCategory2) -}
4ce8820ff755b6cb42ccfbdb53c5ebe4
  $tcHintCategory2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HintCategory"#) -}
9ad1c2b0679a09a4382f55fb47c9dcb4
  $tcImportDeclarationType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2973409332744718499##
                   6468112092977814535##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcImportDeclarationType1
                   0#
                   GHC.Types.krep$*) -}
38d90e8113dc2a99ed83b639a4949b27
  $tcImportDeclarationType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcImportDeclarationType2) -}
1002b4645c3c591f158a9a981827f153
  $tcImportDeclarationType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportDeclarationType"#) -}
ad4c4fd2e133365ec7f8daf8ace4a15d
  $tcModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7251281205224085898##
                   2396367319564502866##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcModule1
                   0#
                   GHC.Types.krep$*) -}
463b156cfb89f7e4bbb8aff28ab2e86c
  $tcModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcModule2) -}
5f9efbf1bcf2f59433c8421f3bc2e462
  $tcModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module"#) -}
0e9f1d8da02e711676187f31577d7b87
  $tcPathNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12526736683850812913##
                   15079786322149488935##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcPathNode1
                   0#
                   GHC.Types.krep$*Arr*) -}
2b6388b9814cde43e6ae6ae8890e27d4
  $tcPathNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcPathNode2) -}
f7b78fc062243222634fe9e1301ac38f
  $tcPathNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathNode"#) -}
991ecfe5d328f42f4ce9864171a62190
  $tcPathTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1103766398398540848##
                   13689818293993853119##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcPathTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
a5446a1cd815ed69be4d50b27cdf0364
  $tcPathTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcPathTree2) -}
26f275b750a97ecad887687d137ce13e
  $tcPathTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathTree"#) -}
98e9532080f12d2d024d0a412d062790
  $tcSimpleErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9709077579602008214##
                   10261165168732963424##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcSimpleErrorMessage1
                   0#
                   GHC.Types.krep$*) -}
5e75a7ea77cc4588e601fa108311aca5
  $tcSimpleErrorMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcSimpleErrorMessage2) -}
bbbf2ba9a4933fd5f3b37adf0d3a4ab0
  $tcSimpleErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SimpleErrorMessage"#) -}
2e8cc3ae4697f7cfd2aaa5d4672b3bc0
  $tcTypeDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14873485928241610832##
                   4323299993756204952##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeDeclarationData1
                   0#
                   GHC.Types.krep$*) -}
ec1bbbd2f92d6f6e3ac634d9124210ab
  $tcTypeDeclarationData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeDeclarationData2) -}
105b7681c78b27b19b091835baaf5435
  $tcTypeDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeDeclarationData"#) -}
ac5b716cc7867ce04bb9f927335f7445
  $tcTypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3658350734106687717##
                   13042073968003658774##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeFixity1
                   0#
                   GHC.Types.krep$*) -}
d3aff82c07a9a0a2f87395c7f5ee50ac
  $tcTypeFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeFixity2) -}
cbf6ff70d689f59cd2fd5022da8fabcc
  $tcTypeFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeFixity"#) -}
44992141ce009e1791f46a1d1740e157
  $tcTypeInstanceBody :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5321058897225182736##
                   3734041154362121717##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeInstanceBody1
                   0#
                   GHC.Types.krep$*) -}
b79532a5f96e70355dbb970553d6c648
  $tcTypeInstanceBody1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeInstanceBody2) -}
812a9d67994b8ef1a5dc6d78d2450cd5
  $tcTypeInstanceBody2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeInstanceBody"#) -}
541ae071e43a9c87d56a11f24c5a458e
  $tcTypeSearch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10727493274967522127##
                   3524084905078862753##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeSearch1
                   0#
                   GHC.Types.krep$*) -}
543106e5b609f5537dba2784858b2bf5
  $tcTypeSearch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeSearch2) -}
915853d753cc875b441850ee0360970b
  $tcTypeSearch2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeSearch"#) -}
aad8223d8f92cfc9b55d0b9cfb420aad
  $tcValueDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12077791780661237096##
                   14134270291118265978##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcValueDeclarationData1
                   0#
                   GHC.Types.krep$*Arr*) -}
e4fe287b5724ee2611d65e6a4ef31936
  $tcValueDeclarationData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcValueDeclarationData2) -}
8ac34b6c5c25b0e78ffbc65b60a83fd8
  $tcValueDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueDeclarationData"#) -}
eea5908d571ab5c76ab9b5d3d8ed70a5
  $tcValueFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6354703547279689015##
                   16285018466367398641##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcValueFixity1
                   0#
                   GHC.Types.krep$*) -}
481ed43e6a7bff7d93089aeeec0d8ada
  $tcValueFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcValueFixity2) -}
76099254b7104b0438a0524908a92424
  $tcValueFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueFixity"#) -}
2bf1e7fbac8d6736f058ba60b00d70d7
  $tcWhereProvenance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17895560865877850144##
                   1207379041788818756##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcWhereProvenance1
                   0#
                   GHC.Types.krep$*) -}
bf85dfc2d36bb66aa498c795b77244a0
  $tcWhereProvenance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcWhereProvenance2) -}
8e08bb5c0dc72cce3967a7a486d1c795
  $tcWhereProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WhereProvenance"#) -}
010bb96ba725c0389cc2c8d76cc9f48f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.AST.Declarations.$trModule3
                   Language.PureScript.AST.Declarations.$trModule1) -}
c064745a4867bff7bf92d3fda2f49a04
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$trModule2) -}
33ecb2838370d7d300764bf18400ad42
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations"#) -}
990ff64d79de0001320b4fa70e822fc9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$trModule4) -}
12757ac0dcc41ba0e51f4f0878e61c04
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
9d808e302d7e2addfae843fbe8dca7d8
  $w$c< ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                case Data.Text.$w$ccompare ww15 ww16 ww17 ww19 ww20 ww21 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> Data.Text.$fOrdText_$c<
                                       ww3
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                       ww7
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                  GHC.Types.GT -> GHC.Types.False } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                     case Data.Text.$w$ccompare
                                            ww15
                                            ww16
                                            ww17
                                            ww19
                                            ww20
                                            ww21 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> Data.Text.$fOrdText_$c<
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                       GHC.Types.GT -> GHC.Types.False } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
9b52e49542c9b2954d3b27b9ca5c1456
  $w$c<1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b2
                                       -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                 a2
                                                 b2 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$c<
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.False }
                                       Data.Either.Right ipv -> GHC.Types.True }
                                  Data.Either.Right a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.False
                                       Data.Either.Right b2
                                       -> case a2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                          case b2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                          case Data.Text.$w$ccompare
                                                 ww15
                                                 ww16
                                                 ww17
                                                 ww19
                                                 ww20
                                                 ww21 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$c<
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.False } } } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                      a1
                                                      b2 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$c<
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.False }
                                            Data.Either.Right ipv -> GHC.Types.True }
                                       Data.Either.Right a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.False
                                            Data.Either.Right b2
                                            -> case a1
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                               case Data.Text.$w$ccompare
                                                      ww15
                                                      ww16
                                                      ww17
                                                      ww19
                                                      ww20
                                                      ww21 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$c<
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.False } } } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
286d17bb60505226ca94f3273a63c4ca
  $w$c== ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$c==
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of wild4 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                case GHC.Prim.==# dt2 dt5 of lwild {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Int# #)}
                                            dt
                                            (GHC.Prim.int2Word# dt1)
                                            dt3
                                            (GHC.Prim.int2Word# dt4)
                                            (GHC.Prim.int2Word# dt2)
                                            GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                     case GHC.Prim.narrow32Int# ds3 of wild6 {
                                       DEFAULT -> GHC.Types.False
                                       0#
                                       -> Data.Text.$fEqText_$c==
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P) } } } } }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fEqProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild6 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            0#
                                            -> Data.Text.$fEqText_$c==
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P) } } } } } } } } } } }) -}
0c202c2ee69c99dceebb47d5f954c948
  $w$c==1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$c==
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a1
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b1
                                       -> case Language.PureScript.Names.$fEqIdent_$c==
                                                 a1
                                                 b1 of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Data.Text.$fEqText_$c==
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P) }
                                       Data.Either.Right ipv -> GHC.Types.False }
                                  Data.Either.Right a1
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.False
                                       Data.Either.Right b1
                                       -> case a1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of wild5 { Data.Text.Internal.Text dt dt1 dt2 ->
                                          case b1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of wild6 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                          case GHC.Prim.==# dt2 dt5 of lwild {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt
                                                      (GHC.Prim.int2Word# dt1)
                                                      dt3
                                                      (GHC.Prim.int2Word# dt4)
                                                      (GHC.Prim.int2Word# dt2)
                                                      GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                               case GHC.Prim.narrow32Int# ds3 of wild8 {
                                                 DEFAULT -> GHC.Types.False
                                                 0#
                                                 -> Data.Text.$fEqText_$c==
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P) } } } } } } }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fEqProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a2
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fEqIdent_$c==
                                                      a2
                                                      b2 of wild6 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> Data.Text.$fEqText_$c==
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P) }
                                            Data.Either.Right ipv -> GHC.Types.False }
                                       Data.Either.Right a2
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.False
                                            Data.Either.Right b2
                                            -> case a2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of wild6 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of wild7 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               case GHC.Prim.==# dt2 dt5 of lwild {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild8 { (#,#) ds2 ds3 ->
                                                    case GHC.Prim.narrow32Int# ds3 of wild9 {
                                                      DEFAULT -> GHC.Types.False
                                                      0#
                                                      -> Data.Text.$fEqText_$c==
                                                           ww3
                                                             `cast`
                                                           (Language.PureScript.Names.N:OpName[0]
                                                                <'Language.PureScript.Names.ValueOpName>_P)
                                                           ww7
                                                             `cast`
                                                           (Language.PureScript.Names.N:OpName[0]
                                                                <'Language.PureScript.Names.ValueOpName>_P) } } } } } } } } } } } } }) -}
d9c4329c2033a09d3d3c531f291b802d
  $w$ccompare ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                case Data.Text.$w$ccompare ww15 ww16 ww17 ww19 ww20 ww21 of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> Data.Text.$fOrdText_$ccompare
                                       ww3
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                       ww7
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                  GHC.Types.GT -> GHC.Types.GT } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                     case Data.Text.$w$ccompare
                                            ww15
                                            ww16
                                            ww17
                                            ww19
                                            ww20
                                            ww21 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> Data.Text.$fOrdText_$ccompare
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                       GHC.Types.GT -> GHC.Types.GT } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
6c398f77f2e27101a5b5a9f3477a7056
  $w$ccompare1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b2
                                       -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                 a2
                                                 b2 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$ccompare
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.GT }
                                       Data.Either.Right ipv -> GHC.Types.LT }
                                  Data.Either.Right a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.GT
                                       Data.Either.Right b2
                                       -> case a2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                          case b2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                          case Data.Text.$w$ccompare
                                                 ww15
                                                 ww16
                                                 ww17
                                                 ww19
                                                 ww20
                                                 ww21 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$ccompare
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.GT } } } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                      a1
                                                      b2 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.LT
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$ccompare
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.GT }
                                            Data.Either.Right ipv -> GHC.Types.LT }
                                       Data.Either.Right a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.GT
                                            Data.Either.Right b2
                                            -> case a1
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                               case Data.Text.$w$ccompare
                                                      ww15
                                                      ww16
                                                      ww17
                                                      ww19
                                                      ww20
                                                      ww21 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.LT
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$ccompare
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.GT } } } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
6bb793796adb411b63074cabb1cd2dc5
  $w$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ k
                   @ t
                   (w :: GHC.Show.Show k)
                   (w1 :: GHC.Show.Show t)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Language.PureScript.AST.Declarations.AssocList k t)
                   (w3 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowAssocList3
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.AST.Declarations.$fShowAssocList2
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.AST.Declarations.$fShowAssocList1
                                 x
                           } in
                           case w2
                                  `cast`
                                (Language.PureScript.AST.Declarations.N:AssocList[0]
                                     <k>_R <t>_R) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww1 { (,) ww2 ww3 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)4
                                     (GHC.Show.showsPrec
                                        @ k
                                        w
                                        GHC.Show.$fShow(,)1
                                        ww2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__1
                                           (GHC.Show.$fShow(,)_$sgo1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 (let {
                                                    lvl279 :: [GHC.Types.Char]
                                                    = GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showList__2
                                                        s
                                                  } in
                                                  letrec {
                                                    showl :: [(k, t)] -> GHC.Base.String
                                                      {- Arity: 1, Strictness: <S,1*U> -}
                                                    = \ (ds2 :: [(k, t)]) ->
                                                      case ds2 of wild1 {
                                                        [] -> lvl279
                                                        : y ys
                                                        -> GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.showList__1
                                                             (case y of ww4 { (,) ww5 ww6 ->
                                                              GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.$fShow(,)4
                                                                (GHC.Show.showsPrec
                                                                   @ k
                                                                   w
                                                                   GHC.Show.$fShow(,)1
                                                                   ww5
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      GHC.Show.showList__1
                                                                      (GHC.Show.$fShow(,)_$sgo1
                                                                         (GHC.Types.:
                                                                            @ GHC.Types.Char
                                                                            GHC.Show.$fShow(,)2
                                                                            (showl ys))
                                                                         (GHC.Show.showsPrec
                                                                            @ t
                                                                            w1
                                                                            GHC.Show.$fShow(,)1
                                                                            ww6)
                                                                         (GHC.Types.[]
                                                                            @ GHC.Show.ShowS)))) }) }
                                                  } in
                                                  showl xs))
                                              (GHC.Show.showsPrec @ t w1 GHC.Show.$fShow(,)1 ww3)
                                              (GHC.Types.[] @ GHC.Show.ShowS)))) }) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w3
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w3)) }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Binders.Binder]
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
927a4a1acceccbe5ab77b4ee8603376a
  $w$cshowsPrec10 ::
    GHC.Show.Show t =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
8e30a25d4e02c7b2b335e950dcfbf657
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Type
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: [Language.PureScript.Comments.Comment])
                   (ww3 :: Language.PureScript.Names.Ident)
                   (ww4 :: Language.PureScript.Types.Type) ->
                 let {
                   f156 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.AST.Declarations.$fFoldableAssocList5
                       ww3
                 } in
                 let {
                   f157 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                       Language.PureScript.AST.Declarations.$fFoldableAssocList5
                       ww4
                 } in
                 let {
                   lvl279 :: GHC.Show.ShowS {- Arity: 1 -}
                   = Language.PureScript.Comments.$fShowComment_$cshowList ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowTypeDeclarationData5
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.AST.Declarations.$fShowTypeDeclarationData4
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (case ww1 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                              Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                0#
                                ww6
                                ww7
                                ww8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__1
                                   (GHC.Show.$fShow(,)_$sgo1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)2
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.showCommaSpace1
                                            (GHC.CString.unpackAppendCString#
                                               Language.PureScript.AST.Declarations.$fShowTypeDeclarationData3
                                               (f156
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     GHC.Show.showCommaSpace1
                                                     (GHC.CString.unpackAppendCString#
                                                        Language.PureScript.AST.Declarations.$fShowTypeDeclarationData2
                                                        (f157
                                                           (GHC.CString.unpackAppendCString#
                                                              Language.PureScript.AST.Declarations.$fShowAssocList1
                                                              x))))))))
                                      lvl279
                                      (GHC.Types.[] @ GHC.Show.ShowS))) })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
e13f3a8cc777e48a290eb92b43fc6780
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,1*U(1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Fixity)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 let {
                   f156 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       11#
                       ww5
                       ww6 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                     Language.PureScript.AST.Operators.$w$cshowsPrec1
                       11#
                       ww5
                       ww6
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f156
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.TypeOpName
                                   11#
                                   ww3
                                   x)))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowTypeFixity2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowTypeFixity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
9f93487d1a91f557ef94e379878c19dd
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
1eecb3688c902135881b41534974efa7
  $w$cshowsPrec14 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Environment.NameKind
    -> [Language.PureScript.AST.Binders.Binder]
    -> a
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
ae99f98066e02549928fd85e0bbdeaf3
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,1*U(1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Fixity)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 let {
                   f156 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName))
                       Language.PureScript.AST.Declarations.$fShowValueFixity_$s$fShowEither
                       11#
                       ww5
                       ww6 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                     Language.PureScript.AST.Operators.$w$cshowsPrec1
                       11#
                       ww5
                       ww6
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f156
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.ValueOpName
                                   11#
                                   ww3
                                   x)))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowValueFixity2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowValueFixity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
9de74e8b46bfd07e044a72617cc5da5c
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
b31d94d0c7b90700d40f9ba6ec420e41
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
da031e6209a3e4ac8288b63d31cd26f7
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (ww2 :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowErrorMessage2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                                  Language.PureScript.AST.Declarations.$fFoldableAssocList5
                                  x1
                                  (let {
                                     lvl279 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Language.PureScript.AST.Declarations.ErrorMessageHint]
                                              -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl279
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                                                 Language.PureScript.AST.Declarations.$fFoldableAssocList5
                                                 y
                                                 (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.AST.Declarations.Guard) ->
                 case w of wild {
                   Language.PureScript.AST.Declarations.ConditionGuard b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowGuard3
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowGuard3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.AST.Declarations.PatternGuard b1 b2
                   -> let {
                        f156 :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Binders.$fShowBinder_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b2
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.AST.Declarations.$fShowGuard2
                             (f156 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.AST.Declarations.$fShowGuard2
                                (f156
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x))))) } }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Declarations.Guard]
    -> Language.PureScript.AST.Declarations.Expr
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.AST.Declarations.Guard])
                   (ww2 :: Language.PureScript.AST.Declarations.Expr) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowGuardedExpr2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Language.PureScript.AST.Declarations.$w$cshowsPrec6
                                  0#
                                  x1
                                  (let {
                                     lvl279 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Language.PureScript.AST.Declarations.Guard]
                                              -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Language.PureScript.AST.Declarations.Guard]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl279
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Language.PureScript.AST.Declarations.$w$cshowsPrec6
                                                 0#
                                                 y
                                                 (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
5a4eef1c21520364cf5b424feb83c38c
  $w$cshowsPrec8 ::
    Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.HintCategory)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory11
                        w1
                   Language.PureScript.AST.Declarations.KindHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory9
                        w1
                   Language.PureScript.AST.Declarations.CheckHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory7
                        w1
                   Language.PureScript.AST.Declarations.PositionHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory5
                        w1
                   Language.PureScript.AST.Declarations.SolverHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory3
                        w1
                   Language.PureScript.AST.Declarations.OtherHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory1
                        w1 }) -}
2fbacc56ddc2776e428578fe76da3729
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: [Language.PureScript.Comments.Comment])
                   (ww3 :: Language.PureScript.Names.ModuleName)
                   (ww4 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww5 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [Language.PureScript.AST.Declarations.DeclarationRef]
                       Language.PureScript.AST.Declarations.$fShowModule4
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww5
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww6 { Language.PureScript.AST.SourcePos.SourceSpan ww7 ww8 ww9 ->
                     Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                       11#
                       ww7
                       ww8
                       ww9
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Language.PureScript.Comments.Comment
                             Language.PureScript.Comments.$fShowComment1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (GHC.Show.showList__
                                         @ Language.PureScript.AST.Declarations.Declaration
                                         Language.PureScript.AST.Declarations.$fShowDeclaration1
                                         ww4
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (g x)))))))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowModule2
                        (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowModule2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
9de74e8b46bfd07e044a72617cc5da5c
  $w$ctoJSON ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
77c5d11130927d1ccaf09cd4b44025e1
  $waddDefaultImport ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> (# Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment],
          Language.PureScript.Names.ModuleName,
          [Language.PureScript.AST.Declarations.Declaration],
          GHC.Base.Maybe
            [Language.PureScript.AST.Declarations.DeclarationRef] #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U><S,U><L,U><L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww3 :: [Language.PureScript.Comments.Comment])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww6 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   exit :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment],
                              Language.PureScript.Names.ModuleName,
                              [Language.PureScript.AST.Declarations.Declaration],
                              GHC.Base.Maybe
                                [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = (# ww2, ww3, ww4, ww5, ww6 #)
                 } in
                 let {
                   exit1 :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment],
                               Language.PureScript.Names.ModuleName,
                               [Language.PureScript.AST.Declarations.Declaration],
                               GHC.Base.Maybe
                                 [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = (# ww2, ww3, ww4, ww5, ww6 #)
                 } in
                 let {
                   $j :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment],
                            Language.PureScript.Names.ModuleName,
                            [Language.PureScript.AST.Declarations.Declaration],
                            GHC.Base.Maybe
                              [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = case GHC.Classes.$fEq[]_$c==
                            @ (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace)
                            (Language.PureScript.Names.$fEqProperName
                               @ 'Language.PureScript.Names.Namespace)
                            ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                            ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                       GHC.Types.False
                       -> (# ww2, ww3, ww4,
                             GHC.Types.:
                               @ Language.PureScript.AST.Declarations.Declaration
                               (Language.PureScript.AST.Declarations.ImportDeclaration
                                  (ww2, GHC.Types.[] @ Language.PureScript.Comments.Comment)
                                  ww1
                                  Language.PureScript.AST.Declarations.Implicit
                                  ww)
                               ww5,
                             ww6 #)
                       GHC.Types.True -> (# ww2, ww3, ww4, ww5, ww6 #) }
                 } in
                 letrec {
                   go6 :: [Language.PureScript.AST.Declarations.Declaration]
                          -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment],
                                Language.PureScript.Names.ModuleName,
                                [Language.PureScript.AST.Declarations.Declaration],
                                GHC.Base.Maybe
                                  [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.AST.Declarations.Declaration]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            DEFAULT -> go6 ys
                            Language.PureScript.AST.Declarations.ImportDeclaration ds1 mn' ds2 as'
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fEqProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      mn' `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      ww1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.False -> go6 ys
                                 GHC.Types.True
                                 -> case ww of wild3 {
                                      GHC.Base.Nothing -> exit
                                      GHC.Base.Just ipv
                                      -> case as' of wild4 {
                                           GHC.Base.Nothing
                                           -> letrec {
                                                go7 :: [Language.PureScript.AST.Declarations.Declaration]
                                                       -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                                             [Language.PureScript.Comments.Comment],
                                                             Language.PureScript.Names.ModuleName,
                                                             [Language.PureScript.AST.Declarations.Declaration],
                                                             GHC.Base.Maybe
                                                               [Language.PureScript.AST.Declarations.DeclarationRef] #)
                                                  <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                                = \ (ds3 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                  case ds3 of wild5 {
                                                    [] -> $j
                                                    : y1 ys1
                                                    -> case y1 of wild6 {
                                                         DEFAULT -> go7 ys1
                                                         Language.PureScript.AST.Declarations.ImportDeclaration ds4 mn'1 ds5 as'1
                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                   @ (Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.Namespace)
                                                                   (Language.PureScript.Names.$fEqProperName
                                                                      @ 'Language.PureScript.Names.Namespace)
                                                                   mn'1
                                                                     `cast`
                                                                   (Language.PureScript.Names.N:ModuleName[0])
                                                                   ww1
                                                                     `cast`
                                                                   (Language.PureScript.Names.N:ModuleName[0]) of wild7 {
                                                              GHC.Types.False -> go7 ys1
                                                              GHC.Types.True
                                                              -> case as'1 of wild8 {
                                                                   GHC.Base.Nothing -> go7 ys1
                                                                   GHC.Base.Just a1
                                                                   -> case GHC.Classes.$fEq[]_$c==
                                                                             @ (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.Namespace)
                                                                             (Language.PureScript.Names.$fEqProperName
                                                                                @ 'Language.PureScript.Names.Namespace)
                                                                             a1
                                                                               `cast`
                                                                             (Language.PureScript.Names.N:ModuleName[0])
                                                                             ipv
                                                                               `cast`
                                                                             (Language.PureScript.Names.N:ModuleName[0]) of wild9 {
                                                                        GHC.Types.False -> go7 ys1
                                                                        GHC.Types.True
                                                                        -> exit1 } } } } }
                                              } in
                                              go7 ys
                                           GHC.Base.Just a1
                                           -> case GHC.Classes.$fEq[]_$c==
                                                     @ (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.Namespace)
                                                     (Language.PureScript.Names.$fEqProperName
                                                        @ 'Language.PureScript.Names.Namespace)
                                                     a1
                                                       `cast`
                                                     (Language.PureScript.Names.N:ModuleName[0])
                                                     ipv
                                                       `cast`
                                                     (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                                GHC.Types.False
                                                -> letrec {
                                                     go7 :: [Language.PureScript.AST.Declarations.Declaration]
                                                            -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                                                  [Language.PureScript.Comments.Comment],
                                                                  Language.PureScript.Names.ModuleName,
                                                                  [Language.PureScript.AST.Declarations.Declaration],
                                                                  GHC.Base.Maybe
                                                                    [Language.PureScript.AST.Declarations.DeclarationRef] #)
                                                       <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                                     = \ (ds3 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                       case ds3 of wild6 {
                                                         [] -> $j
                                                         : y1 ys1
                                                         -> case y1 of wild7 {
                                                              DEFAULT -> go7 ys1
                                                              Language.PureScript.AST.Declarations.ImportDeclaration ds4 mn'1 ds5 as'1
                                                              -> case GHC.Classes.$fEq[]_$c==
                                                                        @ (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.Namespace)
                                                                        (Language.PureScript.Names.$fEqProperName
                                                                           @ 'Language.PureScript.Names.Namespace)
                                                                        mn'1
                                                                          `cast`
                                                                        (Language.PureScript.Names.N:ModuleName[0])
                                                                        ww1
                                                                          `cast`
                                                                        (Language.PureScript.Names.N:ModuleName[0]) of wild8 {
                                                                   GHC.Types.False -> go7 ys1
                                                                   GHC.Types.True
                                                                   -> case as'1 of wild9 {
                                                                        GHC.Base.Nothing -> go7 ys1
                                                                        GHC.Base.Just a2
                                                                        -> case GHC.Classes.$fEq[]_$c==
                                                                                  @ (Language.PureScript.Names.ProperName
                                                                                       'Language.PureScript.Names.Namespace)
                                                                                  (Language.PureScript.Names.$fEqProperName
                                                                                     @ 'Language.PureScript.Names.Namespace)
                                                                                  a2
                                                                                    `cast`
                                                                                  (Language.PureScript.Names.N:ModuleName[0])
                                                                                  ipv
                                                                                    `cast`
                                                                                  (Language.PureScript.Names.N:ModuleName[0]) of wild10 {
                                                                             GHC.Types.False
                                                                             -> go7 ys1
                                                                             GHC.Types.True
                                                                             -> exit1 } } } } }
                                                   } in
                                                   go7 ys
                                                GHC.Types.True -> exit1 } } } } } }
                 } in
                 go6 ww5) -}
6bb793796adb411b63074cabb1cd2dc5
  newtype AssocList k t = AssocList {runAssocList :: [(k, t)]}
b31d94d0c7b90700d40f9ba6ec420e41
  data CaseAlternative
    = CaseAlternative {caseAlternativeBinders :: [Language.PureScript.AST.Binders.Binder],
                       caseAlternativeResult :: [Language.PureScript.AST.Declarations.GuardedExpr]}
c827e63ac539a5076a60fc8c74223610
  type Context =
    [(Language.PureScript.Names.Ident, Language.PureScript.Types.Type)]
b31d94d0c7b90700d40f9ba6ec420e41
  data Declaration
    = DataDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                      Language.PureScript.Environment.DataDeclType
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.TypeName)
                      [(Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                      [(Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName,
                        [Language.PureScript.Types.Type])]
    | DataBindingGroupDeclaration (GHC.Base.NonEmpty
                                     Language.PureScript.AST.Declarations.Declaration)
    | TypeSynonymDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                             [(Data.Text.Internal.Text,
                               GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                             Language.PureScript.Types.Type
    | TypeDeclaration {-# UNPACK #-}Language.PureScript.AST.Declarations.TypeDeclarationData
    | ValueDeclaration {-# UNPACK #-}(Language.PureScript.AST.Declarations.ValueDeclarationData
                                        [Language.PureScript.AST.Declarations.GuardedExpr])
    | BoundValueDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            Language.PureScript.AST.Binders.Binder
                            Language.PureScript.AST.Declarations.Expr
    | BindingGroupDeclaration (GHC.Base.NonEmpty
                                 ((Language.PureScript.AST.SourcePos.SourceAnn,
                                   Language.PureScript.Names.Ident),
                                  Language.PureScript.Environment.NameKind,
                                  Language.PureScript.AST.Declarations.Expr))
    | ExternDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        Language.PureScript.Names.Ident
                        Language.PureScript.Types.Type
    | ExternDataDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                            Language.PureScript.Kinds.Kind
    | ExternKindDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
    | FixityDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        (Data.Either.Either
                           Language.PureScript.AST.Declarations.ValueFixity
                           Language.PureScript.AST.Declarations.TypeFixity)
    | ImportDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        Language.PureScript.Names.ModuleName
                        Language.PureScript.AST.Declarations.ImportDeclarationType
                        (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    | TypeClassDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           [(Data.Text.Internal.Text,
                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                           [Language.PureScript.Types.Constraint]
                           [Language.PureScript.Environment.FunctionalDependency]
                           [Language.PureScript.AST.Declarations.Declaration]
    | TypeInstanceDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                              [Language.PureScript.Names.Ident]
                              GHC.Integer.Type.Integer
                              Language.PureScript.Names.Ident
                              [Language.PureScript.Types.Constraint]
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                              [Language.PureScript.Types.Type]
                              Language.PureScript.AST.Declarations.TypeInstanceBody
9de74e8b46bfd07e044a72617cc5da5c
  data DeclarationRef
    = TypeRef Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.Names.ProperName
                 'Language.PureScript.Names.TypeName)
              (GHC.Base.Maybe
                 [Language.PureScript.Names.ProperName
                    'Language.PureScript.Names.ConstructorName])
    | TypeOpRef Language.PureScript.AST.SourcePos.SourceSpan
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.TypeOpName)
    | ValueRef Language.PureScript.AST.SourcePos.SourceSpan
               Language.PureScript.Names.Ident
    | ValueOpRef Language.PureScript.AST.SourcePos.SourceSpan
                 (Language.PureScript.Names.OpName
                    'Language.PureScript.Names.ValueOpName)
    | TypeClassRef Language.PureScript.AST.SourcePos.SourceSpan
                   (Language.PureScript.Names.ProperName
                      'Language.PureScript.Names.ClassName)
    | TypeInstanceRef Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.Names.Ident
    | ModuleRef Language.PureScript.AST.SourcePos.SourceSpan
                Language.PureScript.Names.ModuleName
    | KindRef Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.Names.ProperName
                 'Language.PureScript.Names.KindName)
    | ReExportRef Language.PureScript.AST.SourcePos.SourceSpan
                  Language.PureScript.Names.ModuleName
                  Language.PureScript.AST.Declarations.DeclarationRef
b31d94d0c7b90700d40f9ba6ec420e41
  data DoNotationElement
    = DoNotationValue Language.PureScript.AST.Declarations.Expr
    | DoNotationBind Language.PureScript.AST.Binders.Binder
                     Language.PureScript.AST.Declarations.Expr
    | DoNotationLet [Language.PureScript.AST.Declarations.Declaration]
    | PositionedDoNotationElement Language.PureScript.AST.SourcePos.SourceSpan
                                  [Language.PureScript.Comments.Comment]
                                  Language.PureScript.AST.Declarations.DoNotationElement
cebd18718f7c34278cac50a2f0ab0386
  data ErrorMessage
    = ErrorMessage [Language.PureScript.AST.Declarations.ErrorMessageHint]
                   Language.PureScript.AST.Declarations.SimpleErrorMessage
b31d94d0c7b90700d40f9ba6ec420e41
  data ErrorMessageHint
    = ErrorUnifyingTypes Language.PureScript.Types.Type
                         Language.PureScript.Types.Type
    | ErrorInExpression Language.PureScript.AST.Declarations.Expr
    | ErrorInModule Language.PureScript.Names.ModuleName
    | ErrorInInstance (Language.PureScript.Names.Qualified
                         (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName))
                      [Language.PureScript.Types.Type]
    | ErrorInSubsumption Language.PureScript.Types.Type
                         Language.PureScript.Types.Type
    | ErrorCheckingAccessor Language.PureScript.AST.Declarations.Expr
                            Language.PureScript.PSString.PSString
    | ErrorCheckingType Language.PureScript.AST.Declarations.Expr
                        Language.PureScript.Types.Type
    | ErrorCheckingKind Language.PureScript.Types.Type
    | ErrorCheckingGuard
    | ErrorInferringType Language.PureScript.AST.Declarations.Expr
    | ErrorInApplication Language.PureScript.AST.Declarations.Expr
                         Language.PureScript.Types.Type
                         Language.PureScript.AST.Declarations.Expr
    | ErrorInDataConstructor (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
    | ErrorInTypeConstructor (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
    | ErrorInBindingGroup (GHC.Base.NonEmpty
                             Language.PureScript.Names.Ident)
    | ErrorInDataBindingGroup [Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName]
    | ErrorInTypeSynonym (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
    | ErrorInValueDeclaration Language.PureScript.Names.Ident
    | ErrorInTypeDeclaration Language.PureScript.Names.Ident
    | ErrorInTypeClassDeclaration (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
    | ErrorInForeignImport Language.PureScript.Names.Ident
    | ErrorSolvingConstraint Language.PureScript.Types.Constraint
    | PositionedError (GHC.Base.NonEmpty
                         Language.PureScript.AST.SourcePos.SourceSpan)
b31d94d0c7b90700d40f9ba6ec420e41
  data Expr
    = Literal Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.AST.Literals.Literal
                 Language.PureScript.AST.Declarations.Expr)
    | UnaryMinus Language.PureScript.AST.SourcePos.SourceSpan
                 Language.PureScript.AST.Declarations.Expr
    | BinaryNoParens Language.PureScript.AST.Declarations.Expr
                     Language.PureScript.AST.Declarations.Expr
                     Language.PureScript.AST.Declarations.Expr
    | Parens Language.PureScript.AST.Declarations.Expr
    | Accessor Language.PureScript.PSString.PSString
               Language.PureScript.AST.Declarations.Expr
    | ObjectUpdate Language.PureScript.AST.Declarations.Expr
                   [(Language.PureScript.PSString.PSString,
                     Language.PureScript.AST.Declarations.Expr)]
    | ObjectUpdateNested Language.PureScript.AST.Declarations.Expr
                         (Language.PureScript.AST.Declarations.PathTree
                            Language.PureScript.AST.Declarations.Expr)
    | Abs Language.PureScript.AST.Binders.Binder
          Language.PureScript.AST.Declarations.Expr
    | App Language.PureScript.AST.Declarations.Expr
          Language.PureScript.AST.Declarations.Expr
    | Var Language.PureScript.AST.SourcePos.SourceSpan
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident)
    | Op Language.PureScript.AST.SourcePos.SourceSpan
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
    | IfThenElse Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.AST.Declarations.Expr
    | Constructor Language.PureScript.AST.SourcePos.SourceSpan
                  (Language.PureScript.Names.Qualified
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName))
    | Case [Language.PureScript.AST.Declarations.Expr]
           [Language.PureScript.AST.Declarations.CaseAlternative]
    | TypedValue GHC.Types.Bool
                 Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.Types.Type
    | Let Language.PureScript.AST.Declarations.WhereProvenance
          [Language.PureScript.AST.Declarations.Declaration]
          Language.PureScript.AST.Declarations.Expr
    | Do [Language.PureScript.AST.Declarations.DoNotationElement]
    | Ado [Language.PureScript.AST.Declarations.DoNotationElement]
          Language.PureScript.AST.Declarations.Expr
    | TypeClassDictionaryConstructorApp (Language.PureScript.Names.Qualified
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName))
                                        Language.PureScript.AST.Declarations.Expr
    | TypeClassDictionary Language.PureScript.Types.Constraint
                          (Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                             (Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                                (Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident)
                                   Language.PureScript.TypeClassDictionaries.NamedDict)))
                          [Language.PureScript.AST.Declarations.ErrorMessageHint]
    | TypeClassDictionaryAccessor (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ClassName))
                                  Language.PureScript.Names.Ident
    | DeferredDictionary (Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName))
                         [Language.PureScript.Types.Type]
    | AnonymousArgument
    | Hole Data.Text.Internal.Text
    | PositionedValue Language.PureScript.AST.SourcePos.SourceSpan
                      [Language.PureScript.Comments.Comment]
                      Language.PureScript.AST.Declarations.Expr
b31d94d0c7b90700d40f9ba6ec420e41
  data Guard
    = ConditionGuard Language.PureScript.AST.Declarations.Expr
    | PatternGuard Language.PureScript.AST.Binders.Binder
                   Language.PureScript.AST.Declarations.Expr
b31d94d0c7b90700d40f9ba6ec420e41
  data GuardedExpr
    = GuardedExpr [Language.PureScript.AST.Declarations.Guard]
                  Language.PureScript.AST.Declarations.Expr
5a4eef1c21520364cf5b424feb83c38c
  data HintCategory
    = ExprHint
    | KindHint
    | CheckHint
    | PositionHint
    | SolverHint
    | OtherHint
f900e8c96b49d573d3e54286bc8fd980
  data ImportDeclarationType
    = Implicit
    | Explicit [Language.PureScript.AST.Declarations.DeclarationRef]
    | Hiding [Language.PureScript.AST.Declarations.DeclarationRef]
b86897bed7e8aa9bc4f5498c0c74ad91
  pattern Language.PureScript.AST.Declarations.MkUnguarded :: Language.PureScript.AST.Declarations.Expr
                                                              -> Language.PureScript.AST.Declarations.GuardedExpr
7cf4b96f7d4b51b446726a099ab87bb6
  data Module
    = Module Language.PureScript.AST.SourcePos.SourceSpan
             [Language.PureScript.Comments.Comment]
             Language.PureScript.Names.ModuleName
             [Language.PureScript.AST.Declarations.Declaration]
             (GHC.Base.Maybe
                [Language.PureScript.AST.Declarations.DeclarationRef])
927a4a1acceccbe5ab77b4ee8603376a
  data PathNode t
    = Leaf t | Branch (Language.PureScript.AST.Declarations.PathTree t)
927a4a1acceccbe5ab77b4ee8603376a
  newtype PathTree t
    = PathTree (Language.PureScript.AST.Declarations.AssocList
                  Language.PureScript.PSString.PSString
                  (Language.PureScript.AST.Declarations.PathNode t))
9de74e8b46bfd07e044a72617cc5da5c
  axiom Language.PureScript.AST.Declarations.Rep_DeclarationRef::
      GHC.Generics.Rep
        Language.PureScript.AST.Declarations.DeclarationRef
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "DeclarationRef"
               "Language.PureScript.AST.Declarations"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.AST.SourcePos.SourceSpan)
                  GHC.Generics.:*: (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.Rec0
                                                          (GHC.Base.Maybe
                                                             [Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName]))))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName))))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Names.Ident))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ValueOpRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.OpName
                                                                             'Language.PureScript.Names.ValueOpName)))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TypeInstanceRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          Language.PureScript.Names.Ident)))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ModuleRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          Language.PureScript.Names.ModuleName))
                                                 GHC.Generics.:+: (GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "KindRef"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     (GHC.Generics.S1
                                                                        ('GHC.Generics.MetaSel
                                                                           'GHC.Base.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy)
                                                                        (GHC.Generics.Rec0
                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.Rec0
                                                                                            (Language.PureScript.Names.ProperName
                                                                                               'Language.PureScript.Names.KindName)))
                                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "ReExportRef"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False)
                                                                                      (GHC.Generics.S1
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.Rec0
                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                       GHC.Generics.:*: (GHC.Generics.S1
                                                                                                           ('GHC.Generics.MetaSel
                                                                                                              'GHC.Base.Nothing
                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                           (GHC.Generics.Rec0
                                                                                                              Language.PureScript.Names.ModuleName)
                                                                                                         GHC.Generics.:*: GHC.Generics.S1
                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                               'GHC.Base.Nothing
                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                            (GHC.Generics.Rec0
                                                                                                                               Language.PureScript.AST.Declarations.DeclarationRef)))))))
33c1a345bb3f2be69a13531f80c78fbd
  data SimpleErrorMessage
    = ModuleNotFound Language.PureScript.Names.ModuleName
    | ErrorParsingFFIModule GHC.IO.FilePath
                            (GHC.Base.Maybe Language.PureScript.Bundle.ErrorMessage)
    | ErrorParsingModule Text.Parsec.Error.ParseError
    | MissingFFIModule Language.PureScript.Names.ModuleName
    | UnnecessaryFFIModule Language.PureScript.Names.ModuleName
                           GHC.IO.FilePath
    | MissingFFIImplementations Language.PureScript.Names.ModuleName
                                [Language.PureScript.Names.Ident]
    | UnusedFFIImplementations Language.PureScript.Names.ModuleName
                               [Language.PureScript.Names.Ident]
    | InvalidFFIIdentifier Language.PureScript.Names.ModuleName
                           Data.Text.Internal.Text
    | CannotGetFileInfo GHC.IO.FilePath
    | CannotReadFile GHC.IO.FilePath
    | CannotWriteFile GHC.IO.FilePath
    | InfiniteType Language.PureScript.Types.Type
    | InfiniteKind Language.PureScript.Kinds.Kind
    | MultipleValueOpFixities (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName)
    | MultipleTypeOpFixities (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)
    | OrphanTypeDeclaration Language.PureScript.Names.Ident
    | RedefinedIdent Language.PureScript.Names.Ident
    | OverlappingNamesInLet
    | UnknownName (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Name)
    | UnknownImport Language.PureScript.Names.ModuleName
                    Language.PureScript.Names.Name
    | UnknownImportDataConstructor Language.PureScript.Names.ModuleName
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName)
    | UnknownExport Language.PureScript.Names.Name
    | UnknownExportDataConstructor (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName)
    | ScopeConflict Language.PureScript.Names.Name
                    [Language.PureScript.Names.ModuleName]
    | ScopeShadowing Language.PureScript.Names.Name
                     (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     [Language.PureScript.Names.ModuleName]
    | DeclConflict Language.PureScript.Names.Name
                   Language.PureScript.Names.Name
    | ExportConflict (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Name)
                     (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Name)
    | DuplicateModule Language.PureScript.Names.ModuleName
    | DuplicateTypeClass (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                         Language.PureScript.AST.SourcePos.SourceSpan
    | DuplicateInstance Language.PureScript.Names.Ident
                        Language.PureScript.AST.SourcePos.SourceSpan
    | DuplicateTypeArgument Data.Text.Internal.Text
    | InvalidDoBind
    | InvalidDoLet
    | CycleInDeclaration Language.PureScript.Names.Ident
    | CycleInTypeSynonym (GHC.Base.Maybe
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
    | CycleInModules [Language.PureScript.Names.ModuleName]
    | NameIsUndefined Language.PureScript.Names.Ident
    | UndefinedTypeVariable (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
    | PartiallyAppliedSynonym (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
    | EscapedSkolem Data.Text.Internal.Text
                    (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                    Language.PureScript.Types.Type
    | TypesDoNotUnify Language.PureScript.Types.Type
                      Language.PureScript.Types.Type
    | KindsDoNotUnify Language.PureScript.Kinds.Kind
                      Language.PureScript.Kinds.Kind
    | ConstrainedTypeUnified Language.PureScript.Types.Type
                             Language.PureScript.Types.Type
    | OverlappingInstances (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           [Language.PureScript.Types.Type]
                           [Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident]
    | NoInstanceFound Language.PureScript.Types.Constraint
    | AmbiguousTypeVariables Language.PureScript.Types.Type
                             Language.PureScript.Types.Constraint
    | UnknownClass (Language.PureScript.Names.Qualified
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ClassName))
    | PossiblyInfiniteInstance (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                               [Language.PureScript.Types.Type]
    | CannotDerive (Language.PureScript.Names.Qualified
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ClassName))
                   [Language.PureScript.Types.Type]
    | InvalidDerivedInstance (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             [Language.PureScript.Types.Type]
                             GHC.Types.Int
    | ExpectedTypeConstructor (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                              [Language.PureScript.Types.Type]
                              Language.PureScript.Types.Type
    | InvalidNewtypeInstance (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             [Language.PureScript.Types.Type]
    | MissingNewtypeSuperclassInstance (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName))
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName))
                                       [Language.PureScript.Types.Type]
    | UnverifiableSuperclassInstance (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     [Language.PureScript.Types.Type]
    | CannotFindDerivingType (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
    | DuplicateLabel Language.PureScript.Label.Label
                     (GHC.Base.Maybe Language.PureScript.AST.Declarations.Expr)
    | DuplicateValueDeclaration Language.PureScript.Names.Ident
    | ArgListLengthsDiffer Language.PureScript.Names.Ident
    | OverlappingArgNames (GHC.Base.Maybe
                             Language.PureScript.Names.Ident)
    | MissingClassMember (GHC.Base.NonEmpty
                            (Language.PureScript.Names.Ident, Language.PureScript.Types.Type))
    | ExtraneousClassMember Language.PureScript.Names.Ident
                            (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName))
    | ExpectedType Language.PureScript.Types.Type
                   Language.PureScript.Kinds.Kind
    | IncorrectConstructorArity (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName))
                                GHC.Types.Int
                                GHC.Types.Int
    | ExprDoesNotHaveType Language.PureScript.AST.Declarations.Expr
                          Language.PureScript.Types.Type
    | PropertyIsMissing Language.PureScript.Label.Label
    | AdditionalProperty Language.PureScript.Label.Label
    | TypeSynonymInstance
    | OrphanInstance Language.PureScript.Names.Ident
                     (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                     (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                     [Language.PureScript.Types.Type]
    | InvalidNewtype (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
    | InvalidInstanceHead Language.PureScript.Types.Type
    | TransitiveExportError Language.PureScript.AST.Declarations.DeclarationRef
                            [Language.PureScript.AST.Declarations.DeclarationRef]
    | TransitiveDctorExportError Language.PureScript.AST.Declarations.DeclarationRef
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
    | ShadowedName Language.PureScript.Names.Ident
    | ShadowedTypeVar Data.Text.Internal.Text
    | UnusedTypeVar Data.Text.Internal.Text
    | WildcardInferredType Language.PureScript.Types.Type
                           Language.PureScript.AST.Declarations.Context
    | HoleInferredType Data.Text.Internal.Text
                       Language.PureScript.Types.Type
                       Language.PureScript.AST.Declarations.Context
                       Language.PureScript.AST.Declarations.TypeSearch
    | MissingTypeDeclaration Language.PureScript.Names.Ident
                             Language.PureScript.Types.Type
    | OverlappingPattern [[Language.PureScript.AST.Binders.Binder]]
                         GHC.Types.Bool
    | IncompleteExhaustivityCheck
    | MisleadingEmptyTypeImport Language.PureScript.Names.ModuleName
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
    | ImportHidingModule Language.PureScript.Names.ModuleName
    | UnusedImport Language.PureScript.Names.ModuleName
    | UnusedExplicitImport Language.PureScript.Names.ModuleName
                           [Language.PureScript.Names.Name]
                           (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                           [Language.PureScript.AST.Declarations.DeclarationRef]
    | UnusedDctorImport Language.PureScript.Names.ModuleName
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                        (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                        [Language.PureScript.AST.Declarations.DeclarationRef]
    | UnusedDctorExplicitImport Language.PureScript.Names.ModuleName
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
                                [Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName]
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                [Language.PureScript.AST.Declarations.DeclarationRef]
    | DuplicateSelectiveImport Language.PureScript.Names.ModuleName
    | DuplicateImport Language.PureScript.Names.ModuleName
                      Language.PureScript.AST.Declarations.ImportDeclarationType
                      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    | DuplicateImportRef Language.PureScript.Names.Name
    | DuplicateExportRef Language.PureScript.Names.Name
    | IntOutOfRange GHC.Integer.Type.Integer
                    Data.Text.Internal.Text
                    GHC.Integer.Type.Integer
                    GHC.Integer.Type.Integer
    | ImplicitQualifiedImport Language.PureScript.Names.ModuleName
                              Language.PureScript.Names.ModuleName
                              [Language.PureScript.AST.Declarations.DeclarationRef]
    | ImplicitQualifiedImportReExport Language.PureScript.Names.ModuleName
                                      Language.PureScript.Names.ModuleName
                                      [Language.PureScript.AST.Declarations.DeclarationRef]
    | ImplicitImport Language.PureScript.Names.ModuleName
                     [Language.PureScript.AST.Declarations.DeclarationRef]
    | HidingImport Language.PureScript.Names.ModuleName
                   [Language.PureScript.AST.Declarations.DeclarationRef]
    | CaseBinderLengthDiffers GHC.Types.Int
                              [Language.PureScript.AST.Binders.Binder]
    | IncorrectAnonymousArgument
    | InvalidOperatorInBinder (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.ValueOpName))
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
    | CannotGeneralizeRecursiveFunction Language.PureScript.Names.Ident
                                        Language.PureScript.Types.Type
    | CannotDeriveNewtypeForData (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
    | ExpectedWildcard (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
    | CannotUseBindWithDo Language.PureScript.Names.Ident
    | ClassInstanceArityMismatch Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))
                                 GHC.Types.Int
                                 GHC.Types.Int
    | UserDefinedWarning Language.PureScript.Types.Type
    | UnusableDeclaration Language.PureScript.Names.Ident
                          [[Data.Text.Internal.Text]]
    | CannotDefinePrimModules Language.PureScript.Names.ModuleName
    | MixedAssociativityError (GHC.Base.NonEmpty
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.AnyOpName),
                                  Language.PureScript.AST.Operators.Associativity))
    | NonAssociativeError (GHC.Base.NonEmpty
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.AnyOpName)))
73dd7603bbe7fadce9f5fc48c4dc58fb
  data TypeDeclarationData
    = TypeDeclarationData {tydeclSourceAnn :: !Language.PureScript.AST.SourcePos.SourceAnn,
                           tydeclIdent :: !Language.PureScript.Names.Ident,
                           tydeclType :: !Language.PureScript.Types.Type}
0d8e4197926d6b0160725c9c154c1438
  data TypeFixity
    = TypeFixity Language.PureScript.AST.Operators.Fixity
                 (Language.PureScript.Names.Qualified
                    (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName))
                 (Language.PureScript.Names.OpName
                    'Language.PureScript.Names.TypeOpName)
442ba50b491e46b095a0fd0218f236ad
  pattern Language.PureScript.AST.Declarations.TypeFixityDeclaration :: Language.PureScript.AST.SourcePos.SourceAnn
                                                                        -> Language.PureScript.AST.Operators.Fixity
                                                                        -> Language.PureScript.Names.Qualified
                                                                             (Language.PureScript.Names.ProperName
                                                                                'Language.PureScript.Names.TypeName)
                                                                        -> Language.PureScript.Names.OpName
                                                                             'Language.PureScript.Names.TypeOpName
                                                                        -> Language.PureScript.AST.Declarations.Declaration
b31d94d0c7b90700d40f9ba6ec420e41
  data TypeInstanceBody
    = DerivedInstance
    | NewtypeInstance
    | NewtypeInstanceWithDictionary Language.PureScript.AST.Declarations.Expr
    | ExplicitInstance [Language.PureScript.AST.Declarations.Declaration]
9f93487d1a91f557ef94e379878c19dd
  data TypeSearch
    = TSBefore Language.PureScript.Environment.Environment
    | TSAfter {tsAfterIdentifiers :: [(Language.PureScript.Names.Qualified
                                         Data.Text.Internal.Text,
                                       Language.PureScript.Types.Type)],
               tsAfterRecordFields :: GHC.Base.Maybe
                                        [(Language.PureScript.Label.Label,
                                          Language.PureScript.Types.Type)]}
ccaaa682babb730c1361bddf2c5eee25
  pattern Language.PureScript.AST.Declarations.ValueDecl :: Language.PureScript.AST.SourcePos.SourceAnn
                                                            -> Language.PureScript.Names.Ident
                                                            -> Language.PureScript.Environment.NameKind
                                                            -> [Language.PureScript.AST.Binders.Binder]
                                                            -> [Language.PureScript.AST.Declarations.GuardedExpr]
                                                            -> Language.PureScript.AST.Declarations.Declaration
0c2d915175f1072d8eeca07af2b73e20
  data ValueDeclarationData a
    = ValueDeclarationData {valdeclSourceAnn :: !Language.PureScript.AST.SourcePos.SourceAnn,
                            valdeclIdent :: !Language.PureScript.Names.Ident,
                            valdeclName :: !Language.PureScript.Environment.NameKind,
                            valdeclBinders :: ![Language.PureScript.AST.Binders.Binder],
                            valdeclExpression :: !a}
a6d87ffa7a2578d28c7ac8f367bf0cf5
  data ValueFixity
    = ValueFixity Language.PureScript.AST.Operators.Fixity
                  (Language.PureScript.Names.Qualified
                     (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)))
                  (Language.PureScript.Names.OpName
                     'Language.PureScript.Names.ValueOpName)
eb9c8f0bb082690f8aa4e758b5751212
  pattern Language.PureScript.AST.Declarations.ValueFixityDeclaration :: Language.PureScript.AST.SourcePos.SourceAnn
                                                                         -> Language.PureScript.AST.Operators.Fixity
                                                                         -> Language.PureScript.Names.Qualified
                                                                              (Data.Either.Either
                                                                                 Language.PureScript.Names.Ident
                                                                                 (Language.PureScript.Names.ProperName
                                                                                    'Language.PureScript.Names.ConstructorName))
                                                                         -> Language.PureScript.Names.OpName
                                                                              'Language.PureScript.Names.ValueOpName
                                                                         -> Language.PureScript.AST.Declarations.Declaration
65c0e50d69c9739c7a05491cae312524
  data WhereProvenance = FromWhere | FromLet
35ff328750a3ec4b6f57a72d359a0bf6
  addDefaultImport ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LLLSL),1*U(U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.ModuleName)
                   (w1 :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.AST.Declarations.Module ww4 ww5 ww6 ww7 ww8 ->
                 case Language.PureScript.AST.Declarations.$waddDefaultImport
                        ww1
                        ww2
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,,,,#) ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.AST.Declarations.Module
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 } } }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  caseAlternativeBinders ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> [Language.PureScript.AST.Binders.Binder]
  RecSel Left Language.PureScript.AST.Declarations.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 case ds of wild { Language.PureScript.AST.Declarations.CaseAlternative ds1 ds2 ->
                 ds1 }) -}
b31d94d0c7b90700d40f9ba6ec420e41
  caseAlternativeResult ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
  RecSel Left Language.PureScript.AST.Declarations.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 case ds of wild { Language.PureScript.AST.Declarations.CaseAlternative ds1 ds2 ->
                 ds2 }) -}
e6b9ede356764ec70bdeb002d83e4f15
  compDecRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
e5f550546a379316c2a828bc4bea491c
  declName ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.DataDeclaration ds1 ds2 n ds3 ds4
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.DataBindingGroupDeclaration ds1
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.TypeSynonymDeclaration ds1 n ds2 ds3
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName dt1)
                   Language.PureScript.AST.Declarations.BoundValueDeclaration ds1 ds2 ds3
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.BindingGroupDeclaration ds1
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.ExternDeclaration ds1 n ds2
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName n)
                   Language.PureScript.AST.Declarations.ExternDataDeclaration ds1 n ds2
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.ExternKindDeclaration ds1 n
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.KiName n)
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 ds2
                   -> case ds2 of wild1 {
                        Data.Either.Left ds3
                        -> case ds3 of wild2 { Language.PureScript.AST.Declarations.ValueFixity ds4 ds5 n ->
                           GHC.Base.Just
                             @ Language.PureScript.Names.Name
                             (Language.PureScript.Names.ValOpName n) }
                        Data.Either.Right ds3
                        -> case ds3 of wild2 { Language.PureScript.AST.Declarations.TypeFixity ds4 ds5 n ->
                           GHC.Base.Just
                             @ Language.PureScript.Names.Name
                             (Language.PureScript.Names.TyOpName n) } }
                   Language.PureScript.AST.Declarations.ImportDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.TypeClassDeclaration ds1 n ds2 ds3 ds4 ds5
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyClassName n)
                   Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds1 ds2 ds3 n ds4 ds5 ds6 ds7
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName n) }) -}
088fcb4e3edc129f809097a23b6de3c2
  declRefName ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
48358271e032660f4b36f2c8b2ccb034
  declRefSourceSpan ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TypeRef ss ds1 ds2 -> ss
                   Language.PureScript.AST.Declarations.TypeOpRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ValueRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ValueOpRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.TypeClassRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.TypeInstanceRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ModuleRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.KindRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ReExportRef ss ds1 ds2
                   -> ss }) -}
e369e234b56621b5ead544cee7b1e586
  declSourceAnn ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.SourcePos.SourceAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
901cd3587e8d9e55060bf90daca551d7
  declSourceSpan ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration) ->
                 case Language.PureScript.AST.Declarations.declSourceAnn
                        x of wild { (,) x1 ds1 ->
                 x1 }) -}
49bcc2e170bd98aa1cb4c655d447837b
  flattenDecls ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Language.PureScript.AST.Declarations.$sconcatMap
                   @ Language.PureScript.AST.Declarations.Declaration
                   @ Language.PureScript.AST.Declarations.Declaration
                   Language.PureScript.AST.Declarations.flattenDecls_flattenOne) -}
ad70bc989106d00e1c324381c0d50964
  flattenDecls_flattenOne ::
    Language.PureScript.AST.Declarations.Declaration
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d7bc7564b568f06a5f232daf0d83a6b1
  getFixityDecl ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         (Data.Either.Either
            Language.PureScript.AST.Declarations.ValueFixity
            Language.PureScript.AST.Declarations.TypeFixity)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Language.PureScript.AST.Declarations.ValueFixity
                             Language.PureScript.AST.Declarations.TypeFixity)
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 fixity
                   -> GHC.Base.Just
                        @ (Data.Either.Either
                             Language.PureScript.AST.Declarations.ValueFixity
                             Language.PureScript.AST.Declarations.TypeFixity)
                        fixity }) -}
169d4cac4d05cba42539e2862c95b3db
  getKindRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                   Language.PureScript.AST.Declarations.KindRef ds1 name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        name }) -}
063e7db4cff83aa459c1c17d5048f5d2
  getModuleDeclarations ::
    Language.PureScript.AST.Declarations.Module
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ds1 ds2 ds3 declarations ds4 ->
                 declarations }) -}
578b1d81b22244b5aeca14680df8f57d
  getModuleName ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ds1 ds2 name ds3 ds4 ->
                 name }) -}
1047991bfe9f810dab3d8fd03d3b2cf6
  getModuleSourceSpan ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ss ds1 ds2 ds3 ds4 ->
                 ss }) -}
4a5cb731417baeb982ffa07d84f048ab
  getTypeClassRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   Language.PureScript.AST.Declarations.TypeClassRef ds1 name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        name }) -}
59a0ca54505755f1fa0fc34ff5d66706
  getTypeDeclaration ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ Language.PureScript.AST.Declarations.TypeDeclarationData
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> GHC.Base.Just
                        @ Language.PureScript.AST.Declarations.TypeDeclarationData
                        (Language.PureScript.AST.Declarations.TypeDeclarationData
                           dt
                           dt1
                           dt2) }) -}
c807c0d47029b8283509ed31e6fc3ff1
  getTypeOpRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   Language.PureScript.AST.Declarations.TypeOpRef ds1 op
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        op }) -}
42ae9903e046664143824d50598f73c8
  getTypeRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          GHC.Base.Maybe
            [Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           GHC.Base.Maybe
                             [Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName])
                   Language.PureScript.AST.Declarations.TypeRef ds1 name dctors
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           GHC.Base.Maybe
                             [Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName])
                        (name, dctors) }) -}
ef64f0b12c753d90369287393976ca51
  getValueDeclaration ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         (Language.PureScript.AST.Declarations.ValueDeclarationData
            [Language.PureScript.AST.Declarations.GuardedExpr])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.AST.Declarations.ValueDeclarationData
                             [Language.PureScript.AST.Declarations.GuardedExpr])
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Base.Just
                        @ (Language.PureScript.AST.Declarations.ValueDeclarationData
                             [Language.PureScript.AST.Declarations.GuardedExpr])
                        (Language.PureScript.AST.Declarations.ValueDeclarationData
                           @ [Language.PureScript.AST.Declarations.GuardedExpr]
                           dt
                           dt1
                           dt2
                           dt3
                           dt4) }) -}
be7af64c7f2421e5081867b94579e0a9
  getValueOpRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   Language.PureScript.AST.Declarations.ValueOpRef ds1 op
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        op }) -}
94912d263388bc977447f55c96bc921e
  getValueRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.Ident
                   Language.PureScript.AST.Declarations.ValueRef ds1 name
                   -> GHC.Base.Just @ Language.PureScript.Names.Ident name }) -}
a2ce5f6d1eda15c678f4b02aae653c68
  importPrim ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 1, Strictness: <S(LLLSL),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Module) ->
                 Language.PureScript.AST.Declarations.addDefaultImport
                   Language.PureScript.AST.Declarations.importPrim2
                   (Language.PureScript.AST.Declarations.addDefaultImport
                      Language.PureScript.AST.Declarations.importPrim1
                      x)) -}
2cb94292e2297a42bbce43875ce14e33
  importPrim1 ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
c162d5ce05863d63559826035426865d
  importPrim2 ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.AST.Declarations.importPrim3
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
268a5599cf131ae16905193ddca48639
  importPrim3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
4f20142d2169f2dcb68971dbb50efa1e
  isDataDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.DataDeclaration ds1 ds2 ds3 ds4 ds5
                   -> GHC.Types.True
                   Language.PureScript.AST.Declarations.TypeSynonymDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Types.True }) -}
c43a0a53610d48db0933cf215a04e210
  isExplicit ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Explicit ds1
                   -> GHC.Types.True }) -}
3ad8aa11d561a89123c76ef60c9d372c
  isExternDataDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternDataDeclaration ds1 ds2 ds3
                   -> GHC.Types.True }) -}
b3bd6c91aaac0522ff3c259e7d5beccb
  isExternDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternDeclaration ds1 ds2 ds3
                   -> GHC.Types.True }) -}
a89dc87707d299fc373370f6631a2085
  isExternKindDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternKindDeclaration ds1 ds2
                   -> GHC.Types.True }) -}
b592576afb9be763cc362039fa8b14a7
  isFixityDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 ds2
                   -> GHC.Types.True }) -}
9f343b64df822f92c07e3199a3b2fded
  isImplicit ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Implicit
                   -> GHC.Types.True }) -}
1d21ef2480c9e223de992229b1d2d9ef
  isImportDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ImportDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Types.True }) -}
8269dde3a1e3ea44b18ed7f930f87a16
  isModuleRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ModuleRef ds1 ds2
                   -> GHC.Types.True }) -}
d58fb92abf9394b13231c5d40f42232a
  isTrueExpr ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
2dffac571768d89c1520ba80ce6a50d9
  isTypeClassDeclaration ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.TypeClassDeclaration ds1 ds2 ds3 ds4 ds5 ds6
                   -> GHC.Types.True }) -}
156b7bc741b880eb775ca32915c80061
  isTypeClassInstanceDeclaration ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> GHC.Types.True }) -}
882e68af7a310fc848b5e94c3ce09b47
  isValueDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Types.True }) -}
1826036fea52f25657e6111625d52b7a
  mapTypeInstanceBody ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.mapTypeInstanceBody1
                  `cast`
                (<[Language.PureScript.AST.Declarations.Declaration]
                  -> [Language.PureScript.AST.Declarations.Declaration]>_R
                 ->_R <Language.PureScript.AST.Declarations.TypeInstanceBody>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.TypeInstanceBody>_R) -}
efe52db3931dc9f841fb28390c21cc19
  mapTypeInstanceBody1 ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f156 :: [Language.PureScript.AST.Declarations.Declaration]
                            -> [Language.PureScript.AST.Declarations.Declaration])
                   (eta :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case eta of wild {
                   DEFAULT
                   -> wild
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeInstanceBody>_R))
                   Language.PureScript.AST.Declarations.ExplicitInstance ds
                   -> (Language.PureScript.AST.Declarations.ExplicitInstance
                         (f156 ds))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeInstanceBody>_R)) }) -}
26ed5ea6cf9bf67b20006f6e76c30b8b
  onTypeSearchTypes ::
    (Language.PureScript.Types.Type -> Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.onTypeSearchTypes1
                  `cast`
                (<Language.PureScript.Types.Type
                  -> Language.PureScript.Types.Type>_R
                 ->_R <Language.PureScript.AST.Declarations.TypeSearch>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.TypeSearch>_R) -}
25ffc9af7694f3e5cf44a94a6a20dcd0
  onTypeSearchTypes1 ::
    (Language.PureScript.Types.Type -> Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f156 :: Language.PureScript.Types.Type
                            -> Language.PureScript.Types.Type)
                   (eta :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.onTypeSearchTypes_$sonTypeSearchTypesM
                   (\ (x :: Language.PureScript.Types.Type) -> f156 x)
                     `cast`
                   (<Language.PureScript.Types.Type>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.Types.Type>_R))
                   eta) -}
4d5d253a595efbf2d353476a96d73de9
  onTypeSearchTypesM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.Type
     -> m Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> m Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(U(C(C1(U)),A),C(U),1*C1(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><S,1*U> -}
00e1bf9ba70b4bf80fb3b01e1addf54d
  onTypeSearchTypes_$sonTypeSearchTypesM ::
    (Language.PureScript.Types.Type
     -> Data.Functor.Identity.Identity Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ (eta :: Language.PureScript.Types.Type
                           -> Data.Functor.Identity.Identity Language.PureScript.Types.Type)
                   (eta1 :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case eta1 of wild {
                   Language.PureScript.AST.Declarations.TSBefore env
                   -> wild
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeSearch>_R))
                   Language.PureScript.AST.Declarations.TSAfter i r
                   -> (Language.PureScript.AST.Declarations.TSAfter
                         (letrec {
                            go6 :: [(Language.PureScript.Names.Qualified
                                       Data.Text.Internal.Text,
                                     Language.PureScript.Types.Type)]
                                   -> Data.Functor.Identity.Identity
                                        [(Language.PureScript.Names.Qualified
                                            Data.Text.Internal.Text,
                                          Language.PureScript.Types.Type)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.Type)]) ->
                              case ds of wild1 {
                                []
                                -> (GHC.Types.[]
                                      @ (Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.Type))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <[(Language.PureScript.Names.Qualified
                                                  Data.Text.Internal.Text,
                                                Language.PureScript.Types.Type)]>_R))
                                : y ys
                                -> (GHC.Types.:
                                      @ (Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.Type)
                                      (case y of wild2 { (,) x y1 ->
                                       (x,
                                        (eta y1)
                                          `cast`
                                        (Data.Functor.Identity.N:Identity[0]
                                             <Language.PureScript.Types.Type>_R)) })
                                      (go6 ys)
                                        `cast`
                                      (Data.Functor.Identity.N:Identity[0]
                                           <[(Language.PureScript.Names.Qualified
                                                Data.Text.Internal.Text,
                                              Language.PureScript.Types.Type)]>_R))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <[(Language.PureScript.Names.Qualified
                                                  Data.Text.Internal.Text,
                                                Language.PureScript.Types.Type)]>_R)) }
                          } in
                          (go6 i)
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <[(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
                                  Language.PureScript.Types.Type)]>_R))
                         (case r of wild1 {
                            GHC.Base.Nothing
                            -> GHC.Base.Nothing
                                 @ [(Language.PureScript.Label.Label,
                                     Language.PureScript.Types.Type)]
                            GHC.Base.Just x
                            -> GHC.Base.Just
                                 @ [(Language.PureScript.Label.Label,
                                     Language.PureScript.Types.Type)]
                                 (letrec {
                                    go6 :: [(Language.PureScript.Label.Label,
                                             Language.PureScript.Types.Type)]
                                           -> Data.Functor.Identity.Identity
                                                [(Language.PureScript.Label.Label,
                                                  Language.PureScript.Types.Type)]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ (ds :: [(Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.Type)]) ->
                                      case ds of wild2 {
                                        []
                                        -> (GHC.Types.[]
                                              @ (Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.Type))
                                             `cast`
                                           (Sym (Data.Functor.Identity.N:Identity[0]
                                                     <[(Language.PureScript.Label.Label,
                                                        Language.PureScript.Types.Type)]>_R))
                                        : y ys
                                        -> (GHC.Types.:
                                              @ (Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.Type)
                                              (case y of wild3 { (,) x1 y1 ->
                                               (x1,
                                                (eta y1)
                                                  `cast`
                                                (Data.Functor.Identity.N:Identity[0]
                                                     <Language.PureScript.Types.Type>_R)) })
                                              (go6 ys)
                                                `cast`
                                              (Data.Functor.Identity.N:Identity[0]
                                                   <[(Language.PureScript.Label.Label,
                                                      Language.PureScript.Types.Type)]>_R))
                                             `cast`
                                           (Sym (Data.Functor.Identity.N:Identity[0]
                                                     <[(Language.PureScript.Label.Label,
                                                        Language.PureScript.Types.Type)]>_R)) }
                                  } in
                                  (go6 x)
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <[(Language.PureScript.Label.Label,
                                          Language.PureScript.Types.Type)]>_R)) }))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeSearch>_R)) }) -}
b9a1a9bce63f1924055aa891a13e92a9
  overTypeDeclaration ::
    (Language.PureScript.AST.Declarations.TypeDeclarationData
     -> Language.PureScript.AST.Declarations.TypeDeclarationData)
    -> Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U(U,U,U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f156 :: Language.PureScript.AST.Declarations.TypeDeclarationData
                            -> Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (d :: Language.PureScript.AST.Declarations.Declaration) ->
                 case d of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> case f156
                             (Language.PureScript.AST.Declarations.TypeDeclarationData
                                dt
                                dt1
                                dt2) of dt3 { Language.PureScript.AST.Declarations.TypeDeclarationData dt4 dt5 dt6 ->
                      Language.PureScript.AST.Declarations.TypeDeclaration
                        dt4
                        dt5
                        dt6 } }) -}
9810c7d022732f62d93cb27952904bcd
  overValueDeclaration ::
    (Language.PureScript.AST.Declarations.ValueDeclarationData
       [Language.PureScript.AST.Declarations.GuardedExpr]
     -> Language.PureScript.AST.Declarations.ValueDeclarationData
          [Language.PureScript.AST.Declarations.GuardedExpr])
    -> Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U,U,U,U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f156 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                              [Language.PureScript.AST.Declarations.GuardedExpr]
                            -> Language.PureScript.AST.Declarations.ValueDeclarationData
                                 [Language.PureScript.AST.Declarations.GuardedExpr])
                   (d :: Language.PureScript.AST.Declarations.Declaration) ->
                 case d of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> case f156
                             (Language.PureScript.AST.Declarations.ValueDeclarationData
                                @ [Language.PureScript.AST.Declarations.GuardedExpr]
                                dt
                                dt1
                                dt2
                                dt3
                                dt4) of dt5 { Language.PureScript.AST.Declarations.ValueDeclarationData dt6 dt7 dt8 dt9 dt10 ->
                      Language.PureScript.AST.Declarations.ValueDeclaration
                        dt6
                        dt7
                        dt8
                        dt9
                        dt10 } }) -}
6bb793796adb411b63074cabb1cd2dc5
  runAssocList ::
    Language.PureScript.AST.Declarations.AssocList k t -> [(k, t)]
  RecSel Left Language.PureScript.AST.Declarations.AssocList
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.runAssocList1
                  `cast`
                (forall (k :: <*>_N) (t :: <*>_N).
                 <Language.PureScript.AST.Declarations.AssocList k t>_R
                 ->_R Language.PureScript.AST.Declarations.N:AssocList[0]
                          <k>_R <t>_R) -}
6bb793796adb411b63074cabb1cd2dc5
  runAssocList1 ::
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ t
                   (ds :: Language.PureScript.AST.Declarations.AssocList k t) ->
                 ds) -}
0b0b6c668555518d768d4dfdaf4d710b
  traverseTypeInstanceBody ::
    GHC.Base.Applicative f =>
    ([Language.PureScript.AST.Declarations.Declaration]
     -> f [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> f Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f156 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f156)
                   (eta :: [Language.PureScript.AST.Declarations.Declaration]
                           -> f156 [Language.PureScript.AST.Declarations.Declaration])
                   (eta1 :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f156
                        $dApplicative
                        @ Language.PureScript.AST.Declarations.TypeInstanceBody
                        wild
                   Language.PureScript.AST.Declarations.ExplicitInstance ds
                   -> GHC.Base.fmap
                        @ f156
                        (GHC.Base.$p1Applicative @ f156 $dApplicative)
                        @ [Language.PureScript.AST.Declarations.Declaration]
                        @ Language.PureScript.AST.Declarations.TypeInstanceBody
                        Language.PureScript.AST.Declarations.ExplicitInstance
                        (eta ds) }) -}
9f93487d1a91f557ef94e379878c19dd
  tsAfterIdentifiers ::
    Language.PureScript.AST.Declarations.TypeSearch
    -> [(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
         Language.PureScript.Types.Type)]
  RecSel Left Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TSBefore ipv
                   -> Language.PureScript.AST.Declarations.tsAfterIdentifiers1
                   Language.PureScript.AST.Declarations.TSAfter ds1 ds2 -> ds1 }) -}
bb1157f1cb83fd8a0cb642502fd6a600
  tsAfterIdentifiers1 ::
    [(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
      Language.PureScript.Types.Type)]
  {- Strictness: x -}
9f93487d1a91f557ef94e379878c19dd
  tsAfterRecordFields ::
    Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Base.Maybe
         [(Language.PureScript.Label.Label, Language.PureScript.Types.Type)]
  RecSel Left Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TSBefore ipv
                   -> Language.PureScript.AST.Declarations.tsAfterRecordFields1
                   Language.PureScript.AST.Declarations.TSAfter ds1 ds2 -> ds2 }) -}
c2ae41d185a718f0ab8201fba98cc675
  tsAfterRecordFields1 ::
    GHC.Base.Maybe
      [(Language.PureScript.Label.Label, Language.PureScript.Types.Type)]
  {- Strictness: x -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  tydeclIdent ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds2 }) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  tydeclSourceAnn ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.SourcePos.SourceAnn
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds1 }) -}
73dd7603bbe7fadce9f5fc48c4dc58fb
  tydeclType ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds3 }) -}
cd3190b939e5767c5dbe58848d9227e3
  unwrapTypeDeclaration ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> (Language.PureScript.Names.Ident,
        Language.PureScript.Types.Type)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 (case td of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds ds1 ds2 ->
                  ds1 },
                  case td of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds ds1 ds2 ->
                  ds2 })) -}
0c2d915175f1072d8eeca07af2b73e20
  valdeclBinders ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> [Language.PureScript.AST.Binders.Binder]
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
0c2d915175f1072d8eeca07af2b73e20
  valdeclExpression ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
0c2d915175f1072d8eeca07af2b73e20
  valdeclIdent ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
0c2d915175f1072d8eeca07af2b73e20
  valdeclName ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.Environment.NameKind
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
0c2d915175f1072d8eeca07af2b73e20
  valdeclSourceAnn ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.AST.SourcePos.SourceAnn
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U(U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fEqAssocList
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.Declaration]
  = Language.PureScript.AST.Declarations.$fEqDeclaration
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fEqDeclarationRef
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.HintCategory]
  = Language.PureScript.AST.Declarations.$fEqHintCategory
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fEqImportDeclarationType
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fEqPathNode
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fEqPathTree
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.TypeDeclarationData]
  = Language.PureScript.AST.Declarations.$fEqTypeDeclarationData
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fEqTypeFixity
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fEqValueFixity
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fFoldableAssocList
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fFoldablePathNode
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fFoldablePathTree
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fFunctorAssocList
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fFunctorPathNode
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fFunctorPathTree
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData
instance GHC.Generics.Generic [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fGenericDeclarationRef
instance Control.DeepSeq.NFData [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fNFDataDeclarationRef
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fOrdAssocList
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fOrdPathNode
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fOrdPathTree
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fOrdTypeFixity
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fOrdValueFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fShowAssocList
instance GHC.Show.Show [Language.PureScript.AST.Declarations.CaseAlternative]
  = Language.PureScript.AST.Declarations.$fShowCaseAlternative
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Declaration]
  = Language.PureScript.AST.Declarations.$fShowDeclaration
instance GHC.Show.Show [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fShowDeclarationRef
instance GHC.Show.Show [Language.PureScript.AST.Declarations.DoNotationElement]
  = Language.PureScript.AST.Declarations.$fShowDoNotationElement
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ErrorMessage]
  = Language.PureScript.AST.Declarations.$fShowErrorMessage
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ErrorMessageHint]
  = Language.PureScript.AST.Declarations.$fShowErrorMessageHint
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Expr]
  = Language.PureScript.AST.Declarations.$fShowExpr
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Guard]
  = Language.PureScript.AST.Declarations.$fShowGuard
instance GHC.Show.Show [Language.PureScript.AST.Declarations.GuardedExpr]
  = Language.PureScript.AST.Declarations.$fShowGuardedExpr
instance GHC.Show.Show [Language.PureScript.AST.Declarations.HintCategory]
  = Language.PureScript.AST.Declarations.$fShowHintCategory
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fShowImportDeclarationType
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Module]
  = Language.PureScript.AST.Declarations.$fShowModule
instance GHC.Show.Show [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fShowPathNode
instance GHC.Show.Show [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fShowPathTree
instance GHC.Show.Show [Language.PureScript.AST.Declarations.SimpleErrorMessage]
  = Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeDeclarationData]
  = Language.PureScript.AST.Declarations.$fShowTypeDeclarationData
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fShowTypeFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeInstanceBody]
  = Language.PureScript.AST.Declarations.$fShowTypeInstanceBody
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeSearch]
  = Language.PureScript.AST.Declarations.$fShowTypeSearch
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fShowValueDeclarationData
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fShowValueFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.WhereProvenance]
  = Language.PureScript.AST.Declarations.$fShowWhereProvenance
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fToJSONDeclarationRef
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fTraversableAssocList
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fTraversablePathNode
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fTraversablePathTree
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData
family instance GHC.Generics.Rep [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.Rep_DeclarationRef
"SPEC $cfoldMap @ Any _" forall @ a
                                ($dMonoid :: GHC.Base.Monoid Data.Semigroup.Internal.Any)
  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap @ Data.Semigroup.Internal.Any
                                                                    @ a
                                                                    $dMonoid
  = Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
      @ a
"SPEC onTypeSearchTypesM @ Identity" forall ($dApplicative :: GHC.Base.Applicative
                                                                Data.Functor.Identity.Identity)
  Language.PureScript.AST.Declarations.onTypeSearchTypesM @ Data.Functor.Identity.Identity
                                                          $dApplicative
  = Language.PureScript.AST.Declarations.onTypeSearchTypes_$sonTypeSearchTypesM
"SPEC/Language.PureScript.AST.Declarations $fShow(,) @ (Qualified
                                                         (OpName 'AnyOpName)) @ Associativity" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                          Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                 (v :: GHC.Show.Show
                                                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                                                                               'Language.PureScript.Names.AnyOpName)))
  GHC.Show.$fShow(,) @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     v
                     v1
  = Language.PureScript.AST.Declarations.$s$fShow(,)2
"SPEC/Language.PureScript.AST.Declarations $fShow(,) @ Ident @ Type" [orphan] forall (v1 :: GHC.Show.Show
                                                                                              Language.PureScript.Types.Type)
                                                                                     (v :: GHC.Show.Show
                                                                                             Language.PureScript.Names.Ident)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.Ident
                     @ Language.PureScript.Types.Type
                     v
                     v1
  = Language.PureScript.AST.Declarations.$s$fShow(,)1
"SPEC/Language.PureScript.AST.Declarations $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                        [Language.PureScript.Comments.Comment])
                                                                                               (v :: GHC.Show.Show
                                                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.AST.Declarations.$s$fShow(,)3
"SPEC/Language.PureScript.AST.Declarations $fShow(,)_$cshow @ Ident @ Type" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                          Language.PureScript.Types.Type)
                                                                                            ($dShow2 :: GHC.Show.Show
                                                                                                          Language.PureScript.Names.Ident)
  GHC.Show.$fShow(,)_$cshow @ Language.PureScript.Names.Ident
                            @ Language.PureScript.Types.Type
                            $dShow2
                            $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$cshow1
"SPEC/Language.PureScript.AST.Declarations $fShow(,)_$cshowList @ Ident @ Type" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                              Language.PureScript.Types.Type)
                                                                                                ($dShow2 :: GHC.Show.Show
                                                                                                              Language.PureScript.Names.Ident)
  GHC.Show.$fShow(,)_$cshowList @ Language.PureScript.Names.Ident
                                @ Language.PureScript.Types.Type
                                $dShow2
                                $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$cshowList1
"SPEC/Language.PureScript.AST.Declarations $fShow(,)_$cshowsPrec @ Ident @ Type" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                              Language.PureScript.Types.Type)
                                                                                                     (w :: GHC.Show.Show
                                                                                                             Language.PureScript.Names.Ident)
  GHC.Show.$fShow(,)_$cshowsPrec @ Language.PureScript.Names.Ident
                                 @ Language.PureScript.Types.Type
                                 w
                                 w1
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$cshowsPrec5
"SPEC/Language.PureScript.AST.Declarations $fShowEither @ Ident @ (ProperName
                                                                    'ConstructorName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                     (v :: GHC.Show.Show
                                                                                                                                                                                             Language.PureScript.Names.Ident)
  Data.Either.$fShowEither @ Language.PureScript.Names.Ident
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           v
                           v1
  = Language.PureScript.AST.Declarations.$fShowValueFixity_$s$fShowEither
"SPEC/Language.PureScript.AST.Declarations $fShowEither_$cshowList @ Ident @ (ProperName
                                                                               'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                           ($dShow2 :: GHC.Show.Show
                                                                                                                                                                                                                         Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowList @ Language.PureScript.Names.Ident
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)
                                      $dShow2
                                      $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowEither_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowEither_$cshowsPrec @ Ident @ (ProperName
                                                                                'ConstructorName)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                             'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                                 (w :: GHC.Show.Show
                                                                                                                                                                                                                         Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowsPrec @ Language.PureScript.Names.Ident
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName)
                                       w
                                       w1
  = Language.PureScript.AST.Declarations.$s$fShowEither_$cshowsPrec
"SPEC/Language.PureScript.AST.Declarations $fShowMap @ (Qualified
                                                         Ident) @ (TypeClassDictionaryInScope
                                                                     (Qualified Ident))" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                  (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                        Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                         (v :: GHC.Show.Show
                                                                                                                                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                    Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap @ (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                              @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident))
                              v
                              v1
  = Language.PureScript.AST.Declarations.$s$fShowMap
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshow @ (Qualified
                                                                Ident) @ (TypeClassDictionaryInScope
                                                                            (Qualified Ident))" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                  Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                                              ($dShow2 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                            (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                               Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshow @ (Language.PureScript.Names.Qualified
                                          Language.PureScript.Names.Ident)
                                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                          (Language.PureScript.Names.Qualified
                                             Language.PureScript.Names.Ident))
                                     $dShow2
                                     $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshow
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshowList @ (Qualified
                                                                    Ident) @ (TypeClassDictionaryInScope
                                                                                (Qualified Ident))" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                                        (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                                           (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                              Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                                                          ($dShow2 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                                        (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                           Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowList @ (Language.PureScript.Names.Qualified
                                              Language.PureScript.Names.Ident)
                                         @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                              (Language.PureScript.Names.Qualified
                                                 Language.PureScript.Names.Ident))
                                         $dShow2
                                         $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshowsPrec @ (Qualified
                                                                     Ident) @ (TypeClassDictionaryInScope
                                                                                 (Qualified Ident))" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                                          (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                                             (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                                Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                                                                 (w :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                            Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowsPrec @ (Language.PureScript.Names.Qualified
                                               Language.PureScript.Names.Ident)
                                          @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                               (Language.PureScript.Names.Qualified
                                                  Language.PureScript.Names.Ident))
                                          w
                                          w1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec
"SPEC/Language.PureScript.AST.Declarations $fShowMaybe @ ModuleName" [orphan] forall (v :: GHC.Show.Show
                                                                                             Language.PureScript.Names.ModuleName)
  GHC.Show.$fShowMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowMaybe
"SPEC/Language.PureScript.AST.Declarations $fShowMaybe_$cshowList @ ModuleName" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Show.$fShowMaybe_$cshowList @ Language.PureScript.Names.ModuleName
                                  $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowMaybe_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ (OpName
                                                               'AnyOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                            'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.AnyOpName)
                                            v
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ (ProperName
                                                               'ClassName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                             (Language.PureScript.Names.ProperName
                                                                                                                                                                                'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName)
                                            v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                            Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified @ Language.PureScript.Names.Ident
                                            v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ (OpName
                                                                          'AnyOpName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.AnyOpName)
                                                       $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList3
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ (ProperName
                                                                          'ClassName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)
                                                       $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList2
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ Ident" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                             Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowList @ Language.PureScript.Names.Ident
                                                       $dShow1
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList1
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ (OpName
                                                                           'AnyOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.AnyOpName)
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec7
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ (ProperName
                                                                           'ClassName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec5
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ Ident" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                            Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ Language.PureScript.Names.Ident
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec3
"SPEC/Language.PureScript.AST.Declarations $fShowTypeClassDictionaryInScope @ (Qualified
                                                                                Ident)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                          (Language.PureScript.Names.Qualified
                                                                                                                                                                                                             Language.PureScript.Names.Ident))
  Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope @ (Language.PureScript.Names.Qualified
                                                                                  Language.PureScript.Names.Ident)
                                                                             v1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
"SPEC/Language.PureScript.AST.Declarations $fShow[] @ (Label, Type)" [orphan] forall (v :: GHC.Show.Show
                                                                                             (Language.PureScript.Label.Label,
                                                                                              Language.PureScript.Types.Type))
  GHC.Show.$fShow[] @ (Language.PureScript.Label.Label,
                       Language.PureScript.Types.Type)
                    v
  = Language.PureScript.AST.Declarations.$s$fShow[]
"SPEC/Language.PureScript.AST.Declarations $fShow[] @ (ProperName
                                                        'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[] @ (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName)
                    v
  = Language.PureScript.AST.Declarations.$s$fShow[]1
"SPEC/Language.PureScript.AST.Declarations $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                       Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshow @ (ProperName
                                                               'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshow @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshow1
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshow @ Comment" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                    Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Comments.Comment
                           $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshow2
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshowList @ (ProperName
                                                                   'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshowList @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
                               $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshowList1
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshowList @ Comment" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Comments.Comment
                               $dShow1
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshowList2
"SPEC/Language.PureScript.AST.Declarations concatMap @ [] _ _" [orphan] forall @ a
                                                                               @ b
                                                                               ($dFoldable :: Data.Foldable.Foldable
                                                                                                [])
  Data.Foldable.concatMap @ [] @ a @ b $dFoldable
  = Language.PureScript.AST.Declarations.$sconcatMap @ a @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

