
==================== FINAL INTERFACE ====================
2019-01-24 14:14:06.701376 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations [family instance module] 8043
  interface hash: 3f83b518897cb4cc36bd9d99ac8ef2e3
  ABI hash: 586bc75044e8737d02875208d17d4395
  export-list hash: ca3189140688cddb12d34cdf2c0663e4
  orphan hash: 055674ef1c96ba0997eed6af6ba67e18
  flag hash: b68a0649a232854c19b0af5e7eabe161
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.AST.Declarations.MkUnguarded
  Language.PureScript.AST.Declarations.TypeFixityDeclaration
  Language.PureScript.AST.Declarations.ValueDecl
  Language.PureScript.AST.Declarations.ValueFixityDeclaration
  Language.PureScript.AST.Declarations.addDefaultImport
  Language.PureScript.AST.Declarations.compDecRef
  Language.PureScript.AST.Declarations.declName
  Language.PureScript.AST.Declarations.declRefName
  Language.PureScript.AST.Declarations.declRefSourceSpan
  Language.PureScript.AST.Declarations.declSourceAnn
  Language.PureScript.AST.Declarations.declSourceSpan
  Language.PureScript.AST.Declarations.flattenDecls
  Language.PureScript.AST.Declarations.getFixityDecl
  Language.PureScript.AST.Declarations.getKindRef
  Language.PureScript.AST.Declarations.getModuleDeclarations
  Language.PureScript.AST.Declarations.getModuleName
  Language.PureScript.AST.Declarations.getModuleSourceSpan
  Language.PureScript.AST.Declarations.getTypeClassRef
  Language.PureScript.AST.Declarations.getTypeDeclaration
  Language.PureScript.AST.Declarations.getTypeOpRef
  Language.PureScript.AST.Declarations.getTypeRef
  Language.PureScript.AST.Declarations.getValueDeclaration
  Language.PureScript.AST.Declarations.getValueOpRef
  Language.PureScript.AST.Declarations.getValueRef
  Language.PureScript.AST.Declarations.importPrim
  Language.PureScript.AST.Declarations.isDataDecl
  Language.PureScript.AST.Declarations.isExplicit
  Language.PureScript.AST.Declarations.isExternDataDecl
  Language.PureScript.AST.Declarations.isExternDecl
  Language.PureScript.AST.Declarations.isExternKindDecl
  Language.PureScript.AST.Declarations.isFixityDecl
  Language.PureScript.AST.Declarations.isImplicit
  Language.PureScript.AST.Declarations.isImportDecl
  Language.PureScript.AST.Declarations.isModuleRef
  Language.PureScript.AST.Declarations.isTrueExpr
  Language.PureScript.AST.Declarations.isTypeClassDeclaration
  Language.PureScript.AST.Declarations.isTypeClassInstanceDeclaration
  Language.PureScript.AST.Declarations.isValueDecl
  Language.PureScript.AST.Declarations.mapTypeInstanceBody
  Language.PureScript.AST.Declarations.onTypeSearchTypes
  Language.PureScript.AST.Declarations.onTypeSearchTypesM
  Language.PureScript.AST.Declarations.overTypeDeclaration
  Language.PureScript.AST.Declarations.overValueDeclaration
  Language.PureScript.AST.Declarations.traverseTypeInstanceBody
  Language.PureScript.AST.Declarations.unwrapTypeDeclaration
  Language.PureScript.AST.Declarations.AssocList{Language.PureScript.AST.Declarations.AssocList runAssocList}
  Language.PureScript.AST.Declarations.CaseAlternative{Language.PureScript.AST.Declarations.CaseAlternative caseAlternativeBinders caseAlternativeResult}
  Language.PureScript.AST.Declarations.Context
  Language.PureScript.AST.Declarations.Declaration{Language.PureScript.AST.Declarations.BindingGroupDeclaration Language.PureScript.AST.Declarations.BoundValueDeclaration Language.PureScript.AST.Declarations.DataBindingGroupDeclaration Language.PureScript.AST.Declarations.DataDeclaration Language.PureScript.AST.Declarations.ExternDataDeclaration Language.PureScript.AST.Declarations.ExternDeclaration Language.PureScript.AST.Declarations.ExternKindDeclaration Language.PureScript.AST.Declarations.FixityDeclaration Language.PureScript.AST.Declarations.ImportDeclaration Language.PureScript.AST.Declarations.TypeClassDeclaration Language.PureScript.AST.Declarations.TypeDeclaration Language.PureScript.AST.Declarations.TypeInstanceDeclaration Language.PureScript.AST.Declarations.TypeSynonymDeclaration Language.PureScript.AST.Declarations.ValueDeclaration}
  Language.PureScript.AST.Declarations.DeclarationRef{Language.PureScript.AST.Declarations.KindRef Language.PureScript.AST.Declarations.ModuleRef Language.PureScript.AST.Declarations.ReExportRef Language.PureScript.AST.Declarations.TypeClassRef Language.PureScript.AST.Declarations.TypeInstanceRef Language.PureScript.AST.Declarations.TypeOpRef Language.PureScript.AST.Declarations.TypeRef Language.PureScript.AST.Declarations.ValueOpRef Language.PureScript.AST.Declarations.ValueRef}
  Language.PureScript.AST.Declarations.DoNotationElement{Language.PureScript.AST.Declarations.DoNotationBind Language.PureScript.AST.Declarations.DoNotationLet Language.PureScript.AST.Declarations.DoNotationValue Language.PureScript.AST.Declarations.PositionedDoNotationElement}
  Language.PureScript.AST.Declarations.ErrorMessage{Language.PureScript.AST.Declarations.ErrorMessage}
  Language.PureScript.AST.Declarations.ErrorMessageHint{Language.PureScript.AST.Declarations.ErrorCheckingAccessor Language.PureScript.AST.Declarations.ErrorCheckingGuard Language.PureScript.AST.Declarations.ErrorCheckingKind Language.PureScript.AST.Declarations.ErrorCheckingType Language.PureScript.AST.Declarations.ErrorInApplication Language.PureScript.AST.Declarations.ErrorInBindingGroup Language.PureScript.AST.Declarations.ErrorInDataBindingGroup Language.PureScript.AST.Declarations.ErrorInDataConstructor Language.PureScript.AST.Declarations.ErrorInExpression Language.PureScript.AST.Declarations.ErrorInForeignImport Language.PureScript.AST.Declarations.ErrorInInstance Language.PureScript.AST.Declarations.ErrorInModule Language.PureScript.AST.Declarations.ErrorInSubsumption Language.PureScript.AST.Declarations.ErrorInTypeClassDeclaration Language.PureScript.AST.Declarations.ErrorInTypeConstructor Language.PureScript.AST.Declarations.ErrorInTypeDeclaration Language.PureScript.AST.Declarations.ErrorInTypeSynonym Language.PureScript.AST.Declarations.ErrorInValueDeclaration Language.PureScript.AST.Declarations.ErrorInferringType Language.PureScript.AST.Declarations.ErrorSolvingConstraint Language.PureScript.AST.Declarations.ErrorUnifyingTypes Language.PureScript.AST.Declarations.PositionedError}
  Language.PureScript.AST.Declarations.Expr{Language.PureScript.AST.Declarations.Abs Language.PureScript.AST.Declarations.Accessor Language.PureScript.AST.Declarations.Ado Language.PureScript.AST.Declarations.AnonymousArgument Language.PureScript.AST.Declarations.App Language.PureScript.AST.Declarations.BinaryNoParens Language.PureScript.AST.Declarations.Case Language.PureScript.AST.Declarations.Constructor Language.PureScript.AST.Declarations.DeferredDictionary Language.PureScript.AST.Declarations.Do Language.PureScript.AST.Declarations.Hole Language.PureScript.AST.Declarations.IfThenElse Language.PureScript.AST.Declarations.Let Language.PureScript.AST.Declarations.Literal Language.PureScript.AST.Declarations.ObjectUpdate Language.PureScript.AST.Declarations.ObjectUpdateNested Language.PureScript.AST.Declarations.Op Language.PureScript.AST.Declarations.Parens Language.PureScript.AST.Declarations.PositionedValue Language.PureScript.AST.Declarations.TypeClassDictionary Language.PureScript.AST.Declarations.TypeClassDictionaryAccessor Language.PureScript.AST.Declarations.TypeClassDictionaryConstructorApp Language.PureScript.AST.Declarations.TypedValue Language.PureScript.AST.Declarations.UnaryMinus Language.PureScript.AST.Declarations.Var}
  Language.PureScript.AST.Declarations.Guard{Language.PureScript.AST.Declarations.ConditionGuard Language.PureScript.AST.Declarations.PatternGuard}
  Language.PureScript.AST.Declarations.GuardedExpr{Language.PureScript.AST.Declarations.GuardedExpr}
  Language.PureScript.AST.Declarations.HintCategory{Language.PureScript.AST.Declarations.CheckHint Language.PureScript.AST.Declarations.ExprHint Language.PureScript.AST.Declarations.KindHint Language.PureScript.AST.Declarations.OtherHint Language.PureScript.AST.Declarations.PositionHint Language.PureScript.AST.Declarations.SolverHint}
  Language.PureScript.AST.Declarations.ImportDeclarationType{Language.PureScript.AST.Declarations.Explicit Language.PureScript.AST.Declarations.Hiding Language.PureScript.AST.Declarations.Implicit}
  Language.PureScript.AST.Declarations.Module{Language.PureScript.AST.Declarations.Module}
  Language.PureScript.AST.Declarations.PathNode{Language.PureScript.AST.Declarations.Branch Language.PureScript.AST.Declarations.Leaf}
  Language.PureScript.AST.Declarations.PathTree{Language.PureScript.AST.Declarations.PathTree}
  Language.PureScript.AST.Declarations.SimpleErrorMessage{Language.PureScript.AST.Declarations.AdditionalProperty Language.PureScript.AST.Declarations.AmbiguousTypeVariables Language.PureScript.AST.Declarations.ArgListLengthsDiffer Language.PureScript.AST.Declarations.CannotDefinePrimModules Language.PureScript.AST.Declarations.CannotDerive Language.PureScript.AST.Declarations.CannotDeriveNewtypeForData Language.PureScript.AST.Declarations.CannotFindDerivingType Language.PureScript.AST.Declarations.CannotGeneralizeRecursiveFunction Language.PureScript.AST.Declarations.CannotGetFileInfo Language.PureScript.AST.Declarations.CannotReadFile Language.PureScript.AST.Declarations.CannotUseBindWithDo Language.PureScript.AST.Declarations.CannotWriteFile Language.PureScript.AST.Declarations.CaseBinderLengthDiffers Language.PureScript.AST.Declarations.ClassInstanceArityMismatch Language.PureScript.AST.Declarations.ConstrainedTypeUnified Language.PureScript.AST.Declarations.CycleInDeclaration Language.PureScript.AST.Declarations.CycleInModules Language.PureScript.AST.Declarations.CycleInTypeSynonym Language.PureScript.AST.Declarations.DeclConflict Language.PureScript.AST.Declarations.DuplicateExportRef Language.PureScript.AST.Declarations.DuplicateImport Language.PureScript.AST.Declarations.DuplicateImportRef Language.PureScript.AST.Declarations.DuplicateInstance Language.PureScript.AST.Declarations.DuplicateLabel Language.PureScript.AST.Declarations.DuplicateModule Language.PureScript.AST.Declarations.DuplicateSelectiveImport Language.PureScript.AST.Declarations.DuplicateTypeArgument Language.PureScript.AST.Declarations.DuplicateTypeClass Language.PureScript.AST.Declarations.DuplicateValueDeclaration Language.PureScript.AST.Declarations.ErrorParsingFFIModule Language.PureScript.AST.Declarations.ErrorParsingModule Language.PureScript.AST.Declarations.EscapedSkolem Language.PureScript.AST.Declarations.ExpectedType Language.PureScript.AST.Declarations.ExpectedTypeConstructor Language.PureScript.AST.Declarations.ExpectedWildcard Language.PureScript.AST.Declarations.ExportConflict Language.PureScript.AST.Declarations.ExprDoesNotHaveType Language.PureScript.AST.Declarations.ExtraneousClassMember Language.PureScript.AST.Declarations.HidingImport Language.PureScript.AST.Declarations.HoleInferredType Language.PureScript.AST.Declarations.ImplicitImport Language.PureScript.AST.Declarations.ImplicitQualifiedImport Language.PureScript.AST.Declarations.ImplicitQualifiedImportReExport Language.PureScript.AST.Declarations.ImportHidingModule Language.PureScript.AST.Declarations.IncompleteExhaustivityCheck Language.PureScript.AST.Declarations.IncorrectAnonymousArgument Language.PureScript.AST.Declarations.IncorrectConstructorArity Language.PureScript.AST.Declarations.InfiniteKind Language.PureScript.AST.Declarations.InfiniteType Language.PureScript.AST.Declarations.IntOutOfRange Language.PureScript.AST.Declarations.InvalidDerivedInstance Language.PureScript.AST.Declarations.InvalidDoBind Language.PureScript.AST.Declarations.InvalidDoLet Language.PureScript.AST.Declarations.InvalidFFIIdentifier Language.PureScript.AST.Declarations.InvalidInstanceHead Language.PureScript.AST.Declarations.InvalidNewtype Language.PureScript.AST.Declarations.InvalidNewtypeInstance Language.PureScript.AST.Declarations.InvalidOperatorInBinder Language.PureScript.AST.Declarations.KindsDoNotUnify Language.PureScript.AST.Declarations.MisleadingEmptyTypeImport Language.PureScript.AST.Declarations.MissingClassMember Language.PureScript.AST.Declarations.MissingFFIImplementations Language.PureScript.AST.Declarations.MissingFFIModule Language.PureScript.AST.Declarations.MissingNewtypeSuperclassInstance Language.PureScript.AST.Declarations.MissingTypeDeclaration Language.PureScript.AST.Declarations.MixedAssociativityError Language.PureScript.AST.Declarations.ModuleNotFound Language.PureScript.AST.Declarations.MultipleTypeOpFixities Language.PureScript.AST.Declarations.MultipleValueOpFixities Language.PureScript.AST.Declarations.NameIsUndefined Language.PureScript.AST.Declarations.NoInstanceFound Language.PureScript.AST.Declarations.NonAssociativeError Language.PureScript.AST.Declarations.OrphanInstance Language.PureScript.AST.Declarations.OrphanTypeDeclaration Language.PureScript.AST.Declarations.OverlappingArgNames Language.PureScript.AST.Declarations.OverlappingInstances Language.PureScript.AST.Declarations.OverlappingNamesInLet Language.PureScript.AST.Declarations.OverlappingPattern Language.PureScript.AST.Declarations.PartiallyAppliedSynonym Language.PureScript.AST.Declarations.PossiblyInfiniteInstance Language.PureScript.AST.Declarations.PropertyIsMissing Language.PureScript.AST.Declarations.RedefinedIdent Language.PureScript.AST.Declarations.ScopeConflict Language.PureScript.AST.Declarations.ScopeShadowing Language.PureScript.AST.Declarations.ShadowedName Language.PureScript.AST.Declarations.ShadowedTypeVar Language.PureScript.AST.Declarations.TransitiveDctorExportError Language.PureScript.AST.Declarations.TransitiveExportError Language.PureScript.AST.Declarations.TypeSynonymInstance Language.PureScript.AST.Declarations.TypesDoNotUnify Language.PureScript.AST.Declarations.UndefinedTypeVariable Language.PureScript.AST.Declarations.UnknownClass Language.PureScript.AST.Declarations.UnknownExport Language.PureScript.AST.Declarations.UnknownExportDataConstructor Language.PureScript.AST.Declarations.UnknownImport Language.PureScript.AST.Declarations.UnknownImportDataConstructor Language.PureScript.AST.Declarations.UnknownName Language.PureScript.AST.Declarations.UnnecessaryFFIModule Language.PureScript.AST.Declarations.UnusableDeclaration Language.PureScript.AST.Declarations.UnusedDctorExplicitImport Language.PureScript.AST.Declarations.UnusedDctorImport Language.PureScript.AST.Declarations.UnusedExplicitImport Language.PureScript.AST.Declarations.UnusedFFIImplementations Language.PureScript.AST.Declarations.UnusedImport Language.PureScript.AST.Declarations.UnusedTypeVar Language.PureScript.AST.Declarations.UnverifiableSuperclassInstance Language.PureScript.AST.Declarations.UserDefinedWarning Language.PureScript.AST.Declarations.WildcardInferredType}
  Language.PureScript.AST.Declarations.TypeDeclarationData{Language.PureScript.AST.Declarations.TypeDeclarationData tydeclIdent tydeclSourceAnn tydeclType}
  Language.PureScript.AST.Declarations.TypeFixity{Language.PureScript.AST.Declarations.TypeFixity}
  Language.PureScript.AST.Declarations.TypeInstanceBody{Language.PureScript.AST.Declarations.DerivedInstance Language.PureScript.AST.Declarations.ExplicitInstance Language.PureScript.AST.Declarations.NewtypeInstance Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary}
  Language.PureScript.AST.Declarations.TypeSearch{Language.PureScript.AST.Declarations.TSAfter Language.PureScript.AST.Declarations.TSBefore tsAfterIdentifiers tsAfterRecordFields}
  Language.PureScript.AST.Declarations.ValueDeclarationData{Language.PureScript.AST.Declarations.ValueDeclarationData valdeclBinders valdeclExpression valdeclIdent valdeclName valdeclSourceAnn}
  Language.PureScript.AST.Declarations.ValueFixity{Language.PureScript.AST.Declarations.ValueFixity}
  Language.PureScript.AST.Declarations.WhereProvenance{Language.PureScript.AST.Declarations.FromLet Language.PureScript.AST.Declarations.FromWhere}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Binders
                     Language.PureScript.AST.Literals Language.PureScript.AST.Operators
                     Language.PureScript.AST.SourcePos Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC stm-2.4.5.0:Control.Monad.STM
         syb-0.7:Data.Generics.Instances
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson.Encoding.Internal f04efae65181ca66f15bea14741e502d
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Identity ca9e9b9bfa404d3d70994a432bbadd6d
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  exports: 21ca217e42d8560f3b797ca3690c6ebc
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  exports: ab5af4e7482c5a8cbf79fdfd52ee94e2
  BooleanLiteral 98d9c7b89f9a5dcc4796fae1c45898e6
  Literal 4b6b35be8d89b746a77fcd3d0c0a71d4
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  exports: 442eb27d876f3e9fba041fa53b38caeb
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Fixity 228a0ef1b3774b11d1a92fae92fb43a0
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  exports: a1e32a05596348684f99f9072c553e2b
  SourceAnn f5708ed135df009dfa0254486771ef74
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Bundle e9fc080977a6cbbcf186d859a93ee390
  exports: 7e1ffaf1974cff705339929f1490c3b6
  ErrorMessage 1ae2233781eec58c6f5c05da01cc27d8
import  -/  Language.PureScript.Comments 1a682522a2f855328ca87bb68705794c
  exports: 9921c985b3279420b3b7a2b7ccc8b32e
  Comment 2e827a5b834f92cc9beef533348585fa
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  Prim d528e2dc5909b801bd7d210869fde176
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  DataDeclType 7eb61fe78108d98d82e39145869b2402
  Environment 7eb61fe78108d98d82e39145869b2402
  FunctionalDependency 181e7295489b314c6c042d61e80bb6b9
  NameKind 7e23f4ddba2350405f465a39833424c7
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1525a534169f6ccc5a25699c70351352
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  AnyOpName 7560c0b47b9a27949d7bccd71756aa3b
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  IdentName f85afb00b35a2b992fb8ad7cbb2f9711
  KiName 3648c75d7b729914a2a52509b0a9365e
  KindName 7782d66ce60bd67282cf566485701e07
  ModName bdc8f8682bdb984467bbbfa35cbd8589
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Name d04047edf96c18708b7b5f72cb565394
  OpName 9af301165f72160425c5e0dde6525338
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  ValOpName c1457b90b10104e4d37147e7648f89b9
  ValueOpName 11964a7dc7a3029edbea30fc5b4578c2
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
import  -/  Language.PureScript.TypeClassDictionaries 7fbd42662a194b8e85db9d2e22a4ea07
  exports: d83fdf73223cc4030d8649333c7594ad
  NamedDict 5e215d8e3d225869af57b18c7fc0b693
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
import  -/  vector-0.12.0.1:Data.Vector f729e70597cc595442dc4fc6c91177bf
import  -/  vector-0.12.0.1:Data.Vector.Mutable e09e8bccd569472cc65f5c99a3d45010
0d739db89d1577b5dfcdd2a0bb51404c
  $bMkUnguarded ::
    Language.PureScript.AST.Declarations.Expr
    -> Language.PureScript.AST.Declarations.GuardedExpr
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (e :: Language.PureScript.AST.Declarations.Expr) ->
                 Language.PureScript.AST.Declarations.GuardedExpr
                   (GHC.Types.[] @ Language.PureScript.AST.Declarations.Guard)
                   e) -}
5f1c37ecb1010a7e4bf872da05e69d22
  $bTypeFixityDeclaration ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m11,
     Unfolding: InlineRule (4, True, False)
                (\ (sa :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (fixity :: Language.PureScript.AST.Operators.Fixity)
                   (name :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                   (op :: Language.PureScript.Names.OpName
                            'Language.PureScript.Names.TypeOpName) ->
                 Language.PureScript.AST.Declarations.FixityDeclaration
                   sa
                   (Data.Either.Right
                      @ Language.PureScript.AST.Declarations.ValueFixity
                      @ Language.PureScript.AST.Declarations.TypeFixity
                      (Language.PureScript.AST.Declarations.TypeFixity
                         fixity
                         name
                         op))) -}
40089eb559d84a1b3e20e9bca1dbb412
  $bValueDecl ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Environment.NameKind
    -> [Language.PureScript.AST.Binders.Binder]
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U(U,U)><S,1*U><S,1*U><S,1*U><S,1*U>m5,
     Unfolding: InlineRule (5, True, False)
                (\ (sann :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (ident :: Language.PureScript.Names.Ident)
                   (name :: Language.PureScript.Environment.NameKind)
                   (binders :: [Language.PureScript.AST.Binders.Binder])
                   (expr :: [Language.PureScript.AST.Declarations.GuardedExpr]) ->
                 case sann of dt { (,) ipv ipv1 ->
                 case ident of dt1 { DEFAULT ->
                 case name of dt2 { DEFAULT ->
                 case binders of dt3 { DEFAULT ->
                 case expr of dt4 { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclaration
                   dt
                   dt1
                   dt2
                   dt3
                   dt4 } } } } }) -}
f6b755de6fec2d87629025fd5eb37d36
  $bValueFixityDeclaration ::
    Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m11,
     Unfolding: InlineRule (4, True, False)
                (\ (sa :: Language.PureScript.AST.SourcePos.SourceAnn)
                   (fixity :: Language.PureScript.AST.Operators.Fixity)
                   (name :: Language.PureScript.Names.Qualified
                              (Data.Either.Either
                                 Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)))
                   (op :: Language.PureScript.Names.OpName
                            'Language.PureScript.Names.ValueOpName) ->
                 Language.PureScript.AST.Declarations.FixityDeclaration
                   sa
                   (Data.Either.Left
                      @ Language.PureScript.AST.Declarations.ValueFixity
                      @ Language.PureScript.AST.Declarations.TypeFixity
                      (Language.PureScript.AST.Declarations.ValueFixity
                         fixity
                         name
                         op))) -}
5252f47280702e464243816d50efc247
  $fEqAssocList ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Classes.Eq k)
                      (v1 :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fEqAssocList2 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fEqAssocList1 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Bool>_R) -}
073908c6428934f1c4dad217cb179fc9
  $fEqAssocList1 ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dEq :: GHC.Classes.Eq k)
                   ($dEq1 :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c/=
                   @ (k, t)
                   (GHC.Classes.$fEq(,) @ k @ t $dEq $dEq1)) -}
942c484680197fbc21c40566c654020c
  $fEqAssocList2 ::
    (GHC.Classes.Eq k, GHC.Classes.Eq t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dEq :: GHC.Classes.Eq k)
                   ($dEq1 :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c==
                   @ (k, t)
                   (GHC.Classes.$fEq(,) @ k @ t $dEq $dEq1)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fEqDeclaration ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.Declaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Declaration
                  Language.PureScript.AST.Declarations.$fEqDeclaration_$c==
                  Language.PureScript.AST.Declarations.$fEqDeclaration_$c/= -}
11dc0de5d3b4918bd265ef670fa8756e
  $fEqDeclaration1 :: GHC.Types.Bool
  {- Strictness: x -}
1ef988d2f8db98f35f578bde9282f468
  $fEqDeclarationRef ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c==
                  Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c/= -}
1ef988d2f8db98f35f578bde9282f468
  $fEqDeclarationRef_$c/= ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.DeclarationRef)
                   (y :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case Language.PureScript.AST.Declarations.$fEqDeclarationRef_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1ef988d2f8db98f35f578bde9282f468
  $fEqDeclarationRef_$c== ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fEqDeclaration_$c/= ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration)
                   (y :: Language.PureScript.AST.Declarations.Declaration) ->
                 case Language.PureScript.AST.Declarations.$fEqDeclaration_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fEqDeclaration_$c== ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (d1 :: Language.PureScript.AST.Declarations.Declaration)
                   (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> case dt4 of wild1 {
                        [] -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                        : ds1 ds2
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.GuardedExpr ds3 ds4 ->
                           case ds4 of wild3 {
                             DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                             Language.PureScript.AST.Declarations.PositionedValue ds5 ds6 ds7
                             -> case ds7 of wild4 {
                                  DEFAULT -> Language.PureScript.AST.Declarations.$fEqDeclaration1
                                  Language.PureScript.AST.Declarations.Var ds8 ds9
                                  -> case ds9 of wild5 { Language.PureScript.Names.Qualified m d2 ->
                                     case ds2 of wild6 {
                                       []
                                       -> case d1 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            Language.PureScript.AST.Declarations.ValueDeclaration dt5 dt6 dt7 dt8 dt9
                                            -> Language.PureScript.Names.$fEqIdent_$c== dt6 d2
                                            Language.PureScript.AST.Declarations.ExternDeclaration ds10 n ds11
                                            -> Language.PureScript.Names.$fEqIdent_$c== n d2
                                            Language.PureScript.AST.Declarations.FixityDeclaration ds10 ds11
                                            -> case ds11 of wild8 {
                                                 Data.Either.Left ds12
                                                 -> case ds12 of wild9 { Language.PureScript.AST.Declarations.ValueFixity ds13 ds14 n ->
                                                    GHC.Types.False }
                                                 Data.Either.Right ds12
                                                 -> case ds12 of wild9 { Language.PureScript.AST.Declarations.TypeFixity ds13 ds14 n ->
                                                    GHC.Types.False } }
                                            Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds10 ds11 ds12 n ds13 ds14 ds15 ds16
                                            -> Language.PureScript.Names.$fEqIdent_$c== n d2 }
                                       : ipv ipv1
                                       -> Language.PureScript.AST.Declarations.$fEqDeclaration1 } } } } } } }) -}
67a26b6b435418eb0468ab415e41d2f5
  $fEqHintCategory ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.HintCategory
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.HintCategory
                  Language.PureScript.AST.Declarations.$fEqHintCategory_$c==
                  Language.PureScript.AST.Declarations.$fEqHintCategory_$c/= -}
67a26b6b435418eb0468ab415e41d2f5
  $fEqHintCategory_$c/= ::
    Language.PureScript.AST.Declarations.HintCategory
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.HintCategory)
                   (y :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.ExprHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.KindHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.KindHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.CheckHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.CheckHint -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.PositionHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.PositionHint
                        -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.SolverHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.SolverHint
                        -> GHC.Types.False }
                   Language.PureScript.AST.Declarations.OtherHint
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.AST.Declarations.OtherHint
                        -> GHC.Types.False } }) -}
67a26b6b435418eb0468ab415e41d2f5
  $fEqHintCategory_$c== ::
    Language.PureScript.AST.Declarations.HintCategory
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.HintCategory)
                   (ds1 :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.ExprHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.KindHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.KindHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.CheckHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.CheckHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.PositionHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.PositionHint
                        -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.SolverHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.SolverHint -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.OtherHint
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.OtherHint
                        -> GHC.Types.True } }) -}
ee54accdb974d8b355eb58984489a7af
  $fEqImportDeclarationType ::
    GHC.Classes.Eq
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c==
                  Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c/= -}
ee54accdb974d8b355eb58984489a7af
  $fEqImportDeclarationType_$c/= ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (y :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ee54accdb974d8b355eb58984489a7af
  $fEqImportDeclarationType_$c== ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ds1 :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Implicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Implicit -> GHC.Types.True }
                   Language.PureScript.AST.Declarations.Explicit a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Explicit b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.AST.Declarations.DeclarationRef
                             Language.PureScript.AST.Declarations.$fEqDeclarationRef
                             a1
                             b1 }
                   Language.PureScript.AST.Declarations.Hiding a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.AST.Declarations.Hiding b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.AST.Declarations.DeclarationRef
                             Language.PureScript.AST.Declarations.$fEqDeclarationRef
                             a1
                             b1 } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathNode ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fEqPathNode_$c== @ t v)
                  (Language.PureScript.AST.Declarations.$fEqPathNode_$c/= @ t v) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathNode_$c/= ::
    GHC.Classes.Eq t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fEqPathNode_$c==
                        @ t
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathNode_$c== ::
    GHC.Classes.Eq t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathTree ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fEqPathTree2 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fEqPathTree1 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Bool>_R) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathTree1 ::
    GHC.Classes.Eq t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dEq :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c/=
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fEq(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fEqPSString
                      (Language.PureScript.AST.Declarations.$fEqPathNode @ t $dEq))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fEqPathTree2 ::
    GHC.Classes.Eq t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dEq :: GHC.Classes.Eq t) ->
                 GHC.Classes.$fEq[]_$c==
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fEq(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fEqPSString
                      (Language.PureScript.AST.Declarations.$fEqPathNode @ t $dEq))) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fEqTypeDeclarationData ::
    GHC.Classes.Eq
      Language.PureScript.AST.Declarations.TypeDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeDeclarationData
                  Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c==
                  Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c/= -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fEqTypeDeclarationData_$c/= ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)><S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (y :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case Language.PureScript.AST.Declarations.$fEqTypeDeclarationData_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fEqTypeDeclarationData_$c== ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)><S(S(S(SLL)L)SS),1*U(U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),U,U)>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (ds1 :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData a1 a2 a3 ->
                 case a1 of ww { (,) ww1 ww2 ->
                 case ds1 of wild1 { Language.PureScript.AST.Declarations.TypeDeclarationData b1 b2 b3 ->
                 case b1 of ww3 { (,) ww4 ww5 ->
                 case ww1 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                 case ww4 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                 case Language.PureScript.AST.SourcePos.$w$c==1
                        ww8
                        ww9
                        ww10
                        ww12
                        ww6
                        ww13 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.Comments.Comment
                             Language.PureScript.Comments.$fEqComment
                             ww2
                             ww5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case a2 of wild4 {
                             Language.PureScript.Names.Ident a4
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.Ident b4
                                  -> case a4 of wild6 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case b4 of wild7 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild9 {
                                            DEFAULT -> GHC.Types.False
                                            0#
                                            -> Language.PureScript.Types.eqType
                                                 @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                    [Language.PureScript.Comments.Comment])
                                                 @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                    [Language.PureScript.Comments.Comment])
                                                 a3
                                                 b3 } } } } } }
                             Language.PureScript.Names.GenIdent a4 a5
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.GenIdent b4 b5
                                  -> case a4 of wild6 {
                                       GHC.Base.Nothing
                                       -> case b4 of wild7 {
                                            GHC.Base.Nothing
                                            -> case GHC.Integer.Type.eqInteger# a5 b5 of wild8 {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> Language.PureScript.Types.eqType
                                                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                         [Language.PureScript.Comments.Comment])
                                                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                         [Language.PureScript.Comments.Comment])
                                                      a3
                                                      b3 }
                                            GHC.Base.Just ipv -> GHC.Types.False }
                                       GHC.Base.Just a6
                                       -> case b4 of wild7 {
                                            GHC.Base.Nothing -> GHC.Types.False
                                            GHC.Base.Just b6
                                            -> case a6 of wild8 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case b6 of wild9 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               case GHC.Prim.==# dt2 dt5 of lwild {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild10 { (#,#) ds2 ds3 ->
                                                    case GHC.Prim.narrow32Int# ds3 of wild11 {
                                                      DEFAULT -> GHC.Types.False
                                                      0#
                                                      -> case GHC.Integer.Type.eqInteger#
                                                                a5
                                                                b5 of wild12 {
                                                           DEFAULT -> GHC.Types.False
                                                           1#
                                                           -> Language.PureScript.Types.eqType
                                                                @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                   [Language.PureScript.Comments.Comment])
                                                                @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                   [Language.PureScript.Comments.Comment])
                                                                a3
                                                                b3 } } } } } } } } }
                             Language.PureScript.Names.UnusedIdent
                             -> case b2 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Names.UnusedIdent
                                  -> Language.PureScript.Types.eqType
                                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       a3
                                       b3 } } } } } } } } } }) -}
298ce78be10d4367819875773ca00d0b
  $fEqTypeFixity ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fEqTypeFixity_$c==
                  Language.PureScript.AST.Declarations.$fEqTypeFixity_$c/= -}
298ce78be10d4367819875773ca00d0b
  $fEqTypeFixity_$c/= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fEqTypeFixity_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
298ce78be10d4367819875773ca00d0b
  $fEqTypeFixity_$c== ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c==
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fEqValueFixity ::
    GHC.Classes.Eq Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fEqValueFixity_$c==
                  Language.PureScript.AST.Declarations.$fEqValueFixity_$c/= -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fEqValueFixity_$c/= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fEqValueFixity_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fEqValueFixity_$c== ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c==1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList ::
    Data.Foldable.Foldable
      (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfold
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldMap
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr'
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl'
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr1
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldl1
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$ctoList
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cnull
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$clength
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$celem
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cmaximum
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList_$cminimum
                     @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList2 @ k)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList1 @ k)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.AssocList k a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,1*C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 letrec {
                   go6 :: [(k, a)] -> Data.Semigroup.Internal.Product a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 -> a2 })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.AssocList k a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidSum1
                 } in
                 letrec {
                   go6 :: [(k, a)] -> Data.Semigroup.Internal.Sum a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 -> a2 })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
cc81cf9acbf59ed336b5d967bcc76539
  $fFoldableAssocList3 :: a
  {- Strictness: x -}
f36d1676914db17e6c2be6e9c2309014
  $fFoldableAssocList4 :: a
  {- Strictness: x -}
a31131f9ff4de34d9fa2dc2e5cdee61f
  $fFoldableAssocList5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e9f6b469cd33bf9e7b8af5af91437817
  $fFoldableAssocList6 :: a
  {- Strictness: x -}
4f02c834a61f7ded21ad9a0382f8c7fe
  $fFoldableAssocList7 :: a
  {- Strictness: x -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ k @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f162 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                  letrec {
                    go6 :: [(k, a)] -> Data.Semigroup.Internal.Any
                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                    = \ (ds1 :: [(k, a)]) ->
                      case ds1 of wild {
                        []
                        -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                        : y ys
                        -> case y of wild1 { (,) a1 a2 ->
                           case f162 a2 of wild2 {
                             GHC.Types.False -> go6 ys
                             GHC.Types.True
                             -> GHC.Types.True
                                  `cast`
                                (Sym (Data.Semigroup.Internal.N:Any[0])) } } }
                  } in
                  go6
                    ds
                      `cast`
                    (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                   `cast`
                 (<Language.PureScript.AST.Declarations.AssocList k a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.AssocList k m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ k
                   @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k m) ->
                 let {
                   z2 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go6 :: [(k, m)] -> m {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, m)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            $dMonoid
                            (case y of wild1 { (,) a1 a2 -> a2 })
                            (go6 ys) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <m>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.AssocList k a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ k
                   @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f162 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   z2 :: m = GHC.Base.mempty @ m $dMonoid
                 } in
                 letrec {
                   go6 :: [(k, a)] -> m {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys
                       -> GHC.Base.mappend
                            @ m
                            $dMonoid
                            (case y of wild1 { (,) a1 a2 -> f162 a2 })
                            (go6 ys) }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b -> b <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys -> go6 ys (case y of wild1 { (,) a1 a2 -> f162 eta a2 }) }
                 } in
                 go6
                   t1
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   z2) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b -> b <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case f162 eta a2 of vx { DEFAULT -> go6 ys vx } } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   z0) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Base.Maybe a -> a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ds :: [(k, a)]) (eta :: GHC.Base.Maybe a) ->
                     case ds of wild {
                       []
                       -> case eta of wild1 {
                            GHC.Base.Nothing
                            -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                            GHC.Base.Just v -> v }
                       : y ys
                       -> go6
                            ys
                            (case y of wild1 { (,) a1 a2 ->
                             GHC.Base.Just
                               @ a
                               (case eta of wild2 {
                                  GHC.Base.Nothing -> a2 GHC.Base.Just x -> f162 x a2 }) }) }
                 } in
                 let {
                   $sgo :: [(k, a)] -> a <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (sc :: [(k, a)]) ->
                     case sc of wild {
                       [] -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                       : y ys
                       -> go6 ys (case y of wild1 { (,) a1 a2 -> GHC.Base.Just @ a a2 }) }
                 } in
                 $sgo
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldr ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> b {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [(k, a)]) ->
                     case ds1 of wild {
                       [] -> z2
                       : y ys -> case y of wild1 { (,) a1 a2 -> f162 a2 (go6 ys) } }
                 } in
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.AssocList k a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> (b -> b) -> b -> b
                     <join 3> {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U)><L,U> -}
                   = \ (ds :: [(k, a)]) (eta :: b -> b) (eta1 :: b) ->
                     case ds of wild {
                       [] -> eta eta1
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          go6
                            ys
                            (\ (z2 :: b)[OneShot] ->
                             case f162 a2 z2 of vx { DEFAULT -> eta vx })
                            eta1 } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   (GHC.Base.id @ b)
                   z0) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cfoldr1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Base.Maybe a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       [] -> GHC.Base.Nothing @ a
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          GHC.Base.Just
                            @ a
                            (case go6 ys of wild2 {
                               GHC.Base.Nothing -> a2 GHC.Base.Just y1 -> f162 a2 y1 }) } }
                 } in
                 case go6
                        xs
                          `cast`
                        (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <k>_R <a>_R) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                   GHC.Base.Just v -> v }) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$clength ::
    Language.PureScript.AST.Declarations.AssocList k a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ k
                   @ a
                   (xs :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> GHC.Types.Int -> GHC.Types.Int
                     <join 2> {- Arity: 2 -}
                   = \ (ds :: [(k, a)]) (eta :: GHC.Types.Int) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case eta of wild2 { GHC.Types.I# x ->
                          go6 ys (GHC.Types.I# (GHC.Prim.+# x 1#)) } } }
                 } in
                 go6
                   xs
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R)
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> Data.Functor.Utils.Max a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                       : y ys
                       -> case (go6 ys)
                                 `cast`
                               (Data.Functor.Utils.N:Max[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> case y of wild2 { (,) a1 a2 ->
                               (GHC.Base.Just @ a a2)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) }
                            GHC.Base.Just ipv
                            -> case y of wild2 { (,) a1 a2 ->
                               case GHC.Classes.>= @ a $dOrd a2 ipv of wild3 {
                                 GHC.Types.False
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a a2)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } } } }
                 } in
                 case (go6
                         eta
                           `cast`
                         (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                   GHC.Base.Just v -> v }) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.AssocList k a -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U>,
     Unfolding: (\ @ k
                   @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 letrec {
                   go6 :: [(k, a)] -> Data.Functor.Utils.Min a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                       : y ys
                       -> case (go6 ys)
                                 `cast`
                               (Data.Functor.Utils.N:Min[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> case y of wild2 { (,) a1 a2 ->
                               (GHC.Base.Just @ a a2)
                                 `cast`
                               (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) }
                            GHC.Base.Just ipv
                            -> case y of wild2 { (,) a1 a2 ->
                               case GHC.Classes.<= @ a $dOrd a2 ipv of wild3 {
                                 GHC.Types.False
                                 -> wild1 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                 GHC.Types.True
                                 -> (GHC.Base.Just @ a a2)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } } } }
                 } in
                 case (go6
                         eta
                           `cast`
                         (Language.PureScript.AST.Declarations.N:AssocList[0] <k>_R <a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                   GHC.Base.Just v -> v }) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$cnull ::
    Language.PureScript.AST.Declarations.AssocList k a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ a
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.List.null
                   @ (k, a)
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:AssocList[0]
                        <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFoldableAssocList_$ctoList ::
    Language.PureScript.AST.Declarations.AssocList k a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ k
                   @ a
                   (t1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldableAssocList_$cfoldr
                      @ k
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfold
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl'
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr2
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cnull
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$clength
                  Language.PureScript.AST.Declarations.$fFoldablePathNode4
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Classes.Eq a>_R
                   ->_R <a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Any[0])
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cminimum
                  Language.PureScript.AST.Declarations.$fFoldablePathNode3
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldablePathNode1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathNode a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Product a)
                   = Data.Semigroup.Internal.$fMonoidProduct @ a $dNum
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> a1 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ (Data.Semigroup.Internal.Product a)
                        @ a
                        $dMonoid
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                        a1 }) -}
3f52302bcae7a5150fedc5662280db35
  $fFoldablePathNode2 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a (v :: a) -> v) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode3 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Sum a)
                   = Data.Semigroup.Internal.$fMonoidSum @ a $dNum
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> a1 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ (Data.Semigroup.Internal.Sum a)
                        @ a
                        $dMonoid
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                          `cast`
                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                        a1 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode4 ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.PathNode a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f162 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> (f162 a1) `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
                        @ a
                        f162 `cast` (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))
                        a1 }) -}
1e87ffe77f6198b67dc960145c767ddd
  $fFoldablePathNode5 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (x :: a)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z2 :: GHC.Types.Int) ->
                 case z2 of wild { GHC.Types.I# x1 ->
                 k (GHC.Types.I# (GHC.Prim.+# x1 1#)) }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode6 ::
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode a)]
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.PathNode m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.PathNode m) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ m
                        @ m
                        $dMonoid
                        (GHC.Base.id @ m)
                        a1 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.PathTree a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldMap1 ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.AST.Declarations.PathNode a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f162 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f162 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                        @ m
                        @ a
                        $dMonoid
                        f162
                        a1 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case t1 of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f162 z2 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
                         @ a
                         (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                            @ b)
                         (\ (x :: a) (y :: b) -> f162 y x)
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                         a1)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                        z2 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f162 z0 a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (b -> b)
                        (\ (x :: a) (k :: b -> b)[OneShot] (z2 :: b) ->
                         case f162 z2 x of vx { DEFAULT -> k vx })
                        (GHC.Base.id @ b)
                        a1
                        z0 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Semigroup.Internal.Dual
                                   (Data.Semigroup.Internal.Endo (GHC.Base.Maybe a)))
                              @ a
                              (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                                 @ (GHC.Base.Maybe a))
                              (\ (x :: a) (y :: GHC.Base.Maybe a) ->
                               GHC.Base.Just
                                 @ a
                                 (case y of wild1 {
                                    GHC.Base.Nothing -> x GHC.Base.Just x1 -> f162 x1 x }))
                                `cast`
                              (<a>_R
                               ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                             (Data.Semigroup.Internal.N:Endo[0]
                                                  <GHC.Base.Maybe a>_R)))
                              a1)
                             `cast`
                           (Data.Semigroup.Internal.N:Dual[0]
                                (Data.Semigroup.Internal.N:Endo[0] <GHC.Base.Maybe a>_R))
                             (GHC.Base.Nothing @ a) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                        GHC.Base.Just v -> v } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldr ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f162 a1 z0
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (b -> b)))
                         @ a
                         (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                            @ (b -> b))
                         (\ (x :: a) (y :: b -> b) (z2 :: b) ->
                          case f162 x z2 of vx { DEFAULT -> y vx })
                           `cast`
                         (<a>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R)))
                         a1)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <b -> b>_R))
                        (GHC.Base.id @ b)
                        z0 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldr1 ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathNode a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> f162 a1 z2
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ b
                        f162
                        z2
                        a1 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cfoldr2 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                             @ a
                             @ (GHC.Base.Maybe a)
                             (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                              GHC.Base.Just
                                @ a
                                (case m of wild1 {
                                   GHC.Base.Nothing -> x GHC.Base.Just y -> f162 x y }))
                             (GHC.Base.Nothing @ a)
                             a1 of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                        GHC.Base.Just v -> v } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$clength ::
    Language.PureScript.AST.Declarations.PathNode a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case xs of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> GHC.Types.I# 1#
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (GHC.Types.Int -> GHC.Types.Int)
                        (Language.PureScript.AST.Declarations.$fFoldablePathNode5 @ a)
                        (GHC.Base.id @ GHC.Types.Int)
                        a1
                        Language.PureScript.AST.Declarations.$fFoldableAssocList5 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Functor.Utils.Max a)
                              @ a
                              g
                              (GHC.Base.Just @ a)
                                `cast`
                              (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                              a1)
                             `cast`
                           (Data.Functor.Utils.N:Max[0] <a>_N) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                        GHC.Base.Just v -> v } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathNode a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.Leaf a1 -> a1
                   Language.PureScript.AST.Declarations.Branch a1
                   -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                              @ (Data.Functor.Utils.Min a)
                              @ a
                              g
                              (GHC.Base.Just @ a)
                                `cast`
                              (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                              a1)
                             `cast`
                           (Data.Functor.Utils.N:Min[0] <a>_N) of wild1 {
                        GHC.Base.Nothing
                        -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                        GHC.Base.Just v -> v } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$cnull ::
    Language.PureScript.AST.Declarations.PathNode a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf ds1 -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Branch a1
                   -> (Language.PureScript.AST.Declarations.$fFoldablePathNode6
                         @ a
                         a1
                           `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Semigroup.Internal.N:All[0]) }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$ctoList ::
    Language.PureScript.AST.Declarations.PathNode a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.AST.Declarations.PathNode a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr1
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
71128b6ea85dc7ba33017edfa87b0799
  $fFoldablePathNode_$dMonoid ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
  {- Unfolding: (\ @ b ->
                 Data.Semigroup.Internal.$fMonoidDual
                   @ (Data.Semigroup.Internal.Endo b)
                   (Data.Semigroup.Internal.$fMonoidEndo @ b)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathNode_$s$cfoldMap ::
    (a -> Data.Semigroup.Internal.Any)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfold
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl'
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldr1
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldablePathTree3
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:All[0])
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$clength
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$celem
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldablePathTree_$cminimum
                  Language.PureScript.AST.Declarations.$fFoldablePathTree2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldablePathTree1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl276 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidProduct1
                 } in
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Product a)
                   = Data.Semigroup.Internal.$fMonoidProduct @ a $dNum
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Semigroup.Internal.Product a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> lvl276 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                       : y ys
                       -> (GHC.Num.*
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 ->
                              case a2 of wild2 {
                                Language.PureScript.AST.Declarations.Leaf a4 -> a4
                                Language.PureScript.AST.Declarations.Branch a4
                                -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Semigroup.Internal.Product a)
                                      @ a
                                      $dMonoid
                                      (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a>_R))
                                      a4)
                                     `cast`
                                   (Data.Semigroup.Internal.N:Product[0] <a>_R) } })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Product[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl276 :: a
                   = GHC.Num.fromInteger
                       @ a
                       $dNum
                       Data.Semigroup.Internal.$fMonoidSum1
                 } in
                 let {
                   $dMonoid :: GHC.Base.Monoid (Data.Semigroup.Internal.Sum a)
                   = Data.Semigroup.Internal.$fMonoidSum @ a $dNum
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Semigroup.Internal.Sum a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       [] -> lvl276 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                       : y ys
                       -> (GHC.Num.+
                             @ a
                             $dNum
                             (case y of wild1 { (,) a1 a2 ->
                              case a2 of wild2 {
                                Language.PureScript.AST.Declarations.Leaf a4 -> a4
                                Language.PureScript.AST.Declarations.Branch a4
                                -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum a)
                                      @ a
                                      $dMonoid
                                      (Language.PureScript.AST.Declarations.$fFoldablePathNode2 @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                                      a4)
                                     `cast`
                                   (Data.Semigroup.Internal.N:Sum[0] <a>_R) } })
                             (go6 ys) `cast` (Data.Semigroup.Internal.N:Sum[0] <a>_R))
                            `cast`
                          (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }
                 } in
                 \ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 go6
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree3 ::
    Language.PureScript.AST.Declarations.PathTree a
    -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode6
                   @ a
                   ds
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.PathTree a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f162 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.PathTree a) ->
                  letrec {
                    go6 :: [(Language.PureScript.PSString.PSString,
                             Language.PureScript.AST.Declarations.PathNode a)]
                           -> Data.Semigroup.Internal.Any
                      <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                    = \ (ds1 :: [(Language.PureScript.PSString.PSString,
                                  Language.PureScript.AST.Declarations.PathNode a)]) ->
                      case ds1 of wild {
                        []
                        -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                        : y ys
                        -> case y of wild1 { (,) a1 a2 ->
                           case a2 of wild2 {
                             Language.PureScript.AST.Declarations.Leaf a4
                             -> case f162 a4 of wild3 {
                                  GHC.Types.False -> go6 ys
                                  GHC.Types.True
                                  -> GHC.Types.True
                                       `cast`
                                     (Sym (Data.Semigroup.Internal.N:Any[0])) }
                             Language.PureScript.AST.Declarations.Branch a4
                             -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
                                        @ a
                                        f162
                                          `cast`
                                        (<a>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))
                                        a4)
                                       `cast`
                                     (Data.Semigroup.Internal.N:Any[0]) of wild3 {
                                  GHC.Types.False -> go6 ys
                                  GHC.Types.True
                                  -> GHC.Types.True
                                       `cast`
                                     (Sym (Data.Semigroup.Internal.N:Any[0])) } } } }
                  } in
                  go6
                    ds
                      `cast`
                    (Language.PureScript.AST.Declarations.N:PathTree[0]
                         <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                     <Language.PureScript.PSString.PSString>_R
                                     <Language.PureScript.AST.Declarations.PathNode a>_R))
                   `cast`
                 (<Language.PureScript.AST.Declarations.PathTree a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.PathTree m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,U,C(C1(U)),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfoldl ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 let {
                   f163 :: a -> b -> b
                     {- Arity: 2, Strictness: <L,U><L,U>,
                        Unfolding: InlineRule (2, True, True)
                                   (\ (x :: a) (y :: b) -> f162 y x) -}
                   = \ (x :: a) (y :: b) -> f162 y x
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> b -> b
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)])
                       (eta :: b) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> go6
                            ys
                            (case y of wild1 { (,) a1 a2 ->
                             case a2 of wild2 {
                               Language.PureScript.AST.Declarations.Leaf a4 -> f162 eta a4
                               Language.PureScript.AST.Declarations.Branch a4
                               -> (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                     @ (Data.Semigroup.Internal.Dual
                                          (Data.Semigroup.Internal.Endo b))
                                     @ a
                                     (Language.PureScript.AST.Declarations.$fFoldablePathNode_$dMonoid
                                        @ b)
                                     f163
                                       `cast`
                                     (<a>_R
                                      ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                                    (Data.Semigroup.Internal.N:Endo[0] <b>_R)))
                                     a4)
                                    `cast`
                                  (Data.Semigroup.Internal.N:Dual[0]
                                       (Data.Semigroup.Internal.N:Endo[0] <b>_R))
                                    eta } }) }
                 } in
                 go6
                   t1
                     `cast`
                   (Language.PureScript.AST.Declarations.N:PathTree[0]
                        <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                    <Language.PureScript.PSString.PSString>_R
                                    <Language.PureScript.AST.Declarations.PathNode a>_R)
                   z2) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfoldl' ::
    (b -> a -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                   @ a
                   @ (b -> b)
                   (\ (x :: a) (k :: b -> b)[OneShot] (z2 :: b) ->
                    case f162 z2 x of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                        @ (GHC.Base.Maybe a)
                        @ a
                        (\ (m :: GHC.Base.Maybe a) (y :: a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> y GHC.Base.Just x -> f162 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList6 @ a
                   GHC.Base.Just v -> v }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfoldr' ::
    (a -> b -> b)
    -> b -> Language.PureScript.AST.Declarations.PathTree a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathTree_$cfoldl
                   @ (b -> b)
                   @ a
                   (\ (k :: b -> b) (x :: a)[OneShot] (z2 :: b) ->
                    case f162 x z2 of vx { DEFAULT -> k vx })
                   (GHC.Base.id @ b)
                   xs
                   z0) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cfoldr1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                        @ a
                        @ (GHC.Base.Maybe a)
                        (\ (x :: a) (m :: GHC.Base.Maybe a)[OneShot] ->
                         GHC.Base.Just
                           @ a
                           (case m of wild {
                              GHC.Base.Nothing -> x GHC.Base.Just y -> f162 x y }))
                        (GHC.Base.Nothing @ a)
                        xs of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList7 @ a
                   GHC.Base.Just v -> v }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$clength ::
    Language.PureScript.AST.Declarations.PathTree a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.AST.Declarations.PathTree a) ->
                 Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                   @ a
                   @ (GHC.Types.Int -> GHC.Types.Int)
                   (Language.PureScript.AST.Declarations.$fFoldablePathNode5 @ a)
                   (GHC.Base.id @ GHC.Types.Int)
                   xs
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Max a)
                   = Data.Functor.Utils.$fMonoidMax @ a $dOrd
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Functor.Utils.Max a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case a2 of wild2 {
                            Language.PureScript.AST.Declarations.Leaf a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Max[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> (GHC.Base.Just @ a a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                 GHC.Base.Just ipv
                                 -> case GHC.Classes.>= @ a $dOrd a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      GHC.Types.True
                                      -> (GHC.Base.Just @ a a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } }
                            Language.PureScript.AST.Declarations.Branch a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Max[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Functor.Utils.Max a)
                                      @ a
                                      g
                                      (GHC.Base.Just @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      a4
                                 GHC.Base.Just ipv
                                 -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                            @ (Data.Functor.Utils.Max a)
                                            @ a
                                            g
                                            (GHC.Base.Just @ a)
                                              `cast`
                                            (<a>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                            a4)
                                           `cast`
                                         (Data.Functor.Utils.N:Max[0] <a>_N) of wild4 {
                                      GHC.Base.Nothing
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                      GHC.Base.Just x
                                      -> case GHC.Classes.>= @ a $dOrd x ipv of wild5 {
                                           GHC.Types.False
                                           -> wild3 `cast` (Sym (Data.Functor.Utils.N:Max[0]) <a>_N)
                                           GHC.Types.True
                                           -> wild4
                                                `cast`
                                              (Sym (Data.Functor.Utils.N:Max[0]) <a>_N) } } } } } }
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case (go6
                         x `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList4 @ a
                   GHC.Base.Just v -> v }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$cminimum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.PathTree a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   g :: GHC.Base.Monoid (Data.Functor.Utils.Min a)
                   = Data.Functor.Utils.$fMonoidMin @ a $dOrd
                 } in
                 letrec {
                   go6 :: [(Language.PureScript.PSString.PSString,
                            Language.PureScript.AST.Declarations.PathNode a)]
                          -> Data.Functor.Utils.Min a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.PSString.PSString,
                                Language.PureScript.AST.Declarations.PathNode a)]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                       : y ys
                       -> case y of wild1 { (,) a1 a2 ->
                          case a2 of wild2 {
                            Language.PureScript.AST.Declarations.Leaf a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Min[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> (GHC.Base.Just @ a a4)
                                      `cast`
                                    (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                 GHC.Base.Just ipv
                                 -> case GHC.Classes.<= @ a $dOrd a4 ipv of wild4 {
                                      GHC.Types.False
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      GHC.Types.True
                                      -> (GHC.Base.Just @ a a4)
                                           `cast`
                                         (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } }
                            Language.PureScript.AST.Declarations.Branch a4
                            -> case (go6 ys)
                                      `cast`
                                    (Data.Functor.Utils.N:Min[0] <a>_N) of wild3 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                      @ (Data.Functor.Utils.Min a)
                                      @ a
                                      g
                                      (GHC.Base.Just @ a)
                                        `cast`
                                      (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      a4
                                 GHC.Base.Just ipv
                                 -> case (Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap
                                            @ (Data.Functor.Utils.Min a)
                                            @ a
                                            g
                                            (GHC.Base.Just @ a)
                                              `cast`
                                            (<a>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                            a4)
                                           `cast`
                                         (Data.Functor.Utils.N:Min[0] <a>_N) of wild4 {
                                      GHC.Base.Nothing
                                      -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                      GHC.Base.Just x
                                      -> case GHC.Classes.<= @ a $dOrd x ipv of wild5 {
                                           GHC.Types.False
                                           -> wild3 `cast` (Sym (Data.Functor.Utils.N:Min[0]) <a>_N)
                                           GHC.Types.True
                                           -> wild4
                                                `cast`
                                              (Sym (Data.Functor.Utils.N:Min[0]) <a>_N) } } } } } }
                 } in
                 \ (x :: Language.PureScript.AST.Declarations.PathTree a) ->
                 case (go6
                         x `cast`
                         (Language.PureScript.AST.Declarations.N:PathTree[0]
                              <a>_R ; Language.PureScript.AST.Declarations.N:AssocList[0]
                                          <Language.PureScript.PSString.PSString>_R
                                          <Language.PureScript.AST.Declarations.PathNode a>_R))
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a>_N) of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.AST.Declarations.$fFoldableAssocList3 @ a
                   GHC.Base.Just v -> v }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFoldablePathTree_$ctoList ::
    Language.PureScript.AST.Declarations.PathTree a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldr
                      @ a
                      @ b
                      c
                      n
                      t1)) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData ::
    Data.Foldable.Foldable
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfold
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldMap
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldr'
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cfoldl1
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$ctoList
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cnull
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$clength
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$celem
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData_$cmaximum
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.ValueDeclarationData
                           a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.AST.Declarations.ValueDeclarationData
                           a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData1 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData2 ::
    GHC.Num.Num a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$celem ::
    GHC.Classes.Eq a =>
    a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f162 :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             a) ->
                  case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                  (f162 a5) `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<Language.PureScript.AST.Declarations.ValueDeclarationData a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cfold ::
    GHC.Base.Monoid m =>
    Language.PureScript.AST.Declarations.ValueDeclarationData m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            m) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U)><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f162 :: a -> m)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f162 a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cfoldl ::
    (b -> a -> b)
    -> b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f162 :: b -> a -> b)
                   (z2 :: b)
                   (t1 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case t1 of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f162 z2 a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cfoldl1 ::
    (a -> a -> a)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (f162 :: a -> a -> a)
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cfoldr' ::
    (a -> b -> b)
    -> b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f162 :: a -> b -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 f162 a5 z0 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$clength ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (xs :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case xs of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Types.I# 1# }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cmaximum ::
    GHC.Classes.Ord a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.AST.Declarations.valdeclExpression @ a) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$cnull ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 GHC.Types.False }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFoldableValueDeclarationData_$ctoList ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (t1 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    case t1 of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                    c a5 n })) -}
1ef988d2f8db98f35f578bde9282f468
  $fFromJSONDeclarationRef ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$cparseJSON
                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$cparseJSONList -}
b907f0fd5a604938ac6f1ecbb80e8e75
  $fFromJSONDeclarationRef1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
bb100a0db778a759c0401f4fdb2b7af5
  $fFromJSONDeclarationRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
2b330f22bd35f93a3d8581bc43580542
  $fFromJSONDeclarationRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
1ef988d2f8db98f35f578bde9282f468
  $fFromJSONDeclarationRef4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, Strictness: <S,U> -}
0789706175dd7295f2b95e5d7cfe2be2
  $fFromJSONDeclarationRef5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef6) -}
01122f5792b52795c032aa66b9964151
  $fFromJSONDeclarationRef6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations.DeclarationRef"#) -}
1ef988d2f8db98f35f578bde9282f468
  $fFromJSONDeclarationRef_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.AST.Declarations.DeclarationRef
                        Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef4
                             (Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
1ef988d2f8db98f35f578bde9282f468
  $fFromJSONDeclarationRef_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f162 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f162 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.AST.Declarations.DeclarationRef] f162 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.AST.Declarations.DeclarationRef]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef_go
                        0#
                        ($wgo 0#) } }) -}
c4748f96f1464a121fd58ca2ce6c34d0
  $fFromJSONDeclarationRef_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
94f0405c168f1fdd95b3e93d6132ec52
  $fFromJSONDeclarationRef_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
ddba3fd96be441ef3aae4d64626fdc65
  $fFromJSONDeclarationRef_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
1ef988d2f8db98f35f578bde9282f468
  $fFromJSONDeclarationRef_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
ee54accdb974d8b355eb58984489a7af
  $fFromJSONImportDeclarationType ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$cparseJSON
                  Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$cparseJSONList -}
ee54accdb974d8b355eb58984489a7af
  $fFromJSONImportDeclarationType1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.ImportDeclarationType
  {- Arity: 1, Strictness: <S,U> -}
9d0a2fbe1d95572322d1866bbc0f2f0e
  $fFromJSONImportDeclarationType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType3) -}
97eaa60ee8e18362b15cb9fb54feb945
  $fFromJSONImportDeclarationType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations.ImportDeclarationType"#) -}
ee54accdb974d8b355eb58984489a7af
  $fFromJSONImportDeclarationType_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.AST.Declarations.ImportDeclarationType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.AST.Declarations.ImportDeclarationType
                        Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType2
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType1
                             (Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
ee54accdb974d8b355eb58984489a7af
  $fFromJSONImportDeclarationType_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.ImportDeclarationType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f162 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f162 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.AST.Declarations.ImportDeclarationType]
                                   f162
                                   r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.AST.Declarations.ImportDeclarationType]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType_go
                        0#
                        ($wgo 0#) } }) -}
4296a19cf207155de5b8cf537c08275e
  $fFromJSONImportDeclarationType_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
5264801a37b2645af28dec845675641f
  $fFromJSONImportDeclarationType_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
f44351054bb3a28162d42615e3ea14c0
  $fFromJSONImportDeclarationType_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
ee54accdb974d8b355eb58984489a7af
  $fFromJSONImportDeclarationType_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.AST.Declarations.ImportDeclarationType]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5252f47280702e464243816d50efc247
  $fFunctorAssocList ::
    GHC.Base.Functor (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList2 @ k)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k a>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <b>_R))
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList1 @ k)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.AST.Declarations.AssocList k b>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <a>_R)) -}
5252f47280702e464243816d50efc247
  $fFunctorAssocList1 ::
    a -> Language.PureScript.AST.Declarations.AssocList k b -> [(k, a)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k b) ->
                 GHC.Base.build
                   @ (k, a)
                   (\ @ b1 (c :: (k, a) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (k, b)
                      @ b1
                      (GHC.Base.mapFB
                         @ (k, a)
                         @ b1
                         @ (k, b)
                         c
                         (\ (b3 :: (k, b)) -> case b3 of wild { (,) a1 a2 -> (a1, z2) }))
                      n
                      ds
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <b>_R))) -}
5252f47280702e464243816d50efc247
  $fFunctorAssocList2 ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.AssocList k a -> [(k, b)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ a
                   @ b
                   (f162 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 GHC.Base.build
                   @ (k, b)
                   (\ @ b1 (c :: (k, b) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (k, a)
                      @ b1
                      (GHC.Base.mapFB
                         @ (k, b)
                         @ b1
                         @ (k, a)
                         c
                         (\ (b2 :: (k, a)) ->
                          case b2 of wild { (,) a1 a2 -> (a1, f162 a2) }))
                      n
                      ds
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <a>_R))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathNode ::
    GHC.Base.Functor Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFunctorPathNode_$cfmap
                  Language.PureScript.AST.Declarations.$fFunctorPathNode_$c<$ -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathNode1 ::
    a
    -> Language.PureScript.AST.Declarations.PathTree b
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode a)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathNode2 ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode b)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathNode_$c<$ ::
    a
    -> Language.PureScript.AST.Declarations.PathNode b
    -> Language.PureScript.AST.Declarations.PathNode a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.PathNode b) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> Language.PureScript.AST.Declarations.Leaf @ a z2
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.Branch
                        @ a
                        (Language.PureScript.AST.Declarations.$fFunctorPathNode1
                           @ a
                           @ b
                           z2
                           a1)
                          `cast`
                        (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     a>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <a>_R)) }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathNode_$cfmap ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> Language.PureScript.AST.Declarations.PathNode b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f162 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.PathNode a) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.Leaf a1
                   -> Language.PureScript.AST.Declarations.Leaf @ b (f162 a1)
                   Language.PureScript.AST.Declarations.Branch a1
                   -> Language.PureScript.AST.Declarations.Branch
                        @ b
                        (Language.PureScript.AST.Declarations.$fFunctorPathNode2
                           @ a
                           @ b
                           f162
                           a1)
                          `cast`
                        (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     b>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <b>_R)) }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fFunctorPathTree ::
    GHC.Base.Functor Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFunctorPathNode2
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree a>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <Language.PureScript.PSString.PSString>_R
                                 <Language.PureScript.AST.Declarations.PathNode
                                    b>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                     <b>_R))
                  Language.PureScript.AST.Declarations.$fFunctorPathNode1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Language.PureScript.AST.Declarations.PathTree b>_R
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <Language.PureScript.PSString.PSString>_R
                                 <Language.PureScript.AST.Declarations.PathNode
                                    a>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                     <a>_R)) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFunctorValueDeclarationData ::
    GHC.Base.Functor
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData_$cfmap
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData_$c<$ -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFunctorValueDeclarationData_$c<$ ::
    a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData b
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U><S(SSSSL),1*U(U,U,U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            b) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 case z2 of dt { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclarationData
                   @ a
                   a1
                   a2
                   a3
                   a4
                   dt } }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fFunctorValueDeclarationData_$cfmap ::
    (a -> b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.AST.Declarations.ValueDeclarationData b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f162 :: a -> b)
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 case f162 a5 of dt { DEFAULT ->
                 Language.PureScript.AST.Declarations.ValueDeclarationData
                   @ b
                   a1
                   a2
                   a3
                   a4
                   dt } }) -}
1ef988d2f8db98f35f578bde9282f468
  $fGenericDeclarationRef ::
    GHC.Generics.Generic
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fGenericDeclarationRef1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.AST.Declarations.DeclarationRef>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "DeclarationRef"
                                     "Language.PureScript.AST.Declarations"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             Language.PureScript.AST.SourcePos.SourceSpan)
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                'GHC.Base.Nothing
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   [Language.PureScript.Names.ProperName
                                                                                      'Language.PureScript.Names.ConstructorName]))))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TypeOpRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.OpName
                                                                                  'Language.PureScript.Names.TypeOpName))))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "ValueRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Names.Ident))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ValueOpRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.OpName
                                                                                                   'Language.PureScript.Names.ValueOpName)))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TypeClassRef"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ClassName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TypeInstanceRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.Ident)))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ModuleRef"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName))
                                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "KindRef"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.False)
                                                                                           (GHC.Generics.M1
                                                                                              GHC.Generics.S
                                                                                              ('GHC.Generics.MetaSel
                                                                                                 'GHC.Base.Nothing
                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                              (GHC.Generics.K1
                                                                                                 GHC.Generics.R
                                                                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                     'Language.PureScript.Names.KindName)))
                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                            GHC.Generics.C
                                                                                                            ('GHC.Generics.MetaCons
                                                                                                               "ReExportRef"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.False)
                                                                                                            (GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  'GHC.Base.Nothing
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                 GHC.Generics.S
                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                    'GHC.Base.Nothing
                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                 (GHC.Generics.K1
                                                                                                                                    GHC.Generics.R
                                                                                                                                    Language.PureScript.Names.ModuleName)
                                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                  GHC.Generics.S
                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                     'GHC.Base.Nothing
                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                     GHC.Generics.R
                                                                                                                                                     Language.PureScript.AST.Declarations.DeclarationRef))))))>_R) ; Sub (Sym (Language.PureScript.AST.Declarations.Rep_DeclarationRef[0]))) <x>_N)
                  Language.PureScript.AST.Declarations.$fGenericDeclarationRef_$cto -}
1ef988d2f8db98f35f578bde9282f468
  $fGenericDeclarationRef1 ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
              GHC.Generics.:*: (GHC.Generics.M1
                                  GHC.Generics.S
                                  ('GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy)
                                  (GHC.Generics.K1
                                     GHC.Generics.R
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName))
                                GHC.Generics.:*: GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (GHC.Base.Maybe
                                                         [Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName]))))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.TypeOpName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName)))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
              GHC.Generics.:*: GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.Ident)))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                            GHC.Generics.:+: (GHC.Generics.M1
                                                GHC.Generics.C
                                                ('GHC.Generics.MetaCons
                                                   "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName)))
                                              GHC.Generics.:+: GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "ReExportRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: (GHC.Generics.M1
                                                                                      GHC.Generics.S
                                                                                      ('GHC.Generics.MetaSel
                                                                                         'GHC.Base.Nothing
                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                         'GHC.Generics.DecidedLazy)
                                                                                      (GHC.Generics.K1
                                                                                         GHC.Generics.R
                                                                                         Language.PureScript.Names.ModuleName)
                                                                                    GHC.Generics.:*: GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.AST.Declarations.DeclarationRef))))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (x1 :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case x1 of wild {
                   Language.PureScript.AST.Declarations.TypeRef g1 g2 g3
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Base.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (GHC.Base.Maybe
                                                                               [Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName])))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (GHC.Base.Maybe
                                                             [Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName])))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe
                                               [Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ConstructorName])))
                                    @ x
                                    g2
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N)
                                    g3
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <GHC.Base.Maybe
                                                 [Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName]>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (GHC.Base.Maybe
                                                                      [Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName])>_R) <x>_N)))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 'GHC.Base.Nothing
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    [Language.PureScript.Names.ProperName
                                                                                       'Language.PureScript.Names.ConstructorName])))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeOpRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           'GHC.Base.Nothing
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (GHC.Base.Maybe
                                                                               [Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ConstructorName])))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.OpName
                                              'Language.PureScript.Names.TypeOpName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.OpName
                                                                   'Language.PureScript.Names.TypeOpName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.TypeOpName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ValueRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.Ident>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.Ident>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.Ident)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ValueOpRef g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (GHC.Base.Maybe
                                                                            [Language.PureScript.Names.ProperName
                                                                               'Language.PureScript.Names.ConstructorName]))))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.TypeOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValueOpRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        (Language.PureScript.Names.OpName
                                                                           'Language.PureScript.Names.ValueOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.OpName
                                              'Language.PureScript.Names.ValueOpName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.OpName
                                                                   'Language.PureScript.Names.ValueOpName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.ValueOpName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeClassRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName)))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.ClassName)>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName))>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.TypeInstanceRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TypeInstanceRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.Ident)))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.Ident>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.Ident>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TypeInstanceRef"
                                           'GHC.Generics.PrefixI
                                           'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.Ident)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.ModuleRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName))
                                 @ x
                                 g1
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                 g2
                                   `cast`
                                 (Sym (GHC.Generics.N:K1[0]
                                           <*>_N
                                           <GHC.Generics.R>_P
                                           <Language.PureScript.Names.ModuleName>_R
                                           <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                             <*>_N
                                                             <GHC.Generics.S>_P
                                                             <'GHC.Generics.MetaSel
                                                                'GHC.Base.Nothing
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy>_P
                                                             <GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Language.PureScript.Names.ModuleName>_R) <x>_N))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Language.PureScript.Names.ModuleName)>_R) <x>_N)))
                   Language.PureScript.AST.Declarations.KindRef g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.L1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.KindName))))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "ReExportRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Declarations.DeclarationRef))))
                                 @ x
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.KindName)))
                                    @ x
                                    g1
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                    g2
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   (Language.PureScript.Names.ProperName
                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N))
                                   `cast`
                                 (Sym (GHC.Generics.N:M1[0]
                                           <*>_N
                                           <GHC.Generics.C>_P
                                           <'GHC.Generics.MetaCons
                                              "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                           <GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Base.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1
                                                 GHC.Generics.R
                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                            GHC.Generics.:*: GHC.Generics.M1
                                                               GHC.Generics.S
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Base.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.K1
                                                                  GHC.Generics.R
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.KindName))>_R) <x>_N))))
                   Language.PureScript.AST.Declarations.ReExportRef g1 g2 g3
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: (GHC.Generics.M1
                                                   GHC.Generics.S
                                                   ('GHC.Generics.MetaSel
                                                      'GHC.Base.Nothing
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName))
                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       (GHC.Base.Maybe
                                                                          [Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.ConstructorName]))))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeOpRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ValueOpRef"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                    GHC.Generics.S
                                                                                    ('GHC.Generics.MetaSel
                                                                                       'GHC.Base.Nothing
                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                       'GHC.Generics.DecidedLazy)
                                                                                    (GHC.Generics.K1
                                                                                       GHC.Generics.R
                                                                                       (Language.PureScript.Names.OpName
                                                                                          'Language.PureScript.Names.ValueOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TypeInstanceRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.Ident)))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModuleRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "KindRef"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.KindName)))
                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                  GHC.Generics.C
                                                                                  ('GHC.Generics.MetaCons
                                                                                     "ReExportRef"
                                                                                     'GHC.Generics.PrefixI
                                                                                     'GHC.Types.False)
                                                                                  (GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                   GHC.Generics.:*: (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.Names.ModuleName)
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.Declarations.DeclarationRef))))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TypeInstanceRef"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.AST.SourcePos.SourceSpan)
                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                     GHC.Generics.S
                                                                     ('GHC.Generics.MetaSel
                                                                        'GHC.Base.Nothing
                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                        'GHC.Generics.NoSourceStrictness
                                                                        'GHC.Generics.DecidedLazy)
                                                                     (GHC.Generics.K1
                                                                        GHC.Generics.R
                                                                        Language.PureScript.Names.Ident)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.AST.SourcePos.SourceSpan)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: (GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "KindRef"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         (Language.PureScript.Names.ProperName
                                                                            'Language.PureScript.Names.KindName)))
                                                GHC.Generics.:+: GHC.Generics.M1
                                                                   GHC.Generics.C
                                                                   ('GHC.Generics.MetaCons
                                                                      "ReExportRef"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   (GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                    GHC.Generics.:*: (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.ModuleName)
                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                         GHC.Generics.S
                                                                                                         ('GHC.Generics.MetaSel
                                                                                                            'GHC.Base.Nothing
                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                         (GHC.Generics.K1
                                                                                                            GHC.Generics.R
                                                                                                            Language.PureScript.AST.Declarations.DeclarationRef)))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)))
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "ReExportRef"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    (GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            'GHC.Base.Nothing
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            Language.PureScript.Names.ModuleName)
                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                          GHC.Generics.S
                                                                                          ('GHC.Generics.MetaSel
                                                                                             'GHC.Base.Nothing
                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                             'GHC.Generics.DecidedLazy)
                                                                                          (GHC.Generics.K1
                                                                                             GHC.Generics.R
                                                                                             Language.PureScript.AST.Declarations.DeclarationRef))))
                              @ x
                              (GHC.Generics.R1
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "KindRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.KindName))))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "ReExportRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.AST.Declarations.DeclarationRef))))
                                 @ x
                                 (GHC.Generics.:*:
                                    @ *
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                    @ (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R Language.PureScript.Names.ModuleName)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             Language.PureScript.AST.Declarations.DeclarationRef))
                                    @ x
                                    g1
                                      `cast`
                                    (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                <*>_N
                                                                <GHC.Generics.S>_P
                                                                <'GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy>_P
                                                                <GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.AST.SourcePos.SourceSpan>_R) <x>_N)
                                    (GHC.Generics.:*:
                                       @ *
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R Language.PureScript.Names.ModuleName))
                                       @ (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.Declarations.DeclarationRef))
                                       @ x
                                       g2
                                         `cast`
                                       (Sym (GHC.Generics.N:K1[0]
                                                 <*>_N
                                                 <GHC.Generics.R>_P
                                                 <Language.PureScript.Names.ModuleName>_R
                                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.Names.ModuleName>_R) <x>_N)
                                       g3
                                         `cast`
                                       (Sym (GHC.Generics.N:K1[0]
                                                 <*>_N
                                                 <GHC.Generics.R>_P
                                                 <Language.PureScript.AST.Declarations.DeclarationRef>_R
                                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                   <*>_N
                                                                   <GHC.Generics.S>_P
                                                                   <'GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy>_P
                                                                   <GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      Language.PureScript.AST.Declarations.DeclarationRef>_R) <x>_N)))
                                   `cast`
                                 (Sym (GHC.Generics.N:M1[0]
                                           <*>_N
                                           <GHC.Generics.C>_P
                                           <'GHC.Generics.MetaCons
                                              "ReExportRef"
                                              'GHC.Generics.PrefixI
                                              'GHC.Types.False>_P
                                           <GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 'GHC.Base.Nothing
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1
                                                 GHC.Generics.R
                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                GHC.Generics.S
                                                                ('GHC.Generics.MetaSel
                                                                   'GHC.Base.Nothing
                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                   'GHC.Generics.NoSourceStrictness
                                                                   'GHC.Generics.DecidedLazy)
                                                                (GHC.Generics.K1
                                                                   GHC.Generics.R
                                                                   Language.PureScript.Names.ModuleName)
                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                 GHC.Generics.S
                                                                                 ('GHC.Generics.MetaSel
                                                                                    'GHC.Base.Nothing
                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                    'GHC.Generics.DecidedLazy)
                                                                                 (GHC.Generics.K1
                                                                                    GHC.Generics.R
                                                                                    Language.PureScript.AST.Declarations.DeclarationRef))>_R) <x>_N)))) }) -}
1ef988d2f8db98f35f578bde9282f468
  $fGenericDeclarationRef_$cto ::
    GHC.Generics.Rep
      Language.PureScript.AST.Declarations.DeclarationRef x
    -> Language.PureScript.AST.Declarations.DeclarationRef
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.AST.Declarations.DeclarationRef x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.AST.Declarations.Rep_DeclarationRef[0]) ; GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.D>_P
                                                                                               <'GHC.Generics.MetaData
                                                                                                  "DeclarationRef"
                                                                                                  "Language.PureScript.AST.Declarations"
                                                                                                  "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                  'GHC.Types.False>_P
                                                                                               <((GHC.Generics.M1
                                                                                                    GHC.Generics.C
                                                                                                    ('GHC.Generics.MetaCons
                                                                                                       "TypeRef"
                                                                                                       'GHC.Generics.PrefixI
                                                                                                       'GHC.Types.False)
                                                                                                    (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                         GHC.Generics.S
                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                            'GHC.Base.Nothing
                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                         (GHC.Generics.K1
                                                                                                                            GHC.Generics.R
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.TypeName))
                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                          GHC.Generics.S
                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                          (GHC.Generics.K1
                                                                                                                                             GHC.Generics.R
                                                                                                                                             (GHC.Base.Maybe
                                                                                                                                                [Language.PureScript.Names.ProperName
                                                                                                                                                   'Language.PureScript.Names.ConstructorName]))))
                                                                                                  GHC.Generics.:+: GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "TypeOpRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                               'Language.PureScript.Names.TypeOpName))))
                                                                                                 GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "ValueRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.Names.Ident))
                                                                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "ValueOpRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                                                'Language.PureScript.Names.ValueOpName)))))
                                                                                                GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                                     GHC.Generics.C
                                                                                                                     ('GHC.Generics.MetaCons
                                                                                                                        "TypeClassRef"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False)
                                                                                                                     (GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                               'Language.PureScript.Names.ClassName)))
                                                                                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "TypeInstanceRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             Language.PureScript.Names.Ident)))
                                                                                                                  GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                                      GHC.Generics.C
                                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                                         "ModuleRef"
                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                         'GHC.Types.False)
                                                                                                                                      (GHC.Generics.M1
                                                                                                                                         GHC.Generics.S
                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                         (GHC.Generics.K1
                                                                                                                                            GHC.Generics.R
                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                          GHC.Generics.S
                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                             'GHC.Base.Nothing
                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                             GHC.Generics.R
                                                                                                                                                             Language.PureScript.Names.ModuleName))
                                                                                                                                    GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                                                        GHC.Generics.C
                                                                                                                                                        ('GHC.Generics.MetaCons
                                                                                                                                                           "KindRef"
                                                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                                                           'GHC.Types.False)
                                                                                                                                                        (GHC.Generics.M1
                                                                                                                                                           GHC.Generics.S
                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                              'GHC.Base.Nothing
                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                           (GHC.Generics.K1
                                                                                                                                                              GHC.Generics.R
                                                                                                                                                              Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                               'GHC.Base.Nothing
                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                  'Language.PureScript.Names.KindName)))
                                                                                                                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                                                         GHC.Generics.C
                                                                                                                                                                         ('GHC.Generics.MetaCons
                                                                                                                                                                            "ReExportRef"
                                                                                                                                                                            'GHC.Generics.PrefixI
                                                                                                                                                                            'GHC.Types.False)
                                                                                                                                                                         (GHC.Generics.M1
                                                                                                                                                                            GHC.Generics.S
                                                                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                                                                               'GHC.Base.Nothing
                                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                                                                            (GHC.Generics.K1
                                                                                                                                                                               GHC.Generics.R
                                                                                                                                                                               Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                                                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                              GHC.Generics.S
                                                                                                                                                                                              ('GHC.Generics.MetaSel
                                                                                                                                                                                                 'GHC.Base.Nothing
                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                              (GHC.Generics.K1
                                                                                                                                                                                                 GHC.Generics.R
                                                                                                                                                                                                 Language.PureScript.Names.ModuleName)
                                                                                                                                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                                  Language.PureScript.AST.Declarations.DeclarationRef))))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: (GHC.Generics.M1
                                                               GHC.Generics.S
                                                               ('GHC.Generics.MetaSel
                                                                  'GHC.Base.Nothing
                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                  'GHC.Generics.NoSourceStrictness
                                                                  'GHC.Generics.DecidedLazy)
                                                               (GHC.Generics.K1
                                                                  GHC.Generics.R
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.TypeName))
                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                GHC.Generics.S
                                                                                ('GHC.Generics.MetaSel
                                                                                   'GHC.Base.Nothing
                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                   'GHC.Generics.DecidedLazy)
                                                                                (GHC.Generics.K1
                                                                                   GHC.Generics.R
                                                                                   (GHC.Base.Maybe
                                                                                      [Language.PureScript.Names.ProperName
                                                                                         'Language.PureScript.Names.ConstructorName])))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                case ds5 of wild4 { GHC.Generics.:*: ds6 ds7 ->
                                Language.PureScript.AST.Declarations.TypeRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds6
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.R>_P
                                                                                                 <Language.PureScript.Names.ProperName
                                                                                                    'Language.PureScript.Names.TypeName>_R
                                                                                                 <x>_P)
                                  ds7
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             [Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName])>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.R>_P
                                                                                                            <GHC.Base.Maybe
                                                                                                               [Language.PureScript.Names.ProperName
                                                                                                                  'Language.PureScript.Names.ConstructorName]>_R
                                                                                                            <x>_P) } }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.OpName
                                                                    'Language.PureScript.Names.TypeOpName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeOpRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.R>_P
                                                                                                   <Language.PureScript.Names.OpName
                                                                                                      'Language.PureScript.Names.TypeOpName>_R
                                                                                                   <x>_P) } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.Ident)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ValueRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.Ident>_R
                                                                                         <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ValueOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.OpName
                                                                    'Language.PureScript.Names.ValueOpName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ValueOpRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                    <*>_N
                                                                                                    <GHC.Generics.R>_P
                                                                                                    <Language.PureScript.Names.OpName
                                                                                                       'Language.PureScript.Names.ValueOpName>_R
                                                                                                    <x>_P) } } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeClassRef"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 (Language.PureScript.Names.ProperName
                                                                    'Language.PureScript.Names.ClassName))>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeClassRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.R>_P
                                                                                                  <Language.PureScript.Names.ProperName
                                                                                                     'Language.PureScript.Names.ClassName>_R
                                                                                                  <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "TypeInstanceRef"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.Ident)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.TypeInstanceRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.Ident>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Language.PureScript.Names.Ident>_R
                                                                                         <x>_P) } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ModuleRef" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                'GHC.Base.Nothing
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                Language.PureScript.AST.SourcePos.SourceSpan)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 'GHC.Base.Nothing
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Language.PureScript.Names.ModuleName)>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Language.PureScript.AST.Declarations.ModuleRef
                                  ds4
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                      <x>_P)
                                  ds5
                                    `cast`
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          'GHC.Base.Nothing
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                              <*>_N
                                                                                              <GHC.Generics.R>_P
                                                                                              <Language.PureScript.Names.ModuleName>_R
                                                                                              <x>_P) }
                             GHC.Generics.R1 ds3
                             -> case ds3 of wild3 {
                                  GHC.Generics.L1 ds4
                                  -> case ds4
                                            `cast`
                                          (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "KindRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName))>_R <x>_N) of wild4 { GHC.Generics.:*: ds5 ds6 ->
                                     Language.PureScript.AST.Declarations.KindRef
                                       ds5
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                           <*>_N
                                                                                                           <GHC.Generics.R>_P
                                                                                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                           <x>_P)
                                       ds6
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               (Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.KindName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                      <*>_N
                                                                                                      <GHC.Generics.R>_P
                                                                                                      <Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.KindName>_R
                                                                                                      <x>_P) }
                                  GHC.Generics.R1 ds4
                                  -> case ds4
                                            `cast`
                                          (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "ReExportRef"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.AST.SourcePos.SourceSpan)
                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                    GHC.Generics.S
                                                                    ('GHC.Generics.MetaSel
                                                                       'GHC.Base.Nothing
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.K1
                                                                       GHC.Generics.R
                                                                       Language.PureScript.Names.ModuleName)
                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                     GHC.Generics.S
                                                                                     ('GHC.Generics.MetaSel
                                                                                        'GHC.Base.Nothing
                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                        'GHC.Generics.DecidedLazy)
                                                                                     (GHC.Generics.K1
                                                                                        GHC.Generics.R
                                                                                        Language.PureScript.AST.Declarations.DeclarationRef))>_R <x>_N) of wild4 { GHC.Generics.:*: ds5 ds6 ->
                                     case ds6 of wild5 { GHC.Generics.:*: ds7 ds8 ->
                                     Language.PureScript.AST.Declarations.ReExportRef
                                       ds5
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.SourcePos.SourceSpan>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                           <*>_N
                                                                                                           <GHC.Generics.R>_P
                                                                                                           <Language.PureScript.AST.SourcePos.SourceSpan>_R
                                                                                                           <x>_P)
                                       ds7
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.Names.ModuleName>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.R>_P
                                                                                                   <Language.PureScript.Names.ModuleName>_R
                                                                                                   <x>_P)
                                       ds8
                                         `cast`
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Language.PureScript.AST.Declarations.DeclarationRef>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.R>_P
                                                                                                                  <Language.PureScript.AST.Declarations.DeclarationRef>_R
                                                                                                                  <x>_P) } } } } } }) -}
1ef988d2f8db98f35f578bde9282f468
  $fNFDataDeclarationRef ::
    Control.DeepSeq.NFData
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.AST.Declarations.$fNFDataDeclarationRef_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.AST.Declarations.DeclarationRef>_N)) -}
1ef988d2f8db98f35f578bde9282f468
  $fNFDataDeclarationRef_$crnf ::
    Language.PureScript.AST.Declarations.DeclarationRef -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5252f47280702e464243816d50efc247
  $fOrdAssocList ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    GHC.Classes.Ord
      (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Classes.Ord k)
                      (v1 :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cp1Ord
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList1 @ k @ t v v1)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                            <k>_R <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                 <k>_R <t>_R)
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c<
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c<=
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c>
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$c>=
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cmax
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fOrdAssocList_$cmin
                     @ k
                     @ t
                     v
                     v1) -}
4d187fa865da032ef029c429a8c5b34c
  $fOrdAssocList1 ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    [(k, t)] -> [(k, t)] -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (k, t)
                   (GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1)) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$c< ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$c<= ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$c> ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$c>= ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R <GHC.Types.Bool>_R)) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$cmax ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> y GHC.Types.GT -> x })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R))) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$cmin ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 let {
                   $dOrd2 :: GHC.Classes.Ord (k, t)
                   = GHC.Classes.$fOrd(,) @ k @ t $dOrd $dOrd1
                 } in
                 (\ (x :: [(k, t)]) (y :: [(k, t)]) ->
                  case GHC.Classes.$fOrd[]_$ccompare @ (k, t) $dOrd2 x y of wild {
                    DEFAULT -> x GHC.Types.GT -> y })
                   `cast`
                 (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R)
                  ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                <k>_R <t>_R))) -}
5252f47280702e464243816d50efc247
  $fOrdAssocList_$cp1Ord ::
    (GHC.Classes.Ord k, GHC.Classes.Ord t) =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.AssocList k t)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ k
                   @ t
                   ($dOrd :: GHC.Classes.Ord k)
                   ($dOrd1 :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqAssocList
                   @ k
                   @ t
                   (GHC.Classes.$p1Ord @ k $dOrd)
                   (GHC.Classes.$p1Ord @ t $dOrd1)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode ::
    GHC.Classes.Ord t =>
    GHC.Classes.Ord (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cp1Ord @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$ccompare
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c< @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c<= @ t v)
                  (\ (a :: Language.PureScript.AST.Declarations.PathNode t)
                     (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                   Language.PureScript.AST.Declarations.$fOrdPathNode_$c< @ t v b a)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$c>= @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cmax @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathNode_$cmin @ t v) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$c< ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$c<= ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (a :: Language.PureScript.AST.Declarations.PathNode t)
                   (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$c>= ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (a :: Language.PureScript.AST.Declarations.PathNode t)
                   (b :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$ccompare ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$cmax ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$cmin ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
    -> Language.PureScript.AST.Declarations.PathNode t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dOrd :: GHC.Classes.Ord t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t)
                   (y :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case Language.PureScript.AST.Declarations.$fOrdPathNode_$c<
                        @ t
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathNode_$cp1Ord ::
    GHC.Classes.Ord t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqPathNode
                   @ t
                   (GHC.Classes.$p1Ord @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree ::
    GHC.Classes.Ord t =>
    GHC.Classes.Ord (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Ord t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree_$cp1Ord @ t v)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree7 @ t v)
                    `cast`
                  ((Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                             <Language.PureScript.PSString.PSString>_R
                             <Language.PureScript.AST.Declarations.PathNode
                                t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                 <t>_R))
                   ->_R (Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <Language.PureScript.PSString.PSString>_R
                                  <Language.PureScript.AST.Declarations.PathNode
                                     t>_R) ; Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                                      <t>_R))
                   ->_R <GHC.Types.Ordering>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree6 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree5 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree4 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree3 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R <GHC.Types.Bool>_R)
                  (Language.PureScript.AST.Declarations.$fOrdPathTree2 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                 <t>_R))
                  (Language.PureScript.AST.Declarations.$fOrdPathTree1 @ t v)
                    `cast`
                  (Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                   ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                 <t>_R)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree1 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$cmin
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree2 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$cmax
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree3 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c>=
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree4 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c>
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree5 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c<=
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree6 ::
    GHC.Classes.Ord t =>
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode t)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode t)
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fOrdAssocList_$c<
                   @ Language.PureScript.PSString.PSString
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   Language.PureScript.PSString.$fOrdPSString
                   (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree7 ::
    GHC.Classes.Ord t =>
    [(Language.PureScript.PSString.PSString,
      Language.PureScript.AST.Declarations.PathNode t)]
    -> [(Language.PureScript.PSString.PSString,
         Language.PureScript.AST.Declarations.PathNode t)]
    -> GHC.Types.Ordering
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ (Language.PureScript.PSString.PSString,
                      Language.PureScript.AST.Declarations.PathNode t)
                   (GHC.Classes.$fOrd(,)
                      @ Language.PureScript.PSString.PSString
                      @ (Language.PureScript.AST.Declarations.PathNode t)
                      Language.PureScript.PSString.$fOrdPSString
                      (Language.PureScript.AST.Declarations.$fOrdPathNode @ t $dOrd))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fOrdPathTree_$cp1Ord ::
    GHC.Classes.Ord t =>
    GHC.Classes.Eq (Language.PureScript.AST.Declarations.PathTree t)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dOrd :: GHC.Classes.Ord t) ->
                 Language.PureScript.AST.Declarations.$fEqPathTree
                   @ t
                   (GHC.Classes.$p1Ord @ t $dOrd)) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity ::
    GHC.Classes.Ord Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fEqTypeFixity
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$ccompare
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<=
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c>
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c>=
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$cmax
                  Language.PureScript.AST.Declarations.$fOrdTypeFixity_$cmin -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$c< ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c<
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$c<= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$c> ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c< b a) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$c>= ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.TypeFixity)
                   (b :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$ccompare ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U(U,U,U)),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.TypeFixity)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.TypeFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$ccompare
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$cmax ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
298ce78be10d4367819875773ca00d0b
  $fOrdTypeFixity_$cmin ::
    Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> Language.PureScript.AST.Declarations.TypeFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U(U,U,U)),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity)
                   (y :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdTypeFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity ::
    GHC.Classes.Ord Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fEqValueFixity
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$ccompare
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<=
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c>
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$c>=
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$cmax
                  Language.PureScript.AST.Declarations.$fOrdValueFixity_$cmin -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$c< ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$c<1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$c<= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$c> ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 Language.PureScript.AST.Declarations.$fOrdValueFixity_$c< b a) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$c>= ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.AST.Declarations.ValueFixity)
                   (b :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$ccompare ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ValueFixity)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.AST.Declarations.ValueFixity ww8 ww9 ww10 ->
                 case ww8 of ww11 { Language.PureScript.AST.Operators.Fixity ww12 ww13 ->
                 Language.PureScript.AST.Declarations.$w$ccompare1
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$cmax ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fOrdValueFixity_$cmin ::
    Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> Language.PureScript.AST.Declarations.ValueFixity
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))><S(S(SL)LL),1*U(U(U,U),U(U,U),U(U,U,U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity)
                   (y :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case Language.PureScript.AST.Declarations.$fOrdValueFixity_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5252f47280702e464243816d50efc247
  $fShowAssocList ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.AssocList k t)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ k
                      @ t
                      (v :: GHC.Show.Show k)
                      (v1 :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.AssocList k t)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshow
                     @ k
                     @ t
                     v
                     v1)
                  (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowList
                     @ k
                     @ t
                     v
                     v1) -}
9e7bdc3c07d0d92b08a31a13ff457a51
  $fShowAssocList1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
998c653fde3f03ff5b94cb88f1526458
  $fShowAssocList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runAssocList = "#) -}
7ae61ad76d2506a423e877f0c8970664
  $fShowAssocList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssocList {"#) -}
5252f47280702e464243816d50efc247
  $fShowAssocList_$cshow ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ k
                   @ t
                   ($dShow3 :: GHC.Show.Show k)
                   ($dShow4 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.AssocList k t) ->
                 Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                   @ k
                   @ t
                   $dShow3
                   $dShow4
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5252f47280702e464243816d50efc247
  $fShowAssocList_$cshowList ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    [Language.PureScript.AST.Declarations.AssocList k t]
    -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ k
                   @ t
                   ($dShow3 :: GHC.Show.Show k)
                   ($dShow4 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.AssocList k t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.AssocList k t)
                   (Language.PureScript.AST.Declarations.$fShowAssocList_$cshowsPrec
                      @ k
                      @ t
                      $dShow3
                      $dShow4
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
5252f47280702e464243816d50efc247
  $fShowAssocList_$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ k
                   @ t
                   (w :: GHC.Show.Show k)
                   (w1 :: GHC.Show.Show t)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Language.PureScript.AST.Declarations.AssocList k t)
                   (w4 :: GHC.Base.String) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec
                   @ k
                   @ t
                   w
                   w1
                   ww1
                   w3
                   w4 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowCaseAlternative ::
    GHC.Show.Show Language.PureScript.AST.Declarations.CaseAlternative
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.CaseAlternative
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshow
                  Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowCaseAlternative1 ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.CaseAlternative)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.AST.Declarations.CaseAlternative ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec1
                   0#
                   ww1
                   ww2
                   w1 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowCaseAlternative_$cshow ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 Language.PureScript.AST.Declarations.$fShowCaseAlternative_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowCaseAlternative_$cshowList ::
    [Language.PureScript.AST.Declarations.CaseAlternative]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.CaseAlternative])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.CaseAlternative
                   Language.PureScript.AST.Declarations.$fShowCaseAlternative1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowCaseAlternative_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.CaseAlternative
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.CaseAlternative)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.CaseAlternative ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   w2 } }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDeclaration ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Declaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Declaration
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshow
                  Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDeclaration1 ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Declaration) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec2 0# w) -}
1ef988d2f8db98f35f578bde9282f468
  $fShowDeclarationRef ::
    GHC.Show.Show Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshow
                  Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowList -}
1ef988d2f8db98f35f578bde9282f468
  $fShowDeclarationRef1 ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec3 0# w) -}
1ef988d2f8db98f35f578bde9282f468
  $fShowDeclarationRef_$cshow ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 Language.PureScript.AST.Declarations.$fShowDeclarationRef_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1ef988d2f8db98f35f578bde9282f468
  $fShowDeclarationRef_$cshowList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.DeclarationRef])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fShowDeclarationRef1
                   ls
                   s) -}
1ef988d2f8db98f35f578bde9282f468
  $fShowDeclarationRef_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec3 ww1 w1 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDeclaration_$cshow ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration) ->
                 Language.PureScript.AST.Declarations.$fShowDeclaration_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDeclaration_$cshowList ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Declaration])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Declaration
                   Language.PureScript.AST.Declarations.$fShowDeclaration1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDeclaration_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Declaration) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec2 ww1 w1 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDoNotationElement ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.DoNotationElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DoNotationElement
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshow
                  Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDoNotationElement1 ::
    Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec4 0# w) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDoNotationElement_$cshow ::
    Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 Language.PureScript.AST.Declarations.$fShowDoNotationElement_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDoNotationElement_$cshowList ::
    [Language.PureScript.AST.Declarations.DoNotationElement]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.DoNotationElement])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.DoNotationElement
                   Language.PureScript.AST.Declarations.$fShowDoNotationElement1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowDoNotationElement_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.DoNotationElement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec4 ww1 w1 }) -}
7268a73b9f5bbe5a70110aa90f7e1194
  $fShowErrorMessage ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ErrorMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ErrorMessage
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec2
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshow
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowList -}
7268a73b9f5bbe5a70110aa90f7e1194
  $fShowErrorMessage1 ::
    Language.PureScript.AST.Declarations.ErrorMessage -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec5
                   0#
                   ww1
                   ww2 }) -}
4855917fb9fd67101186c61f73223b83
  $fShowErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessage "#) -}
1b46df01662025be056f8cd32644d118
  $fShowErrorMessage3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowErrorMessageHint ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ErrorMessageHint
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ErrorMessageHint
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowErrorMessageHint_$cshow
                  Language.PureScript.AST.Declarations.$fShowErrorMessageHint_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowErrorMessageHint1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowErrorMessageHint_$cshow ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessageHint) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowErrorMessageHint_$cshowList ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ErrorMessageHint
                   Language.PureScript.AST.Declarations.$fShowErrorMessageHint1
                   ls
                   s) -}
7268a73b9f5bbe5a70110aa90f7e1194
  $fShowErrorMessage_$cshow ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec2
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7268a73b9f5bbe5a70110aa90f7e1194
  $fShowErrorMessage_$cshowList ::
    [Language.PureScript.AST.Declarations.ErrorMessage]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ErrorMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   Language.PureScript.AST.Declarations.$fShowErrorMessage1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowErrorMessage_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
85049d3cbfbe9dc15f83f3061172f760
  $fShowErrorMessage_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
7268a73b9f5bbe5a70110aa90f7e1194
  $fShowErrorMessage_$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.ErrorMessage ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec5
                   ww1
                   ww3
                   ww4 } }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowExpr ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Expr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Expr
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshow
                  Language.PureScript.AST.Declarations.$fShowExpr_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowExpr1 ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowExpr_$cshow ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Expr) ->
                 Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowExpr_$cshowList ::
    [Language.PureScript.AST.Declarations.Expr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Expr])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Expr
                   Language.PureScript.AST.Declarations.$fShowExpr1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuard ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Guard
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Guard
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshow
                  Language.PureScript.AST.Declarations.$fShowGuard_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuard1 ::
    Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Guard) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec6 0# w) -}
95dd1a0a636c42e11ab3c4b7effda59f
  $fShowGuard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PatternGuard "#) -}
2d6d36256ab75989393042c0bad06e5b
  $fShowGuard3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowGuard4) -}
0535372d0c82d8f9d7dfb3647753632c
  $fShowGuard4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConditionGuard "#) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuard_$cshow ::
    Language.PureScript.AST.Declarations.Guard -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Guard) ->
                 Language.PureScript.AST.Declarations.$fShowGuard_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuard_$cshowList ::
    [Language.PureScript.AST.Declarations.Guard] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Guard])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Guard
                   Language.PureScript.AST.Declarations.$fShowGuard1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuard_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Guard) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec6 ww1 w1 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuardedExpr ::
    GHC.Show.Show Language.PureScript.AST.Declarations.GuardedExpr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.GuardedExpr
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshow
                  Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuardedExpr1 ::
    Language.PureScript.AST.Declarations.GuardedExpr -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case w of ww { Language.PureScript.AST.Declarations.GuardedExpr ww1 ww2 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec7
                   0#
                   ww1
                   ww2 }) -}
901635ef6bef37c2444be833412e9c7e
  $fShowGuardedExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GuardedExpr "#) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuardedExpr_$cshow ::
    Language.PureScript.AST.Declarations.GuardedExpr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 Language.PureScript.AST.Declarations.$fShowGuardedExpr_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuardedExpr_$cshowList ::
    [Language.PureScript.AST.Declarations.GuardedExpr]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.GuardedExpr])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.GuardedExpr
                   Language.PureScript.AST.Declarations.$fShowGuardedExpr1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowGuardedExpr_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.GuardedExpr
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.GuardedExpr ww3 ww4 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec7
                   ww1
                   ww3
                   ww4 } }) -}
67a26b6b435418eb0468ab415e41d2f5
  $fShowHintCategory ::
    GHC.Show.Show Language.PureScript.AST.Declarations.HintCategory
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.HintCategory
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshow
                  Language.PureScript.AST.Declarations.$fShowHintCategory_$cshowList -}
0e956956c6c851e2a29c631d07a468bf
  $fShowHintCategory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory2) -}
5cbdc0e99b6fd1dc6ef59ba05079c838
  $fShowHintCategory10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KindHint"#) -}
fb4ac60e7d49c91990dc4f6ade43981e
  $fShowHintCategory11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory12) -}
3c82605027287dd57eee66dba2f05e32
  $fShowHintCategory12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExprHint"#) -}
ef216e22cc5b8b156736028e728429e6
  $fShowHintCategory2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherHint"#) -}
385a2c17c8292cc9354e7aaa246192a4
  $fShowHintCategory3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory4) -}
7face3f4767048d9030e40d3a86c8257
  $fShowHintCategory4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SolverHint"#) -}
448539994096aa7e6e65181aa1399b28
  $fShowHintCategory5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory6) -}
31542cfaf4e6133c4e2e9919b973c116
  $fShowHintCategory6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PositionHint"#) -}
a7ed3dd4ee4688d7b615b38ffff3f8fb
  $fShowHintCategory7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory8) -}
cf9e769f8e2387def67a1d887cdf9567
  $fShowHintCategory8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CheckHint"#) -}
cfb024e839a2c9e6323b48ee2033f1f8
  $fShowHintCategory9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowHintCategory10) -}
67a26b6b435418eb0468ab415e41d2f5
  $fShowHintCategory_$cshow ::
    Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.HintCategory) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory11
                   Language.PureScript.AST.Declarations.KindHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory9
                   Language.PureScript.AST.Declarations.CheckHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory7
                   Language.PureScript.AST.Declarations.PositionHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory5
                   Language.PureScript.AST.Declarations.SolverHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory3
                   Language.PureScript.AST.Declarations.OtherHint
                   -> Language.PureScript.AST.Declarations.$fShowHintCategory1 }) -}
67a26b6b435418eb0468ab415e41d2f5
  $fShowHintCategory_$cshowList ::
    [Language.PureScript.AST.Declarations.HintCategory]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.HintCategory])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.HintCategory
                   Language.PureScript.AST.Declarations.$w$cshowsPrec8
                   ls
                   s) -}
67a26b6b435418eb0468ab415e41d2f5
  $fShowHintCategory_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.HintCategory)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec8 w1 w2) -}
ee54accdb974d8b355eb58984489a7af
  $fShowImportDeclarationType ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshow
                  Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowList -}
ee54accdb974d8b355eb58984489a7af
  $fShowImportDeclarationType1 ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
ee54accdb974d8b355eb58984489a7af
  $fShowImportDeclarationType_$cshow ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ee54accdb974d8b355eb58984489a7af
  $fShowImportDeclarationType_$cshowList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ImportDeclarationType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ImportDeclarationType
                   Language.PureScript.AST.Declarations.$fShowImportDeclarationType1
                   ls
                   s) -}
ee54accdb974d8b355eb58984489a7af
  $fShowImportDeclarationType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
3342e00ee072addfd009ee61e87fb865
  $fShowModule ::
    GHC.Show.Show Language.PureScript.AST.Declarations.Module
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.Module
                  Language.PureScript.AST.Declarations.$fShowModule_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowModule_$cshow
                  Language.PureScript.AST.Declarations.$fShowModule_$cshowList -}
3342e00ee072addfd009ee61e87fb865
  $fShowModule1 ::
    Language.PureScript.AST.Declarations.Module -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec9
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
4b1746e62edf627b510080ad2e1cd81a
  $fShowModule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowModule3) -}
222fa0d5677850180019ef55a9f593a2
  $fShowModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module "#) -}
7796674e02f1ec7ada517c6deb0a86de
  $fShowModule4 ::
    GHC.Show.Show [Language.PureScript.AST.Declarations.DeclarationRef]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fShowDeclarationRef) -}
3342e00ee072addfd009ee61e87fb865
  $fShowModule_$cshow ::
    Language.PureScript.AST.Declarations.Module -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Module) ->
                 Language.PureScript.AST.Declarations.$fShowModule_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3342e00ee072addfd009ee61e87fb865
  $fShowModule_$cshowList ::
    [Language.PureScript.AST.Declarations.Module] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.Module])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.Module
                   Language.PureScript.AST.Declarations.$fShowModule1
                   ls
                   s) -}
3342e00ee072addfd009ee61e87fb865
  $fShowModule_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.Module -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U(U(U),U(U)),U(U(U),U(U))),U,U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.Module ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec9
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 } }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathNode ::
    GHC.Show.Show t =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.PathNode t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.PathNode t)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshow @ t v)
                  (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowList
                     @ t
                     v) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathNode_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.AST.Declarations.PathNode t -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   ($dShow3 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.PathNode t) ->
                 Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                   @ t
                   $dShow3
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathNode_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.AST.Declarations.PathNode t] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow3 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.PathNode t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.PathNode t)
                   (Language.PureScript.AST.Declarations.$fShowPathNode_$cshowsPrec
                      @ t
                      $dShow3
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathNode_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   (w :: GHC.Show.Show t)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.AST.Declarations.PathNode t) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec10
                   @ t
                   w
                   ww1
                   w2 }) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathTree ::
    GHC.Show.Show t =>
    GHC.Show.Show (Language.PureScript.AST.Declarations.PathTree t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.AST.Declarations.PathTree t)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshow @ t v)
                  (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowList
                     @ t
                     v) -}
cf5d633eccf2331684a0db23c6b17930
  $fShowPathTree1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowPathTree2) -}
92d4de06ca1593e91558954bc2461aac
  $fShowPathTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathTree "#) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathTree_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.AST.Declarations.PathTree t -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   ($dShow3 :: GHC.Show.Show t)
                   (x :: Language.PureScript.AST.Declarations.PathTree t) ->
                 Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                   @ t
                   $dShow3
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathTree_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.AST.Declarations.PathTree t] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow3 :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.AST.Declarations.PathTree t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.PathTree t)
                   (Language.PureScript.AST.Declarations.$fShowPathTree_$cshowsPrec
                      @ t
                      $dShow3
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fShowPathTree_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.PathTree t
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ t ($dShow3 :: GHC.Show.Show t) ->
                 let {
                   $dShow4 :: GHC.Show.Show
                                (Language.PureScript.AST.Declarations.PathNode t)
                   = Language.PureScript.AST.Declarations.$fShowPathNode @ t $dShow3
                 } in
                 \ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.AST.Declarations.PathTree t)
                   (eta :: GHC.Base.String) ->
                 case a of wild { GHC.Types.I# x ->
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowPathTree1
                        (Language.PureScript.AST.Declarations.$w$cshowsPrec
                           @ Language.PureScript.PSString.PSString
                           @ (Language.PureScript.AST.Declarations.PathNode t)
                           Language.PureScript.PSString.$fShowPSString
                           $dShow4
                           11#
                           ds
                             `cast`
                           (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                           eta)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowPathTree1
                           (Language.PureScript.AST.Declarations.$w$cshowsPrec
                              @ Language.PureScript.PSString.PSString
                              @ (Language.PureScript.AST.Declarations.PathNode t)
                              Language.PureScript.PSString.$fShowPSString
                              $dShow4
                              11#
                              ds
                                `cast`
                              (Language.PureScript.AST.Declarations.N:PathTree[0] <t>_R)
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }) -}
85049d3cbfbe9dc15f83f3061172f760
  $fShowSimpleErrorMessage ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.SimpleErrorMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.SimpleErrorMessage
                  Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                  Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage_$cshow
                  Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage_$cshowList -}
85049d3cbfbe9dc15f83f3061172f760
  $fShowSimpleErrorMessage1 ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
85049d3cbfbe9dc15f83f3061172f760
  $fShowSimpleErrorMessage_$cshow ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
85049d3cbfbe9dc15f83f3061172f760
  $fShowSimpleErrorMessage_$cshowList ::
    [Language.PureScript.AST.Declarations.SimpleErrorMessage]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.SimpleErrorMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.SimpleErrorMessage
                   Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage1
                   ls
                   s) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fShowTypeDeclarationData ::
    GHC.Show.Show
      Language.PureScript.AST.Declarations.TypeDeclarationData
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeDeclarationData
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowList -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fShowTypeDeclarationData1 ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeDeclarationData ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec11
                   0#
                   ww5
                   ww6
                   ww2
                   ww3 } }) -}
7992d285e71add32ae6b038b4557cbd7
  $fShowTypeDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclType = "#) -}
22c4cc4d9b3b4a8f05df2f98630025a5
  $fShowTypeDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclIdent = "#) -}
c85a6fe7282d37c6783ec54ddca8d9d7
  $fShowTypeDeclarationData4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tydeclSourceAnn = "#) -}
d98a05b82286d173ea9c437f235323ae
  $fShowTypeDeclarationData5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeDeclarationData {"#) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fShowTypeDeclarationData_$cshow ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fShowTypeDeclarationData_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeDeclarationData]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeDeclarationData])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeDeclarationData
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData1
                   ls
                   s) -}
c947d6d8aff56f68d1789e1833a9fcd2
  $fShowTypeDeclarationData_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeDeclarationData
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(SSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.TypeDeclarationData ww3 ww4 ww5 ->
                 case ww3 of ww6 { (,) ww7 ww8 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec11
                   ww1
                   ww7
                   ww8
                   ww4
                   ww5 } } }) -}
3b19af1f2eee5a21430fd0602e988480
  $fShowTypeDeclarationData_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
ae9830e75556f89544b44a521d86a8f9
  $fShowTypeDeclarationData_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
298ce78be10d4367819875773ca00d0b
  $fShowTypeFixity ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeFixity
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowList -}
298ce78be10d4367819875773ca00d0b
  $fShowTypeFixity1 ::
    Language.PureScript.AST.Declarations.TypeFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.TypeFixity ww1 ww2 ww3 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec12
                   0#
                   ww1
                   ww2
                   ww3 }) -}
020b84272add3200940ba3acdf323cea
  $fShowTypeFixity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeFixity3) -}
abd3fb532c8b52a07c33b8a555698407
  $fShowTypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeFixity "#) -}
298ce78be10d4367819875773ca00d0b
  $fShowTypeFixity_$cshow ::
    Language.PureScript.AST.Declarations.TypeFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 Language.PureScript.AST.Declarations.$fShowTypeFixity_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
298ce78be10d4367819875773ca00d0b
  $fShowTypeFixity_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeFixity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeFixity
                   Language.PureScript.AST.Declarations.$fShowTypeFixity1
                   ls
                   s) -}
298ce78be10d4367819875773ca00d0b
  $fShowTypeFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeFixity
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.TypeFixity ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec12
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowTypeInstanceBody ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeInstanceBody
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeInstanceBody
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowList -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowTypeInstanceBody1 ::
    Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5) -}
c90c001d1b1179e0491d13cd44586ca9
  $fShowTypeInstanceBody10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody11) -}
652edc87220b2a118fd7edb8862186f3
  $fShowTypeInstanceBody11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DerivedInstance"#) -}
a2f919c06b2b0e7662fff96e45d6d060
  $fShowTypeInstanceBody2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody3) -}
e9d0b89b1b3662ec151909e057318ef0
  $fShowTypeInstanceBody3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExplicitInstance "#) -}
e6cf7f2ffe3cece9f09b799cb4724a56
  $fShowTypeInstanceBody4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody5) -}
642893d67aed17e21b1c4ff824f7b576
  $fShowTypeInstanceBody5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeInstanceWithDictionary "#) -}
caf147d440ee07b6e3f15b9134a12188
  $fShowTypeInstanceBody6 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody7) -}
31bfaba8edb653fac5538ed3026ca181
  $fShowTypeInstanceBody7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody8) -}
d102b30a529d6e9f89f2530fa997079d
  $fShowTypeInstanceBody8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeInstance"#) -}
9aa128771473092dd3164cddb7ae9400
  $fShowTypeInstanceBody9 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody10) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowTypeInstanceBody_$cshow ::
    Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 Language.PureScript.AST.Declarations.$fShowTypeInstanceBody_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowTypeInstanceBody_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeInstanceBody]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeInstanceBody])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeInstanceBody
                   Language.PureScript.AST.Declarations.$fShowTypeInstanceBody1
                   ls
                   s) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $fShowTypeInstanceBody_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case ds1 of wild {
                   Language.PureScript.AST.Declarations.DerivedInstance
                   -> Language.PureScript.AST.Declarations.$fShowTypeInstanceBody9
                   Language.PureScript.AST.Declarations.NewtypeInstance
                   -> Language.PureScript.AST.Declarations.$fShowTypeInstanceBody6
                   Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowTypeInstanceBody4
                             (g x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowTypeInstanceBody4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.AST.Declarations.ExplicitInstance b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowTypeInstanceBody2
                             (case b1 of wild2 {
                                [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x1
                                : x2 xs
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__3
                                     (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                        0#
                                        x2
                                        (let {
                                           lvl276 :: [GHC.Types.Char]
                                           = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x1
                                         } in
                                         letrec {
                                           showl :: [Language.PureScript.AST.Declarations.Declaration]
                                                    -> GHC.Base.String
                                             {- Arity: 1, Strictness: <S,1*U> -}
                                           = \ (ds2 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                             case ds2 of wild3 {
                                               [] -> lvl276
                                               : y ys
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showList__1
                                                    (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                                       0#
                                                       y
                                                       (showl ys)) }
                                         } in
                                         showl xs)) })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowTypeInstanceBody2
                                (let {
                                   s :: GHC.Base.String
                                   = GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1
                                 } in
                                 case b1 of wild2 {
                                   [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                                   : x2 xs
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__3
                                        (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                           0#
                                           x2
                                           (let {
                                              lvl276 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                            } in
                                            letrec {
                                              showl :: [Language.PureScript.AST.Declarations.Declaration]
                                                       -> GHC.Base.String
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ (ds2 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                case ds2 of wild3 {
                                                  [] -> lvl276
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (Language.PureScript.AST.Declarations.$w$cshowsPrec2
                                                          0#
                                                          y
                                                          (showl ys)) }
                                            } in
                                            showl xs)) })) } } }) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $fShowTypeSearch ::
    GHC.Show.Show Language.PureScript.AST.Declarations.TypeSearch
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.TypeSearch
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshow
                  Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowList -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $fShowTypeSearch1 ::
    Language.PureScript.AST.Declarations.TypeSearch -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec13 0# w) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $fShowTypeSearch_$cshow ::
    Language.PureScript.AST.Declarations.TypeSearch -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.$fShowTypeSearch_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $fShowTypeSearch_$cshowList ::
    [Language.PureScript.AST.Declarations.TypeSearch] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.TypeSearch])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.TypeSearch
                   Language.PureScript.AST.Declarations.$fShowTypeSearch1
                   ls
                   s) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $fShowTypeSearch_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec13 ww1 w1 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fShowValueDeclarationData ::
    GHC.Show.Show a =>
    GHC.Show.Show
      (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshow
                     @ a
                     v)
                  (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowList
                     @ a
                     v) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fShowValueDeclarationData_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(SSSSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow3 :: GHC.Show.Show a)
                   (x :: Language.PureScript.AST.Declarations.ValueDeclarationData
                           a) ->
                 Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                   @ a
                   $dShow3
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fShowValueDeclarationData_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.AST.Declarations.ValueDeclarationData a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow3 :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.AST.Declarations.ValueDeclarationData
                             a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (Language.PureScript.AST.Declarations.$fShowValueDeclarationData_$cshowsPrec
                      @ a
                      $dShow3
                      Language.PureScript.AST.Declarations.$fFoldableAssocList5)
                   ls
                   s) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fShowValueDeclarationData_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S(SSSSS),1*U(U(U(U,U(U(U),U(U)),U(U(U),U(U))),U),U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.AST.Declarations.ValueDeclarationData ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { (,) ww9 ww10 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec14
                   @ a
                   w
                   ww1
                   ww9
                   ww10
                   ww4
                   ww5
                   ww6
                   ww7 } } }) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fShowValueFixity ::
    GHC.Show.Show Language.PureScript.AST.Declarations.ValueFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueFixity
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshow
                  Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowList -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fShowValueFixity1 ::
    Language.PureScript.AST.Declarations.ValueFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { Language.PureScript.AST.Declarations.ValueFixity ww1 ww2 ww3 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec15
                   0#
                   ww1
                   ww2
                   ww3 }) -}
0a385e963b058223d6149040e331d7b2
  $fShowValueFixity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowValueFixity3) -}
6d30fd32a6c5600c52c1e60414b9ec9d
  $fShowValueFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueFixity "#) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fShowValueFixity_$cshow ::
    Language.PureScript.AST.Declarations.ValueFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 Language.PureScript.AST.Declarations.$fShowValueFixity_$cshowsPrec
                   Language.PureScript.AST.Declarations.$fFoldableAssocList5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fShowValueFixity_$cshowList ::
    [Language.PureScript.AST.Declarations.ValueFixity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.ValueFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.ValueFixity
                   Language.PureScript.AST.Declarations.$fShowValueFixity1
                   ls
                   s) -}
2b8c14ef4445d3b3d67c80ed60c831ef
  $fShowValueFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.ValueFixity
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U),1*U(1*U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Declarations.ValueFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.AST.Declarations.ValueFixity ww3 ww4 ww5 ->
                 Language.PureScript.AST.Declarations.$w$cshowsPrec15
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
94c60d2c08abd1826e9458a710ddc057
  $fShowValueFixity_$s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Language.PureScript.Names.$fShowProperName_$cshowsPrec
                             @ 'Language.PureScript.Names.ConstructorName
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
bfce38a8b694557bc33268834d37a7dc
  $fShowWhereProvenance ::
    GHC.Show.Show Language.PureScript.AST.Declarations.WhereProvenance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.WhereProvenance
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshowsPrec
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshow
                  Language.PureScript.AST.Declarations.$fShowWhereProvenance_$cshowList -}
bfce38a8b694557bc33268834d37a7dc
  $fShowWhereProvenance1 ::
    Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.WhereProvenance)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance4)
                        eta
                   Language.PureScript.AST.Declarations.FromLet
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance2)
                        eta }) -}
871af62ad4607d69c67b79e0bc9bd9bc
  $fShowWhereProvenance2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance3) -}
1abc1d33d1d545cae25980cceab26344
  $fShowWhereProvenance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromLet"#) -}
aa6b5bdb8dfea0dfd2661091e1d9aa9a
  $fShowWhereProvenance4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance5) -}
d157fe7187bc974ef43fdd5bad1bc40f
  $fShowWhereProvenance5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromWhere"#) -}
bfce38a8b694557bc33268834d37a7dc
  $fShowWhereProvenance_$cshow ::
    Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.WhereProvenance) ->
                 case x of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> Language.PureScript.AST.Declarations.$fShowWhereProvenance4
                   Language.PureScript.AST.Declarations.FromLet
                   -> Language.PureScript.AST.Declarations.$fShowWhereProvenance2 }) -}
bfce38a8b694557bc33268834d37a7dc
  $fShowWhereProvenance_$cshowList ::
    [Language.PureScript.AST.Declarations.WhereProvenance]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Declarations.WhereProvenance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Declarations.WhereProvenance
                   Language.PureScript.AST.Declarations.$fShowWhereProvenance1
                   ls
                   s) -}
bfce38a8b694557bc33268834d37a7dc
  $fShowWhereProvenance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Declarations.WhereProvenance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.AST.Declarations.WhereProvenance)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.AST.Declarations.FromWhere
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance4)
                        eta
                   Language.PureScript.AST.Declarations.FromLet
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.AST.Declarations.$fShowWhereProvenance2)
                        eta }) -}
1ef988d2f8db98f35f578bde9282f468
  $fToJSONDeclarationRef ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.AST.Declarations.DeclarationRef
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.DeclarationRef
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncoding
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSONList
                  Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncodingList -}
1ef988d2f8db98f35f578bde9282f468
  $fToJSONDeclarationRef_$ctoEncoding ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
1ef988d2f8db98f35f578bde9282f468
  $fToJSONDeclarationRef_$ctoEncodingList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.AST.Declarations.DeclarationRef
                   Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoEncoding) -}
1ef988d2f8db98f35f578bde9282f468
  $fToJSONDeclarationRef_$ctoJSON ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case Language.PureScript.AST.Declarations.$w$ctoJSON
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
1ef988d2f8db98f35f578bde9282f468
  $fToJSONDeclarationRef_$ctoJSONList ::
    [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.DeclarationRef
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.AST.Declarations.DeclarationRef
                                     c
                                     Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON)
                                  n1
                                  x)))))) -}
ee54accdb974d8b355eb58984489a7af
  $fToJSONImportDeclarationType ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.AST.Declarations.ImportDeclarationType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSON
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncoding
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSONList
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncodingList -}
8bc68e8bce982d6edf3b1a473bc17afa
  $fToJSONImportDeclarationType1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType2 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
1370ffd11308fe9f315dbb5ddef61702
  $fToJSONImportDeclarationType10 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType11
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
b9e5a4a7117ed1791fea226674a13967
  $fToJSONImportDeclarationType11 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType13,
                  Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType12)) -}
70f75a6d959a81967773d9748cae50c6
  $fToJSONImportDeclarationType12 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                ipv of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              0#
                              ipv3 #) } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
81b8addf3655b6a601b79a7018b49a74
  $fToJSONImportDeclarationType13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType14 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
ceac660573e3c354febc66685d49efdd
  $fToJSONImportDeclarationType14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType15
                   0#
                   ipv1 }) -}
ede8bccc6646b2e235319302eb40e1a9
  $fToJSONImportDeclarationType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType16) -}
b5d0f0ae7582c54bf8a8792fea1b0977
  $fToJSONImportDeclarationType16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Implicit"#) -}
72d0c5e768684d70c980364c7eb2384d
  $fToJSONImportDeclarationType2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType3
                   0#
                   ipv1 }) -}
36c33e9e14a105e1aa5dd71db96cbcba
  $fToJSONImportDeclarationType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType4) -}
8bb12101de8163a81bd940e851cfd935
  $fToJSONImportDeclarationType4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hiding"#) -}
189f9fe4264b554b84eadf1888257675
  $fToJSONImportDeclarationType5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType6 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
6e4c08f9d22a52a392b16b377b18f048
  $fToJSONImportDeclarationType6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType7
                   0#
                   ipv1 }) -}
297e82f8f78ce28309368f8e99dfd554
  $fToJSONImportDeclarationType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType8) -}
6a3863bc9f98d29ce0b1eb8fc9603b27
  $fToJSONImportDeclarationType8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Explicit"#) -}
a79df7a40cb34f2925151e316f913a3b
  $fToJSONImportDeclarationType9 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType10
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
ee54accdb974d8b355eb58984489a7af
  $fToJSONImportDeclarationType_$ctoEncoding ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
ee54accdb974d8b355eb58984489a7af
  $fToJSONImportDeclarationType_$ctoEncodingList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.AST.Declarations.ImportDeclarationType
                   Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoEncoding) -}
ee54accdb974d8b355eb58984489a7af
  $fToJSONImportDeclarationType_$ctoJSON ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case value of wild {
                   Language.PureScript.AST.Declarations.Implicit
                   -> Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType9
                   Language.PureScript.AST.Declarations.Explicit arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType5,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$s$wfoldlM_loop
                                      ipv
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      (GHC.Base.map
                                         @ Language.PureScript.AST.Declarations.DeclarationRef
                                         @ Data.Aeson.Types.Internal.Value
                                         Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                                         arg1)
                                      0#
                                      ipv1
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N)
                                         <Data.Aeson.Types.Internal.Value>_R)_R
                                      0#
                                      0# }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.AST.Declarations.Hiding arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType1,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$s$wfoldlM_loop
                                      ipv
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      (GHC.Base.map
                                         @ Language.PureScript.AST.Declarations.DeclarationRef
                                         @ Data.Aeson.Types.Internal.Value
                                         Language.PureScript.AST.Declarations.$fToJSONDeclarationRef_$ctoJSON
                                         arg1)
                                      0#
                                      ipv1
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N)
                                         <Data.Aeson.Types.Internal.Value>_R)_R
                                      0#
                                      0# }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) }) -}
ee54accdb974d8b355eb58984489a7af
  $fToJSONImportDeclarationType_$ctoJSONList ::
    [Language.PureScript.AST.Declarations.ImportDeclarationType]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.AST.Declarations.ImportDeclarationType]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ImportDeclarationType
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.AST.Declarations.ImportDeclarationType
                                     c
                                     Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSON)
                                  n1
                                  x)))))) -}
7615d585908c8500dd11a2c22283c260
  $fToJSONImportDeclarationType_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
5252f47280702e464243816d50efc247
  $fTraversableAssocList ::
    Data.Traversable.Traversable
      (Language.PureScript.AST.Declarations.AssocList k)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ k.
                  @ (Language.PureScript.AST.Declarations.AssocList k)
                  (Language.PureScript.AST.Declarations.$fFunctorAssocList @ k)
                  (Language.PureScript.AST.Declarations.$fFoldableAssocList @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$csequenceA
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$cmapM
                     @ k)
                  (Language.PureScript.AST.Declarations.$fTraversableAssocList_$csequence
                     @ k) -}
f663d1e898f2d1060c151b48d561be2b
  $fTraversableAssocList1 :: [(k, b)] -> [(k, b)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k @ b (b1 :: [(k, b)]) -> b1) -}
5252f47280702e464243816d50efc247
  $fTraversableAssocList_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> m (Language.PureScript.AST.Declarations.AssocList k b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
5252f47280702e464243816d50efc247
  $fTraversableAssocList_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.AssocList k (m a)
    -> m (Language.PureScript.AST.Declarations.AssocList k a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
5252f47280702e464243816d50efc247
  $fTraversableAssocList_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.AssocList k (f a)
    -> f (Language.PureScript.AST.Declarations.AssocList k a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ k
                   @ f162 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f162) ->
                 Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                   @ k
                   @ f162
                   @ (f162 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f162 a))) -}
5252f47280702e464243816d50efc247
  $fTraversableAssocList_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.AssocList k a
    -> f (Language.PureScript.AST.Declarations.AssocList k b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A)><L,C(U)><L,1*U>,
     Unfolding: (\ @ k
                   @ f162 :: * -> *
                   @ a
                   @ b
                   ($dApplicative :: GHC.Base.Applicative f162)
                   (eta :: a -> f162 b)
                   (eta1 :: Language.PureScript.AST.Declarations.AssocList k a) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f162
                   = GHC.Base.$p1Applicative @ f162 $dApplicative
                 } in
                 GHC.Base.fmap
                   @ f162
                   $dFunctor
                   @ [(k, b)]
                   @ (Language.PureScript.AST.Declarations.AssocList k b)
                   (Language.PureScript.AST.Declarations.$fTraversableAssocList1
                      @ k
                      @ b)
                     `cast`
                   (<[(k, b)]>_R
                    ->_R Sym (Language.PureScript.AST.Declarations.N:AssocList[0]
                                  <k>_R <b>_R))
                   (let {
                      z2 :: f162 [(k, b)]
                      = GHC.Base.pure
                          @ f162
                          $dApplicative
                          @ [(k, b)]
                          (GHC.Types.[] @ (k, b))
                    } in
                    letrec {
                      go6 :: [(k, a)] -> f162 [(k, b)]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [(k, a)]) ->
                        case ds of wild {
                          [] -> z2
                          : y ys
                          -> GHC.Base.liftA2
                               @ f162
                               $dApplicative
                               @ (k, b)
                               @ [(k, b)]
                               @ [(k, b)]
                               (GHC.Types.: @ (k, b))
                               (case y of wild1 { (,) a1 a2 ->
                                GHC.Base.fmap
                                  @ f162
                                  $dFunctor
                                  @ b
                                  @ (k, b)
                                  (\ (b2 :: b) -> (a1, b2))
                                  (eta a2) })
                               (go6 ys) }
                    } in
                    go6
                      eta1
                        `cast`
                      (Language.PureScript.AST.Declarations.N:AssocList[0]
                           <k>_R <a>_R))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathNode ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.PathNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathNode
                  Language.PureScript.AST.Declarations.$fFunctorPathNode
                  Language.PureScript.AST.Declarations.$fFoldablePathNode
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversablePathNode_$csequence -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathNode_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> m (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathNode_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.PathNode (m a)
    -> m (Language.PureScript.AST.Declarations.PathNode a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathNode_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.PathNode (f a)
    -> f (Language.PureScript.AST.Declarations.PathNode a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f162 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f162) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                   @ f162
                   @ (f162 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f162 a))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathNode_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.PathNode a
    -> f (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,C(U)><S,1*U> -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.PathTree
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.PathTree
                  Language.PureScript.AST.Declarations.$fFunctorPathTree
                  Language.PureScript.AST.Declarations.$fFoldablePathTree
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversablePathTree_$csequence -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree1 ::
    Language.PureScript.AST.Declarations.AssocList
      Language.PureScript.PSString.PSString
      (Language.PureScript.AST.Declarations.PathNode b)
    -> Language.PureScript.AST.Declarations.AssocList
         Language.PureScript.PSString.PSString
         (Language.PureScript.AST.Declarations.PathNode b)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ b
                   (b1 :: Language.PureScript.AST.Declarations.AssocList
                            Language.PureScript.PSString.PSString
                            (Language.PureScript.AST.Declarations.PathNode b)) ->
                 b1) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> m (Language.PureScript.AST.Declarations.PathTree b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.PathTree (m a)
    -> m (Language.PureScript.AST.Declarations.PathTree a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ m
                   @ (m a)
                   @ a
                   (GHC.Base.$p1Monad @ m $dMonad)
                   (GHC.Base.id @ (m a))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.PathTree (f a)
    -> f (Language.PureScript.AST.Declarations.PathTree a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f162 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f162) ->
                 Language.PureScript.AST.Declarations.$fTraversablePathTree_$ctraverse
                   @ f162
                   @ (f162 a)
                   @ a
                   $dApplicative
                   (GHC.Base.id @ (f162 a))) -}
0a046fc00d6584c1eeaef0123d3be18e
  $fTraversablePathTree_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.PathTree a
    -> f (Language.PureScript.AST.Declarations.PathTree b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A)><L,C(U)><L,1*U>,
     Unfolding: (\ @ f162 :: * -> *
                   @ a
                   @ b
                   ($dApplicative :: GHC.Base.Applicative f162)
                   (eta :: a -> f162 b)
                   (eta1 :: Language.PureScript.AST.Declarations.PathTree a) ->
                 GHC.Base.fmap
                   @ f162
                   (GHC.Base.$p1Applicative @ f162 $dApplicative)
                   @ (Language.PureScript.AST.Declarations.AssocList
                        Language.PureScript.PSString.PSString
                        (Language.PureScript.AST.Declarations.PathNode b))
                   @ (Language.PureScript.AST.Declarations.PathTree b)
                   (Language.PureScript.AST.Declarations.$fTraversablePathTree1 @ b)
                     `cast`
                   (<Language.PureScript.AST.Declarations.AssocList
                       Language.PureScript.PSString.PSString
                       (Language.PureScript.AST.Declarations.PathNode b)>_R
                    ->_R Sym (Language.PureScript.AST.Declarations.N:PathTree[0]
                                  <b>_R))
                   (Language.PureScript.AST.Declarations.$fTraversableAssocList_$ctraverse
                      @ Language.PureScript.PSString.PSString
                      @ f162
                      @ (Language.PureScript.AST.Declarations.PathNode a)
                      @ (Language.PureScript.AST.Declarations.PathNode b)
                      $dApplicative
                      (Language.PureScript.AST.Declarations.$fTraversablePathNode_$ctraverse
                         @ f162
                         @ a
                         @ b
                         $dApplicative
                         eta)
                      eta1
                        `cast`
                      (Language.PureScript.AST.Declarations.N:PathTree[0] <a>_R))) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fTraversableValueDeclarationData ::
    Data.Traversable.Traversable
      Language.PureScript.AST.Declarations.ValueDeclarationData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Declarations.ValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData
                  Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$ctraverse
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$csequenceA
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$cmapM
                  Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$csequence -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fTraversableValueDeclarationData_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> m (Language.PureScript.AST.Declarations.ValueDeclarationData b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><L,1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fTraversableValueDeclarationData_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.AST.Declarations.ValueDeclarationData (m a)
    -> m (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             (m a)) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m $dApplicative)
                   @ a
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (\ (b5 :: a) ->
                    Language.PureScript.AST.Declarations.$WValueDeclarationData
                      @ a
                      a1
                      a2
                      a3
                      a4
                      b5)
                   a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fTraversableValueDeclarationData_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.AST.Declarations.ValueDeclarationData (f a)
    -> f (Language.PureScript.AST.Declarations.ValueDeclarationData a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f162 :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f162)
                   (eta :: Language.PureScript.AST.Declarations.ValueDeclarationData
                             (f162 a)) ->
                 case eta of wild { Language.PureScript.AST.Declarations.ValueDeclarationData a1 a2 a3 a4 a5 ->
                 GHC.Base.fmap
                   @ f162
                   (GHC.Base.$p1Applicative @ f162 $dApplicative)
                   @ a
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData a)
                   (\ (b5 :: a) ->
                    Language.PureScript.AST.Declarations.$WValueDeclarationData
                      @ a
                      a1
                      a2
                      a3
                      a4
                      b5)
                   a5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  $fTraversableValueDeclarationData_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> f (Language.PureScript.AST.Declarations.ValueDeclarationData b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><S(SSSSS),1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f162 :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f162)
                   (w1 :: a -> f162 b)
                   (w2 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.ValueDeclarationData ww1 ww2 ww3 ww4 ww5 ->
                 GHC.Base.fmap
                   @ f162
                   (GHC.Base.$p1Applicative @ f162 w)
                   @ b
                   @ (Language.PureScript.AST.Declarations.ValueDeclarationData b)
                   (\ (b5 :: b) ->
                    case b5 of dt { DEFAULT ->
                    Language.PureScript.AST.Declarations.ValueDeclarationData
                      @ b
                      ww1
                      ww2
                      ww3
                      ww4
                      dt })
                   (w1 ww5) }) -}
691ba64b7209644ac759fdc709d9b28d
  $mMkUnguarded ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.GuardedExpr
    -> (Language.PureScript.AST.Declarations.Expr -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U)><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.GuardedExpr)
                   (cont :: Language.PureScript.AST.Declarations.Expr -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild { Language.PureScript.AST.Declarations.GuardedExpr ds e ->
                 case ds of wild1 {
                   [] -> cont e : ipv ipv1 -> fail GHC.Prim.void# } }) -}
0b5239711d0777619e5162ecd6c77c7f
  $mTypeFixityDeclaration ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.AST.Operators.Fixity
        -> Language.PureScript.Names.Qualified
             (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)
        -> Language.PureScript.Names.OpName
             'Language.PureScript.Names.TypeOpName
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(U))))><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.AST.Operators.Fixity
                            -> Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
                            -> Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.FixityDeclaration sa ds
                   -> case ds of wild1 {
                        Data.Either.Left ipv -> fail GHC.Prim.void#
                        Data.Either.Right ds1
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.TypeFixity fixity name op ->
                           cont sa fixity name op } } }) -}
27e023ac61da31828b5808fe5b5ec5ca
  $mValueDecl ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.Names.Ident
        -> Language.PureScript.Environment.NameKind
        -> [Language.PureScript.AST.Binders.Binder]
        -> [Language.PureScript.AST.Declarations.GuardedExpr]
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(C1(U)))))><L,1*C1(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.Names.Ident
                            -> Language.PureScript.Environment.NameKind
                            -> [Language.PureScript.AST.Binders.Binder]
                            -> [Language.PureScript.AST.Declarations.GuardedExpr]
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> cont dt dt1 dt2 dt3 dt4 }) -}
7019f9955c502657e13646d061751594
  $mValueFixityDeclaration ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.AST.Declarations.Declaration
    -> (Language.PureScript.AST.SourcePos.SourceAnn
        -> Language.PureScript.AST.Operators.Fixity
        -> Language.PureScript.Names.Qualified
             (Data.Either.Either
                Language.PureScript.Names.Ident
                (Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ConstructorName))
        -> Language.PureScript.Names.OpName
             'Language.PureScript.Names.ValueOpName
        -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*C1(C1(C1(C1(U))))><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.AST.Declarations.Declaration)
                   (cont :: Language.PureScript.AST.SourcePos.SourceAnn
                            -> Language.PureScript.AST.Operators.Fixity
                            -> Language.PureScript.Names.Qualified
                                 (Data.Either.Either
                                    Language.PureScript.Names.Ident
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName))
                            -> Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName
                            -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   Language.PureScript.AST.Declarations.FixityDeclaration sa ds
                   -> case ds of wild1 {
                        Data.Either.Left ds1
                        -> case ds1 of wild2 { Language.PureScript.AST.Declarations.ValueFixity fixity name op ->
                           cont sa fixity name op }
                        Data.Either.Right ipv -> fail GHC.Prim.void# } }) -}
a1ea3647c532c436d2ab7a7a2a59b26d
  $s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName),
       Language.PureScript.AST.Operators.Associativity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName),
                     Language.PureScript.AST.Operators.Associativity)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                     Language.PureScript.AST.Operators.$fShowAssociativity)
                  (\ (x :: (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.AnyOpName),
                            Language.PureScript.AST.Operators.Associativity)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                     Language.PureScript.AST.Operators.$fShowAssociativity
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.AnyOpName),
                              Language.PureScript.AST.Operators.Associativity)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName),
                        Language.PureScript.AST.Operators.Associativity)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName))
                        @ Language.PureScript.AST.Operators.Associativity
                        Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
                        Language.PureScript.AST.Operators.$fShowAssociativity
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
becb3f573051e4e58dc6f208581e4058
  $s$fShow(,)_$cshowsPrec_$s$fShowKind ::
    GHC.Show.Show
      (Language.PureScript.Kinds.Kind
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Kinds.Kind
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,))
                  (\ (x :: Language.PureScript.Kinds.Kind
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                     Language.PureScript.Kinds.$fFoldableKind7
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Kinds.Kind
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Kinds.Kind
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                        Language.PureScript.Kinds.$fFoldableKind7)
                     ls
                     s) -}
8f71b66de9986b676e74cd64835dd817
  $s$fShow(,)_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.AnyOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.AnyOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.AnyOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.AnyOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.AnyOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
0d04c3b204733f439e7be7ea25d150ad
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       Language.PureScript.Names.Ident
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
72b94b10a93667d8914783e7baf604b8
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.$fShowIdent
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   w3 }) -}
5dc0eff232c103fc094e8a4e38d4e2ec
  $s$fShowKind_$cshow ::
    Language.PureScript.Kinds.Kind
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Kinds.Kind
                           (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                 Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                   Language.PureScript.Kinds.$fFoldableKind7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d3426a149daf7ac0a15773790aee148f
  $s$fShowKind_$cshowList ::
    [Language.PureScript.Kinds.Kind
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Kinds.Kind
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Kinds.Kind
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                      Language.PureScript.Kinds.$fFoldableKind7)
                   ls
                   s) -}
d246b1328feb25268acb87db1763b29e
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (GHC.Base.NonEmpty
            Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                       (GHC.Base.NonEmpty
                          Language.PureScript.TypeClassDictionaries.NamedDict))
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (GHC.Base.NonEmpty
                          Language.PureScript.TypeClassDictionaries.NamedDict)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty)
                  (\ (x :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (GHC.Base.NonEmpty
                                Language.PureScript.TypeClassDictionaries.NamedDict)) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (GHC.Base.NonEmpty
                          Language.PureScript.TypeClassDictionaries.NamedDict)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)
                               (GHC.Base.NonEmpty
                                  Language.PureScript.TypeClassDictionaries.NamedDict)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                          (GHC.Base.NonEmpty
                             Language.PureScript.TypeClassDictionaries.NamedDict))
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        @ (GHC.Base.NonEmpty
                             Language.PureScript.TypeClassDictionaries.NamedDict)
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
0b4100920f2153f99568c1c73da224f3
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (GHC.Base.NonEmpty
         Language.PureScript.TypeClassDictionaries.NamedDict)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                           (GHC.Base.NonEmpty
                              Language.PureScript.TypeClassDictionaries.NamedDict)) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (GHC.Base.NonEmpty
                        Language.PureScript.TypeClassDictionaries.NamedDict)
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a04f33e85983301b3ff955987cad2243
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          Language.PureScript.Names.Ident)
       (GHC.Base.NonEmpty
          Language.PureScript.TypeClassDictionaries.NamedDict)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (GHC.Base.NonEmpty
                                Language.PureScript.TypeClassDictionaries.NamedDict)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        (GHC.Base.NonEmpty
                           Language.PureScript.TypeClassDictionaries.NamedDict))
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (GHC.Base.NonEmpty
                           Language.PureScript.TypeClassDictionaries.NamedDict)
                      Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                      Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
c887f412d12f50d2b4e4b053be7ba90f
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (GHC.Base.NonEmpty
            Language.PureScript.TypeClassDictionaries.NamedDict)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                            (GHC.Base.NonEmpty
                               Language.PureScript.TypeClassDictionaries.NamedDict)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (GHC.Base.NonEmpty
                        Language.PureScript.TypeClassDictionaries.NamedDict)
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
                   ww1
                   w3 }) -}
83389e51e73dc5044441bb3a38fb1eb4
  $s$fShowMap_$cshowsPrec2 ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (GHC.Base.NonEmpty
               Language.PureScript.TypeClassDictionaries.NamedDict)))
  {- Unfolding: (Data.Map.Internal.$fShowMap
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        (GHC.Base.NonEmpty
                           Language.PureScript.TypeClassDictionaries.NamedDict))
                   Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowQualified
                   Language.PureScript.AST.Declarations.$s$fShowMap) -}
8882adefb8c9aed98ad70e1f67adb615
  $s$fShowMap_$cshowsPrec_$s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fShowModuleName)
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe Language.PureScript.Names.ModuleName])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Names.$fShowModuleName
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
648a15a8099a2424f863527a48a062df
  $s$fShowMap_$cshowsPrec_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
cd36e11e3640ce282dec552f45bcedfc
  $s$fShowMap_$s$fShowNonEmpty ::
    GHC.Show.Show
      (GHC.Base.NonEmpty
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.NonEmpty
                       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)))
                  (GHC.Show.$fShowNonEmpty_$cshowsPrec
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope)
                  (GHC.Show.$fShowNonEmpty_$cshow
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope)
                  (\ (ls :: [GHC.Base.NonEmpty
                               (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                  (Language.PureScript.Names.Qualified
                                     Language.PureScript.Names.Ident))])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.NonEmpty
                          (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)))
                     (GHC.Show.$fShowNonEmpty_$cshowsPrec
                        @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident))
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
db1f5998cf241dd7ea27cb0dafa483c9
  $s$fShowMap_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent)
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
8b5b46bd5510ca8573d88a4df3163475
  $s$fShowMap_$s$fShowTypeClassDictionaryInScope ::
    GHC.Show.Show
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident))
                  (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified)
                  (\ (x :: Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)) ->
                   Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1)
                     ls
                     s) -}
04ce4a6062245628aa82646a3275e225
  $s$fShowMaybe_$cshowList1 ::
    [GHC.Base.Maybe Language.PureScript.Names.ModuleName]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe Language.PureScript.Names.ModuleName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Language.PureScript.Names.ModuleName
                      Language.PureScript.Names.$fShowModuleName
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
a095c53b1303cc8379688c65fc212bd3
  $s$fShowNonEmpty_$cshowList ::
    [GHC.Base.NonEmpty
       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident))]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.NonEmpty
                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident))])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.NonEmpty
                        (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)))
                   (GHC.Show.$fShowNonEmpty_$cshowsPrec
                      @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident))
                      Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
0960fd44fc9eda4f4cb3d08929f4e41b
  $s$fShowNonEmpty_$cshowsPrec10 ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceAnn,
       Language.PureScript.Names.Ident)
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                   Language.PureScript.Names.$fShowIdent) -}
61878c7a583f84d9e1f3cc484f00b543
  $s$fShowNonEmpty_$cshowsPrec3 ::
    GHC.Show.Show
      (Language.PureScript.Names.Ident,
       Language.PureScript.Types.SourceType)
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Types.Type
                        Language.PureScript.AST.SourcePos.SourceAnn)
                   Language.PureScript.Names.$fShowIdent
                   Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowsPrec_$s$fShowType) -}
307b0ba3d5393f5ceb8e514d7996c20b
  $s$fShowNonEmpty_$cshowsPrec4 ::
    GHC.Types.Int
    -> GHC.Base.NonEmpty
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident))
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Base.NonEmpty
                            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident))) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Base.:| ww3 ww4 ->
                 GHC.Show.$w$cshowsPrec7
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                   ww1
                   ww3
                   ww4 } }) -}
b7110f1366c3bd4503252c776d72466c
  $s$fShowNonEmpty_$cshowsPrec9 ::
    GHC.Show.Show
      ((Language.PureScript.AST.SourcePos.SourceAnn,
        Language.PureScript.Names.Ident),
       Language.PureScript.Environment.NameKind,
       Language.PureScript.AST.Declarations.Expr)
  {- Unfolding: (GHC.Show.$fShow(,,)
                   @ (Language.PureScript.AST.SourcePos.SourceAnn,
                      Language.PureScript.Names.Ident)
                   @ Language.PureScript.Environment.NameKind
                   @ Language.PureScript.AST.Declarations.Expr
                   Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowsPrec10
                   Language.PureScript.Environment.$fShowNameKind
                   Language.PureScript.AST.Declarations.$fShowExpr) -}
b83db4d290ab435760ee2d85a6bb9716
  $s$fShowNonEmpty_$cshowsPrec_$s$fShowType ::
    GHC.Show.Show
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Type
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,))
                  (\ (x :: Language.PureScript.Types.Type
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                     Language.PureScript.Types.$fFoldableConstraint4
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Types.Type
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Type
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Types.$fShowType_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                        Language.PureScript.Types.$fFoldableConstraint4)
                     ls
                     s) -}
6bc03b1dfe11149838983ff4dc3d1b71
  $s$fShowQualified_$cshowList1 ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
2e50f047aae248924fec77a74f018c28
  $s$fShowQualified_$cshowList2 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ClassName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
2ac76c654b128654751d563d611b211f
  $s$fShowQualified_$cshowList3 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.AnyOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.AnyOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.AnyOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.AnyOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.AnyOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
3d6309a711ab4c0bf11b77809f2d39aa
  $s$fShowQualified_$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent
                   ww1
                   ww3
                   ww4 } }) -}
61354c0fde059d179a31d1bf89f543ec
  $s$fShowQualified_$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ClassName)
                   ww1
                   ww3
                   ww4 } }) -}
236d60ee6e2f245cfe8224bff384ffea
  $s$fShowQualified_$cshowsPrec7 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.AnyOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.AnyOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.AnyOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.AnyOpName)
                   ww1
                   ww3
                   ww4 } }) -}
6c3832025fcb2206d1d4dfad3c3c81e8
  $s$fShowType_$cshow ::
    Language.PureScript.Types.Type
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Types.Type
                           (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                 Language.PureScript.Types.$fShowType_$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                   Language.PureScript.Types.$fFoldableConstraint4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
209314673215744ade66767fe567d843
  $s$fShowType_$cshowList ::
    [Language.PureScript.Types.Type
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Types.Type
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Types.Type
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Types.$fShowType_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                      Language.PureScript.Types.$fFoldableConstraint4)
                   ls
                   s) -}
ad6ba642a3ecb7e3d2f551c99ae96eb1
  $s$fShowType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment])
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Types.Type
                            (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment])) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Types.$w$cshowsPrec3
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                   ww1
                   w2 }) -}
0140bda8c959a987a8ff25b81e672dff
  $s$fShow[] ::
    GHC.Show.Show
      [Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Names.$fShowProperName_$cshowList
                     @ 'Language.PureScript.Names.ConstructorName)
                  (\ (x :: [Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName1
                        @ 'Language.PureScript.Names.ConstructorName)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     (Language.PureScript.Names.$fShowProperName_$cshowList
                        @ 'Language.PureScript.Names.ConstructorName)
                     ls
                     s) -}
3bc65ee33fa2c3c4956bfdde3f6b7b39
  $s$fShow[]_$cshow ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName]) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName1
                      @ 'Language.PureScript.Names.ConstructorName)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
499c08c9c6faa9cfdddac32d6fd6ce5b
  $s$fShow[]_$cshow1 ::
    [Language.PureScript.Comments.Comment] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d6be1eea4d3814e44a86ef89595e0b0d
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName]
                   (Language.PureScript.Names.$fShowProperName_$cshowList
                      @ 'Language.PureScript.Names.ConstructorName)
                   ls
                   s) -}
1758e86ba07567d1c02880854dbbe6e3
  $s$fShow[]_$cshowList1 ::
    [[Language.PureScript.Comments.Comment]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Comments.Comment]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Comments.Comment]
                   Language.PureScript.Comments.$fShowComment_$cshowList
                   ls
                   s) -}
8e356193dcbb471e584557995cd60e31
  $sconcatMap :: (a -> [b]) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a @ b (f162 :: a -> [b]) (xs :: [a]) ->
                 GHC.Base.build
                   @ b
                   (\ @ b1 (c :: b -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b1
                      (\ (x :: a) (b2 :: b1)[OneShot] ->
                       GHC.Base.foldr @ b @ b1 c b2 (f162 x))
                      n
                      xs)) -}
9a58e97070a5a4d8b492fed477026a8b
  $tc'Abs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10804299541447562333##
                   3486320024928694729##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Abs2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Abs1) -}
adc1828f39e83a4cd8109c2bc9e6a520
  $tc'Abs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2b82ccae570b2838a5e037101ad99a2c
  $tc'Abs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Abs3) -}
eb4fc652f0f64a7a8f297a778b4a13a4
  $tc'Abs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Abs"#) -}
5119cf1ac2ebdc8011078d8b9d9b1ee4
  $tc'Accessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4005971469718317926##
                   14449642520388437095##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Accessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Accessor1) -}
8b57e941adbe2e6ba40859526c3976c4
  $tc'Accessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
664335503b1d06d2c62cf9a7afa619e2
  $tc'Accessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Accessor3) -}
3c3e2c8f8cdbc756bb84525047aa9aa7
  $tc'Accessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Accessor"#) -}
873f1cb45f5fc938a586c478af74cba5
  $tc'AdditionalProperty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5575026582699897870##
                   16327922094816899204##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty1) -}
d3b949439891d77d127218e980fdfc6f
  $tc'AdditionalProperty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a447c1c36f486c045f429b7e5a33925d
  $tc'AdditionalProperty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty3) -}
5d60ee099c4377c2f47cbb86216c6ab1
  $tc'AdditionalProperty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AdditionalProperty"#) -}
c572a90ee8b945ba6153ae1841546b22
  $tc'Ado :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1199055730845814026##
                   7228144675147202216##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Ado2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Ado1) -}
d7437ab176d9f4d0a2302449ac1efdfe
  $tc'Ado1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
49ce4c57e5aebfde923afe0263d48ee3
  $tc'Ado2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Ado3) -}
1baa1d2b827967ddd503efe79189d9e1
  $tc'Ado3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ado"#) -}
18f5978234343adbd2d555911c330b10
  $tc'AmbiguousTypeVariables :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18352942347665998114##
                   6875289514497980399##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables1) -}
849408bc0849bbe577109576dfabbdd9
  $tc'AmbiguousTypeVariables1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bd289d0ab1ccf22bee5239a84cda0519
  $tc'AmbiguousTypeVariables2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AmbiguousTypeVariables3) -}
fbf4e67d6aa3dd0061b25fba20ebde22
  $tc'AmbiguousTypeVariables3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AmbiguousTypeVariables"#) -}
32ce827462e2aeee2607dbb9f176983b
  $tc'AnonymousArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   283199175221174851##
                   13693970389364871377##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument2
                   0#
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument1) -}
66fcf7f20529f47a35417406a3de4750
  $tc'AnonymousArgument1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9d7e02e16736339b3d112039b161e856
  $tc'AnonymousArgument2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AnonymousArgument3) -}
67d59727924bf37887943292949c6657
  $tc'AnonymousArgument3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AnonymousArgument"#) -}
88d43d3afd5c62562f6f25e15c0048ba
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17273109231259135720##
                   11118734243547314627##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'App2
                   0#
                   Language.PureScript.AST.Declarations.$tc'App1) -}
4fc5a52bf05e276fbe49f9903761dc4c
  $tc'App1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bbd7589be2692c1e6fa5bb16a2405a38
  $tc'App2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'App3) -}
6cc06b7085e6c04a84e525cc034dc80d
  $tc'App3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'App"#) -}
c863294c48f69bb64c1f9507f094a9e4
  $tc'ArgListLengthsDiffer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3192771854245618695##
                   6304532843138515066##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
4da14d49e8bed6d69b48e816c763582d
  $tc'ArgListLengthsDiffer1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
32b881a41ed194bd154f193b912dc4af
  $tc'ArgListLengthsDiffer2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer3) -}
038c225a96af6d82ca5f7a4dbfded739
  $tc'ArgListLengthsDiffer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArgListLengthsDiffer"#) -}
8debf4a865ef14eca851a86af0f138e0
  $tc'AssocList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6372151603936089325##
                   5171254057915477158##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'AssocList2
                   2#
                   Language.PureScript.AST.Declarations.$tc'AssocList1) -}
c2e59ece52383d5b658d30af7c9fda79
  $tc'AssocList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c14cf5b6a833608dbb7d78ab2827daea
  $tc'AssocList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'AssocList3) -}
0dc9a85fad40c95af54e635caaabe4b6
  $tc'AssocList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AssocList"#) -}
3b4d5696bcf64cc438c9b1427a755bf8
  $tc'BinaryNoParens :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10881221411968846977##
                   577779168500478904##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens1) -}
7507cbbad61b8527a9a7ada253a8d7ef
  $tc'BinaryNoParens1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a25cc0b5f0480c061b5a117b5771bc89
  $tc'BinaryNoParens2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens3) -}
4cd5ae11e6343b5ce22cbe5bd4be950d
  $tc'BinaryNoParens3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BinaryNoParens"#) -}
633af73a28edb59a3073763931603934
  $tc'BindingGroupDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13280963981190171394##
                   1201872097991525982##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration1) -}
a5e12ecce396cee7bd393a6bca854b27
  $tc'BindingGroupDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8b4695896a1897f2a7cec9fea3993b80
  $tc'BindingGroupDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BindingGroupDeclaration3) -}
29cc770661adf3288f71d266f69ac765
  $tc'BindingGroupDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BindingGroupDeclaration"#) -}
4eb7745acf89500e2a784b925d787901
  $tc'BoundValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6206929804789995013##
                   16226095258061789610##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration1) -}
db7f1074d55c67e4f517e7c6a13e44c4
  $tc'BoundValueDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
23c6cd6dea622379507c9839269ec920
  $tc'BoundValueDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'BoundValueDeclaration3) -}
f56b71136531563bb3cda25d2d7fa882
  $tc'BoundValueDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoundValueDeclaration"#) -}
f3a5e2ebd861556452751ac8b28259ef
  $tc'Branch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13405756664624222095##
                   4518500361717405715##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Branch2
                   1#
                   Language.PureScript.AST.Declarations.$tc'Branch1) -}
acaf3a4ff4278f3996589f8bd8132ca0
  $tc'Branch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a7bc40a08b974ac41cfdf8cc9e9c222
  $tc'Branch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Branch3) -}
6478b5d5df740695a5a4deb9a3cf118c
  $tc'Branch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Branch"#) -}
8f3b5fbae0cb570f606ece3e1223cdd4
  $tc'CannotDefinePrimModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11113092959260794766##
                   1050342305591993729##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
b337e7141322ae4ba5135e8dfc349b6a
  $tc'CannotDefinePrimModules1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d762f44deaa6dca8f3d0f4f9fee83c65
  $tc'CannotDefinePrimModules2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules3) -}
ca8192dce265f63b03612e41d08db954
  $tc'CannotDefinePrimModules3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDefinePrimModules"#) -}
478eeaa05b9834a7715980c23526cbc7
  $tc'CannotDerive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12835163494487695173##
                   15050125658093800536##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDerive2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
72c790040233079ccbe76dbcf1b02ff7
  $tc'CannotDerive1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8c0d92ee0e743d3cb4229977303dff4a
  $tc'CannotDerive2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDerive3) -}
74c92f2f4154ba44b0388178dfb847be
  $tc'CannotDerive3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDerive"#) -}
33cec4ed21eabb375b56d954740c9b8d
  $tc'CannotDeriveNewtypeForData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1899828864215293212##
                   15252825788734228323##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
d7c87e03de2899aaf55973143901a651
  $tc'CannotDeriveNewtypeForData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2e02dd043b390d12915d5b0510548f60
  $tc'CannotDeriveNewtypeForData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData3) -}
fcf31d55b4f12c087276c1eff9f96abb
  $tc'CannotDeriveNewtypeForData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotDeriveNewtypeForData"#) -}
8c2d206706081cbc975d7acc03fb0fd0
  $tc'CannotFindDerivingType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17841109595475392770##
                   7726183480695947209##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotFindDerivingType1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
d497072468e5d0ec0c4fb2230fe59c72
  $tc'CannotFindDerivingType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotFindDerivingType2) -}
d1c100721b723ef9464289faed41c328
  $tc'CannotFindDerivingType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotFindDerivingType"#) -}
6b2ad9bac693eb8cce2de853b8b33da5
  $tc'CannotGeneralizeRecursiveFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17183673315382376102##
                   8299585495554073862##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction1) -}
fa1ee61e798a0c36da81b710f3e9390e
  $tc'CannotGeneralizeRecursiveFunction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e8e59772b52dd62c458ed584d8923ee
  $tc'CannotGeneralizeRecursiveFunction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction3) -}
83104f5b3bce1a08a1ea6bf034364234
  $tc'CannotGeneralizeRecursiveFunction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'CannotGeneralizeRecursiveFunction"#) -}
b57c5f09a47fab221ed98f1bd44cffb9
  $tc'CannotGetFileInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7459327269902146283##
                   12471699398607241441##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
f352ae1dc875e50673d7006487791ed6
  $tc'CannotGetFileInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
91a528fb796bd2ba61e0d4e7fc35e30f
  $tc'CannotGetFileInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo3) -}
901f70c081b7022102a89573a21e18f0
  $tc'CannotGetFileInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotGetFileInfo"#) -}
433722041e693b8924ec5a5536c6144d
  $tc'CannotReadFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5877318131331022624##
                   18097015728419087358##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotReadFile1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
9a6f2bac1c302473703cfeefc573cc31
  $tc'CannotReadFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotReadFile2) -}
2dbbc3afd05fbc1e203a76879323a90a
  $tc'CannotReadFile2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotReadFile"#) -}
e67386a9d17796971dece403fa9ea20d
  $tc'CannotUseBindWithDo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1189291652698488830##
                   18397672362900262##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotUseBindWithDo1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
0ae558967d195669af7d8042c0a7e81b
  $tc'CannotUseBindWithDo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotUseBindWithDo2) -}
e833fd46ea2ff415219dc0f0365563ea
  $tc'CannotUseBindWithDo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotUseBindWithDo"#) -}
eb16064316b47d0a167ecb57ef6d98e4
  $tc'CannotWriteFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8450148787300892873##
                   5632665306239666854##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CannotWriteFile1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGetFileInfo1) -}
84c4189a54ed862f9aca4bb4d6a083bc
  $tc'CannotWriteFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CannotWriteFile2) -}
1c26308c3414500b9da78a5119449fd0
  $tc'CannotWriteFile2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CannotWriteFile"#) -}
8aa57e764fb3875d92d9855d6d17f973
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13555758393805207490##
                   17701809294366169457##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Case2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Case1) -}
0a813a94248eb3df1a45b5b05f4023cf
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
241839fc117d29c11825cb50c941f316
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Case3) -}
4a039c02daf03d124e058146dd04a718
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
8f03892264da0b5eeebdf7bc1f7cdeff
  $tc'CaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13923013814867868250##
                   2173775138313918020##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative1) -}
369bc000e6379e1ecfabda17652f128e
  $tc'CaseAlternative1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a12ba5f2f973bcd8ad31291bb6fbf4f1
  $tc'CaseAlternative2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CaseAlternative3) -}
57a02f24d6b557aeaf8ada8160db8131
  $tc'CaseAlternative3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseAlternative"#) -}
30679191e0f0f3859ce2edda4688ab40
  $tc'CaseBinderLengthDiffers :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4293591837753946490##
                   3456377886824263098##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers1) -}
d1b2d5ce628b87a772096dce291e907d
  $tc'CaseBinderLengthDiffers1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8cc4b5cbbd01b70f3f2fa69fe0677247
  $tc'CaseBinderLengthDiffers2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CaseBinderLengthDiffers3) -}
4e1f64b99cf7544c525dde1335989fbd
  $tc'CaseBinderLengthDiffers3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseBinderLengthDiffers"#) -}
3739412e366af4fff47b64fee3dc071c
  $tc'CheckHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10524403760147693970##
                   15557252481387498400##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CheckHint2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
b36f2acb17c37023917e9365512ecccc
  $tc'CheckHint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
99d23de030810c4399660f9f54e0420e
  $tc'CheckHint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CheckHint3) -}
ea646c1dc873f4a9a68d6ddab7c957df
  $tc'CheckHint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CheckHint"#) -}
f0e5a9aee2a3168f8b0d0d3bab6ab0d9
  $tc'ClassInstanceArityMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8513678016494523552##
                   16608604926277191524##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch1) -}
433a698d4d48e54df22633837b0acc18
  $tc'ClassInstanceArityMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2d39d9aefb91df716b5980a815027541
  $tc'ClassInstanceArityMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ClassInstanceArityMismatch3) -}
08b94b6f99fba450286dc44897cb0fbf
  $tc'ClassInstanceArityMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClassInstanceArityMismatch"#) -}
da49ab8305ffcdb49b50c4621f7c5ec6
  $tc'ConditionGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6340818216687344105##
                   10867038957634963686##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard1) -}
f393dd6ab0f9985947fb828c5dd1198c
  $tc'ConditionGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
63402c24132f36c24fae79356808ebf0
  $tc'ConditionGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ConditionGuard3) -}
244e30d7a71b41cddfa76a3f45e9fc6b
  $tc'ConditionGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConditionGuard"#) -}
d665ac691b4ad496153e84d426578c7e
  $tc'ConstrainedTypeUnified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9944620486550703321##
                   9887515500902062250##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified1) -}
0bfc26f667a50749717037aa1b10f68a
  $tc'ConstrainedTypeUnified1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5ae74e3be014ac9a9f88d2b503556c06
  $tc'ConstrainedTypeUnified2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified3) -}
0dddb79567cefea3e2c1409adeecdeae
  $tc'ConstrainedTypeUnified3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstrainedTypeUnified"#) -}
dfce73cf4c95f7b3d1d61ac0f5222741
  $tc'Constructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9706859733282651062##
                   5254978531905042205##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Constructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Constructor1) -}
6163639b2d3f95ca566bbefcf6a67f90
  $tc'Constructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cc05edbd48d2147f4f730df957fca4b4
  $tc'Constructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Constructor3) -}
4cf05277b020b62f259df5bfd5c0e529
  $tc'Constructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Constructor"#) -}
e06763b687b3b22848b7efe14d715b71
  $tc'CycleInDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7830817491902730041##
                   14585953260013888356##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
e933c3d2a29a0ec1e8eff173bc582235
  $tc'CycleInDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInDeclaration2) -}
fede1d35133a013cf21395c1b7560c98
  $tc'CycleInDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInDeclaration"#) -}
779f8bb80f66b2a5620679abcb944438
  $tc'CycleInModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   445462380819749701##
                   8676377011637683951##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInModules2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CycleInModules1) -}
d83119a13bbd8073ffd59fd823e23a14
  $tc'CycleInModules1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8687adb8e03f1b9cd6656d1d753c45ab
  $tc'CycleInModules2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInModules3) -}
a669b969ae1a7f8dc6cf35c15940b0bf
  $tc'CycleInModules3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInModules"#) -}
ea5e4c96b4cc8b91673e0c640dd56f5e
  $tc'CycleInTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5806473442894825827##
                   13473391109594445818##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym2
                   0#
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym1) -}
8ab6317486278e6443a4a0d6cb0d3f6c
  $tc'CycleInTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d780fc8d048506289863990aa48dbf11
  $tc'CycleInTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'CycleInTypeSynonym3) -}
9e894a0d69d1a4262388a6c001bc1c4f
  $tc'CycleInTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CycleInTypeSynonym"#) -}
1cf2a7b5e6bc49e3a7e4306866eca8f8
  $tc'DataBindingGroupDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3201029310369953834##
                   16338944935587526294##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration1) -}
d870a65c60928b632c6af87d0d3c76ad
  $tc'DataBindingGroupDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
14e54a6dcb47fd5d525bff4108fbd3b6
  $tc'DataBindingGroupDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DataBindingGroupDeclaration3) -}
9f3369e9a460c70d64b8925f7c47354f
  $tc'DataBindingGroupDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DataBindingGroupDeclaration"#) -}
b033a8a3ecb437b9f2d272bdf4bf7b18
  $tc'DataDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12786300893260508581##
                   3193898393155487767##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration1) -}
db0bd04a630b086a21b5a02511677fe1
  $tc'DataDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4931cdb8bad9190a6fee08992f4375c2
  $tc'DataDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DataDeclaration3) -}
c7adbf16ec7fa9d7971a96a4a90d31fd
  $tc'DataDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DataDeclaration"#) -}
8ca1201cb250afee69ef0cac803de2ed
  $tc'DeclConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   731679935975887936##
                   14786024031777052599##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DeclConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DeclConflict1) -}
4868e7db737d210ab2fadaea2c0c098f
  $tc'DeclConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f6dc180f84ec0729038cde3b3eb9fb7c
  $tc'DeclConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DeclConflict3) -}
3318e5eab6fa0a698a4f2b0effda29a5
  $tc'DeclConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DeclConflict"#) -}
85abdecf8607964dc5cf2ee263c6e5ce
  $tc'DeferredDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15425670005037235679##
                   13603922396478133746##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary1) -}
243a4be98ec138c931f21b95617a579c
  $tc'DeferredDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4e966592444704b84c997b5f9cff3265
  $tc'DeferredDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DeferredDictionary3) -}
210d23a0a3d499b80c593e8487d59af1
  $tc'DeferredDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DeferredDictionary"#) -}
5b132b6d59e7c00e921e752fa558c602
  $tc'DerivedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4939864976084895909##
                   12274274845607558152##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance1) -}
2be0e4ba8e729c089d5ecb117140fb87
  $tc'DerivedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
93b923552f4fe36038b7c661cd8c22f4
  $tc'DerivedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance3) -}
e608fef862d343b858cccaf22a8dc326
  $tc'DerivedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DerivedInstance"#) -}
f922eb9b7e13da2f458c791caecd1224
  $tc'Do :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4374034678590677356##
                   16190517123955110749##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Do2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Do1) -}
de4317ceb09f6546382c08028e089867
  $tc'Do1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c7444483e37b0d061399c2e5d9de3499
  $tc'Do2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Do3) -}
4f595d093c99c092515655157c51e4d4
  $tc'Do3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Do"#) -}
feeefd67cb041b2af63afb859a547efe
  $tc'DoNotationBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13328862888489548678##
                   4011235043262219345##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind1) -}
cf0bb2f335672eb9e1c7c9446316f360
  $tc'DoNotationBind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
786268160ad2752b64ebf402e09179c2
  $tc'DoNotationBind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationBind3) -}
cff54f22251dc9f8893732658f6593bf
  $tc'DoNotationBind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationBind"#) -}
ba995f4348c9423b58835046cdbfd580
  $tc'DoNotationLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10016966779922042410##
                   5271711539073862748##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet1) -}
d93c524d808d50a18cc12846816659c4
  $tc'DoNotationLet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
77fc8779e8b8502e2f2bb9de08d1acb7
  $tc'DoNotationLet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationLet3) -}
81226b886346bd54076a1e34e5cb2195
  $tc'DoNotationLet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationLet"#) -}
09adbd4635af17b44349d875887c103c
  $tc'DoNotationValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1230701184382682372##
                   6809441244654284325##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue1) -}
d55b4cdec2e80a59d8d9482b0f020a91
  $tc'DoNotationValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3ad4f56bdea951f4fc6fce06769804da
  $tc'DoNotationValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DoNotationValue3) -}
0e889e2009926e0fb6510b34e72d2537
  $tc'DoNotationValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoNotationValue"#) -}
892f8f005083f9c6e3ccac53ee053dda
  $tc'DuplicateExportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10846103009687187968##
                   6196905387926259476##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
d2b91f6e06ab99cf0a00f3329e066374
  $tc'DuplicateExportRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9a9b5fc47e018ea75c084973b55f3338
  $tc'DuplicateExportRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef3) -}
829c7099d4c75934a447a3f28483903d
  $tc'DuplicateExportRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateExportRef"#) -}
24b855703e2c4db75f1a49a722f146be
  $tc'DuplicateImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5744009717355711491##
                   6849390714927462296##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport1) -}
af0035e398e274222543874f2875a44f
  $tc'DuplicateImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8bc285eb62ee79ee4b1dcb4034c93c1c
  $tc'DuplicateImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateImport3) -}
547c5cd263cd489dd22fdcca685bd475
  $tc'DuplicateImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateImport"#) -}
dde6e55976a05fb9860617536089ab08
  $tc'DuplicateImportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15862527007412441249##
                   3760755262768973068##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateImportRef1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
7a8f0fca93ef946b5155499a57563e5f
  $tc'DuplicateImportRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateImportRef2) -}
c6657dd62c354c45cf27f172daa32dbe
  $tc'DuplicateImportRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateImportRef"#) -}
1a61f61a5fc016a49f6bdc8aa4023c5d
  $tc'DuplicateInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16603639446649924626##
                   915286159005543189##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance1) -}
033037733f17c64f84794589113dcc2c
  $tc'DuplicateInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
032bd6a1b9f66c712a0516f237ba3e0a
  $tc'DuplicateInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateInstance3) -}
77e0baeffb04611208afbac1b8ae4bae
  $tc'DuplicateInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateInstance"#) -}
71d26e4e34472105b46c89acb8b21268
  $tc'DuplicateLabel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6371715871703229007##
                   15985035234055682065##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel1) -}
1bc833a74f00871fdb38dfd8f21cfa15
  $tc'DuplicateLabel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c3ba95f35202107a34d38c832cb3aeb1
  $tc'DuplicateLabel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateLabel3) -}
8394d2bedf1dae630b4812c19c27ffff
  $tc'DuplicateLabel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateLabel"#) -}
ffb3f0fbd296d8d5fcb1e6df166b05b8
  $tc'DuplicateModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10367756341053008000##
                   3803273818223730153##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
44b8ff3a7e8d06e0a85a7c51af84f918
  $tc'DuplicateModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateModule2) -}
a26597f170ec534b731b2e71977a1697
  $tc'DuplicateModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateModule"#) -}
69ec8d47a96cb53a03d8de3fd85f2ddc
  $tc'DuplicateSelectiveImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3285457511211964997##
                   9189155214329748310##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateSelectiveImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
081bda4d6ca4ee24d85a8f97544bc483
  $tc'DuplicateSelectiveImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateSelectiveImport2) -}
5bca26a288db50ab8db4f856828d8b41
  $tc'DuplicateSelectiveImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateSelectiveImport"#) -}
3e00982a667c70174676c75da0411110
  $tc'DuplicateTypeArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8953827454493851173##
                   10070013902123770964##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
ce8a0a252621edd257ceeadafb500983
  $tc'DuplicateTypeArgument1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5ecc1c1788dc783b0d1acf01d7213c0c
  $tc'DuplicateTypeArgument2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument3) -}
b02afce37eaca5825ff855d7c59840af
  $tc'DuplicateTypeArgument3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateTypeArgument"#) -}
d9ef47382874eba8a2d6e847c2b7efba
  $tc'DuplicateTypeClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18048614440361853336##
                   9764261938223479400##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass2
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass1) -}
b54461f36c1be6cde8703195e547cde8
  $tc'DuplicateTypeClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
57a11f372e1d26fceb858c09d563469c
  $tc'DuplicateTypeClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeClass3) -}
c579e6148f5f3ea54fc7563960dd797c
  $tc'DuplicateTypeClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateTypeClass"#) -}
f1966466b36236120f2bc1061047181d
  $tc'DuplicateValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14415967466815251587##
                   15402655608697986##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'DuplicateValueDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
ca831b79a404f5523b8ac2d894ca034e
  $tc'DuplicateValueDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'DuplicateValueDeclaration2) -}
039ba1ae1e177e5255c3815d5fbae422
  $tc'DuplicateValueDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DuplicateValueDeclaration"#) -}
8be70ebe45a427a9aca374913f8e7659
  $tc'ErrorCheckingAccessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6094297911944299389##
                   3362323617339066143##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor1) -}
27a5bdd3b6a9eaba3460271e6835a90d
  $tc'ErrorCheckingAccessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0d76154a5778c37a70a8766a6ea6c55a
  $tc'ErrorCheckingAccessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingAccessor3) -}
c05adf21a4f97e3b2aa1b1cb4f67a906
  $tc'ErrorCheckingAccessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingAccessor"#) -}
9281787f0960d63eac1a376bef8767e1
  $tc'ErrorCheckingGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8235185485264538101##
                   12862297668574825473##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard1) -}
30f0fa99f280e39079d565b5c8b633a8
  $tc'ErrorCheckingGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1bd31a16443dc137cfb3790942b90eac
  $tc'ErrorCheckingGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingGuard3) -}
fd64e063810e863b4a504594880ee9eb
  $tc'ErrorCheckingGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingGuard"#) -}
a3ac6330d4aa1f808b23bd1927f9b80a
  $tc'ErrorCheckingKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15219501708133767625##
                   3379369624837704616##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind1) -}
7bd6bff59201ae3be836a9297860744c
  $tc'ErrorCheckingKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f79923a16d2db188fa326c6f956271e1
  $tc'ErrorCheckingKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingKind3) -}
51a53126f6969fe84a1eb94801553e25
  $tc'ErrorCheckingKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingKind"#) -}
276ce16ef291c81f5f9f1a3ba91d3b78
  $tc'ErrorCheckingType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6427319022878511103##
                   17649328950973463161##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType1) -}
b5b1e5fddf901be9b3a9a164375126ff
  $tc'ErrorCheckingType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
710c7d994a8d564cae95e35f51ed7187
  $tc'ErrorCheckingType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorCheckingType3) -}
1dd3e54fff55c73d2b39042545943595
  $tc'ErrorCheckingType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorCheckingType"#) -}
d31e452948037980fa694ffe5692d0b3
  $tc'ErrorInApplication :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4640341412835142944##
                   10741926611699922417##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication1) -}
98905f35dd51f2e21698a04d93cb1b78
  $tc'ErrorInApplication1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c104164b29930d541f181fa29512864
  $tc'ErrorInApplication2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInApplication3) -}
9bb092e72853a901ed2cc196224fa5cf
  $tc'ErrorInApplication3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInApplication"#) -}
c373ee0848972c8bb4a6000dd1c0b623
  $tc'ErrorInBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17428394077460038649##
                   9102308615058911581##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup1) -}
7743b9a73ad2c7ab2c61f3ac77b761ac
  $tc'ErrorInBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dcf9e541c475ef20eb2cb6a0471dec3f
  $tc'ErrorInBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInBindingGroup3) -}
7ce008b3138131357ce266bc81ee2059
  $tc'ErrorInBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInBindingGroup"#) -}
7cf2355db6135329ebb8834a542a8341
  $tc'ErrorInDataBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1519934410734989361##
                   4612304046370653459##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup1) -}
6a3e49258b9dbb9788fe1d99f50b860b
  $tc'ErrorInDataBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
87fd676b6822ff4cc71332f8c6d2900d
  $tc'ErrorInDataBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataBindingGroup3) -}
203db9aada5e1094b6525dce6fdb4c61
  $tc'ErrorInDataBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInDataBindingGroup"#) -}
946c6e50e13c3ff8c5e160c36ba93cb7
  $tc'ErrorInDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3482330015478482085##
                   12349239268098170180##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor1) -}
62912cb6a8eade84900070e24a53d38a
  $tc'ErrorInDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f6d4d33a1b4e30566e077961e36ab4a3
  $tc'ErrorInDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInDataConstructor3) -}
120788d052a6025052c37fadf4789bc2
  $tc'ErrorInDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInDataConstructor"#) -}
87059f8d8f0fd50c73f8a2a938dce72b
  $tc'ErrorInExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15792387156993536986##
                   17013165663677393504##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression1) -}
c093560ce5675f69fb28176071df7b16
  $tc'ErrorInExpression1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c1e18c4dbcc0cf1ac6924c322f81445e
  $tc'ErrorInExpression2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression3) -}
bb4a2e04ee2ccbd08dcf12aed3c70a2c
  $tc'ErrorInExpression3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInExpression"#) -}
cfbc2fca796f6b1c329a1ee32ec65a14
  $tc'ErrorInForeignImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8101182020152158662##
                   1349738494324853892##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
48c82f61660f370ddee9b65d8b25ad3b
  $tc'ErrorInForeignImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
25adf234ed6e8d7ed15e719cb3d65185
  $tc'ErrorInForeignImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport3) -}
1a01cdc22d5a9da4ad08e49f2e446b6d
  $tc'ErrorInForeignImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInForeignImport"#) -}
6c7c5413461ad96d39108be9940f1726
  $tc'ErrorInInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13441438464592179453##
                   16881793412415074827##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance1) -}
44a0090ac7268c9139227b3359f920cb
  $tc'ErrorInInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c0abe9feb1f186d987286349970996a3
  $tc'ErrorInInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInInstance3) -}
f58cb0a5d602fd1df8e9cc81c5803b18
  $tc'ErrorInInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInInstance"#) -}
438ae50261753c9357b341ad909c7465
  $tc'ErrorInModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11416569035029557184##
                   11337257218786181496##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule1) -}
374e23a709809838c0dbece1ecc15602
  $tc'ErrorInModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
71f7e3fa11fa1e457eece5168f48a212
  $tc'ErrorInModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInModule3) -}
fe9f5d9c3ae3bc7c3d1181d3fcb69231
  $tc'ErrorInModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInModule"#) -}
7ac78ba9a0fcf02608a7bec710f097c7
  $tc'ErrorInSubsumption :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17368647857111836431##
                   17046053449460722558##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption1) -}
bac80092c0267f2152a866cda0097c77
  $tc'ErrorInSubsumption1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aa7899e3a96eeeb1e4021e23fe60124f
  $tc'ErrorInSubsumption2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption3) -}
03cb45d123cb1037c9ca66672674874c
  $tc'ErrorInSubsumption3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInSubsumption"#) -}
809698a05bdebc2c5c7003da5ea641fe
  $tc'ErrorInTypeClassDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1236659460246269286##
                   11829301078920286903##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration1) -}
4e14ca3611a1baf3926923bea8d26797
  $tc'ErrorInTypeClassDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8286e4b3745ab6fa1d5524b3b1cb5875
  $tc'ErrorInTypeClassDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeClassDeclaration3) -}
05cc272b2375664170606a25fe27c17d
  $tc'ErrorInTypeClassDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeClassDeclaration"#) -}
fefb20030d0b52665a75be36257b8957
  $tc'ErrorInTypeConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13866624658430563881##
                   2551192383028805860##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor1) -}
24cb8ef848609a21aa74b0cd4a858786
  $tc'ErrorInTypeConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e14c456f978453402877c065a3cff77
  $tc'ErrorInTypeConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor3) -}
ccc49481dfb0a78b692062ab4279f7c7
  $tc'ErrorInTypeConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeConstructor"#) -}
138c80df003d6c2286dc983deaffabb3
  $tc'ErrorInTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7928384477222845371##
                   3893131975039855690##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
918597fadd1b1162a5b2a1d72eafc5f7
  $tc'ErrorInTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeDeclaration2) -}
444b34cba7ee9943280fd1fe98185f12
  $tc'ErrorInTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeDeclaration"#) -}
418379d7987bc75010505d96372a730a
  $tc'ErrorInTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11224225588655735972##
                   6244540680353390096##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeSynonym1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeConstructor1) -}
92abf62b0fd3e2343b377471c0e4693c
  $tc'ErrorInTypeSynonym1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInTypeSynonym2) -}
be68e5e179755fc01218614e45efd672
  $tc'ErrorInTypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInTypeSynonym"#) -}
9cf3d8bc1101737ca74b52f536e99720
  $tc'ErrorInValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16042872897091545576##
                   7503401297180675228##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInValueDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInForeignImport1) -}
7ec01aaec85d0a6faa3a22e5a47a16b3
  $tc'ErrorInValueDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInValueDeclaration2) -}
da938e88181b1c460d62750c58786834
  $tc'ErrorInValueDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInValueDeclaration"#) -}
e9a4d3df1fbe1b7ac861ffe235ea2056
  $tc'ErrorInferringType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7612837276505504740##
                   4961156007239492272##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorInferringType1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInExpression1) -}
d8fee8ed91410998d5ae55d48c240860
  $tc'ErrorInferringType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorInferringType2) -}
2e895f782e92d7d5a8a646588995f41d
  $tc'ErrorInferringType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInferringType"#) -}
052ba155ce3971a7c8aaa19f85ff6fe7
  $tc'ErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   407489989321318275##
                   11716855812251597098##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage1) -}
b9abf7808f820d1b681bb9c80a600750
  $tc'ErrorMessage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
02dde65f7507879c71ab40908ba188e7
  $tc'ErrorMessage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorMessage3) -}
9e0c3ab41ee61e703c99625a9d4d6979
  $tc'ErrorMessage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorMessage"#) -}
c7d59c59cbc8db982188ed714ae1703d
  $tc'ErrorParsingFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2546235658702957286##
                   15568739974574298647##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule1) -}
ebbcf4be5a33c331205df4b8fcc05405
  $tc'ErrorParsingFFIModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
76311582b8ebecb0acb751bb4558242f
  $tc'ErrorParsingFFIModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingFFIModule3) -}
f0cfed37289441f58767ce7ede93a366
  $tc'ErrorParsingFFIModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorParsingFFIModule"#) -}
640e6bae1100e2b0eb72c7b15d802cca
  $tc'ErrorParsingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3538860788300812099##
                   15139243644628697852##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule1) -}
9669a7f7dd71e25d150ac1a5cf2c6d60
  $tc'ErrorParsingModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6a7675cca10a76d0acebeb8748dcfdf3
  $tc'ErrorParsingModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorParsingModule3) -}
6073b473b62200c28a06b86bd32828f9
  $tc'ErrorParsingModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorParsingModule"#) -}
da8639f61b96f6636a97338f88830d09
  $tc'ErrorSolvingConstraint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11785871110429745898##
                   11268403123580365115##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint1) -}
3ad84902ab13c816d3ba0eddb4025861
  $tc'ErrorSolvingConstraint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
812e13badacd209fc39d5bae80085f95
  $tc'ErrorSolvingConstraint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorSolvingConstraint3) -}
f80e4254ba949c5e7376d8661379a4c1
  $tc'ErrorSolvingConstraint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorSolvingConstraint"#) -}
c0022ddd186d804e05ea6b19de30d8a6
  $tc'ErrorUnifyingTypes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13670355520315936745##
                   7572632994374863571##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ErrorUnifyingTypes1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ErrorInSubsumption1) -}
3ceaebfc23140cd04472ef6d5ed1733f
  $tc'ErrorUnifyingTypes1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ErrorUnifyingTypes2) -}
63d4700d877709312ff7579bf830168d
  $tc'ErrorUnifyingTypes2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorUnifyingTypes"#) -}
4b8646ca2440b9f2771c992b817b5db4
  $tc'EscapedSkolem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1769986028627094462##
                   4627680703066241188##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem2
                   0#
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem1) -}
95a0f5933fdf27fdf74188b7f5495558
  $tc'EscapedSkolem1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9b4174106cc80f8a36a7a5c3a9bd6efb
  $tc'EscapedSkolem2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'EscapedSkolem3) -}
c851f18b5d3388270078c771e3e3be4d
  $tc'EscapedSkolem3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EscapedSkolem"#) -}
f29844e0416ae49bd88c90d563c1e22e
  $tc'ExpectedType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10577638274447196339##
                   16822174491793505182##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExpectedType1) -}
38a0dcad1e6accb7262b56ac10f0ee89
  $tc'ExpectedType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6d84651a8dfd473aae5c512af79a0216
  $tc'ExpectedType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedType3) -}
48874ea34d9bbc85b74e35acd26cb470
  $tc'ExpectedType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedType"#) -}
14df815c67664d0c1e48b33d71e8144b
  $tc'ExpectedTypeConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5109961997678143295##
                   11212561528866481244##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor1) -}
e1d3a50bf234543894727725cec15c30
  $tc'ExpectedTypeConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a800e95e651d4fefb432a2e6810599c0
  $tc'ExpectedTypeConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedTypeConstructor3) -}
5abcf081b6d6fa62c52f238c75318b94
  $tc'ExpectedTypeConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedTypeConstructor"#) -}
53d1b1a4715774f0a9ec70cdad79611c
  $tc'ExpectedWildcard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13490402254509874162##
                   5302590537734778527##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExpectedWildcard1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
25bea614a1f6e861c8cf29e0a0dbc6ff
  $tc'ExpectedWildcard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExpectedWildcard2) -}
39edab9ef2f65125f86dab245df31e56
  $tc'ExpectedWildcard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExpectedWildcard"#) -}
bad3873047da071218964991cbb77aa5
  $tc'Explicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8616336120952711440##
                   16042362261487224305##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Explicit2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Explicit1) -}
8f221660b5dfdc268a0572e575cdf054
  $tc'Explicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
370167378a246062da331237ba8427e7
  $tc'Explicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Explicit3) -}
f11455f9392facbb38f3721cabdf7819
  $tc'Explicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Explicit"#) -}
881d814c8bf427272ea79be18b7d2d0f
  $tc'ExplicitInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   997823819243663833##
                   4422856360170672349##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance1) -}
bd2f2c9708422da3765b9a2828842f46
  $tc'ExplicitInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b31b8208bfcfec6ca03c91cc7f713fa
  $tc'ExplicitInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExplicitInstance3) -}
01fd1c466b38a9cf7b94a4a7bff7f8c8
  $tc'ExplicitInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExplicitInstance"#) -}
ee1eff53cc24088971e6129577cc342b
  $tc'ExportConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8875616559611805130##
                   9995901740485706631##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExportConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExportConflict1) -}
1df9293a95cb8e868478dcf91f9fd279
  $tc'ExportConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0dc0dff6295fd77c9d519753a65d6146
  $tc'ExportConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExportConflict3) -}
df7aaed4c2e7a98eb0a071c860804da9
  $tc'ExportConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExportConflict"#) -}
91d25100c4e01b8d5c140ab90a482f6e
  $tc'ExprDoesNotHaveType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12173646841176069960##
                   5785516953550614677##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType1) -}
ae00021a3930052231028e74e7d37ab6
  $tc'ExprDoesNotHaveType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d9590ecc49fd3d9d71a8245372276074
  $tc'ExprDoesNotHaveType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExprDoesNotHaveType3) -}
08a9669cf20ff9623c732ecd49080f81
  $tc'ExprDoesNotHaveType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExprDoesNotHaveType"#) -}
732eb2ce0fbfccb76c29b2e2db25e4e0
  $tc'ExprHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   973959106692703806##
                   5456283971346485602##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExprHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
90b018484dab001fd5ecd468067ba6a6
  $tc'ExprHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExprHint2) -}
e251c879a52a89718ada1d72fc3be713
  $tc'ExprHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExprHint"#) -}
997b2dd33490dc12afb46eb5ccd93549
  $tc'ExternDataDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6547727018685079783##
                   1842156212195223636##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration1) -}
2d9a9558b34c407ced4b75d27396a7d7
  $tc'ExternDataDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0eb60294120755d6dae9f04903382b9c
  $tc'ExternDataDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternDataDeclaration3) -}
badd38390923560f0fd2e7125a13c2e2
  $tc'ExternDataDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternDataDeclaration"#) -}
3eb590b0c530ab1e47df7b76977da826
  $tc'ExternDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6892525898895433485##
                   10822469962782413016##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration1) -}
af18b054c3af6c9b2ed9c36978d5292e
  $tc'ExternDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3c48d052e52651ae7203a70f4a3d951f
  $tc'ExternDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternDeclaration3) -}
de4761b87dbd4cbc9280594a11dfc9f8
  $tc'ExternDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternDeclaration"#) -}
6e4ea48de270fb2143e6d548f1ffe380
  $tc'ExternKindDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13458812396030146579##
                   17299202129799643516##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration1) -}
0eb7e93681b2c4a442a11d83b93a39d7
  $tc'ExternKindDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1bd45b57bc9f4f47238e57ff213b518e
  $tc'ExternKindDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExternKindDeclaration3) -}
22e417dc54ad6127de2b5b52ea5d90ba
  $tc'ExternKindDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternKindDeclaration"#) -}
7d47b5efb1afed789488eb9a633ea8aa
  $tc'ExtraneousClassMember :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13396250264052475220##
                   3811509335086509640##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember1) -}
d9f690aba14431fee95dfdcc19f6e491
  $tc'ExtraneousClassMember1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f934f6b70b55a0b01b18206afa91030
  $tc'ExtraneousClassMember2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ExtraneousClassMember3) -}
7b70da16d196057366c1eade89b8a776
  $tc'ExtraneousClassMember3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExtraneousClassMember"#) -}
f50ec21d77d485ed5091820561d31a9b
  $tc'FixityDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6155009508558288624##
                   16162256781365798122##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration1) -}
bb14cc02e51970e26777fd74cef6d454
  $tc'FixityDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
141e9eccf6386dc7a4cbcb29d89d382b
  $tc'FixityDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FixityDeclaration3) -}
f6e899c5d3b2d7b44b0a41ca2c0bc76a
  $tc'FixityDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FixityDeclaration"#) -}
046189a751f3694299bcca4694752b5d
  $tc'FromLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6098342342936865279##
                   16548589352648657336##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FromLet2
                   0#
                   Language.PureScript.AST.Declarations.$tc'FromLet1) -}
1b9dece0acaa9bc92e9061fd745c8d95
  $tc'FromLet1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ffdbcc0bd001ffc17d7b501b7402afa7
  $tc'FromLet2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FromLet3) -}
7721cda46502dc6278c81137351b12e2
  $tc'FromLet3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromLet"#) -}
7b82508a4156f421259e55442dfad590
  $tc'FromWhere :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11351956621400724638##
                   3240966593553954492##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'FromWhere1
                   0#
                   Language.PureScript.AST.Declarations.$tc'FromLet1) -}
a0be22d7037b43bdaee0f20eb717ff05
  $tc'FromWhere1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'FromWhere2) -}
fd0fd1be843939750d93450999a89877
  $tc'FromWhere2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromWhere"#) -}
e7d70121b65210b8d2dcb67c040207b2
  $tc'GuardedExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5094177624083804785##
                   5981977202352423412##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr2
                   0#
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr1) -}
ffca63da605b2681c70befd62efa5087
  $tc'GuardedExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3545c40edb979a9533ddbf73b9ca930a
  $tc'GuardedExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'GuardedExpr3) -}
92b99764b31483d67c90673ff9c70925
  $tc'GuardedExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GuardedExpr"#) -}
c633a75940c471c9b54c1f45c0fe4060
  $tc'Hiding :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3242583972900744773##
                   9531252072302761583##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Hiding1
                   0#
                   Language.PureScript.AST.Declarations.$tc'Explicit1) -}
d583e82f6b412b1c1a433ce48cf12332
  $tc'Hiding1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Hiding2) -}
94a0b85c316f0470f2f1018717d107a7
  $tc'Hiding2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hiding"#) -}
0da80d1044c71af28864e85e3e939f4d
  $tc'HidingImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6920678483263396716##
                   18048140276983616861##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'HidingImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'HidingImport1) -}
55bf5179a8cf2c0afc953e950a35bcc8
  $tc'HidingImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0578678c7f4072349240e4dda81f899e
  $tc'HidingImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'HidingImport3) -}
d19f826dc8315dc2a2ed9286a0b9013b
  $tc'HidingImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HidingImport"#) -}
78eb4a6911f8c8fdd0a7625f079cd24f
  $tc'Hole :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9007878651814830909##
                   18239748603446886388##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Hole2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Hole1) -}
725fc49006d430758c81f18e9be797cc
  $tc'Hole1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f6440f2743a2f9c467eb87879f7a87e7
  $tc'Hole2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Hole3) -}
0cae695d053d0cf636342a8dd2747d11
  $tc'Hole3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hole"#) -}
6f57e4f2f98f0450a1b72df21d9d6801
  $tc'HoleInferredType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9256751268555062280##
                   8357481415038710344##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType1) -}
cbfd7fc74f8e2bcd24e10e9142a2b017
  $tc'HoleInferredType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b3dd093ecc82dcbf8bdfafc47c41becb
  $tc'HoleInferredType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'HoleInferredType3) -}
ff4073e15e5066fc649beaf7693bbbd3
  $tc'HoleInferredType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HoleInferredType"#) -}
42d017303f5152a9e3a1445e228f9d85
  $tc'IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12620577064357839035##
                   637531446040414215##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IfThenElse1
                   0#
                   Language.PureScript.AST.Declarations.$tc'BinaryNoParens1) -}
8a4e6b6aa93dde895011d7821ed6c4ab
  $tc'IfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IfThenElse2) -}
cf32f33ef613c6ec1338540d870cee87
  $tc'IfThenElse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfThenElse"#) -}
b0238b30356494d70f34569cbd15d02e
  $tc'Implicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3656794626362635713##
                   17874716288654610927##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Implicit2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Implicit1) -}
66c5b9ed10d8b1d751c05c642fbdec49
  $tc'Implicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f287583292b863c692e1af137df1fc23
  $tc'Implicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Implicit3) -}
a24316ba17f917409077a2df470ef220
  $tc'Implicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Implicit"#) -}
2a7ac42cbb7809e1727fe5b4ee79ce85
  $tc'ImplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6630043029805027087##
                   14873967661203407180##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'HidingImport1) -}
dfbe085e71b8f7f2a5b4d9acb4976085
  $tc'ImplicitImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitImport2) -}
253bae3839794ee608893c942484e053
  $tc'ImplicitImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImplicitImport"#) -}
ba903feaa21f3527f1ae0ba788df0024
  $tc'ImplicitQualifiedImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12303219116783588044##
                   1165679344435247715##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport1) -}
5d92ec8eb7ab78e739e39fb591016c85
  $tc'ImplicitQualifiedImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cfdee8734d7f51015dd4ce934adecf00
  $tc'ImplicitQualifiedImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport3) -}
078d6ec03854ad359f1634bcd4a36484
  $tc'ImplicitQualifiedImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImplicitQualifiedImport"#) -}
e094cd90554807ea0c99d3ee79184704
  $tc'ImplicitQualifiedImportReExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8648277852673495706##
                   14343137381005625995##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImportReExport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImport1) -}
9138fa476a46135d2844b4890b570ab9
  $tc'ImplicitQualifiedImportReExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImplicitQualifiedImportReExport2) -}
9e948e17bd58d00a149ce9fe9a9d0265
  $tc'ImplicitQualifiedImportReExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'ImplicitQualifiedImportReExport"#) -}
74d9407aa3be2b43e0fd6388d6550f81
  $tc'ImportDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9538627149455487762##
                   12432942036301083009##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration1) -}
6e57ed36ec3978f3a08632f446bd21f3
  $tc'ImportDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
64da9473f88593ec1eaf8281f214827e
  $tc'ImportDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImportDeclaration3) -}
6dd87b600958882712788fd9aef39a99
  $tc'ImportDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportDeclaration"#) -}
8d23528652dd19c561d1a5a78b1d403a
  $tc'ImportHidingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6857462942473682835##
                   14982756583824911748##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ImportHidingModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
b2729ef22ee7ca2cc57d46bf613d5fdb
  $tc'ImportHidingModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ImportHidingModule2) -}
c33680818f5e4816a6bc1b5cf5982c6f
  $tc'ImportHidingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportHidingModule"#) -}
7f4a67c26e697bf81ae858a0ef4f6a1a
  $tc'IncompleteExhaustivityCheck :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   763517844317965187##
                   7285905145414700578##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
87120dc192e1c34e0e7675579837edf6
  $tc'IncompleteExhaustivityCheck1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
6fe55560e09679a2f59701633d6e9299
  $tc'IncompleteExhaustivityCheck2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck3) -}
789d59682e5c56d1673d5417e4b708bb
  $tc'IncompleteExhaustivityCheck3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncompleteExhaustivityCheck"#) -}
1f71f7bf304e2a1c23ba6b8c0de163c9
  $tc'IncorrectAnonymousArgument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2235381559338399461##
                   16126153955426601774##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncorrectAnonymousArgument1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
79e6a58e55b683a57d7cc97f0f52b117
  $tc'IncorrectAnonymousArgument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncorrectAnonymousArgument2) -}
a8e00e4f6489e3ea2230a6592b88e941
  $tc'IncorrectAnonymousArgument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncorrectAnonymousArgument"#) -}
df5ed932ad9444af7dbeea848301ee5f
  $tc'IncorrectConstructorArity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15418157890514221537##
                   8309303066717160336##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity1) -}
5b8ae5f7bc263c416991a2353fe46ce8
  $tc'IncorrectConstructorArity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0858ddf606f80027e1e89829b5b30e0b
  $tc'IncorrectConstructorArity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IncorrectConstructorArity3) -}
e818531dc14d609a6a57b2b083f9034a
  $tc'IncorrectConstructorArity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IncorrectConstructorArity"#) -}
9fec7c79e4fb5d1a5bb37ca7c92962bc
  $tc'InfiniteKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13771313696538770994##
                   12652379917676242431##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind1) -}
067b641109cbec0acaa8656979012d59
  $tc'InfiniteKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
614906ecf817b2ed51762d736c97d6d3
  $tc'InfiniteKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InfiniteKind3) -}
2f34bfe5db3dbf4c1cd0a185543ead1b
  $tc'InfiniteKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InfiniteKind"#) -}
bb603d219c470c36f935c1e92f7d3aef
  $tc'InfiniteType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9505580392174821420##
                   5593539360344355204##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InfiniteType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
0d935142a0c4cd71ba7ee624c5200119
  $tc'InfiniteType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
745f22420d3b4b583c1ebb5be130d804
  $tc'InfiniteType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InfiniteType3) -}
5d50850be14573e4876565fbc8d51a3b
  $tc'InfiniteType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InfiniteType"#) -}
ba14fd0c94ffec3380e2d0a2ccda2663
  $tc'IntOutOfRange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14205412115762623827##
                   16233728441446633480##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange2
                   0#
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange1) -}
fbde28f5cf03d599c1a92f1f979619d5
  $tc'IntOutOfRange1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bbdf119c3a65fc53457e67112779025f
  $tc'IntOutOfRange2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'IntOutOfRange3) -}
5947825c0e9df920bbe831f3d558a09d
  $tc'IntOutOfRange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntOutOfRange"#) -}
c3cc295df1fbdbfd9cfc892f9ff2e622
  $tc'InvalidDerivedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   148832124977092441##
                   12993278016785247464##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance1) -}
23913f28d8a8acbc20a38d9999b6103c
  $tc'InvalidDerivedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
18229e2ab81c3f25aacd8be6e1ca151f
  $tc'InvalidDerivedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDerivedInstance3) -}
d046b1ae307576f8b5cd4ec48560ed79
  $tc'InvalidDerivedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDerivedInstance"#) -}
50f6b15404f48a1a2d124d73fdd7fe10
  $tc'InvalidDoBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16398515347326637068##
                   8717302963411049382##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDoBind1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
6b7b880114a56f209af54ea813df3240
  $tc'InvalidDoBind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDoBind2) -}
27d8b0eed72de6ad734f10e95950ab9b
  $tc'InvalidDoBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDoBind"#) -}
a4b4d695c69231ba9205d7d04c08477b
  $tc'InvalidDoLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10623145429651807152##
                   11120774884980862176##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidDoLet1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
2f05cccec84167964f57955c2782ad10
  $tc'InvalidDoLet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidDoLet2) -}
f4bf07d5c710efcc0100a14e92d700b9
  $tc'InvalidDoLet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidDoLet"#) -}
f6c751f784c7eccafa70886baeba34f6
  $tc'InvalidFFIIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11494321555587850455##
                   17592991931388532728##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier1) -}
356d6b27696699be35004581d09a156e
  $tc'InvalidFFIIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eb19008c3b64eac609045c1dbda9886c
  $tc'InvalidFFIIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidFFIIdentifier3) -}
36550905c4e2ccd2746300e6f486e7fa
  $tc'InvalidFFIIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidFFIIdentifier"#) -}
c3cc8717eddf355110f628d0fa6d72ff
  $tc'InvalidInstanceHead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16640730721043374845##
                   15486776134365557167##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidInstanceHead1
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
38e43f1d672b224f231d6be69328b6dc
  $tc'InvalidInstanceHead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidInstanceHead2) -}
a28437250ea2ad4911f2bb98c929c06f
  $tc'InvalidInstanceHead2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidInstanceHead"#) -}
cae651d84c8340fad5472706f9b3f6aa
  $tc'InvalidNewtype :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9959275360213841998##
                   3480840650070940651##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtype1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
e80f189ba4cb62ea90fd351fcc67c0de
  $tc'InvalidNewtype1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtype2) -}
df4c06e0911e41774176e044fdf099bc
  $tc'InvalidNewtype2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidNewtype"#) -}
1836cd86adb5141715294e64b8581aae
  $tc'InvalidNewtypeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9335446867289848351##
                   14863948085724743153##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtypeInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
6b467a1b886007f368d251ab6a2f16cc
  $tc'InvalidNewtypeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidNewtypeInstance2) -}
6c6c19152b39d4060537d20e1de07223
  $tc'InvalidNewtypeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidNewtypeInstance"#) -}
2fba3bd5c1b1aaefd16d819319aa5c8e
  $tc'InvalidOperatorInBinder :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   879368446381017645##
                   17268454935396661712##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder2
                   0#
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder1) -}
535d89b6af1e2822f7ff9c665255d36c
  $tc'InvalidOperatorInBinder1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f4e93de1113ffd4fc3a8a51b91e8717d
  $tc'InvalidOperatorInBinder2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'InvalidOperatorInBinder3) -}
7ee646a7c38a99323263909dd63324e3
  $tc'InvalidOperatorInBinder3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidOperatorInBinder"#) -}
07ebc4f7f8d9153faf11a5b04f6fdcdc
  $tc'KindHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10064047603926476659##
                   3741482752591815497##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
a51da9d8759c183324b28ea950dd525b
  $tc'KindHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindHint2) -}
e33754bce1a05d751d16fcc0efa50cc0
  $tc'KindHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindHint"#) -}
6341e838893d7b309707b24d1f356a25
  $tc'KindRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13524459376749934577##
                   513167761072139454##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'KindRef1) -}
5a49551b948bf67fe795281edfec33f7
  $tc'KindRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e6f86f22caec726f13658f3a1431071b
  $tc'KindRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindRef3) -}
f91aca7f841230cb3e37c0fd6906e7b4
  $tc'KindRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindRef"#) -}
d75b0f5a6320fe578d53b8ec7b115c9d
  $tc'KindsDoNotUnify :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9718716045060434977##
                   1974601876931740438##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify2
                   0#
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify1) -}
282ee3d23515e5ac7ce9c527b9eb41d7
  $tc'KindsDoNotUnify1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3faaa76207d3b64f023e0db173ca8185
  $tc'KindsDoNotUnify2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'KindsDoNotUnify3) -}
64c92a27e091f366303494eaac7a1841
  $tc'KindsDoNotUnify3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindsDoNotUnify"#) -}
41578061e7e7f22d0fabcbea820d63af
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4378963200456174447##
                   16502089286792220262##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Leaf2
                   1#
                   Language.PureScript.AST.Declarations.$tc'Leaf1) -}
05673b9e4db7480ae9d61869a3995549
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7b2c175e2a48e043ad1ba25d3ba829c
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Leaf3) -}
dc91fe9f9ad44c69cf87fcdae19927ab
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
014c9eb0d5488b17df9ab9d1a92552a8
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13719042994312770970##
                   6529678822518965482##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Let2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Let1) -}
ae7a0751c43a44ce8ef4c4e7c003eb22
  $tc'Let1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1be2b4d56a94138cde53091d2a72482e
  $tc'Let2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Let3) -}
75b53f7fc11d98d9ca2a2f6c315c24fc
  $tc'Let3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Let"#) -}
bb8eb28cadb697042abaadfeff4818e8
  $tc'Literal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9522213082747446583##
                   13062856175240878097##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Literal2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Literal1) -}
31270a32e3eb717875876a6fe34ad4d7
  $tc'Literal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b85e090f1b0854b5df6acadefcadc1c1
  $tc'Literal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Literal3) -}
940f29e9e0858e9c08f7fbcb1013b02c
  $tc'Literal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Literal"#) -}
3ae56d2fe0753b8993d9fb55f361c47f
  $tc'MisleadingEmptyTypeImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   182259350805482674##
                   11015067898316177630##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport1) -}
dbcbbee1324aa165e8840da0bf738ba8
  $tc'MisleadingEmptyTypeImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cc425e8e97bece8559da9af99001558b
  $tc'MisleadingEmptyTypeImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MisleadingEmptyTypeImport3) -}
ea73738ee6c29630c5b265e8dcdd9833
  $tc'MisleadingEmptyTypeImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MisleadingEmptyTypeImport"#) -}
f8fd1bd8af20b5936c7f7da325918129
  $tc'MissingClassMember :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8388038322230787133##
                   14357090322569489468##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember1) -}
74bbaa85ea9beb7994353649bf903133
  $tc'MissingClassMember1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
36b657515ad0c1bd820e12f2990f26b2
  $tc'MissingClassMember2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingClassMember3) -}
93c9ce042849a30e11d7c172f449b3db
  $tc'MissingClassMember3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingClassMember"#) -}
e700f66dbf89bc7803cbb75608e7e829
  $tc'MissingFFIImplementations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15803164874620448098##
                   5697941270524309934##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations1) -}
fc590f8c134412be9ebca09aeebb0636
  $tc'MissingFFIImplementations1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9fbe5feadac8abddae2152a7fea6df0a
  $tc'MissingFFIImplementations2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations3) -}
83da8be8d8ae1e87f758d760a8a373b5
  $tc'MissingFFIImplementations3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingFFIImplementations"#) -}
37d71c1928df8f78a471ebb2d7010afe
  $tc'MissingFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5873393208594047961##
                   18293534673508303873##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingFFIModule1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
eddf6f9d177aacc2aa62709a370a0bdf
  $tc'MissingFFIModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingFFIModule2) -}
307f152e7e58316270f817a09b549eab
  $tc'MissingFFIModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingFFIModule"#) -}
689a847d4fcf24091e70d4d355c914de
  $tc'MissingNewtypeSuperclassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17635459841495782107##
                   8681481753531037471##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance1) -}
59421b4dbc7a30b9abc87c477924f2b5
  $tc'MissingNewtypeSuperclassInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
000b37b2bf85390d129e3af9d15a8941
  $tc'MissingNewtypeSuperclassInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance3) -}
c00552ec952fff741fc9c47010ffa8ed
  $tc'MissingNewtypeSuperclassInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'MissingNewtypeSuperclassInstance"#) -}
496b57f843affc4b003d8cf77423b3fa
  $tc'MissingTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10407115129961709570##
                   17726855366132611159##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MissingTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotGeneralizeRecursiveFunction1) -}
752bfa44fbc8699b7dd7fd37cd8b0619
  $tc'MissingTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MissingTypeDeclaration2) -}
297072159750d823a7e969028e24fd69
  $tc'MissingTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingTypeDeclaration"#) -}
dafff6df4e24d49b82618c09a45365ce
  $tc'MixedAssociativityError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10294680107283548869##
                   1773980656420106538##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError1) -}
df9d0b2c85e7bff7a363854388dd8004
  $tc'MixedAssociativityError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ddfaebbb15031e4555619b06c1c793a7
  $tc'MixedAssociativityError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MixedAssociativityError3) -}
ba3a1beb0f7b0f008f6f88bda154f739
  $tc'MixedAssociativityError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MixedAssociativityError"#) -}
5a801be86290b458c7e62c4150b5754d
  $tc'Module :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5995342028101141135##
                   17184851212115357523##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Module2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Module1) -}
46d1e6a6c1f586fe3cb4a04931a0300a
  $tc'Module1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
39bb4e3b6fa2a2a6fdbca1a21f8a5e09
  $tc'Module2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Module3) -}
85b045335e5941b1c560636ac8cc1cfd
  $tc'Module3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Module"#) -}
3ad57c94740cc143e38a16dcd6bf6d0f
  $tc'ModuleNotFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14382498600569746844##
                   17336864207955514813##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ModuleNotFound1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
fc1611c7ef3a6ac78fbb0d519799853a
  $tc'ModuleNotFound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ModuleNotFound2) -}
456e02fe4e78b33ae9376ff4b3e680f2
  $tc'ModuleNotFound2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleNotFound"#) -}
adfeffdd1c1d349bbd04bcf010a93a77
  $tc'ModuleRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11511886551788833582##
                   7012839075708560825##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ModuleRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ModuleRef1) -}
2382e07951bde2302b76a4116f6a1f0c
  $tc'ModuleRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c5e31f0d4a6330e2a61946848fe063b3
  $tc'ModuleRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ModuleRef3) -}
351dee3d0dd05ec394de6d2c1bb1dfee
  $tc'ModuleRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleRef"#) -}
ae4a2a3028293dc09f15d7b7d4b5ee56
  $tc'MultipleTypeOpFixities :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8163044024253970755##
                   6845684469711681281##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities1) -}
c7cd69367e96073fe4a0bdad66c795d1
  $tc'MultipleTypeOpFixities1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a346eea32074c48dda0f07cf210ae83
  $tc'MultipleTypeOpFixities2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MultipleTypeOpFixities3) -}
48802e286e21c6ee5481af1f3fda45be
  $tc'MultipleTypeOpFixities3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleTypeOpFixities"#) -}
ae4bc6ee43a13023d964ea2bc63e873f
  $tc'MultipleValueOpFixities :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14499000682887022772##
                   2323757342881764085##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities2
                   0#
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities1) -}
ca76b14c80cf293c29b0bb46415107d2
  $tc'MultipleValueOpFixities1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cceb2368865046e55aba084d222d55de
  $tc'MultipleValueOpFixities2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'MultipleValueOpFixities3) -}
7e9af8574440f7f80c46ee20f8c1cea5
  $tc'MultipleValueOpFixities3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleValueOpFixities"#) -}
d262d09f475b079cce30e9403065eccb
  $tc'NameIsUndefined :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17397148894533560422##
                   6386389641888375175##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NameIsUndefined1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
42e3fd0800e8f0877dde7b64cc6d39a5
  $tc'NameIsUndefined1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NameIsUndefined2) -}
b15be4ed45dc7f723b091a806966533b
  $tc'NameIsUndefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NameIsUndefined"#) -}
0d435cdc44617e9af81a28c9334cd5fe
  $tc'NewtypeInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15207664931909283134##
                   14502267268252717042##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DerivedInstance1) -}
e2a1ffd144444def385d76dd3de9cbe5
  $tc'NewtypeInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstance2) -}
6fcbb86b8b92339b6d6a07b7ca7ef6bd
  $tc'NewtypeInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeInstance"#) -}
008e3779d6a970f658f85e9395ca3294
  $tc'NewtypeInstanceWithDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15739693204132867740##
                   18138651980371069885##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary1) -}
f6e79a17f56f76309eb58973d62066f5
  $tc'NewtypeInstanceWithDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6f45ec92f87e1b7d81439118c3393e82
  $tc'NewtypeInstanceWithDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NewtypeInstanceWithDictionary3) -}
d6eded168b254046462c51d048558e54
  $tc'NewtypeInstanceWithDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeInstanceWithDictionary"#) -}
93cb77d68119b91cbc6c43c441b0b0c0
  $tc'NoInstanceFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10196045130587571031##
                   12769441057926180552##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound1) -}
bf41abce72e07c1abf48d1e28f846288
  $tc'NoInstanceFound1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
656066987bfdc3a7b017fad49672aadf
  $tc'NoInstanceFound2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NoInstanceFound3) -}
2dbc23c74f8eb0862c97d6b8ff9a5b75
  $tc'NoInstanceFound3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoInstanceFound"#) -}
f9809475c352e19ff519204d3a7eda4e
  $tc'NonAssociativeError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1841551076518094366##
                   15610514096296425376##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError1) -}
3e487f85f3e2a562f5e2a92b36129ff3
  $tc'NonAssociativeError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
565eb16a8eab843a1fe1b935f193ee77
  $tc'NonAssociativeError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'NonAssociativeError3) -}
5b67a6c98143068814c0011cf72fbab7
  $tc'NonAssociativeError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonAssociativeError"#) -}
a5231e9120c2282cd3596da64ead367d
  $tc'ObjectUpdate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10278921402616594002##
                   16986616870851834225##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate1) -}
fd356f2f2a34cd43b326fd0e5b2935b2
  $tc'ObjectUpdate1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c7b167e312cdd6f4b47c8dfc30cd5995
  $tc'ObjectUpdate2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdate3) -}
78e4591613c29e24c27057e47912bc4e
  $tc'ObjectUpdate3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectUpdate"#) -}
8d83a785ff3669af613d8cfdab542c0a
  $tc'ObjectUpdateNested :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5841369871317146248##
                   17339375614576422770##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested1) -}
ee347f440e66971ea3dbdde1cda43d4b
  $tc'ObjectUpdateNested1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cf6934c952c5f2f06d47abbb30ed9b1f
  $tc'ObjectUpdateNested2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ObjectUpdateNested3) -}
b1d5ea370312c29b92ab9f007bdf477a
  $tc'ObjectUpdateNested3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectUpdateNested"#) -}
c6600218593e65b2426fb524bb61f5bc
  $tc'Op :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   151190981799281628##
                   6775051480312087232##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Op2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Op1) -}
f3067096475087da6afad6c8e391ceff
  $tc'Op1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a37bb3288790787b70e3385030a719ac
  $tc'Op2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Op3) -}
aa45dbae5dbf965c4fa1df922e33e420
  $tc'Op3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Op"#) -}
e0a7e2619c242fc5a749bb9f522b3a87
  $tc'OrphanInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17122248123594635807##
                   13629554373873468500##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance1) -}
501a577d3103d8e33be12e91778b568d
  $tc'OrphanInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
43eb42fba90029a3dcee27e900b0bbda
  $tc'OrphanInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OrphanInstance3) -}
7737f9ff919a1ce39a21ce1ad1f04f80
  $tc'OrphanInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OrphanInstance"#) -}
4de17aa5bc1975a533814c93917fafcc
  $tc'OrphanTypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7229338209007791862##
                   12326609896857185229##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OrphanTypeDeclaration1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
d575a66ae91f0579fcae6fed1d6cba17
  $tc'OrphanTypeDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OrphanTypeDeclaration2) -}
385cbd6d2dff3519369f8c26713bc553
  $tc'OrphanTypeDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OrphanTypeDeclaration"#) -}
5685cdb52fd955334a7b3c73f0c959df
  $tc'OtherHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   759035115825182274##
                   11168164271618684102##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OtherHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
f210ec6a533aab0076f473febb33030e
  $tc'OtherHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OtherHint2) -}
0b38a1a235039e0872d7520941da2fcc
  $tc'OtherHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OtherHint"#) -}
a5de0da351fc118609aa496b27be1aa1
  $tc'OverlappingArgNames :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11970052584824930175##
                   5630524667861914067##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames1) -}
0a1e1cc3b116d931418937c5eee878ee
  $tc'OverlappingArgNames1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7d8756e5cd6960f0a9a59dc72e4b0be4
  $tc'OverlappingArgNames2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingArgNames3) -}
2e21183c19eec373eb054457ed71c38b
  $tc'OverlappingArgNames3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingArgNames"#) -}
7738b3532557b575053a1cd02ed5c061
  $tc'OverlappingInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2955423896180484839##
                   17746403766374296767##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances1) -}
8eccf0cfac4aa8f7fdfd4f6648777b1f
  $tc'OverlappingInstances1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b7af97f09c4cee95016cc262ef20c803
  $tc'OverlappingInstances2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingInstances3) -}
e15b3eac4f0ecdbb094b60b3516079af
  $tc'OverlappingInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingInstances"#) -}
06c105ccbf8cdaad7e94c09b7fe4c69f
  $tc'OverlappingNamesInLet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6232810383146825117##
                   907928134573529741##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingNamesInLet1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
e3cb370d7a811c3c89f54ccd0cfca8a3
  $tc'OverlappingNamesInLet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingNamesInLet2) -}
45fb01b98645dc095c8ab151d0624bf5
  $tc'OverlappingNamesInLet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingNamesInLet"#) -}
914eeb943d982a02b0f82a8675df4d42
  $tc'OverlappingPattern :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2472828794094126050##
                   13651881613596413456##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern2
                   0#
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern1) -}
4564ad40c8aaae9655660f34081c2d28
  $tc'OverlappingPattern1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
410bde229bb5cab3062aafb19b4fcd8e
  $tc'OverlappingPattern2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'OverlappingPattern3) -}
8e6ba6ff5cf42448cecd3a7fe2dcbcbb
  $tc'OverlappingPattern3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OverlappingPattern"#) -}
b5fcc8e2f28ab8a5e6160140c5049404
  $tc'Parens :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5735859737035290325##
                   3438166206716650997##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Parens2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Parens1) -}
b1215a75d5baf490e6472bd14548cab0
  $tc'Parens1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
827c6fb4a4696418e2e62d9fc5d06674
  $tc'Parens2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Parens3) -}
af8bf57ecc2f98dc8f49b67fd0eeee45
  $tc'Parens3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Parens"#) -}
f1dcc19766d678742eb4fefe48ea8775
  $tc'PartiallyAppliedSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1397845078113205815##
                   8072548953956084701##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym1) -}
045872a33cdda6f5757bc6a5347d2b26
  $tc'PartiallyAppliedSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd947915234f5c8dc98d9235b7bcacb3
  $tc'PartiallyAppliedSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PartiallyAppliedSynonym3) -}
126690aaec9dbf3ac8835f8a54ff5c88
  $tc'PartiallyAppliedSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PartiallyAppliedSynonym"#) -}
ba21fb52c704ee554fb4285a81ab29da
  $tc'PathTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10762003952252290319##
                   6584263096029188489##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PathTree2
                   1#
                   Language.PureScript.AST.Declarations.$tc'PathTree1) -}
ece28ff2f1595d6459344f50cda660c8
  $tc'PathTree1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f9333e159a742617e266dfecd3b25938
  $tc'PathTree2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PathTree3) -}
f062dd65bbc03773c5ba13bfe0bed6b1
  $tc'PathTree3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PathTree"#) -}
65149b4d848d7203be9fa30cdb0d630c
  $tc'PatternGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18210629347076791130##
                   7718887845272386414##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PatternGuard2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PatternGuard1) -}
a3cafa22be19a0186812373db9b381ef
  $tc'PatternGuard1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0998796fc5a59a98482c3557bae5f2e7
  $tc'PatternGuard2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PatternGuard3) -}
136232362571b3d7e7d8bf5f339db6e5
  $tc'PatternGuard3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PatternGuard"#) -}
eddd25aeda620f1a7746b43ed963355c
  $tc'PositionHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8184893896512976576##
                   10713834590266443947##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
4f092fe96e651285b5fb416c08444a41
  $tc'PositionHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionHint2) -}
5c4a46a44db26e5abcbd685989f023d2
  $tc'PositionHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionHint"#) -}
3c8d975ca9ce35c8fa969908baa9bd97
  $tc'PositionedDoNotationElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11757566317610058353##
                   754898157249967157##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement1) -}
7f78ceba8ba1f5aee70de19e15bbfabf
  $tc'PositionedDoNotationElement1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f03456dcf21d199414388b41dc66d3c2
  $tc'PositionedDoNotationElement2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedDoNotationElement3) -}
e822984f4877df85bbab795391c27a92
  $tc'PositionedDoNotationElement3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedDoNotationElement"#) -}
5b6f2b6ff129869841451ea406b68979
  $tc'PositionedError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11141082146420690388##
                   581941704337796122##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedError1) -}
6a2130ec82e07088db20d960f4a36e43
  $tc'PositionedError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
72de2fba4ce839933ad2716d5af2beb2
  $tc'PositionedError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedError3) -}
4d55c12224f02096e31cb6da6a435670
  $tc'PositionedError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedError"#) -}
2e864232126a488517e5d8d87cfdd37f
  $tc'PositionedValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12821767490403927021##
                   11162666957110197359##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PositionedValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'PositionedValue1) -}
b9f734251de28c5e38dbba20fa27ad8e
  $tc'PositionedValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a21132581988020e227a9a07a1fb341
  $tc'PositionedValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PositionedValue3) -}
6bfb9d985d48d96b52e7e52ee4737a9a
  $tc'PositionedValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PositionedValue"#) -}
e24cbe5c70a19676b5905b8ca090f520
  $tc'PossiblyInfiniteInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9361908340624932824##
                   12619933284467649386##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PossiblyInfiniteInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDerive1) -}
922c571bd6a480004b2637592f364b53
  $tc'PossiblyInfiniteInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PossiblyInfiniteInstance2) -}
a4c402f83a0a04ce2e81da949bb908ad
  $tc'PossiblyInfiniteInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PossiblyInfiniteInstance"#) -}
718ee19b94e926ec58eba9eefcb28476
  $tc'PropertyIsMissing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9328454857754294866##
                   3562525401289454118##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'PropertyIsMissing1
                   0#
                   Language.PureScript.AST.Declarations.$tc'AdditionalProperty1) -}
2fc63cded08685afe32a8b24bdce38b4
  $tc'PropertyIsMissing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'PropertyIsMissing2) -}
0b02d4593bb637cd81768ea59653ed83
  $tc'PropertyIsMissing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PropertyIsMissing"#) -}
54318a0a1901ba28de8203f1d4cd79bc
  $tc'ReExportRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12090644038256674641##
                   13113534316099776271##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ReExportRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ReExportRef1) -}
35b58f489545caedde1e87dc1a543dc4
  $tc'ReExportRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
596a9c7ef79441fb0a69765cb813c1dc
  $tc'ReExportRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ReExportRef3) -}
cdc3fb06c22f945f29ac11692bd90c9c
  $tc'ReExportRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReExportRef"#) -}
063c1d238a5a57be5cb0dbceeb2c11e2
  $tc'RedefinedIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   326075056700101979##
                   5478214351223234725##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'RedefinedIdent1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
1fdc357133e9c1c40c19fae708a34933
  $tc'RedefinedIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'RedefinedIdent2) -}
d1f47ee4a22ee685c177ca091fd23d72
  $tc'RedefinedIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RedefinedIdent"#) -}
34566b0857f559966edf55de47b473e9
  $tc'ScopeConflict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14659227540657607216##
                   13586100549303728378##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict1) -}
e777c0b15db69f04254c1a1c68bf3e56
  $tc'ScopeConflict1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1519cc236a2e853c1c4978768fea830b
  $tc'ScopeConflict2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ScopeConflict3) -}
472732de96a2a0d43e0a0ef45bf51b4f
  $tc'ScopeConflict3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScopeConflict"#) -}
b5d5604d67f284fa488464054a8c76ea
  $tc'ScopeShadowing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12723745442597241239##
                   2020238636369411419##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing1) -}
7df8b06b6256e423f990d338b3bf64cd
  $tc'ScopeShadowing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c581ce9cd53d288a0a528164d05bd906
  $tc'ScopeShadowing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ScopeShadowing3) -}
1b92457187ec9c33c3672a4c08585443
  $tc'ScopeShadowing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScopeShadowing"#) -}
7852f03a37acefc08512f65d7f3aded8
  $tc'ShadowedName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9437538024144756308##
                   12311288305585776146##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ShadowedName1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ArgListLengthsDiffer1) -}
a1374fc18ad119bf30c29db41a0293bf
  $tc'ShadowedName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ShadowedName2) -}
ff76d4d9ffbecfa062dcdb0dc816e8c4
  $tc'ShadowedName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShadowedName"#) -}
2976693e6612d551e1cba69b8c5ede71
  $tc'ShadowedTypeVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12491802825647734797##
                   8577734109057805038##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ShadowedTypeVar1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
d47a911743811eecf7800daeb27bd77b
  $tc'ShadowedTypeVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ShadowedTypeVar2) -}
3fd2408aa1fd9d88f34125c9491b4ed0
  $tc'ShadowedTypeVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShadowedTypeVar"#) -}
382b49d5bd714ae9877cd4b69717bf42
  $tc'SolverHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16424222406702057967##
                   3598953713647192588##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'SolverHint1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CheckHint1) -}
0d094e19d1dcc3c0fe58d848c2a4e407
  $tc'SolverHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'SolverHint2) -}
31a8760833eaa40f2d26d2471b996741
  $tc'SolverHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SolverHint"#) -}
d806799d3c13cae4df33355759dec4fa
  $tc'TSAfter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1385888468629662509##
                   9147295609721608863##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TSAfter2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TSAfter1) -}
d347bee09b070593ebb7d3c57d0b1cd7
  $tc'TSAfter1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
860266d0e9d09255912211116abc8284
  $tc'TSAfter2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TSAfter3) -}
9a4fe0042a86e93f49469db93b199dae
  $tc'TSAfter3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TSAfter"#) -}
c36c87cad565894a642931ae872a8d8a
  $tc'TSBefore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10413043126672069135##
                   7133640076358777227##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TSBefore2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TSBefore1) -}
edb2b16ecc24c8c7f92430837dc2f7d7
  $tc'TSBefore1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f952a6bfdb0e6e9b3438e994e01971f
  $tc'TSBefore2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TSBefore3) -}
be43c1479efc10c68573f7580d29ea6f
  $tc'TSBefore3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TSBefore"#) -}
cf7933c18e4534cfd7104a1a0e30ff48
  $tc'TransitiveDctorExportError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   858250170450591691##
                   8588910539369741807##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError1) -}
72000beb02ea9fca06c790ea903526a8
  $tc'TransitiveDctorExportError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d8472304b7e3d541bab478360ee133c1
  $tc'TransitiveDctorExportError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TransitiveDctorExportError3) -}
eecf70354c688ffafa7be76507ccd010
  $tc'TransitiveDctorExportError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TransitiveDctorExportError"#) -}
576e7ff8ca34c0e7249da394702ad78c
  $tc'TransitiveExportError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16439873747096539269##
                   5083968610431675996##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError1) -}
8054b70d344d4d22c4dedc1d476ee0f5
  $tc'TransitiveExportError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1ae87622204d9ce717cacd6848716d77
  $tc'TransitiveExportError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TransitiveExportError3) -}
a0f52e7008e1384268bfde24bf2e2eec
  $tc'TransitiveExportError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TransitiveExportError"#) -}
19518bebea1a3a645b888e00085ab4c7
  $tc'TypeClassDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15761962373431629917##
                   16181078156752265698##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration1) -}
e27bf2765393068c9aa692fb60bc9203
  $tc'TypeClassDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ca1b487843dab04ae1d1e6a876e37bff
  $tc'TypeClassDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDeclaration3) -}
34a7ad13f6f22255aacc1b87201233db
  $tc'TypeClassDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDeclaration"#) -}
742638361f07f56831fdd732d9e07fc1
  $tc'TypeClassDictionary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6118453126042452084##
                   11209772647129910511##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary1) -}
1724e1972996481922cfb035a361f9de
  $tc'TypeClassDictionary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4b41de325120236166b6a17225c6c74c
  $tc'TypeClassDictionary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionary3) -}
145b022a9bb207229967533db952f3a4
  $tc'TypeClassDictionary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDictionary"#) -}
344bc58613ec3455965fce8752742544
  $tc'TypeClassDictionaryAccessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18091683728436227605##
                   9924907636435434806##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor1) -}
7efff3e5e064bef365e70a006d1ca1c6
  $tc'TypeClassDictionaryAccessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dea2bfd91d459ede4c916e7e67df0b4e
  $tc'TypeClassDictionaryAccessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryAccessor3) -}
fd7d9d20780f762b0a0cb90be4c35029
  $tc'TypeClassDictionaryAccessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassDictionaryAccessor"#) -}
3928966fe1ca387902921262892aa2c2
  $tc'TypeClassDictionaryConstructorApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16500155266827184225##
                   9282039546736149116##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp1) -}
eb985c5943166c45a6553ff619dcf286
  $tc'TypeClassDictionaryConstructorApp1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
484add7472df4bb0d80b9acba62c0dd1
  $tc'TypeClassDictionaryConstructorApp2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassDictionaryConstructorApp3) -}
ba7e5f2b714aba20a797f9fa8ca15b77
  $tc'TypeClassDictionaryConstructorApp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("'TypeClassDictionaryConstructorApp"#) -}
321eb4f12b287c574bab3270d69c0d32
  $tc'TypeClassRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10677016020359232796##
                   12556502509054254900##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef1) -}
47f2457e7dad66099cbf7aa01a40b0b9
  $tc'TypeClassRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4dc1d6262a10072b946ba569305c7b0e
  $tc'TypeClassRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeClassRef3) -}
a089c4580000089676687b61a5ec9884
  $tc'TypeClassRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassRef"#) -}
c7cd37d1694abad4aced195fb03509cb
  $tc'TypeDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17912434290682030907##
                   34447163300367339##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration1) -}
1ebc49c249b479e1a8b59511cd0752d6
  $tc'TypeDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6e9892262b5635896fa724583d9cc4bd
  $tc'TypeDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeDeclaration3) -}
eb38ead8b8f46af418cd954a6488b4a2
  $tc'TypeDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeDeclaration"#) -}
97cb11f31ffe0c670f21ae61093f46be
  $tc'TypeDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13817613281504913287##
                   9833520862473410880##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData1) -}
9cfa3fc4693ef44e67e73dca7456c570
  $tc'TypeDeclarationData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e07e9fd9ed2d8981d176af1176849679
  $tc'TypeDeclarationData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeDeclarationData3) -}
a968c53f92d4679c303984dbbabd2f4b
  $tc'TypeDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeDeclarationData"#) -}
fc7f79955c7ec4c3b4e2d029d59469e8
  $tc'TypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7054187199467562363##
                   1050571804815824810##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeFixity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeFixity1) -}
e8b4f4ef64c1f22f25a5a3792a10891f
  $tc'TypeFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d75154a7d337e1a2f566841bfeb16a91
  $tc'TypeFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeFixity3) -}
a9af8ca333cfb4856b3b706077cfd830
  $tc'TypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeFixity"#) -}
3009e4644207d772ea97905dce42d41d
  $tc'TypeInstanceDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2647103610253038862##
                   6577084887616837444##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration1) -}
98a8bc92c8f6bad70f8c6c97da584812
  $tc'TypeInstanceDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
afb2282b3af34e7e338c1e6a0dc44577
  $tc'TypeInstanceDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceDeclaration3) -}
a0cb9ed572f9078c922c7615c76ac41b
  $tc'TypeInstanceDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeInstanceDeclaration"#) -}
6418f97289cc6aeb6a80fd14be6b65b0
  $tc'TypeInstanceRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14639773741348362344##
                   1773437576973359433##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef1) -}
706fd4fe04233d056a1a195be4b42123
  $tc'TypeInstanceRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a338f3e6011df2d6d19218e5d546fec4
  $tc'TypeInstanceRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef3) -}
432b649609b24d503bb1eee17d59650f
  $tc'TypeInstanceRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeInstanceRef"#) -}
50bcf233495acf5847209c3437fe268c
  $tc'TypeOpRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11082285491785127263##
                   15063318968166769579##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef1) -}
4f2d74428fcd2c33cf22900ba74048b5
  $tc'TypeOpRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
39bf0b04ff8f39afdfacfc38da702ed6
  $tc'TypeOpRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeOpRef3) -}
48343a05ab01da9dcab33b154a2f7951
  $tc'TypeOpRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOpRef"#) -}
f86dbf8b9f9b9ecd83bd018c2100039d
  $tc'TypeRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6371569449256536093##
                   13160190052281479218##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeRef1) -}
f1df59fb1421f9eb354f30de979b9a99
  $tc'TypeRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5888741f3a77c2dc28e7fff07e40c5e2
  $tc'TypeRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeRef3) -}
879088c90c15b4497643bc1e1b97ad4f
  $tc'TypeRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeRef"#) -}
879c161c52b0e9db26c1ee159c5287e5
  $tc'TypeSynonymDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11012857445817295059##
                   13709260783780753613##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration1) -}
c0389d04e77520c41b0729e7a1545023
  $tc'TypeSynonymDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d1ce08e708d18a7e64445c55f5d15050
  $tc'TypeSynonymDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymDeclaration3) -}
c8a9ad9ca5aab89a693c23be95e17cea
  $tc'TypeSynonymDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeSynonymDeclaration"#) -}
2ee1233f6d53996f6302c57fb9076eae
  $tc'TypeSynonymInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5896118492824091443##
                   7860705566265512738##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'IncompleteExhaustivityCheck1) -}
8dd44fb8ae9471e77a57ac6f67c8afd3
  $tc'TypeSynonymInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypeSynonymInstance2) -}
0d6049e201ff07e7afa8ffa94c6a9d25
  $tc'TypeSynonymInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeSynonymInstance"#) -}
66a625b3bb3005b2974766b49f8bf5be
  $tc'TypedValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7131049649593199783##
                   14408299846151186048##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypedValue2
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypedValue1) -}
bfa7452e802421cf351e00b844de6be1
  $tc'TypedValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d456d8beab5f4b3b7bad990eea68a349
  $tc'TypedValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypedValue3) -}
a080c305478cd6df8011a9299ffec6dc
  $tc'TypedValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypedValue"#) -}
6b4d101861ed4c21192cb5bb9add9db7
  $tc'TypesDoNotUnify :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3670049872654176561##
                   16801966611756642546##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'TypesDoNotUnify1
                   0#
                   Language.PureScript.AST.Declarations.$tc'ConstrainedTypeUnified1) -}
3a1f26d1494d36435ec0baaeca3e3dd4
  $tc'TypesDoNotUnify1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'TypesDoNotUnify2) -}
54d85f40cfc26eda3cfd74dd15efda4c
  $tc'TypesDoNotUnify2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypesDoNotUnify"#) -}
72e053e4975319f81cd7fa3e427ee222
  $tc'UnaryMinus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15876838655642243303##
                   9774363194645447491##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus1) -}
7e7e7da455354d6e557a2aad9072e558
  $tc'UnaryMinus1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
89918e5f16e0f92110fb2e848134ba1f
  $tc'UnaryMinus2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnaryMinus3) -}
fe542204a61b09191047b7d207428f80
  $tc'UnaryMinus3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnaryMinus"#) -}
36b141b2d529a0dc10289f3b603d9359
  $tc'UndefinedTypeVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7002797908266748158##
                   7106492025941671373##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UndefinedTypeVariable1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDeriveNewtypeForData1) -}
b6ea035c7c266d8fb95572c989a22b32
  $tc'UndefinedTypeVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UndefinedTypeVariable2) -}
14a0c5e801b0c571e83ed7db7c3eb130
  $tc'UndefinedTypeVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UndefinedTypeVariable"#) -}
c9103bd88e5c93b98a21bda530d191b3
  $tc'UnknownClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17073940868345307928##
                   17730819428230946468##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownClass2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownClass1) -}
919771f1ad224a7c4f3ed8697cfc4406
  $tc'UnknownClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62a91f37cd7b0df4f70c8ef7b1911a45
  $tc'UnknownClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownClass3) -}
89ff5d0b8174058ac74aa77d851cf3d3
  $tc'UnknownClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownClass"#) -}
8773bb81c8262c5b0d5291ed7c41e79e
  $tc'UnknownExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16294210630122109641##
                   16924973697298272312##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownExport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateExportRef1) -}
816c3e3f3705d17ca012e577823b531c
  $tc'UnknownExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownExport2) -}
2498f71ca6682f51cc626145d982597c
  $tc'UnknownExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownExport"#) -}
5bcaa965bd064292c438facfdf863992
  $tc'UnknownExportDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13883514983514358831##
                   6801395276731037264##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor1) -}
3aafc7e865bc0b8f62c9db723bf7f13f
  $tc'UnknownExportDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1b8f2439385cfc8df9f0d6571d6ef41c
  $tc'UnknownExportDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownExportDataConstructor3) -}
cb64b476f655f2d2520e7d6550d4fc56
  $tc'UnknownExportDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownExportDataConstructor"#) -}
0e92acc94f3ac51074d9c218762460bb
  $tc'UnknownImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15098441303985274673##
                   2093304341383273851##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownImport1) -}
afaa8f74ae009fda606e02dd8e3e11f7
  $tc'UnknownImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2fb53da84c4f480c5af3c70e689b4449
  $tc'UnknownImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownImport3) -}
5f0937194515b320f7f4bc05e56189cc
  $tc'UnknownImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownImport"#) -}
0b2a5dd3a3b9e7166e8f550958a1768c
  $tc'UnknownImportDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14594039342655461461##
                   8694668806349657944##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor1) -}
c2d4628d477b177d440b0a2c84c647f2
  $tc'UnknownImportDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dc53a2734c9db220a24999e3eba8abe9
  $tc'UnknownImportDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownImportDataConstructor3) -}
eafb049a3d0ae39d2bd04236afc79108
  $tc'UnknownImportDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownImportDataConstructor"#) -}
3b7665f1378886a26093bc81f19b49f5
  $tc'UnknownName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8007695209791880181##
                   7694469935204071459##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnknownName2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnknownName1) -}
315389d55e76ea7f1269a54a6dae7b13
  $tc'UnknownName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6b51ab53551ef1ae9ad267c5ad8d6cd6
  $tc'UnknownName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnknownName3) -}
952da32a627e97147265f3218002042d
  $tc'UnknownName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnknownName"#) -}
fca3625d6554c8004e337694c1bb0990
  $tc'UnnecessaryFFIModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5774554245332435737##
                   17562971715528476666##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule1) -}
6f22a0b2799de1718d17dbd10e3ca905
  $tc'UnnecessaryFFIModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5b0e2110830784c1821874eed574ab8b
  $tc'UnnecessaryFFIModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnnecessaryFFIModule3) -}
6b4b239121ee254a3eeeb839c2c864fb
  $tc'UnnecessaryFFIModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnnecessaryFFIModule"#) -}
7597b03a132e46c09a668ff12e539d9b
  $tc'UnusableDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9190354183825306451##
                   7725542280620250708##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration1) -}
5afa728661062849a9c2095aaaf70e87
  $tc'UnusableDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e642b5a43e016b39a4a78069af8f1d4e
  $tc'UnusableDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusableDeclaration3) -}
bac6e1d2d237cd609ea08164fdda4efe
  $tc'UnusableDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusableDeclaration"#) -}
5e5a419a23162ea0708a3667b2f76e0b
  $tc'UnusedDctorExplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3787009009967778313##
                   8671754161978223430##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport1) -}
ccef70538ea67b27bd49f4d33b0e7942
  $tc'UnusedDctorExplicitImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
86f3d6d78e4adfe0e406fc3edfa0aff8
  $tc'UnusedDctorExplicitImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorExplicitImport3) -}
c25d3ef142b9d5b2eedbce5b09966152
  $tc'UnusedDctorExplicitImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedDctorExplicitImport"#) -}
8519f446aa80e025959eeda03eb153fd
  $tc'UnusedDctorImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   255536226438443914##
                   1249539296703542624##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport1) -}
7f451f6ea3349424bf811967ae08ae5d
  $tc'UnusedDctorImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1b308b67199fc4bf4e3b275a2d120b01
  $tc'UnusedDctorImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedDctorImport3) -}
517a4bc0ae8fc920751b0ad6c962be47
  $tc'UnusedDctorImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedDctorImport"#) -}
fa0945638b39b309019d6bf208274212
  $tc'UnusedExplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3999514740418998898##
                   14244869156718504068##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport2
                   0#
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport1) -}
1e6552b5a8d2991205489a1ba4f4244c
  $tc'UnusedExplicitImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
499ac775aa2c30054cc711bbe860657d
  $tc'UnusedExplicitImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedExplicitImport3) -}
bbc9062662427d2ab0830061d0245f82
  $tc'UnusedExplicitImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedExplicitImport"#) -}
0b92d73858e6eff26ce50ff3976f425c
  $tc'UnusedFFIImplementations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12217832365769967164##
                   2024399723280383673##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedFFIImplementations1
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingFFIImplementations1) -}
b2e5d7cf7bfe3784d5243ae5057ad25f
  $tc'UnusedFFIImplementations1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedFFIImplementations2) -}
b4287c476aaed143f58b9551d425e254
  $tc'UnusedFFIImplementations2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedFFIImplementations"#) -}
df6b3356752ca01880b8da32e23a343d
  $tc'UnusedImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7611436055577100399##
                   3602396101325294414##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedImport1
                   0#
                   Language.PureScript.AST.Declarations.$tc'CannotDefinePrimModules1) -}
6afd7d16750f7a21d3700998f8c55b0b
  $tc'UnusedImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedImport2) -}
d549c68fd1391e1dc1751d68c863faba
  $tc'UnusedImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedImport"#) -}
a81963611ef4cf7b0702b7cd8bc4dfb8
  $tc'UnusedTypeVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5702720987162711193##
                   5015147558030046065##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnusedTypeVar1
                   0#
                   Language.PureScript.AST.Declarations.$tc'DuplicateTypeArgument1) -}
503afbcea112e84ef81d8fddc98d550e
  $tc'UnusedTypeVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnusedTypeVar2) -}
ca0f47b2ce907fb2db54773a313f745e
  $tc'UnusedTypeVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedTypeVar"#) -}
4cb6093ae3df5713609a151f70e5d764
  $tc'UnverifiableSuperclassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3482464468799072512##
                   8253553524381171386##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UnverifiableSuperclassInstance1
                   0#
                   Language.PureScript.AST.Declarations.$tc'MissingNewtypeSuperclassInstance1) -}
cf9f6627792125bb966d596e2bd3074c
  $tc'UnverifiableSuperclassInstance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UnverifiableSuperclassInstance2) -}
32a26add7f9eec73ab0d652a3947404f
  $tc'UnverifiableSuperclassInstance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnverifiableSuperclassInstance"#) -}
b864aa304ae9b51c57fe832548f3da3c
  $tc'UserDefinedWarning :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3803612733421150478##
                   12090422508131479650##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'UserDefinedWarning1
                   0#
                   Language.PureScript.AST.Declarations.$tc'InfiniteType1) -}
97fa34508e58f4eba573df05c8f9801d
  $tc'UserDefinedWarning1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'UserDefinedWarning2) -}
c3c951bf541b88ea8362645f4e97cc18
  $tc'UserDefinedWarning2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UserDefinedWarning"#) -}
b1c98f888c67a57abe3f742a8b8044fb
  $tc'ValueDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   521639138263057779##
                   998403808029272567##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration1) -}
49118756adbcbed79b490ae2a71d01bf
  $tc'ValueDeclaration1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6b2629d45b9bfe6fc8bdd80262ae35c8
  $tc'ValueDeclaration2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueDeclaration3) -}
956ea0d663be148ae391905ff528cbc6
  $tc'ValueDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueDeclaration"#) -}
fe9922a2662811e8626c4f89dfeb3730
  $tc'ValueDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15806409504784236533##
                   8338196304584949121##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData2
                   1#
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData1) -}
933577d913c5977a8c697fd30fac766f
  $tc'ValueDeclarationData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9d303a5e10cdb8817b77eee9482f4389
  $tc'ValueDeclarationData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueDeclarationData3) -}
0d7044adebfcf0ac650e222757763e5d
  $tc'ValueDeclarationData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueDeclarationData"#) -}
398dff718a220a7d9c31cf43538475b1
  $tc'ValueFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9097297992807438857##
                   9101631348343113617##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueFixity2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueFixity1) -}
7d89a35997d393a13ec694501c04c654
  $tc'ValueFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
936f8f5df5465758c24d8db1f4a27e60
  $tc'ValueFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueFixity3) -}
5aa88deb4fa5da7b43438d3fc50dfada
  $tc'ValueFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueFixity"#) -}
fabb997adc1063b6cb11f4a14d9cf7d9
  $tc'ValueOpRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12181793440779127431##
                   7571899285477711043##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef2
                   0#
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef1) -}
95946e78297d1f846292a95ec30e130e
  $tc'ValueOpRef1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a1577752abeaceb4083299ac92328aa
  $tc'ValueOpRef2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueOpRef3) -}
f4626445311e65e7059e2550703fabb2
  $tc'ValueOpRef3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueOpRef"#) -}
12fff2875b1f1a1b5bf84e2ac59a4faf
  $tc'ValueRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17517186249995014628##
                   7187564417777196266##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'ValueRef1
                   0#
                   Language.PureScript.AST.Declarations.$tc'TypeInstanceRef1) -}
46a3334c9b7f1a005416d27ab3c82a99
  $tc'ValueRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'ValueRef2) -}
381a8c2a82f2f6c2fd8e87ca1e99d4bc
  $tc'ValueRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueRef"#) -}
8b8228b0697a98a7539685e2306cba8d
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16362968739574422541##
                   2240289420171062207##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'Var2
                   0#
                   Language.PureScript.AST.Declarations.$tc'Var1) -}
9fa00f6e1fe7465b8cd0127cf14a146b
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cc85091333ea7cdff971f1b497a8e02b
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'Var3) -}
78ca590982cfef77f0105a10d3bffae2
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
bb353a4a94cb7685182dba04dbf0b497
  $tc'WildcardInferredType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9580037135541641460##
                   3734936170755125023##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType2
                   0#
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType1) -}
7086450add642f22015657800320c7eb
  $tc'WildcardInferredType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d82644de3f2c0ca25c487f34477dda0b
  $tc'WildcardInferredType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tc'WildcardInferredType3) -}
de1c46da774d126251f641ef87aff868
  $tc'WildcardInferredType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WildcardInferredType"#) -}
753077b9a16b57c310da8971f7b9e841
  $tcAssocList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13722559783712035849##
                   7968818820388266410##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcAssocList1
                   0#
                   GHC.Types.krep$*->*->*) -}
e5f1e5a9a128ecb29b7960c2c43d9683
  $tcAssocList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcAssocList2) -}
8aca7ba942e9b9d2a9067e65aa7ae89e
  $tcAssocList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AssocList"#) -}
4aac91a1aca7d46bd656a1f69717f643
  $tcCaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14557917617018310891##
                   7851894355763455597##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcCaseAlternative1
                   0#
                   GHC.Types.krep$*) -}
175394046761d6c9472d014e107f57cd
  $tcCaseAlternative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcCaseAlternative2) -}
bece7065510a1587ef31af51f79b180a
  $tcCaseAlternative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CaseAlternative"#) -}
9ccf0c60ee6b17c4ee5c71fc5e2ced15
  $tcDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14705920393922027784##
                   8589096839933507394##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDeclaration1
                   0#
                   GHC.Types.krep$*) -}
bfc9a67e2e2666a384284f08d2e1493a
  $tcDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDeclaration2) -}
87042348af9df1e1e7ab7ae1916c7cf7
  $tcDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Declaration"#) -}
6b055320faede57947ebffe816fa481a
  $tcDeclarationRef :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   179577498730309904##
                   8589500872939052309##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDeclarationRef1
                   0#
                   GHC.Types.krep$*) -}
55c25c46bc43b77f35cd30710d940a88
  $tcDeclarationRef1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDeclarationRef2) -}
323385bcb6c47a2062fe610032bede8c
  $tcDeclarationRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DeclarationRef"#) -}
270034c4cac9ca17b545ecbf508c29ad
  $tcDoNotationElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1459901959398030560##
                   6673255449364296673##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcDoNotationElement1
                   0#
                   GHC.Types.krep$*) -}
1699a0db425a3362c41e92d77530f888
  $tcDoNotationElement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcDoNotationElement2) -}
1473a922a9a40877c8d635a656894df3
  $tcDoNotationElement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DoNotationElement"#) -}
9e3a9ba43af35be6369695d167a6249c
  $tcErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1335763052801947552##
                   292640233435985976##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcErrorMessage1
                   0#
                   GHC.Types.krep$*) -}
0a172ea22bebb3ae724a0fbdbf1ad1c5
  $tcErrorMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcErrorMessage2) -}
97f0811623e1d4ec15c5e16698676389
  $tcErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessage"#) -}
48c93c78ba62128db21a60417a770dc1
  $tcErrorMessageHint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9722869862936796745##
                   7161410736767306997##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcErrorMessageHint1
                   0#
                   GHC.Types.krep$*) -}
0164a8eefad3c5ebf1fdfacefbeba974
  $tcErrorMessageHint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcErrorMessageHint2) -}
8b3bccb313a7e8c5ff3deebc7a0961b4
  $tcErrorMessageHint2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessageHint"#) -}
1fe5b2fdc4f9f82eddbd5896e1fed818
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18401505539069014882##
                   17301067496665549792##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcExpr1
                   0#
                   GHC.Types.krep$*) -}
38300562c34fdd67dc1c37e7c916bca3
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcExpr2) -}
4c3a482048b3e371bee7140ba09f7acc
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
301d07fff74fd0fd432cb693a12883c4
  $tcGuard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1309009260646285704##
                   15474727138533427831##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcGuard1
                   0#
                   GHC.Types.krep$*) -}
f43e0a6459c79a294b0b16194682a087
  $tcGuard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcGuard2) -}
949b2c051001edeb079ab5a1881c949d
  $tcGuard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Guard"#) -}
6764efe119bb9c08d8dbd4b9b0f3b019
  $tcGuardedExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7872836052401510125##
                   9083003933974244031##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcGuardedExpr1
                   0#
                   GHC.Types.krep$*) -}
c06835cd07fba032df03613744cd68b5
  $tcGuardedExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcGuardedExpr2) -}
9a254843f6c6f4e26fc995d162df0e13
  $tcGuardedExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GuardedExpr"#) -}
cd9d39ec73278a3a4c0ea0adf2fe70a1
  $tcHintCategory :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12917957556574976696##
                   12162322040373753091##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcHintCategory1
                   0#
                   GHC.Types.krep$*) -}
40242013f0c47ab34a5ab6fda11e9d28
  $tcHintCategory1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcHintCategory2) -}
fb50c9d4009faf6a6e9667d5962f0625
  $tcHintCategory2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HintCategory"#) -}
8ea5e7cb1ece2ae0a53ad86d423e71e1
  $tcImportDeclarationType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17086970610439518302##
                   17540085728303418943##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcImportDeclarationType1
                   0#
                   GHC.Types.krep$*) -}
c4b8e193f059b11743009910f46dee9c
  $tcImportDeclarationType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcImportDeclarationType2) -}
f674d7c49e80af7887d6ea14736c6e08
  $tcImportDeclarationType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportDeclarationType"#) -}
50528c50599feafb7277d2c51995f97e
  $tcModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11255293613397529240##
                   8346573882303761411##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcModule1
                   0#
                   GHC.Types.krep$*) -}
fc1e33a16fcf8191642bbf01bb393fea
  $tcModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcModule2) -}
77887e29519ddd98ab220d36f0f78cf4
  $tcModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module"#) -}
91c20e513ed50cee0c2d477f83c92e2b
  $tcPathNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12996031134790481798##
                   12694610534027818859##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcPathNode1
                   0#
                   GHC.Types.krep$*Arr*) -}
b0bc932f30d243fdb2eda9f09bcce8b9
  $tcPathNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcPathNode2) -}
6243f709e9c5a9e21c305d939367c7b7
  $tcPathNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathNode"#) -}
d258ef4f132335291f6e55090c04fcee
  $tcPathTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6191526727930891512##
                   1313011995742533931##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcPathTree1
                   0#
                   GHC.Types.krep$*Arr*) -}
5d99605d727bf3ea2541debfa548f22c
  $tcPathTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcPathTree2) -}
b38c19d183152f2488db3d1db85397f0
  $tcPathTree2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PathTree"#) -}
18ff326faae89b15845e4af1d7876dc1
  $tcSimpleErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10203798654177311613##
                   10569408625820919540##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcSimpleErrorMessage1
                   0#
                   GHC.Types.krep$*) -}
6c134bba44a38e0dd4f77903da38b052
  $tcSimpleErrorMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcSimpleErrorMessage2) -}
c2479a46adf5b8eb7561260ea5025d58
  $tcSimpleErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SimpleErrorMessage"#) -}
b34659706e768addb9bbb0d59ae3e615
  $tcTypeDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4884106931170210237##
                   15383160637480426917##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeDeclarationData1
                   0#
                   GHC.Types.krep$*) -}
67815df5098c2302367c85b6b816c9c3
  $tcTypeDeclarationData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeDeclarationData2) -}
c8528ec415f497eda3f0e7bec10ad309
  $tcTypeDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeDeclarationData"#) -}
5fef7e36bb0b5a711b39ed1942a88f52
  $tcTypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14731900007573774741##
                   15493281497043005699##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeFixity1
                   0#
                   GHC.Types.krep$*) -}
433b3547cabc6d36db8ee6f36716e500
  $tcTypeFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeFixity2) -}
07419eb15999341244c070a186e86897
  $tcTypeFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeFixity"#) -}
e5960d048ad9131f01567d67e996c02d
  $tcTypeInstanceBody :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15051628267362753472##
                   18201654167292393831##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeInstanceBody1
                   0#
                   GHC.Types.krep$*) -}
e7599ec1486967cfcb8b714d40460f39
  $tcTypeInstanceBody1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeInstanceBody2) -}
91e939b6f0f90e818e456adb72cb26f0
  $tcTypeInstanceBody2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeInstanceBody"#) -}
c678a23b51f1ebf345db73a66eb8f551
  $tcTypeSearch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10510239402898856924##
                   277944611480777741##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcTypeSearch1
                   0#
                   GHC.Types.krep$*) -}
b0358356d6b94fed52cc25343999907a
  $tcTypeSearch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcTypeSearch2) -}
3517cbb69c7d633163fdea57ba74ca30
  $tcTypeSearch2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeSearch"#) -}
9506566ced0dfcc442a043d49112ab8b
  $tcValueDeclarationData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7343452318017345622##
                   2238259806189093765##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcValueDeclarationData1
                   0#
                   GHC.Types.krep$*Arr*) -}
5a41bbb5834cc62a3ee4840f9ce9a014
  $tcValueDeclarationData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcValueDeclarationData2) -}
0b1a954840698bd491251d67bcd84ba2
  $tcValueDeclarationData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueDeclarationData"#) -}
41402705e6775c06486dd136d2f98ac7
  $tcValueFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5077504003086944380##
                   16196742528808315041##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcValueFixity1
                   0#
                   GHC.Types.krep$*) -}
6e4a42b63ecd082dd79024eeebb79b02
  $tcValueFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcValueFixity2) -}
991402855addaa5c41f2e1ab2f8c3cbe
  $tcValueFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueFixity"#) -}
cd8a79bdf4a3f0dda96143b0e2f60701
  $tcWhereProvenance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11376221916483810574##
                   11584346395870933763##
                   Language.PureScript.AST.Declarations.$trModule
                   Language.PureScript.AST.Declarations.$tcWhereProvenance1
                   0#
                   GHC.Types.krep$*) -}
28bb20846e4ee4026b0451c6b7bfbe15
  $tcWhereProvenance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$tcWhereProvenance2) -}
ff015dc3421040e6c6d0079b4ea9af49
  $tcWhereProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WhereProvenance"#) -}
f88c6356066766abca935ed1b6e4e8a9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.AST.Declarations.$trModule3
                   Language.PureScript.AST.Declarations.$trModule1) -}
09ac84928314f7cb14566f46fc87938f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$trModule2) -}
2a17b442d70201eda225928133cce8a0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Declarations"#) -}
9d91e5adc9f4e60eafbd073169bcaf97
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Declarations.$trModule4) -}
2f75b7ca8344773c96c4e9f1e277b8ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
92c9b43552ec0e92135290d8676751c4
  $w$c< ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                case Data.Text.$w$ccompare ww15 ww16 ww17 ww19 ww20 ww21 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> Data.Text.$fOrdText_$c<
                                       ww3
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                       ww7
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                  GHC.Types.GT -> GHC.Types.False } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                     case Data.Text.$w$ccompare
                                            ww15
                                            ww16
                                            ww17
                                            ww19
                                            ww20
                                            ww21 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> Data.Text.$fOrdText_$c<
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                       GHC.Types.GT -> GHC.Types.False } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
2595ab00a9f3e0f64836ba1cf75af91e
  $w$c<1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b2
                                       -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                 a2
                                                 b2 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$c<
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.False }
                                       Data.Either.Right ipv -> GHC.Types.True }
                                  Data.Either.Right a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.False
                                       Data.Either.Right b2
                                       -> case a2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                          case b2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                          case Data.Text.$w$ccompare
                                                 ww15
                                                 ww16
                                                 ww17
                                                 ww19
                                                 ww20
                                                 ww21 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$c<
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.False } } } } }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                      a1
                                                      b2 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$c<
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.False }
                                            Data.Either.Right ipv -> GHC.Types.True }
                                       Data.Either.Right a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.False
                                            Data.Either.Right b2
                                            -> case a1
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                               case Data.Text.$w$ccompare
                                                      ww15
                                                      ww16
                                                      ww17
                                                      ww19
                                                      ww20
                                                      ww21 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$c<
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.False } } } } }
                                  GHC.Types.GT -> GHC.Types.False } } } } }
                   GHC.Types.GT -> GHC.Types.False }) -}
b629e89f8111d5d55d73a5ab211be269
  $w$c== ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$c==
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of wild4 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                case GHC.Prim.==# dt2 dt5 of lwild {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.ByteArray#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld,
                                                                          GHC.Prim.Int# #)}
                                            dt
                                            (GHC.Prim.int2Word# dt1)
                                            dt3
                                            (GHC.Prim.int2Word# dt4)
                                            (GHC.Prim.int2Word# dt2)
                                            GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                     case GHC.Prim.narrow32Int# ds3 of wild6 {
                                       DEFAULT -> GHC.Types.False
                                       0#
                                       -> Data.Text.$fEqText_$c==
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P) } } } } }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fEqProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild6 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            0#
                                            -> Data.Text.$fEqText_$c==
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P) } } } } } } } } } } }) -}
538266b4143c0219cba2efc9b1788a2b
  $w$c==1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$c==
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a1
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b1
                                       -> case Language.PureScript.Names.$fEqIdent_$c==
                                                 a1
                                                 b1 of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Data.Text.$fEqText_$c==
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P) }
                                       Data.Either.Right ipv -> GHC.Types.False }
                                  Data.Either.Right a1
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.False
                                       Data.Either.Right b1
                                       -> case a1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of wild5 { Data.Text.Internal.Text dt dt1 dt2 ->
                                          case b1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of wild6 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                          case GHC.Prim.==# dt2 dt5 of lwild {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt
                                                      (GHC.Prim.int2Word# dt1)
                                                      dt3
                                                      (GHC.Prim.int2Word# dt4)
                                                      (GHC.Prim.int2Word# dt2)
                                                      GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                               case GHC.Prim.narrow32Int# ds3 of wild8 {
                                                 DEFAULT -> GHC.Types.False
                                                 0#
                                                 -> Data.Text.$fEqText_$c==
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P) } } } } } } }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fEqProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a2
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fEqIdent_$c==
                                                      a2
                                                      b2 of wild6 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> Data.Text.$fEqText_$c==
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P) }
                                            Data.Either.Right ipv -> GHC.Types.False }
                                       Data.Either.Right a2
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.False
                                            Data.Either.Right b2
                                            -> case a2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of wild6 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of wild7 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               case GHC.Prim.==# dt2 dt5 of lwild {
                                                 DEFAULT -> GHC.Types.False
                                                 1#
                                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.ByteArray#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.Word#
                                                                                   -> GHC.Prim.State#
                                                                                        GHC.Prim.RealWorld
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild8 { (#,#) ds2 ds3 ->
                                                    case GHC.Prim.narrow32Int# ds3 of wild9 {
                                                      DEFAULT -> GHC.Types.False
                                                      0#
                                                      -> Data.Text.$fEqText_$c==
                                                           ww3
                                                             `cast`
                                                           (Language.PureScript.Names.N:OpName[0]
                                                                <'Language.PureScript.Names.ValueOpName>_P)
                                                           ww7
                                                             `cast`
                                                           (Language.PureScript.Names.N:OpName[0]
                                                                <'Language.PureScript.Names.ValueOpName>_P) } } } } } } } } } } } } }) -}
2649fb9d823a92f8a825d855159de5c7
  $w$ccompare ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U(U,U,U))><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                case ww13
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                case Data.Text.$w$ccompare ww15 ww16 ww17 ww19 ww20 ww21 of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> Data.Text.$fOrdText_$ccompare
                                       ww3
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                       ww7
                                         `cast`
                                       (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P)
                                  GHC.Types.GT -> GHC.Types.GT } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww10
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                     case ww13
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                     case Data.Text.$w$ccompare
                                            ww15
                                            ww16
                                            ww17
                                            ww19
                                            ww20
                                            ww21 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> Data.Text.$fOrdText_$ccompare
                                            ww3
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                            ww7
                                              `cast`
                                            (Language.PureScript.Names.N:OpName[0]
                                                 <'Language.PureScript.Names.TypeOpName>_P)
                                       GHC.Types.GT -> GHC.Types.GT } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
078b189f5abbdc4ef129ca11f5c1962a
  $w$ccompare1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)><S,1*U><L,1*U><L,1*U(1*U,1*U)><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.AST.Operators.Associativity)
                   (ww5 :: Language.PureScript.AST.Operators.Precedence)
                   (ww6 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww7 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 case Language.PureScript.AST.Operators.$w$ccompare
                        ww
                        ww1
                        ww4
                        ww5 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case ww2 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                      case ww6 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                      case ww9 of wild1 {
                        GHC.Base.Nothing
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing
                             -> case ww10 of wild3 {
                                  Data.Either.Left a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left b2
                                       -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                 a2
                                                 b2 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$ccompare
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.GT }
                                       Data.Either.Right ipv -> GHC.Types.LT }
                                  Data.Either.Right a2
                                  -> case ww13 of wild4 {
                                       Data.Either.Left ipv -> GHC.Types.GT
                                       Data.Either.Right b2
                                       -> case a2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                          case b2
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                          case Data.Text.$w$ccompare
                                                 ww15
                                                 ww16
                                                 ww17
                                                 ww19
                                                 ww20
                                                 ww21 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ
                                            -> Data.Text.$fOrdText_$ccompare
                                                 ww3
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                                 ww7
                                                   `cast`
                                                 (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P)
                                            GHC.Types.GT -> GHC.Types.GT } } } } }
                             GHC.Base.Just ipv -> GHC.Types.LT }
                        GHC.Base.Just a2
                        -> case ww12 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.GT
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case ww10 of wild4 {
                                       Data.Either.Left a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left b2
                                            -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                                      a1
                                                      b2 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.LT
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$ccompare
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.GT }
                                            Data.Either.Right ipv -> GHC.Types.LT }
                                       Data.Either.Right a1
                                       -> case ww13 of wild5 {
                                            Data.Either.Left ipv -> GHC.Types.GT
                                            Data.Either.Right b2
                                            -> case a1
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                                               case b2
                                                      `cast`
                                                    (Language.PureScript.Names.N:ProperName[0]
                                                         <'Language.PureScript.Names.ConstructorName>_P) of ww18 { Data.Text.Internal.Text ww19 ww20 ww21 ->
                                               case Data.Text.$w$ccompare
                                                      ww15
                                                      ww16
                                                      ww17
                                                      ww19
                                                      ww20
                                                      ww21 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.LT
                                                 GHC.Types.EQ
                                                 -> Data.Text.$fOrdText_$ccompare
                                                      ww3
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                      ww7
                                                        `cast`
                                                      (Language.PureScript.Names.N:OpName[0]
                                                           <'Language.PureScript.Names.ValueOpName>_P)
                                                 GHC.Types.GT -> GHC.Types.GT } } } } }
                                  GHC.Types.GT -> GHC.Types.GT } } } } }
                   GHC.Types.GT -> GHC.Types.GT }) -}
5252f47280702e464243816d50efc247
  $w$cshowsPrec ::
    (GHC.Show.Show k, GHC.Show.Show t) =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.AssocList k t
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(C1(U))),A,A)><L,U(C(C1(C1(U))),A,A)><S,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ k
                   @ t
                   (w :: GHC.Show.Show k)
                   (w1 :: GHC.Show.Show t)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Language.PureScript.AST.Declarations.AssocList k t)
                   (w3 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowAssocList3
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.AST.Declarations.$fShowAssocList2
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.AST.Declarations.$fShowAssocList1
                                 x
                           } in
                           case w2
                                  `cast`
                                (Language.PureScript.AST.Declarations.N:AssocList[0]
                                     <k>_R <t>_R) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww1 { (,) ww2 ww3 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)4
                                     (GHC.Show.showsPrec
                                        @ k
                                        w
                                        GHC.Show.$fShow(,)1
                                        ww2
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__1
                                           (GHC.Show.$fShow(,)_$sgo1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 (let {
                                                    lvl276 :: [GHC.Types.Char]
                                                    = GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showList__2
                                                        s
                                                  } in
                                                  letrec {
                                                    showl :: [(k, t)] -> GHC.Base.String
                                                      {- Arity: 1, Strictness: <S,1*U> -}
                                                    = \ (ds2 :: [(k, t)]) ->
                                                      case ds2 of wild1 {
                                                        [] -> lvl276
                                                        : y ys
                                                        -> GHC.Types.:
                                                             @ GHC.Types.Char
                                                             GHC.Show.showList__1
                                                             (case y of ww4 { (,) ww5 ww6 ->
                                                              GHC.Types.:
                                                                @ GHC.Types.Char
                                                                GHC.Show.$fShow(,)4
                                                                (GHC.Show.showsPrec
                                                                   @ k
                                                                   w
                                                                   GHC.Show.$fShow(,)1
                                                                   ww5
                                                                   (GHC.Types.:
                                                                      @ GHC.Types.Char
                                                                      GHC.Show.showList__1
                                                                      (GHC.Show.$fShow(,)_$sgo1
                                                                         (GHC.Types.:
                                                                            @ GHC.Types.Char
                                                                            GHC.Show.$fShow(,)2
                                                                            (showl ys))
                                                                         (GHC.Show.showsPrec
                                                                            @ t
                                                                            w1
                                                                            GHC.Show.$fShow(,)1
                                                                            ww6)
                                                                         (GHC.Types.[]
                                                                            @ GHC.Show.ShowS)))) }) }
                                                  } in
                                                  showl xs))
                                              (GHC.Show.showsPrec @ t w1 GHC.Show.$fShow(,)1 ww3)
                                              (GHC.Types.[] @ GHC.Show.ShowS)))) }) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w3
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w3)) }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Binders.Binder]
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
0a046fc00d6584c1eeaef0123d3be18e
  $w$cshowsPrec10 ::
    GHC.Show.Show t =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.PathNode t
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
37af3f4a55c84e701246f93d76ac98fd
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceType
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: [Language.PureScript.Comments.Comment])
                   (ww3 :: Language.PureScript.Names.Ident)
                   (ww4 :: Language.PureScript.Types.SourceType) ->
                 let {
                   f162 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                       Language.PureScript.AST.Declarations.$fFoldableAssocList5
                       ww3
                 } in
                 let {
                   f163 :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.Types.$w$cshowsPrec3
                       @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
                       0#
                       ww4
                 } in
                 let {
                   lvl276 :: GHC.Show.ShowS {- Arity: 1 -}
                   = Language.PureScript.Comments.$fShowComment_$cshowList ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowTypeDeclarationData5
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.AST.Declarations.$fShowTypeDeclarationData4
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (case ww1 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                              Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                0#
                                ww6
                                ww7
                                ww8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__1
                                   (GHC.Show.$fShow(,)_$sgo1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)2
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.showCommaSpace1
                                            (GHC.CString.unpackAppendCString#
                                               Language.PureScript.AST.Declarations.$fShowTypeDeclarationData3
                                               (f162
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     GHC.Show.showCommaSpace1
                                                     (GHC.CString.unpackAppendCString#
                                                        Language.PureScript.AST.Declarations.$fShowTypeDeclarationData2
                                                        (f163
                                                           (GHC.CString.unpackAppendCString#
                                                              Language.PureScript.AST.Declarations.$fShowAssocList1
                                                              x))))))))
                                      lvl276
                                      (GHC.Types.[] @ GHC.Show.ShowS))) })))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
5d4425e2b8bc28e335cf65e81dbc5006
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,1*U(1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Fixity)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName) ->
                 let {
                   f162 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       11#
                       ww5
                       ww6 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                     Language.PureScript.AST.Operators.$w$cshowsPrec1
                       11#
                       ww5
                       ww6
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f162
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.TypeOpName
                                   11#
                                   ww3
                                   x)))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowTypeFixity2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowTypeFixity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  $w$cshowsPrec13 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
d0668c28bd8cb963a4950d9f5f03c3d4
  $w$cshowsPrec14 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Environment.NameKind
    -> [Language.PureScript.AST.Binders.Binder]
    -> a
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
734af1b40ce6da3753cc9480b0d5d707
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Fixity
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,1*U(1*U,U)><L,U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Fixity)
                   (ww2 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName)))
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName) ->
                 let {
                   f162 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName))
                       Language.PureScript.AST.Declarations.$fShowValueFixity_$s$fShowEither
                       11#
                       ww5
                       ww6 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { Language.PureScript.AST.Operators.Fixity ww5 ww6 ->
                     Language.PureScript.AST.Operators.$w$cshowsPrec1
                       11#
                       ww5
                       ww6
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f162
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.ValueOpName
                                   11#
                                   ww3
                                   x)))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowValueFixity2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowValueFixity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
1ef988d2f8db98f35f578bde9282f468
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.DoNotationElement
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
bc84ad52a88fd485cb6225a32a9c0161
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (ww2 :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec1
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowErrorMessage2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                                  Language.PureScript.AST.Declarations.$fFoldableAssocList5
                                  x1
                                  (let {
                                     lvl276 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Language.PureScript.AST.Declarations.ErrorMessageHint]
                                              -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl276
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Language.PureScript.AST.Declarations.$fShowErrorMessage_$cshowsPrec
                                                 Language.PureScript.AST.Declarations.$fFoldableAssocList5
                                                 y
                                                 (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Declarations.Guard -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.AST.Declarations.Guard) ->
                 case w of wild {
                   Language.PureScript.AST.Declarations.ConditionGuard b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Declarations.$fShowGuard3
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Declarations.$fShowGuard3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.AST.Declarations.PatternGuard b1 b2
                   -> let {
                        f162 :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Binders.$fShowBinder_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                            Language.PureScript.AST.Declarations.$fShowErrorMessage3
                            b2
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.AST.Declarations.$fShowGuard2
                             (f162 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.AST.Declarations.$fShowGuard2
                                (f162
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x))))) } }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> [Language.PureScript.AST.Declarations.Guard]
    -> Language.PureScript.AST.Declarations.Expr
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Language.PureScript.AST.Declarations.Guard])
                   (ww2 :: Language.PureScript.AST.Declarations.Expr) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Language.PureScript.AST.Declarations.$fShowExpr_$cshowsPrec
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.AST.Declarations.$fShowGuardedExpr2
                       (let {
                          s :: GHC.Base.String = g x
                        } in
                        let {
                          s1 :: GHC.Base.String
                          = GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 s
                        } in
                        case ww1 of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s1
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (Language.PureScript.AST.Declarations.$w$cshowsPrec6
                                  0#
                                  x1
                                  (let {
                                     lvl276 :: [GHC.Types.Char]
                                     = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s1
                                   } in
                                   letrec {
                                     showl :: [Language.PureScript.AST.Declarations.Guard]
                                              -> GHC.Base.String
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [Language.PureScript.AST.Declarations.Guard]) ->
                                       case ds2 of wild1 {
                                         [] -> lvl276
                                         : y ys
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showList__1
                                              (Language.PureScript.AST.Declarations.$w$cshowsPrec6
                                                 0#
                                                 y
                                                 (showl ys)) }
                                   } in
                                   showl xs)) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
67a26b6b435418eb0468ab415e41d2f5
  $w$cshowsPrec8 ::
    Language.PureScript.AST.Declarations.HintCategory
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.AST.Declarations.HintCategory)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.AST.Declarations.ExprHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory11
                        w1
                   Language.PureScript.AST.Declarations.KindHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory9
                        w1
                   Language.PureScript.AST.Declarations.CheckHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory7
                        w1
                   Language.PureScript.AST.Declarations.PositionHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory5
                        w1
                   Language.PureScript.AST.Declarations.SolverHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory3
                        w1
                   Language.PureScript.AST.Declarations.OtherHint
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowHintCategory1
                        w1 }) -}
ddd3659ef93d4ce30766bc35e5e3d107
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U><L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww2 :: [Language.PureScript.Comments.Comment])
                   (ww3 :: Language.PureScript.Names.ModuleName)
                   (ww4 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww5 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [Language.PureScript.AST.Declarations.DeclarationRef]
                       Language.PureScript.AST.Declarations.$fShowModule4
                       Language.PureScript.AST.Declarations.$fShowErrorMessage3
                       ww5
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww6 { Language.PureScript.AST.SourcePos.SourceSpan ww7 ww8 ww9 ->
                     Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                       11#
                       ww7
                       ww8
                       ww9
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Language.PureScript.Comments.Comment
                             Language.PureScript.Comments.$fShowComment1
                             ww2
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (GHC.Show.showList__
                                         @ Language.PureScript.AST.Declarations.Declaration
                                         Language.PureScript.AST.Declarations.$fShowDeclaration1
                                         ww4
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (g x)))))))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Declarations.$fShowModule2
                        (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.AST.Declarations.$fShowModule2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
1ef988d2f8db98f35f578bde9282f468
  $w$ctoJSON ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f646e7901a528ca44ed83be72af05558
  $waddDefaultImport ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> (# Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment],
          Language.PureScript.Names.ModuleName,
          [Language.PureScript.AST.Declarations.Declaration],
          GHC.Base.Maybe
            [Language.PureScript.AST.Declarations.DeclarationRef] #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U><S,U><L,U><L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww3 :: [Language.PureScript.Comments.Comment])
                   (ww4 :: Language.PureScript.Names.ModuleName)
                   (ww5 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww6 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   exit :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment],
                              Language.PureScript.Names.ModuleName,
                              [Language.PureScript.AST.Declarations.Declaration],
                              GHC.Base.Maybe
                                [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = (# ww2, ww3, ww4, ww5, ww6 #)
                 } in
                 let {
                   exit1 :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment],
                               Language.PureScript.Names.ModuleName,
                               [Language.PureScript.AST.Declarations.Declaration],
                               GHC.Base.Maybe
                                 [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = (# ww2, ww3, ww4, ww5, ww6 #)
                 } in
                 let {
                   $j :: (# Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment],
                            Language.PureScript.Names.ModuleName,
                            [Language.PureScript.AST.Declarations.Declaration],
                            GHC.Base.Maybe
                              [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 0>
                   = case GHC.Classes.$fEq[]_$c==
                            @ (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace)
                            (Language.PureScript.Names.$fEqProperName
                               @ 'Language.PureScript.Names.Namespace)
                            ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                            ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                       GHC.Types.False
                       -> (# ww2, ww3, ww4,
                             GHC.Types.:
                               @ Language.PureScript.AST.Declarations.Declaration
                               (Language.PureScript.AST.Declarations.ImportDeclaration
                                  (ww2, GHC.Types.[] @ Language.PureScript.Comments.Comment)
                                  ww1
                                  Language.PureScript.AST.Declarations.Implicit
                                  ww)
                               ww5,
                             ww6 #)
                       GHC.Types.True -> (# ww2, ww3, ww4, ww5, ww6 #) }
                 } in
                 letrec {
                   go6 :: [Language.PureScript.AST.Declarations.Declaration]
                          -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment],
                                Language.PureScript.Names.ModuleName,
                                [Language.PureScript.AST.Declarations.Declaration],
                                GHC.Base.Maybe
                                  [Language.PureScript.AST.Declarations.DeclarationRef] #)
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.AST.Declarations.Declaration]) ->
                     case ds of wild {
                       [] -> $j
                       : y ys
                       -> case y of wild1 {
                            DEFAULT -> go6 ys
                            Language.PureScript.AST.Declarations.ImportDeclaration ds1 mn' ds2 as'
                            -> case GHC.Classes.$fEq[]_$c==
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.Namespace)
                                      (Language.PureScript.Names.$fEqProperName
                                         @ 'Language.PureScript.Names.Namespace)
                                      mn' `cast` (Language.PureScript.Names.N:ModuleName[0])
                                      ww1
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                                 GHC.Types.False -> go6 ys
                                 GHC.Types.True
                                 -> case ww of wild3 {
                                      GHC.Base.Nothing -> exit
                                      GHC.Base.Just ipv
                                      -> case as' of wild4 {
                                           GHC.Base.Nothing
                                           -> letrec {
                                                go7 :: [Language.PureScript.AST.Declarations.Declaration]
                                                       -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                                             [Language.PureScript.Comments.Comment],
                                                             Language.PureScript.Names.ModuleName,
                                                             [Language.PureScript.AST.Declarations.Declaration],
                                                             GHC.Base.Maybe
                                                               [Language.PureScript.AST.Declarations.DeclarationRef] #)
                                                  <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                                = \ (ds3 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                  case ds3 of wild5 {
                                                    [] -> $j
                                                    : y1 ys1
                                                    -> case y1 of wild6 {
                                                         DEFAULT -> go7 ys1
                                                         Language.PureScript.AST.Declarations.ImportDeclaration ds4 mn'1 ds5 as'1
                                                         -> case GHC.Classes.$fEq[]_$c==
                                                                   @ (Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.Namespace)
                                                                   (Language.PureScript.Names.$fEqProperName
                                                                      @ 'Language.PureScript.Names.Namespace)
                                                                   mn'1
                                                                     `cast`
                                                                   (Language.PureScript.Names.N:ModuleName[0])
                                                                   ww1
                                                                     `cast`
                                                                   (Language.PureScript.Names.N:ModuleName[0]) of wild7 {
                                                              GHC.Types.False -> go7 ys1
                                                              GHC.Types.True
                                                              -> case as'1 of wild8 {
                                                                   GHC.Base.Nothing -> go7 ys1
                                                                   GHC.Base.Just a1
                                                                   -> case GHC.Classes.$fEq[]_$c==
                                                                             @ (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.Namespace)
                                                                             (Language.PureScript.Names.$fEqProperName
                                                                                @ 'Language.PureScript.Names.Namespace)
                                                                             a1
                                                                               `cast`
                                                                             (Language.PureScript.Names.N:ModuleName[0])
                                                                             ipv
                                                                               `cast`
                                                                             (Language.PureScript.Names.N:ModuleName[0]) of wild9 {
                                                                        GHC.Types.False -> go7 ys1
                                                                        GHC.Types.True
                                                                        -> exit1 } } } } }
                                              } in
                                              go7 ys
                                           GHC.Base.Just a1
                                           -> case GHC.Classes.$fEq[]_$c==
                                                     @ (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.Namespace)
                                                     (Language.PureScript.Names.$fEqProperName
                                                        @ 'Language.PureScript.Names.Namespace)
                                                     a1
                                                       `cast`
                                                     (Language.PureScript.Names.N:ModuleName[0])
                                                     ipv
                                                       `cast`
                                                     (Language.PureScript.Names.N:ModuleName[0]) of wild5 {
                                                GHC.Types.False
                                                -> letrec {
                                                     go7 :: [Language.PureScript.AST.Declarations.Declaration]
                                                            -> (# Language.PureScript.AST.SourcePos.SourceSpan,
                                                                  [Language.PureScript.Comments.Comment],
                                                                  Language.PureScript.Names.ModuleName,
                                                                  [Language.PureScript.AST.Declarations.Declaration],
                                                                  GHC.Base.Maybe
                                                                    [Language.PureScript.AST.Declarations.DeclarationRef] #)
                                                       <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                                     = \ (ds3 :: [Language.PureScript.AST.Declarations.Declaration]) ->
                                                       case ds3 of wild6 {
                                                         [] -> $j
                                                         : y1 ys1
                                                         -> case y1 of wild7 {
                                                              DEFAULT -> go7 ys1
                                                              Language.PureScript.AST.Declarations.ImportDeclaration ds4 mn'1 ds5 as'1
                                                              -> case GHC.Classes.$fEq[]_$c==
                                                                        @ (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.Namespace)
                                                                        (Language.PureScript.Names.$fEqProperName
                                                                           @ 'Language.PureScript.Names.Namespace)
                                                                        mn'1
                                                                          `cast`
                                                                        (Language.PureScript.Names.N:ModuleName[0])
                                                                        ww1
                                                                          `cast`
                                                                        (Language.PureScript.Names.N:ModuleName[0]) of wild8 {
                                                                   GHC.Types.False -> go7 ys1
                                                                   GHC.Types.True
                                                                   -> case as'1 of wild9 {
                                                                        GHC.Base.Nothing -> go7 ys1
                                                                        GHC.Base.Just a2
                                                                        -> case GHC.Classes.$fEq[]_$c==
                                                                                  @ (Language.PureScript.Names.ProperName
                                                                                       'Language.PureScript.Names.Namespace)
                                                                                  (Language.PureScript.Names.$fEqProperName
                                                                                     @ 'Language.PureScript.Names.Namespace)
                                                                                  a2
                                                                                    `cast`
                                                                                  (Language.PureScript.Names.N:ModuleName[0])
                                                                                  ipv
                                                                                    `cast`
                                                                                  (Language.PureScript.Names.N:ModuleName[0]) of wild10 {
                                                                             GHC.Types.False
                                                                             -> go7 ys1
                                                                             GHC.Types.True
                                                                             -> exit1 } } } } }
                                                   } in
                                                   go7 ys
                                                GHC.Types.True -> exit1 } } } } } }
                 } in
                 go6 ww5) -}
5252f47280702e464243816d50efc247
  newtype AssocList k t = AssocList {runAssocList :: [(k, t)]}
e92f6ee78a22c0eadc3566d7d1f48d5b
  data CaseAlternative
    = CaseAlternative {caseAlternativeBinders :: [Language.PureScript.AST.Binders.Binder],
                       caseAlternativeResult :: [Language.PureScript.AST.Declarations.GuardedExpr]}
44dd7830663f65e1b8791f79a13f4cc0
  type Context =
    [(Language.PureScript.Names.Ident,
      Language.PureScript.Types.SourceType)]
e92f6ee78a22c0eadc3566d7d1f48d5b
  data Declaration
    = DataDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                      Language.PureScript.Environment.DataDeclType
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.TypeName)
                      [(Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)]
                      [(Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName,
                        [Language.PureScript.Types.SourceType])]
    | DataBindingGroupDeclaration (GHC.Base.NonEmpty
                                     Language.PureScript.AST.Declarations.Declaration)
    | TypeSynonymDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                             [(Data.Text.Internal.Text,
                               GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)]
                             Language.PureScript.Types.SourceType
    | TypeDeclaration {-# UNPACK #-}Language.PureScript.AST.Declarations.TypeDeclarationData
    | ValueDeclaration {-# UNPACK #-}(Language.PureScript.AST.Declarations.ValueDeclarationData
                                        [Language.PureScript.AST.Declarations.GuardedExpr])
    | BoundValueDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            Language.PureScript.AST.Binders.Binder
                            Language.PureScript.AST.Declarations.Expr
    | BindingGroupDeclaration (GHC.Base.NonEmpty
                                 ((Language.PureScript.AST.SourcePos.SourceAnn,
                                   Language.PureScript.Names.Ident),
                                  Language.PureScript.Environment.NameKind,
                                  Language.PureScript.AST.Declarations.Expr))
    | ExternDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        Language.PureScript.Names.Ident
                        Language.PureScript.Types.SourceType
    | ExternDataDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                            Language.PureScript.Kinds.SourceKind
    | ExternKindDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
    | FixityDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        (Data.Either.Either
                           Language.PureScript.AST.Declarations.ValueFixity
                           Language.PureScript.AST.Declarations.TypeFixity)
    | ImportDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                        Language.PureScript.Names.ModuleName
                        Language.PureScript.AST.Declarations.ImportDeclarationType
                        (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    | TypeClassDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           [(Data.Text.Internal.Text,
                             GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)]
                           [Language.PureScript.Types.SourceConstraint]
                           [Language.PureScript.Environment.FunctionalDependency]
                           [Language.PureScript.AST.Declarations.Declaration]
    | TypeInstanceDeclaration Language.PureScript.AST.SourcePos.SourceAnn
                              [Language.PureScript.Names.Ident]
                              GHC.Integer.Type.Integer
                              Language.PureScript.Names.Ident
                              [Language.PureScript.Types.SourceConstraint]
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                              [Language.PureScript.Types.SourceType]
                              Language.PureScript.AST.Declarations.TypeInstanceBody
1ef988d2f8db98f35f578bde9282f468
  data DeclarationRef
    = TypeRef Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.Names.ProperName
                 'Language.PureScript.Names.TypeName)
              (GHC.Base.Maybe
                 [Language.PureScript.Names.ProperName
                    'Language.PureScript.Names.ConstructorName])
    | TypeOpRef Language.PureScript.AST.SourcePos.SourceSpan
                (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.TypeOpName)
    | ValueRef Language.PureScript.AST.SourcePos.SourceSpan
               Language.PureScript.Names.Ident
    | ValueOpRef Language.PureScript.AST.SourcePos.SourceSpan
                 (Language.PureScript.Names.OpName
                    'Language.PureScript.Names.ValueOpName)
    | TypeClassRef Language.PureScript.AST.SourcePos.SourceSpan
                   (Language.PureScript.Names.ProperName
                      'Language.PureScript.Names.ClassName)
    | TypeInstanceRef Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.Names.Ident
    | ModuleRef Language.PureScript.AST.SourcePos.SourceSpan
                Language.PureScript.Names.ModuleName
    | KindRef Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.Names.ProperName
                 'Language.PureScript.Names.KindName)
    | ReExportRef Language.PureScript.AST.SourcePos.SourceSpan
                  Language.PureScript.Names.ModuleName
                  Language.PureScript.AST.Declarations.DeclarationRef
e92f6ee78a22c0eadc3566d7d1f48d5b
  data DoNotationElement
    = DoNotationValue Language.PureScript.AST.Declarations.Expr
    | DoNotationBind Language.PureScript.AST.Binders.Binder
                     Language.PureScript.AST.Declarations.Expr
    | DoNotationLet [Language.PureScript.AST.Declarations.Declaration]
    | PositionedDoNotationElement Language.PureScript.AST.SourcePos.SourceSpan
                                  [Language.PureScript.Comments.Comment]
                                  Language.PureScript.AST.Declarations.DoNotationElement
7268a73b9f5bbe5a70110aa90f7e1194
  data ErrorMessage
    = ErrorMessage [Language.PureScript.AST.Declarations.ErrorMessageHint]
                   Language.PureScript.AST.Declarations.SimpleErrorMessage
e92f6ee78a22c0eadc3566d7d1f48d5b
  data ErrorMessageHint
    = ErrorUnifyingTypes Language.PureScript.Types.SourceType
                         Language.PureScript.Types.SourceType
    | ErrorInExpression Language.PureScript.AST.Declarations.Expr
    | ErrorInModule Language.PureScript.Names.ModuleName
    | ErrorInInstance (Language.PureScript.Names.Qualified
                         (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName))
                      [Language.PureScript.Types.SourceType]
    | ErrorInSubsumption Language.PureScript.Types.SourceType
                         Language.PureScript.Types.SourceType
    | ErrorCheckingAccessor Language.PureScript.AST.Declarations.Expr
                            Language.PureScript.PSString.PSString
    | ErrorCheckingType Language.PureScript.AST.Declarations.Expr
                        Language.PureScript.Types.SourceType
    | ErrorCheckingKind Language.PureScript.Types.SourceType
    | ErrorCheckingGuard
    | ErrorInferringType Language.PureScript.AST.Declarations.Expr
    | ErrorInApplication Language.PureScript.AST.Declarations.Expr
                         Language.PureScript.Types.SourceType
                         Language.PureScript.AST.Declarations.Expr
    | ErrorInDataConstructor (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
    | ErrorInTypeConstructor (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
    | ErrorInBindingGroup (GHC.Base.NonEmpty
                             Language.PureScript.Names.Ident)
    | ErrorInDataBindingGroup [Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName]
    | ErrorInTypeSynonym (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
    | ErrorInValueDeclaration Language.PureScript.Names.Ident
    | ErrorInTypeDeclaration Language.PureScript.Names.Ident
    | ErrorInTypeClassDeclaration (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
    | ErrorInForeignImport Language.PureScript.Names.Ident
    | ErrorSolvingConstraint Language.PureScript.Types.SourceConstraint
    | PositionedError (GHC.Base.NonEmpty
                         Language.PureScript.AST.SourcePos.SourceSpan)
e92f6ee78a22c0eadc3566d7d1f48d5b
  data Expr
    = Literal Language.PureScript.AST.SourcePos.SourceSpan
              (Language.PureScript.AST.Literals.Literal
                 Language.PureScript.AST.Declarations.Expr)
    | UnaryMinus Language.PureScript.AST.SourcePos.SourceSpan
                 Language.PureScript.AST.Declarations.Expr
    | BinaryNoParens Language.PureScript.AST.Declarations.Expr
                     Language.PureScript.AST.Declarations.Expr
                     Language.PureScript.AST.Declarations.Expr
    | Parens Language.PureScript.AST.Declarations.Expr
    | Accessor Language.PureScript.PSString.PSString
               Language.PureScript.AST.Declarations.Expr
    | ObjectUpdate Language.PureScript.AST.Declarations.Expr
                   [(Language.PureScript.PSString.PSString,
                     Language.PureScript.AST.Declarations.Expr)]
    | ObjectUpdateNested Language.PureScript.AST.Declarations.Expr
                         (Language.PureScript.AST.Declarations.PathTree
                            Language.PureScript.AST.Declarations.Expr)
    | Abs Language.PureScript.AST.Binders.Binder
          Language.PureScript.AST.Declarations.Expr
    | App Language.PureScript.AST.Declarations.Expr
          Language.PureScript.AST.Declarations.Expr
    | Var Language.PureScript.AST.SourcePos.SourceSpan
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident)
    | Op Language.PureScript.AST.SourcePos.SourceSpan
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
    | IfThenElse Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.AST.Declarations.Expr
    | Constructor Language.PureScript.AST.SourcePos.SourceSpan
                  (Language.PureScript.Names.Qualified
                     (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName))
    | Case [Language.PureScript.AST.Declarations.Expr]
           [Language.PureScript.AST.Declarations.CaseAlternative]
    | TypedValue GHC.Types.Bool
                 Language.PureScript.AST.Declarations.Expr
                 Language.PureScript.Types.SourceType
    | Let Language.PureScript.AST.Declarations.WhereProvenance
          [Language.PureScript.AST.Declarations.Declaration]
          Language.PureScript.AST.Declarations.Expr
    | Do (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         [Language.PureScript.AST.Declarations.DoNotationElement]
    | Ado (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
          [Language.PureScript.AST.Declarations.DoNotationElement]
          Language.PureScript.AST.Declarations.Expr
    | TypeClassDictionaryConstructorApp (Language.PureScript.Names.Qualified
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName))
                                        Language.PureScript.AST.Declarations.Expr
    | TypeClassDictionary Language.PureScript.Types.SourceConstraint
                          (Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                             (Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                                (Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident)
                                   (GHC.Base.NonEmpty
                                      Language.PureScript.TypeClassDictionaries.NamedDict))))
                          [Language.PureScript.AST.Declarations.ErrorMessageHint]
    | TypeClassDictionaryAccessor (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ClassName))
                                  Language.PureScript.Names.Ident
    | DeferredDictionary (Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName))
                         [Language.PureScript.Types.SourceType]
    | AnonymousArgument
    | Hole Data.Text.Internal.Text
    | PositionedValue Language.PureScript.AST.SourcePos.SourceSpan
                      [Language.PureScript.Comments.Comment]
                      Language.PureScript.AST.Declarations.Expr
e92f6ee78a22c0eadc3566d7d1f48d5b
  data Guard
    = ConditionGuard Language.PureScript.AST.Declarations.Expr
    | PatternGuard Language.PureScript.AST.Binders.Binder
                   Language.PureScript.AST.Declarations.Expr
e92f6ee78a22c0eadc3566d7d1f48d5b
  data GuardedExpr
    = GuardedExpr [Language.PureScript.AST.Declarations.Guard]
                  Language.PureScript.AST.Declarations.Expr
67a26b6b435418eb0468ab415e41d2f5
  data HintCategory
    = ExprHint
    | KindHint
    | CheckHint
    | PositionHint
    | SolverHint
    | OtherHint
ee54accdb974d8b355eb58984489a7af
  data ImportDeclarationType
    = Implicit
    | Explicit [Language.PureScript.AST.Declarations.DeclarationRef]
    | Hiding [Language.PureScript.AST.Declarations.DeclarationRef]
d9deae30ea78016a4bdb453d9978bfa3
  pattern Language.PureScript.AST.Declarations.MkUnguarded :: Language.PureScript.AST.Declarations.Expr
                                                              -> Language.PureScript.AST.Declarations.GuardedExpr
3342e00ee072addfd009ee61e87fb865
  data Module
    = Module Language.PureScript.AST.SourcePos.SourceSpan
             [Language.PureScript.Comments.Comment]
             Language.PureScript.Names.ModuleName
             [Language.PureScript.AST.Declarations.Declaration]
             (GHC.Base.Maybe
                [Language.PureScript.AST.Declarations.DeclarationRef])
0a046fc00d6584c1eeaef0123d3be18e
  data PathNode t
    = Leaf t | Branch (Language.PureScript.AST.Declarations.PathTree t)
0a046fc00d6584c1eeaef0123d3be18e
  newtype PathTree t
    = PathTree (Language.PureScript.AST.Declarations.AssocList
                  Language.PureScript.PSString.PSString
                  (Language.PureScript.AST.Declarations.PathNode t))
1ef988d2f8db98f35f578bde9282f468
  axiom Language.PureScript.AST.Declarations.Rep_DeclarationRef::
      GHC.Generics.Rep
        Language.PureScript.AST.Declarations.DeclarationRef
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "DeclarationRef"
               "Language.PureScript.AST.Declarations"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "TypeRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.AST.SourcePos.SourceSpan)
                  GHC.Generics.:*: (GHC.Generics.S1
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.Rec0
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                    GHC.Generics.:*: GHC.Generics.S1
                                                       ('GHC.Generics.MetaSel
                                                          'GHC.Base.Nothing
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.Rec0
                                                          (GHC.Base.Maybe
                                                             [Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName]))))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TypeOpRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName))))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "ValueRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Names.Ident))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ValueOpRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.OpName
                                                                             'Language.PureScript.Names.ValueOpName)))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TypeClassRef" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        Language.PureScript.AST.SourcePos.SourceSpan)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TypeInstanceRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          Language.PureScript.Names.Ident)))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ModuleRef"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          Language.PureScript.Names.ModuleName))
                                                 GHC.Generics.:+: (GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "KindRef"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     (GHC.Generics.S1
                                                                        ('GHC.Generics.MetaSel
                                                                           'GHC.Base.Nothing
                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                           'GHC.Generics.NoSourceStrictness
                                                                           'GHC.Generics.DecidedLazy)
                                                                        (GHC.Generics.Rec0
                                                                           Language.PureScript.AST.SourcePos.SourceSpan)
                                                                      GHC.Generics.:*: GHC.Generics.S1
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.Rec0
                                                                                            (Language.PureScript.Names.ProperName
                                                                                               'Language.PureScript.Names.KindName)))
                                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "ReExportRef"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False)
                                                                                      (GHC.Generics.S1
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.Rec0
                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                       GHC.Generics.:*: (GHC.Generics.S1
                                                                                                           ('GHC.Generics.MetaSel
                                                                                                              'GHC.Base.Nothing
                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                           (GHC.Generics.Rec0
                                                                                                              Language.PureScript.Names.ModuleName)
                                                                                                         GHC.Generics.:*: GHC.Generics.S1
                                                                                                                            ('GHC.Generics.MetaSel
                                                                                                                               'GHC.Base.Nothing
                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                                            (GHC.Generics.Rec0
                                                                                                                               Language.PureScript.AST.Declarations.DeclarationRef)))))))
85049d3cbfbe9dc15f83f3061172f760
  data SimpleErrorMessage
    = ModuleNotFound Language.PureScript.Names.ModuleName
    | ErrorParsingFFIModule GHC.IO.FilePath
                            (GHC.Base.Maybe Language.PureScript.Bundle.ErrorMessage)
    | ErrorParsingModule Text.Parsec.Error.ParseError
    | MissingFFIModule Language.PureScript.Names.ModuleName
    | UnnecessaryFFIModule Language.PureScript.Names.ModuleName
                           GHC.IO.FilePath
    | MissingFFIImplementations Language.PureScript.Names.ModuleName
                                [Language.PureScript.Names.Ident]
    | UnusedFFIImplementations Language.PureScript.Names.ModuleName
                               [Language.PureScript.Names.Ident]
    | InvalidFFIIdentifier Language.PureScript.Names.ModuleName
                           Data.Text.Internal.Text
    | CannotGetFileInfo GHC.IO.FilePath
    | CannotReadFile GHC.IO.FilePath
    | CannotWriteFile GHC.IO.FilePath
    | InfiniteType Language.PureScript.Types.SourceType
    | InfiniteKind Language.PureScript.Kinds.SourceKind
    | MultipleValueOpFixities (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName)
    | MultipleTypeOpFixities (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)
    | OrphanTypeDeclaration Language.PureScript.Names.Ident
    | RedefinedIdent Language.PureScript.Names.Ident
    | OverlappingNamesInLet
    | UnknownName (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Name)
    | UnknownImport Language.PureScript.Names.ModuleName
                    Language.PureScript.Names.Name
    | UnknownImportDataConstructor Language.PureScript.Names.ModuleName
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName)
    | UnknownExport Language.PureScript.Names.Name
    | UnknownExportDataConstructor (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName)
    | ScopeConflict Language.PureScript.Names.Name
                    [Language.PureScript.Names.ModuleName]
    | ScopeShadowing Language.PureScript.Names.Name
                     (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     [Language.PureScript.Names.ModuleName]
    | DeclConflict Language.PureScript.Names.Name
                   Language.PureScript.Names.Name
    | ExportConflict (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Name)
                     (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Name)
    | DuplicateModule Language.PureScript.Names.ModuleName
    | DuplicateTypeClass (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                         Language.PureScript.AST.SourcePos.SourceSpan
    | DuplicateInstance Language.PureScript.Names.Ident
                        Language.PureScript.AST.SourcePos.SourceSpan
    | DuplicateTypeArgument Data.Text.Internal.Text
    | InvalidDoBind
    | InvalidDoLet
    | CycleInDeclaration Language.PureScript.Names.Ident
    | CycleInTypeSynonym (GHC.Base.Maybe
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
    | CycleInModules [Language.PureScript.Names.ModuleName]
    | NameIsUndefined Language.PureScript.Names.Ident
    | UndefinedTypeVariable (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
    | PartiallyAppliedSynonym (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
    | EscapedSkolem Data.Text.Internal.Text
                    (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                    Language.PureScript.Types.SourceType
    | TypesDoNotUnify Language.PureScript.Types.SourceType
                      Language.PureScript.Types.SourceType
    | KindsDoNotUnify Language.PureScript.Kinds.SourceKind
                      Language.PureScript.Kinds.SourceKind
    | ConstrainedTypeUnified Language.PureScript.Types.SourceType
                             Language.PureScript.Types.SourceType
    | OverlappingInstances (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           [Language.PureScript.Types.SourceType]
                           [Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident]
    | NoInstanceFound Language.PureScript.Types.SourceConstraint
    | AmbiguousTypeVariables Language.PureScript.Types.SourceType
                             Language.PureScript.Types.SourceConstraint
    | UnknownClass (Language.PureScript.Names.Qualified
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ClassName))
    | PossiblyInfiniteInstance (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                               [Language.PureScript.Types.SourceType]
    | CannotDerive (Language.PureScript.Names.Qualified
                      (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ClassName))
                   [Language.PureScript.Types.SourceType]
    | InvalidDerivedInstance (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             [Language.PureScript.Types.SourceType]
                             GHC.Types.Int
    | ExpectedTypeConstructor (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                              [Language.PureScript.Types.SourceType]
                              Language.PureScript.Types.SourceType
    | InvalidNewtypeInstance (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             [Language.PureScript.Types.SourceType]
    | MissingNewtypeSuperclassInstance (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName))
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName))
                                       [Language.PureScript.Types.SourceType]
    | UnverifiableSuperclassInstance (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     [Language.PureScript.Types.SourceType]
    | CannotFindDerivingType (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
    | DuplicateLabel Language.PureScript.Label.Label
                     (GHC.Base.Maybe Language.PureScript.AST.Declarations.Expr)
    | DuplicateValueDeclaration Language.PureScript.Names.Ident
    | ArgListLengthsDiffer Language.PureScript.Names.Ident
    | OverlappingArgNames (GHC.Base.Maybe
                             Language.PureScript.Names.Ident)
    | MissingClassMember (GHC.Base.NonEmpty
                            (Language.PureScript.Names.Ident,
                             Language.PureScript.Types.SourceType))
    | ExtraneousClassMember Language.PureScript.Names.Ident
                            (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName))
    | ExpectedType Language.PureScript.Types.SourceType
                   Language.PureScript.Kinds.SourceKind
    | IncorrectConstructorArity (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName))
                                GHC.Types.Int
                                GHC.Types.Int
    | ExprDoesNotHaveType Language.PureScript.AST.Declarations.Expr
                          Language.PureScript.Types.SourceType
    | PropertyIsMissing Language.PureScript.Label.Label
    | AdditionalProperty Language.PureScript.Label.Label
    | TypeSynonymInstance
    | OrphanInstance Language.PureScript.Names.Ident
                     (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                     (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                     [Language.PureScript.Types.SourceType]
    | InvalidNewtype (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
    | InvalidInstanceHead Language.PureScript.Types.SourceType
    | TransitiveExportError Language.PureScript.AST.Declarations.DeclarationRef
                            [Language.PureScript.AST.Declarations.DeclarationRef]
    | TransitiveDctorExportError Language.PureScript.AST.Declarations.DeclarationRef
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
    | ShadowedName Language.PureScript.Names.Ident
    | ShadowedTypeVar Data.Text.Internal.Text
    | UnusedTypeVar Data.Text.Internal.Text
    | WildcardInferredType Language.PureScript.Types.SourceType
                           Language.PureScript.AST.Declarations.Context
    | HoleInferredType Data.Text.Internal.Text
                       Language.PureScript.Types.SourceType
                       Language.PureScript.AST.Declarations.Context
                       (GHC.Base.Maybe Language.PureScript.AST.Declarations.TypeSearch)
    | MissingTypeDeclaration Language.PureScript.Names.Ident
                             Language.PureScript.Types.SourceType
    | OverlappingPattern [[Language.PureScript.AST.Binders.Binder]]
                         GHC.Types.Bool
    | IncompleteExhaustivityCheck
    | MisleadingEmptyTypeImport Language.PureScript.Names.ModuleName
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
    | ImportHidingModule Language.PureScript.Names.ModuleName
    | UnusedImport Language.PureScript.Names.ModuleName
    | UnusedExplicitImport Language.PureScript.Names.ModuleName
                           [Language.PureScript.Names.Name]
                           (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                           [Language.PureScript.AST.Declarations.DeclarationRef]
    | UnusedDctorImport Language.PureScript.Names.ModuleName
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                        (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                        [Language.PureScript.AST.Declarations.DeclarationRef]
    | UnusedDctorExplicitImport Language.PureScript.Names.ModuleName
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
                                [Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName]
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                [Language.PureScript.AST.Declarations.DeclarationRef]
    | DuplicateSelectiveImport Language.PureScript.Names.ModuleName
    | DuplicateImport Language.PureScript.Names.ModuleName
                      Language.PureScript.AST.Declarations.ImportDeclarationType
                      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
    | DuplicateImportRef Language.PureScript.Names.Name
    | DuplicateExportRef Language.PureScript.Names.Name
    | IntOutOfRange GHC.Integer.Type.Integer
                    Data.Text.Internal.Text
                    GHC.Integer.Type.Integer
                    GHC.Integer.Type.Integer
    | ImplicitQualifiedImport Language.PureScript.Names.ModuleName
                              Language.PureScript.Names.ModuleName
                              [Language.PureScript.AST.Declarations.DeclarationRef]
    | ImplicitQualifiedImportReExport Language.PureScript.Names.ModuleName
                                      Language.PureScript.Names.ModuleName
                                      [Language.PureScript.AST.Declarations.DeclarationRef]
    | ImplicitImport Language.PureScript.Names.ModuleName
                     [Language.PureScript.AST.Declarations.DeclarationRef]
    | HidingImport Language.PureScript.Names.ModuleName
                   [Language.PureScript.AST.Declarations.DeclarationRef]
    | CaseBinderLengthDiffers GHC.Types.Int
                              [Language.PureScript.AST.Binders.Binder]
    | IncorrectAnonymousArgument
    | InvalidOperatorInBinder (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.OpName
                                    'Language.PureScript.Names.ValueOpName))
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
    | CannotGeneralizeRecursiveFunction Language.PureScript.Names.Ident
                                        Language.PureScript.Types.SourceType
    | CannotDeriveNewtypeForData (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
    | ExpectedWildcard (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
    | CannotUseBindWithDo Language.PureScript.Names.Ident
    | ClassInstanceArityMismatch Language.PureScript.Names.Ident
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))
                                 GHC.Types.Int
                                 GHC.Types.Int
    | UserDefinedWarning Language.PureScript.Types.SourceType
    | UnusableDeclaration Language.PureScript.Names.Ident
                          [[Data.Text.Internal.Text]]
    | CannotDefinePrimModules Language.PureScript.Names.ModuleName
    | MixedAssociativityError (GHC.Base.NonEmpty
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.AnyOpName),
                                  Language.PureScript.AST.Operators.Associativity))
    | NonAssociativeError (GHC.Base.NonEmpty
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.AnyOpName)))
c947d6d8aff56f68d1789e1833a9fcd2
  data TypeDeclarationData
    = TypeDeclarationData {tydeclSourceAnn :: !Language.PureScript.AST.SourcePos.SourceAnn,
                           tydeclIdent :: !Language.PureScript.Names.Ident,
                           tydeclType :: !Language.PureScript.Types.SourceType}
298ce78be10d4367819875773ca00d0b
  data TypeFixity
    = TypeFixity Language.PureScript.AST.Operators.Fixity
                 (Language.PureScript.Names.Qualified
                    (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName))
                 (Language.PureScript.Names.OpName
                    'Language.PureScript.Names.TypeOpName)
5a4e2ba83bf57ee4021fdafe70b4eb9a
  pattern Language.PureScript.AST.Declarations.TypeFixityDeclaration :: Language.PureScript.AST.SourcePos.SourceAnn
                                                                        -> Language.PureScript.AST.Operators.Fixity
                                                                        -> Language.PureScript.Names.Qualified
                                                                             (Language.PureScript.Names.ProperName
                                                                                'Language.PureScript.Names.TypeName)
                                                                        -> Language.PureScript.Names.OpName
                                                                             'Language.PureScript.Names.TypeOpName
                                                                        -> Language.PureScript.AST.Declarations.Declaration
e92f6ee78a22c0eadc3566d7d1f48d5b
  data TypeInstanceBody
    = DerivedInstance
    | NewtypeInstance
    | NewtypeInstanceWithDictionary Language.PureScript.AST.Declarations.Expr
    | ExplicitInstance [Language.PureScript.AST.Declarations.Declaration]
f66c915ceaf19a8b40bffcd6eb7d5cc6
  data TypeSearch
    = TSBefore Language.PureScript.Environment.Environment
    | TSAfter {tsAfterIdentifiers :: [(Language.PureScript.Names.Qualified
                                         Data.Text.Internal.Text,
                                       Language.PureScript.Types.SourceType)],
               tsAfterRecordFields :: GHC.Base.Maybe
                                        [(Language.PureScript.Label.Label,
                                          Language.PureScript.Types.SourceType)]}
97b38919d86cd9182cb8d86b6f4ae734
  pattern Language.PureScript.AST.Declarations.ValueDecl :: Language.PureScript.AST.SourcePos.SourceAnn
                                                            -> Language.PureScript.Names.Ident
                                                            -> Language.PureScript.Environment.NameKind
                                                            -> [Language.PureScript.AST.Binders.Binder]
                                                            -> [Language.PureScript.AST.Declarations.GuardedExpr]
                                                            -> Language.PureScript.AST.Declarations.Declaration
dc3fe29a39c3efd97807e85c8c5dc302
  data ValueDeclarationData a
    = ValueDeclarationData {valdeclSourceAnn :: !Language.PureScript.AST.SourcePos.SourceAnn,
                            valdeclIdent :: !Language.PureScript.Names.Ident,
                            valdeclName :: !Language.PureScript.Environment.NameKind,
                            valdeclBinders :: ![Language.PureScript.AST.Binders.Binder],
                            valdeclExpression :: !a}
2b8c14ef4445d3b3d67c80ed60c831ef
  data ValueFixity
    = ValueFixity Language.PureScript.AST.Operators.Fixity
                  (Language.PureScript.Names.Qualified
                     (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)))
                  (Language.PureScript.Names.OpName
                     'Language.PureScript.Names.ValueOpName)
6da09cca72fc0dd8bafa2b8ed78d033e
  pattern Language.PureScript.AST.Declarations.ValueFixityDeclaration :: Language.PureScript.AST.SourcePos.SourceAnn
                                                                         -> Language.PureScript.AST.Operators.Fixity
                                                                         -> Language.PureScript.Names.Qualified
                                                                              (Data.Either.Either
                                                                                 Language.PureScript.Names.Ident
                                                                                 (Language.PureScript.Names.ProperName
                                                                                    'Language.PureScript.Names.ConstructorName))
                                                                         -> Language.PureScript.Names.OpName
                                                                              'Language.PureScript.Names.ValueOpName
                                                                         -> Language.PureScript.AST.Declarations.Declaration
bfce38a8b694557bc33268834d37a7dc
  data WhereProvenance = FromWhere | FromLet
a9f33004e1174e39a513d2fa90d4a835
  addDefaultImport ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LLLSL),1*U(U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.ModuleName)
                   (w1 :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.AST.Declarations.Module ww4 ww5 ww6 ww7 ww8 ->
                 case Language.PureScript.AST.Declarations.$waddDefaultImport
                        ww1
                        ww2
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,,,,#) ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.AST.Declarations.Module
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 } } }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  caseAlternativeBinders ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> [Language.PureScript.AST.Binders.Binder]
  RecSel Left Language.PureScript.AST.Declarations.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 case ds of wild { Language.PureScript.AST.Declarations.CaseAlternative ds1 ds2 ->
                 ds1 }) -}
e92f6ee78a22c0eadc3566d7d1f48d5b
  caseAlternativeResult ::
    Language.PureScript.AST.Declarations.CaseAlternative
    -> [Language.PureScript.AST.Declarations.GuardedExpr]
  RecSel Left Language.PureScript.AST.Declarations.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.CaseAlternative) ->
                 case ds of wild { Language.PureScript.AST.Declarations.CaseAlternative ds1 ds2 ->
                 ds2 }) -}
7ecd10c2cb7709fffc36d9d993e281f2
  compDecRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U> -}
346365fb28af384d04391dc396f98282
  declName ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.DataDeclaration ds1 ds2 n ds3 ds4
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.DataBindingGroupDeclaration ds1
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.TypeSynonymDeclaration ds1 n ds2 ds3
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName dt1)
                   Language.PureScript.AST.Declarations.BoundValueDeclaration ds1 ds2 ds3
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.BindingGroupDeclaration ds1
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.ExternDeclaration ds1 n ds2
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName n)
                   Language.PureScript.AST.Declarations.ExternDataDeclaration ds1 n ds2
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyName n)
                   Language.PureScript.AST.Declarations.ExternKindDeclaration ds1 n
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.KiName n)
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 ds2
                   -> case ds2 of wild1 {
                        Data.Either.Left ds3
                        -> case ds3 of wild2 { Language.PureScript.AST.Declarations.ValueFixity ds4 ds5 n ->
                           GHC.Base.Just
                             @ Language.PureScript.Names.Name
                             (Language.PureScript.Names.ValOpName n) }
                        Data.Either.Right ds3
                        -> case ds3 of wild2 { Language.PureScript.AST.Declarations.TypeFixity ds4 ds5 n ->
                           GHC.Base.Just
                             @ Language.PureScript.Names.Name
                             (Language.PureScript.Names.TyOpName n) } }
                   Language.PureScript.AST.Declarations.ImportDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Base.Nothing @ Language.PureScript.Names.Name
                   Language.PureScript.AST.Declarations.TypeClassDeclaration ds1 n ds2 ds3 ds4 ds5
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.TyClassName n)
                   Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds1 ds2 ds3 n ds4 ds5 ds6 ds7
                   -> GHC.Base.Just
                        @ Language.PureScript.Names.Name
                        (Language.PureScript.Names.IdentName n) }) -}
a467a4d4938967e35bf0f7f0e0d07090
  declRefName ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9d093733881fe15ce20b105d529f0011
  declRefSourceSpan ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TypeRef ss ds1 ds2 -> ss
                   Language.PureScript.AST.Declarations.TypeOpRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ValueRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ValueOpRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.TypeClassRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.TypeInstanceRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ModuleRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.KindRef ss ds1 -> ss
                   Language.PureScript.AST.Declarations.ReExportRef ss ds1 ds2
                   -> ss }) -}
5d4803f8f30e53025f1e80c48cd481b1
  declSourceAnn ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.SourcePos.SourceAnn
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
56c2d6f201f67f106a4f2e1dc3f0bb49
  declSourceSpan ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration) ->
                 case Language.PureScript.AST.Declarations.declSourceAnn
                        x of wild { (,) x1 ds1 ->
                 x1 }) -}
f5b36690439fd53d08448e92938999ee
  flattenDecls ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Language.PureScript.AST.Declarations.$sconcatMap
                   @ Language.PureScript.AST.Declarations.Declaration
                   @ Language.PureScript.AST.Declarations.Declaration
                   Language.PureScript.AST.Declarations.flattenDecls_flattenOne) -}
5d99a22bfb3d96bd06f4fc406cc931c7
  flattenDecls_flattenOne ::
    Language.PureScript.AST.Declarations.Declaration
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
37948c177690d6e92f7f8c057c91b5f1
  getFixityDecl ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         (Data.Either.Either
            Language.PureScript.AST.Declarations.ValueFixity
            Language.PureScript.AST.Declarations.TypeFixity)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Language.PureScript.AST.Declarations.ValueFixity
                             Language.PureScript.AST.Declarations.TypeFixity)
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 fixity
                   -> GHC.Base.Just
                        @ (Data.Either.Either
                             Language.PureScript.AST.Declarations.ValueFixity
                             Language.PureScript.AST.Declarations.TypeFixity)
                        fixity }) -}
e3282980e675c7ad2175d21e599edc5c
  getKindRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                   Language.PureScript.AST.Declarations.KindRef ds1 name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        name }) -}
77bbf79d27e1a58f6883cbe40cb44e01
  getModuleDeclarations ::
    Language.PureScript.AST.Declarations.Module
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ds1 ds2 ds3 declarations ds4 ->
                 declarations }) -}
7aa2ed3fa39338f5edb2f1938e29c924
  getModuleName ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ds1 ds2 name ds3 ds4 ->
                 name }) -}
9836f61824b534227aa948fd618b76f6
  getModuleSourceSpan ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Module) ->
                 case ds of wild { Language.PureScript.AST.Declarations.Module ss ds1 ds2 ds3 ds4 ->
                 ss }) -}
ea53048ed8eefd170e41dcd88fa96d29
  getTypeClassRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   Language.PureScript.AST.Declarations.TypeClassRef ds1 name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        name }) -}
eea7233e2bcca06180e0fde9a4729425
  getTypeDeclaration ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ Language.PureScript.AST.Declarations.TypeDeclarationData
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> GHC.Base.Just
                        @ Language.PureScript.AST.Declarations.TypeDeclarationData
                        (Language.PureScript.AST.Declarations.TypeDeclarationData
                           dt
                           dt1
                           dt2) }) -}
f544549c7044502c660701544ec93b94
  getTypeOpRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   Language.PureScript.AST.Declarations.TypeOpRef ds1 op
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        op }) -}
49d73504ee072e8c2fbd37f35c16fbff
  getTypeRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          GHC.Base.Maybe
            [Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           GHC.Base.Maybe
                             [Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName])
                   Language.PureScript.AST.Declarations.TypeRef ds1 name dctors
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           GHC.Base.Maybe
                             [Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName])
                        (name, dctors) }) -}
f4b5979539c3f43c9aac0104c9b38c92
  getValueDeclaration ::
    Language.PureScript.AST.Declarations.Declaration
    -> GHC.Base.Maybe
         (Language.PureScript.AST.Declarations.ValueDeclarationData
            [Language.PureScript.AST.Declarations.GuardedExpr])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.AST.Declarations.ValueDeclarationData
                             [Language.PureScript.AST.Declarations.GuardedExpr])
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Base.Just
                        @ (Language.PureScript.AST.Declarations.ValueDeclarationData
                             [Language.PureScript.AST.Declarations.GuardedExpr])
                        (Language.PureScript.AST.Declarations.ValueDeclarationData
                           @ [Language.PureScript.AST.Declarations.GuardedExpr]
                           dt
                           dt1
                           dt2
                           dt3
                           dt4) }) -}
47a2050f95b57da4a8d94869a8fe7a30
  getValueOpRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   Language.PureScript.AST.Declarations.ValueOpRef ds1 op
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        op }) -}
1fbe007758d53e3ecefa02005d694679
  getValueRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.Ident
                   Language.PureScript.AST.Declarations.ValueRef ds1 name
                   -> GHC.Base.Just @ Language.PureScript.Names.Ident name }) -}
31ae0c55d3f2ad87be9893d84154e47e
  importPrim ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 1, Strictness: <S(LLLSL),1*U(U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Module) ->
                 Language.PureScript.AST.Declarations.addDefaultImport
                   Language.PureScript.AST.Declarations.importPrim2
                   (Language.PureScript.AST.Declarations.addDefaultImport
                      Language.PureScript.AST.Declarations.importPrim1
                      x)) -}
aecbf144d0f05b801d3240506e906a36
  importPrim1 ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
933f78a312f1060ea6cc23118649ba1a
  importPrim2 ::
    Language.PureScript.Names.Qualified
      Language.PureScript.Names.ModuleName
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.AST.Declarations.importPrim3
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
59a8ca1596a4e5588a6b65359e6c4510
  importPrim3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
f9549daf5155cce3c930a968397a7afc
  isDataDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.DataDeclaration ds1 ds2 ds3 ds4 ds5
                   -> GHC.Types.True
                   Language.PureScript.AST.Declarations.TypeSynonymDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Types.True }) -}
7250ed047a60c57e774f73259cedd1d2
  isExplicit ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Explicit ds1
                   -> GHC.Types.True }) -}
c9ab061920499352f1d59ffdd3d1f80d
  isExternDataDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternDataDeclaration ds1 ds2 ds3
                   -> GHC.Types.True }) -}
dd5bf568456765ea4de3002134577d4d
  isExternDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternDeclaration ds1 ds2 ds3
                   -> GHC.Types.True }) -}
c8709b62905f1d8a52c5722d67855ffe
  isExternKindDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ExternKindDeclaration ds1 ds2
                   -> GHC.Types.True }) -}
c04bd8d067304ee9a0b4788bfd047d98
  isFixityDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.FixityDeclaration ds1 ds2
                   -> GHC.Types.True }) -}
829ab788c574d0d4fa85725bfb45845a
  isImplicit ::
    Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ImportDeclarationType) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.Implicit
                   -> GHC.Types.True }) -}
64406b87a7f4a18bafdbc5bcb5a9f598
  isImportDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ImportDeclaration ds1 ds2 ds3 ds4
                   -> GHC.Types.True }) -}
e813ecefaf7692c4fa135ceea4ce559c
  isModuleRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ModuleRef ds1 ds2
                   -> GHC.Types.True }) -}
68fdb6c54a1f333df017643f6dac7699
  isTrueExpr ::
    Language.PureScript.AST.Declarations.Expr -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
7b108c8da44aa47fd4ec89829bd2208d
  isTypeClassDeclaration ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.TypeClassDeclaration ds1 ds2 ds3 ds4 ds5 ds6
                   -> GHC.Types.True }) -}
b777faacf0637e97b3f90ecebf237e06
  isTypeClassInstanceDeclaration ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.TypeInstanceDeclaration ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> GHC.Types.True }) -}
ec9808b5e7bdda595bcb228b10c9fef0
  isValueDecl ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> GHC.Types.True }) -}
8c10e95933c92cb479ab081da10c3627
  mapTypeInstanceBody ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.mapTypeInstanceBody1
                  `cast`
                (<[Language.PureScript.AST.Declarations.Declaration]
                  -> [Language.PureScript.AST.Declarations.Declaration]>_R
                 ->_R <Language.PureScript.AST.Declarations.TypeInstanceBody>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.TypeInstanceBody>_R) -}
0c001b66dd33489360206f2c4b8a8dc8
  mapTypeInstanceBody1 ::
    ([Language.PureScript.AST.Declarations.Declaration]
     -> [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f162 :: [Language.PureScript.AST.Declarations.Declaration]
                            -> [Language.PureScript.AST.Declarations.Declaration])
                   (eta :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case eta of wild {
                   DEFAULT
                   -> wild
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeInstanceBody>_R))
                   Language.PureScript.AST.Declarations.ExplicitInstance ds
                   -> (Language.PureScript.AST.Declarations.ExplicitInstance
                         (f162 ds))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeInstanceBody>_R)) }) -}
febdeb74c42c15f011c690652e6ae616
  onTypeSearchTypes ::
    (Language.PureScript.Types.SourceType
     -> Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.onTypeSearchTypes1
                  `cast`
                (<Language.PureScript.Types.SourceType
                  -> Language.PureScript.Types.SourceType>_R
                 ->_R <Language.PureScript.AST.Declarations.TypeSearch>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.TypeSearch>_R) -}
0ca6cafaffeb6150aa3ef98ee46e5bdf
  onTypeSearchTypes1 ::
    (Language.PureScript.Types.SourceType
     -> Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f162 :: Language.PureScript.Types.SourceType
                            -> Language.PureScript.Types.SourceType)
                   (eta :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 Language.PureScript.AST.Declarations.onTypeSearchTypes_$sonTypeSearchTypesM
                   (\ (x :: Language.PureScript.Types.SourceType) -> f162 x)
                     `cast`
                   (<Language.PureScript.Types.SourceType>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.Types.SourceType>_R))
                   eta) -}
adc87a42966a873eb4c33a990e8956bb
  onTypeSearchTypesM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.SourceType
     -> m Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> m Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,U(U(C(C1(U)),A),C(U),1*C1(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><S,1*U> -}
ca1ada8c1ea138cff017e1215746e25f
  onTypeSearchTypes_$sonTypeSearchTypesM ::
    (Language.PureScript.Types.SourceType
     -> Data.Functor.Identity.Identity
          Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.TypeSearch
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ (eta :: Language.PureScript.Types.SourceType
                           -> Data.Functor.Identity.Identity
                                Language.PureScript.Types.SourceType)
                   (eta1 :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case eta1 of wild {
                   Language.PureScript.AST.Declarations.TSBefore env
                   -> wild
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeSearch>_R))
                   Language.PureScript.AST.Declarations.TSAfter i r
                   -> (Language.PureScript.AST.Declarations.TSAfter
                         (letrec {
                            go6 :: [(Language.PureScript.Names.Qualified
                                       Data.Text.Internal.Text,
                                     Language.PureScript.Types.SourceType)]
                                   -> Data.Functor.Identity.Identity
                                        [(Language.PureScript.Names.Qualified
                                            Data.Text.Internal.Text,
                                          Language.PureScript.Types.SourceType)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [(Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.SourceType)]) ->
                              case ds of wild1 {
                                []
                                -> (GHC.Types.[]
                                      @ (Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.SourceType))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <[(Language.PureScript.Names.Qualified
                                                  Data.Text.Internal.Text,
                                                Language.PureScript.Types.SourceType)]>_R))
                                : y ys
                                -> (GHC.Types.:
                                      @ (Language.PureScript.Names.Qualified
                                           Data.Text.Internal.Text,
                                         Language.PureScript.Types.SourceType)
                                      (case y of wild2 { (,) x y1 ->
                                       (x,
                                        (eta y1)
                                          `cast`
                                        (Data.Functor.Identity.N:Identity[0]
                                             <Language.PureScript.Types.SourceType>_R)) })
                                      (go6 ys)
                                        `cast`
                                      (Data.Functor.Identity.N:Identity[0]
                                           <[(Language.PureScript.Names.Qualified
                                                Data.Text.Internal.Text,
                                              Language.PureScript.Types.SourceType)]>_R))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <[(Language.PureScript.Names.Qualified
                                                  Data.Text.Internal.Text,
                                                Language.PureScript.Types.SourceType)]>_R)) }
                          } in
                          (go6 i)
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <[(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
                                  Language.PureScript.Types.SourceType)]>_R))
                         (case r of wild1 {
                            GHC.Base.Nothing
                            -> GHC.Base.Nothing
                                 @ [(Language.PureScript.Label.Label,
                                     Language.PureScript.Types.SourceType)]
                            GHC.Base.Just x
                            -> GHC.Base.Just
                                 @ [(Language.PureScript.Label.Label,
                                     Language.PureScript.Types.SourceType)]
                                 (letrec {
                                    go6 :: [(Language.PureScript.Label.Label,
                                             Language.PureScript.Types.SourceType)]
                                           -> Data.Functor.Identity.Identity
                                                [(Language.PureScript.Label.Label,
                                                  Language.PureScript.Types.SourceType)]
                                      {- Arity: 1, Strictness: <S,1*U> -}
                                    = \ (ds :: [(Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.SourceType)]) ->
                                      case ds of wild2 {
                                        []
                                        -> (GHC.Types.[]
                                              @ (Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.SourceType))
                                             `cast`
                                           (Sym (Data.Functor.Identity.N:Identity[0]
                                                     <[(Language.PureScript.Label.Label,
                                                        Language.PureScript.Types.SourceType)]>_R))
                                        : y ys
                                        -> (GHC.Types.:
                                              @ (Language.PureScript.Label.Label,
                                                 Language.PureScript.Types.SourceType)
                                              (case y of wild3 { (,) x1 y1 ->
                                               (x1,
                                                (eta y1)
                                                  `cast`
                                                (Data.Functor.Identity.N:Identity[0]
                                                     <Language.PureScript.Types.SourceType>_R)) })
                                              (go6 ys)
                                                `cast`
                                              (Data.Functor.Identity.N:Identity[0]
                                                   <[(Language.PureScript.Label.Label,
                                                      Language.PureScript.Types.SourceType)]>_R))
                                             `cast`
                                           (Sym (Data.Functor.Identity.N:Identity[0]
                                                     <[(Language.PureScript.Label.Label,
                                                        Language.PureScript.Types.SourceType)]>_R)) }
                                  } in
                                  (go6 x)
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <[(Language.PureScript.Label.Label,
                                          Language.PureScript.Types.SourceType)]>_R)) }))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Language.PureScript.AST.Declarations.TypeSearch>_R)) }) -}
e5ea580a2e6fb7ffeb2f6d21ba7a9289
  overTypeDeclaration ::
    (Language.PureScript.AST.Declarations.TypeDeclarationData
     -> Language.PureScript.AST.Declarations.TypeDeclarationData)
    -> Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U(U,U,U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f162 :: Language.PureScript.AST.Declarations.TypeDeclarationData
                            -> Language.PureScript.AST.Declarations.TypeDeclarationData)
                   (d :: Language.PureScript.AST.Declarations.Declaration) ->
                 case d of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> case f162
                             (Language.PureScript.AST.Declarations.TypeDeclarationData
                                dt
                                dt1
                                dt2) of dt3 { Language.PureScript.AST.Declarations.TypeDeclarationData dt4 dt5 dt6 ->
                      Language.PureScript.AST.Declarations.TypeDeclaration
                        dt4
                        dt5
                        dt6 } }) -}
957ede040169306777269b6b86e1fa8c
  overValueDeclaration ::
    (Language.PureScript.AST.Declarations.ValueDeclarationData
       [Language.PureScript.AST.Declarations.GuardedExpr]
     -> Language.PureScript.AST.Declarations.ValueDeclarationData
          [Language.PureScript.AST.Declarations.GuardedExpr])
    -> Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*C1(U(U,U,U,U,U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f162 :: Language.PureScript.AST.Declarations.ValueDeclarationData
                              [Language.PureScript.AST.Declarations.GuardedExpr]
                            -> Language.PureScript.AST.Declarations.ValueDeclarationData
                                 [Language.PureScript.AST.Declarations.GuardedExpr])
                   (d :: Language.PureScript.AST.Declarations.Declaration) ->
                 case d of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> case f162
                             (Language.PureScript.AST.Declarations.ValueDeclarationData
                                @ [Language.PureScript.AST.Declarations.GuardedExpr]
                                dt
                                dt1
                                dt2
                                dt3
                                dt4) of dt5 { Language.PureScript.AST.Declarations.ValueDeclarationData dt6 dt7 dt8 dt9 dt10 ->
                      Language.PureScript.AST.Declarations.ValueDeclaration
                        dt6
                        dt7
                        dt8
                        dt9
                        dt10 } }) -}
5252f47280702e464243816d50efc247
  runAssocList ::
    Language.PureScript.AST.Declarations.AssocList k t -> [(k, t)]
  RecSel Left Language.PureScript.AST.Declarations.AssocList
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.AST.Declarations.runAssocList1
                  `cast`
                (forall (k :: <*>_N) (t :: <*>_N).
                 <Language.PureScript.AST.Declarations.AssocList k t>_R
                 ->_R Language.PureScript.AST.Declarations.N:AssocList[0]
                          <k>_R <t>_R) -}
5252f47280702e464243816d50efc247
  runAssocList1 ::
    Language.PureScript.AST.Declarations.AssocList k t
    -> Language.PureScript.AST.Declarations.AssocList k t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ k
                   @ t
                   (ds :: Language.PureScript.AST.Declarations.AssocList k t) ->
                 ds) -}
b3dc0429061d0ff256d8d3e4cc7c9512
  traverseTypeInstanceBody ::
    GHC.Base.Applicative f =>
    ([Language.PureScript.AST.Declarations.Declaration]
     -> f [Language.PureScript.AST.Declarations.Declaration])
    -> Language.PureScript.AST.Declarations.TypeInstanceBody
    -> f Language.PureScript.AST.Declarations.TypeInstanceBody
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A)><L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ f162 :: * -> *
                   ($dApplicative :: GHC.Base.Applicative f162)
                   (eta :: [Language.PureScript.AST.Declarations.Declaration]
                           -> f162 [Language.PureScript.AST.Declarations.Declaration])
                   (eta1 :: Language.PureScript.AST.Declarations.TypeInstanceBody) ->
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ f162
                        $dApplicative
                        @ Language.PureScript.AST.Declarations.TypeInstanceBody
                        wild
                   Language.PureScript.AST.Declarations.ExplicitInstance ds
                   -> GHC.Base.fmap
                        @ f162
                        (GHC.Base.$p1Applicative @ f162 $dApplicative)
                        @ [Language.PureScript.AST.Declarations.Declaration]
                        @ Language.PureScript.AST.Declarations.TypeInstanceBody
                        Language.PureScript.AST.Declarations.ExplicitInstance
                        (eta ds) }) -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  tsAfterIdentifiers ::
    Language.PureScript.AST.Declarations.TypeSearch
    -> [(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
         Language.PureScript.Types.SourceType)]
  RecSel Left Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TSBefore ipv
                   -> Language.PureScript.AST.Declarations.tsAfterIdentifiers1
                   Language.PureScript.AST.Declarations.TSAfter ds1 ds2 -> ds1 }) -}
713952c1395a192701efa8a1fe9e1887
  tsAfterIdentifiers1 ::
    [(Language.PureScript.Names.Qualified Data.Text.Internal.Text,
      Language.PureScript.Types.SourceType)]
  {- Strictness: x -}
f66c915ceaf19a8b40bffcd6eb7d5cc6
  tsAfterRecordFields ::
    Language.PureScript.AST.Declarations.TypeSearch
    -> GHC.Base.Maybe
         [(Language.PureScript.Label.Label,
           Language.PureScript.Types.SourceType)]
  RecSel Left Language.PureScript.AST.Declarations.TypeSearch
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeSearch) ->
                 case ds of wild {
                   Language.PureScript.AST.Declarations.TSBefore ipv
                   -> Language.PureScript.AST.Declarations.tsAfterRecordFields1
                   Language.PureScript.AST.Declarations.TSAfter ds1 ds2 -> ds2 }) -}
70ad75d064e08bde6d62aacd2a75e556
  tsAfterRecordFields1 ::
    GHC.Base.Maybe
      [(Language.PureScript.Label.Label,
        Language.PureScript.Types.SourceType)]
  {- Strictness: x -}
c947d6d8aff56f68d1789e1833a9fcd2
  tydeclIdent ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds2 }) -}
c947d6d8aff56f68d1789e1833a9fcd2
  tydeclSourceAnn ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.AST.SourcePos.SourceAnn
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds1 }) -}
c947d6d8aff56f68d1789e1833a9fcd2
  tydeclType ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> Language.PureScript.Types.SourceType
  RecSel Left Language.PureScript.AST.Declarations.TypeDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 case ds of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds1 ds2 ds3 ->
                 ds3 }) -}
348c99c29975a5b33457904ffa9aebcc
  unwrapTypeDeclaration ::
    Language.PureScript.AST.Declarations.TypeDeclarationData
    -> (Language.PureScript.Names.Ident,
        Language.PureScript.Types.SourceType)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Language.PureScript.AST.Declarations.TypeDeclarationData) ->
                 (case td of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds ds1 ds2 ->
                  ds1 },
                  case td of wild { Language.PureScript.AST.Declarations.TypeDeclarationData ds ds1 ds2 ->
                  ds2 })) -}
dc3fe29a39c3efd97807e85c8c5dc302
  valdeclBinders ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> [Language.PureScript.AST.Binders.Binder]
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  valdeclExpression ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a -> a
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  valdeclIdent ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  valdeclName ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.Environment.NameKind
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
dc3fe29a39c3efd97807e85c8c5dc302
  valdeclSourceAnn ::
    Language.PureScript.AST.Declarations.ValueDeclarationData a
    -> Language.PureScript.AST.SourcePos.SourceAnn
  RecSel Left Language.PureScript.AST.Declarations.ValueDeclarationData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(U(U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.AST.Declarations.ValueDeclarationData
                            a) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ValueDeclarationData ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fEqAssocList
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.Declaration]
  = Language.PureScript.AST.Declarations.$fEqDeclaration
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fEqDeclarationRef
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.HintCategory]
  = Language.PureScript.AST.Declarations.$fEqHintCategory
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fEqImportDeclarationType
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fEqPathNode
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fEqPathTree
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.TypeDeclarationData]
  = Language.PureScript.AST.Declarations.$fEqTypeDeclarationData
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fEqTypeFixity
instance GHC.Classes.Eq [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fEqValueFixity
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fFoldableAssocList
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fFoldablePathNode
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fFoldablePathTree
instance Data.Foldable.Foldable [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fFoldableValueDeclarationData
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fFromJSONDeclarationRef
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fFromJSONImportDeclarationType
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fFunctorAssocList
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fFunctorPathNode
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fFunctorPathTree
instance GHC.Base.Functor [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fFunctorValueDeclarationData
instance GHC.Generics.Generic [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fGenericDeclarationRef
instance Control.DeepSeq.NFData [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fNFDataDeclarationRef
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fOrdAssocList
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fOrdPathNode
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fOrdPathTree
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fOrdTypeFixity
instance GHC.Classes.Ord [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fOrdValueFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fShowAssocList
instance GHC.Show.Show [Language.PureScript.AST.Declarations.CaseAlternative]
  = Language.PureScript.AST.Declarations.$fShowCaseAlternative
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Declaration]
  = Language.PureScript.AST.Declarations.$fShowDeclaration
instance GHC.Show.Show [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fShowDeclarationRef
instance GHC.Show.Show [Language.PureScript.AST.Declarations.DoNotationElement]
  = Language.PureScript.AST.Declarations.$fShowDoNotationElement
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ErrorMessage]
  = Language.PureScript.AST.Declarations.$fShowErrorMessage
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ErrorMessageHint]
  = Language.PureScript.AST.Declarations.$fShowErrorMessageHint
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Expr]
  = Language.PureScript.AST.Declarations.$fShowExpr
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Guard]
  = Language.PureScript.AST.Declarations.$fShowGuard
instance GHC.Show.Show [Language.PureScript.AST.Declarations.GuardedExpr]
  = Language.PureScript.AST.Declarations.$fShowGuardedExpr
instance GHC.Show.Show [Language.PureScript.AST.Declarations.HintCategory]
  = Language.PureScript.AST.Declarations.$fShowHintCategory
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fShowImportDeclarationType
instance GHC.Show.Show [Language.PureScript.AST.Declarations.Module]
  = Language.PureScript.AST.Declarations.$fShowModule
instance GHC.Show.Show [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fShowPathNode
instance GHC.Show.Show [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fShowPathTree
instance GHC.Show.Show [Language.PureScript.AST.Declarations.SimpleErrorMessage]
  = Language.PureScript.AST.Declarations.$fShowSimpleErrorMessage
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeDeclarationData]
  = Language.PureScript.AST.Declarations.$fShowTypeDeclarationData
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeFixity]
  = Language.PureScript.AST.Declarations.$fShowTypeFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeInstanceBody]
  = Language.PureScript.AST.Declarations.$fShowTypeInstanceBody
instance GHC.Show.Show [Language.PureScript.AST.Declarations.TypeSearch]
  = Language.PureScript.AST.Declarations.$fShowTypeSearch
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fShowValueDeclarationData
instance GHC.Show.Show [Language.PureScript.AST.Declarations.ValueFixity]
  = Language.PureScript.AST.Declarations.$fShowValueFixity
instance GHC.Show.Show [Language.PureScript.AST.Declarations.WhereProvenance]
  = Language.PureScript.AST.Declarations.$fShowWhereProvenance
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.$fToJSONDeclarationRef
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.AST.Declarations.ImportDeclarationType]
  = Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.AssocList]
  = Language.PureScript.AST.Declarations.$fTraversableAssocList
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.PathNode]
  = Language.PureScript.AST.Declarations.$fTraversablePathNode
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.PathTree]
  = Language.PureScript.AST.Declarations.$fTraversablePathTree
instance Data.Traversable.Traversable [Language.PureScript.AST.Declarations.ValueDeclarationData]
  = Language.PureScript.AST.Declarations.$fTraversableValueDeclarationData
family instance GHC.Generics.Rep [Language.PureScript.AST.Declarations.DeclarationRef]
  = Language.PureScript.AST.Declarations.Rep_DeclarationRef
"SPEC $cfoldMap @ Any _" forall @ a
                                ($dMonoid :: GHC.Base.Monoid Data.Semigroup.Internal.Any)
  Language.PureScript.AST.Declarations.$fFoldablePathNode_$cfoldMap @ Data.Semigroup.Internal.Any
                                                                    @ a
                                                                    $dMonoid
  = Language.PureScript.AST.Declarations.$fFoldablePathNode_$s$cfoldMap
      @ a
"SPEC onTypeSearchTypesM @ Identity" forall ($dApplicative :: GHC.Base.Applicative
                                                                Data.Functor.Identity.Identity)
  Language.PureScript.AST.Declarations.onTypeSearchTypesM @ Data.Functor.Identity.Identity
                                                          $dApplicative
  = Language.PureScript.AST.Declarations.onTypeSearchTypes_$sonTypeSearchTypesM
"SPEC/Language.PureScript.AST.Declarations $fShow(,) @ (Qualified
                                                         (OpName 'AnyOpName)) @ Associativity" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                          Language.PureScript.AST.Operators.Associativity)
                                                                                                                                                                                 (v :: GHC.Show.Show
                                                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                                                                               'Language.PureScript.Names.AnyOpName)))
  GHC.Show.$fShow(,) @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.AnyOpName))
                     @ Language.PureScript.AST.Operators.Associativity
                     v
                     v1
  = Language.PureScript.AST.Declarations.$s$fShow(,)
"SPEC/Language.PureScript.AST.Declarations $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                        [Language.PureScript.Comments.Comment])
                                                                                               (v :: GHC.Show.Show
                                                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow(,)
"SPEC/Language.PureScript.AST.Declarations $fShowEither @ Ident @ (ProperName
                                                                    'ConstructorName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                     (v :: GHC.Show.Show
                                                                                                                                                                                             Language.PureScript.Names.Ident)
  Data.Either.$fShowEither @ Language.PureScript.Names.Ident
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           v
                           v1
  = Language.PureScript.AST.Declarations.$fShowValueFixity_$s$fShowEither
"SPEC/Language.PureScript.AST.Declarations $fShowEither_$cshowList @ Ident @ (ProperName
                                                                               'ConstructorName)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                           ($dShow4 :: GHC.Show.Show
                                                                                                                                                                                                                         Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowList @ Language.PureScript.Names.Ident
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)
                                      $dShow4
                                      $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowEither_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowEither_$cshowsPrec @ Ident @ (ProperName
                                                                                'ConstructorName)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                             'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                                 (w :: GHC.Show.Show
                                                                                                                                                                                                                         Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowsPrec @ Language.PureScript.Names.Ident
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName)
                                       w
                                       w1
  = Language.PureScript.AST.Declarations.$s$fShowEither_$cshowsPrec
"SPEC/Language.PureScript.AST.Declarations $fShowKind @ (SourceSpan,
                                                        [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                 (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                  [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       v
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$cshowsPrec_$s$fShowKind
"SPEC/Language.PureScript.AST.Declarations $fShowKind_$cshow @ (SourceSpan,
                                                               [Comment])" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                     (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                      [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind_$cshow @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                 [Language.PureScript.Comments.Comment])
                                              $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowKind_$cshow
"SPEC/Language.PureScript.AST.Declarations $fShowKind_$cshowList @ (SourceSpan,
                                                                   [Comment])" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                             (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                              [Language.PureScript.Comments.Comment]))
  Language.PureScript.Kinds.$fShowKind_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                     [Language.PureScript.Comments.Comment])
                                                  $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowKind_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowMap @ (Qualified
                                                         Ident) @ (NonEmpty NamedDict)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                   (GHC.Base.NonEmpty
                                                                                                                                                                                      Language.PureScript.TypeClassDictionaries.NamedDict))
                                                                                                                                                                          (v :: GHC.Show.Show
                                                                                                                                                                                  (Language.PureScript.Names.Qualified
                                                                                                                                                                                     Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap @ (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                              @ (GHC.Base.NonEmpty
                                   Language.PureScript.TypeClassDictionaries.NamedDict)
                              v
                              v1
  = Language.PureScript.AST.Declarations.$s$fShowMap
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshow @ (Qualified
                                                                Ident) @ (NonEmpty NamedDict)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                      (GHC.Base.NonEmpty
                                                                                                                                                                                                         Language.PureScript.TypeClassDictionaries.NamedDict))
                                                                                                                                                                                        ($dShow4 :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                                                                                                         Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshow @ (Language.PureScript.Names.Qualified
                                          Language.PureScript.Names.Ident)
                                     @ (GHC.Base.NonEmpty
                                          Language.PureScript.TypeClassDictionaries.NamedDict)
                                     $dShow4
                                     $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshow
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshowList @ (Qualified
                                                                    Ident) @ (NonEmpty NamedDict)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                              (GHC.Base.NonEmpty
                                                                                                                                                                                                                 Language.PureScript.TypeClassDictionaries.NamedDict))
                                                                                                                                                                                                ($dShow4 :: GHC.Show.Show
                                                                                                                                                                                                              (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                 Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowList @ (Language.PureScript.Names.Qualified
                                              Language.PureScript.Names.Ident)
                                         @ (GHC.Base.NonEmpty
                                              Language.PureScript.TypeClassDictionaries.NamedDict)
                                         $dShow4
                                         $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowMap_$cshowsPrec @ (Qualified
                                                                     Ident) @ (NonEmpty NamedDict)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                               (GHC.Base.NonEmpty
                                                                                                                                                                                                                  Language.PureScript.TypeClassDictionaries.NamedDict))
                                                                                                                                                                                                      (w :: GHC.Show.Show
                                                                                                                                                                                                              (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                 Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowsPrec @ (Language.PureScript.Names.Qualified
                                               Language.PureScript.Names.Ident)
                                          @ (GHC.Base.NonEmpty
                                               Language.PureScript.TypeClassDictionaries.NamedDict)
                                          w
                                          w1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec
"SPEC/Language.PureScript.AST.Declarations $fShowMaybe @ ModuleName" [orphan] forall (v :: GHC.Show.Show
                                                                                             Language.PureScript.Names.ModuleName)
  GHC.Show.$fShowMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowMaybe
"SPEC/Language.PureScript.AST.Declarations $fShowMaybe_$cshowList @ ModuleName" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Show.$fShowMaybe_$cshowList @ Language.PureScript.Names.ModuleName
                                  $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowMaybe_$cshowList1
"SPEC/Language.PureScript.AST.Declarations $fShowNonEmpty @ (TypeClassDictionaryInScope
                                                              (Qualified Ident))" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                                                  (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                                                                                                        Language.PureScript.Names.Ident)))
  GHC.Show.$fShowNonEmpty @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident))
                          v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowNonEmpty
"SPEC/Language.PureScript.AST.Declarations $fShowNonEmpty_$cshowList @ (TypeClassDictionaryInScope
                                                                         (Qualified Ident))" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                                              (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                    Language.PureScript.Names.Ident)))
  GHC.Show.$fShowNonEmpty_$cshowList @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                          (Language.PureScript.Names.Qualified
                                             Language.PureScript.Names.Ident))
                                     $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowNonEmpty_$cshowsPrec @ (TypeClassDictionaryInScope
                                                                          (Qualified Ident))" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                                              (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                    Language.PureScript.Names.Ident)))
  GHC.Show.$fShowNonEmpty_$cshowsPrec @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                           (Language.PureScript.Names.Qualified
                                              Language.PureScript.Names.Ident))
                                      w
  = Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowsPrec4
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ (OpName
                                                               'AnyOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                            'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.AnyOpName)
                                            v
  = Language.PureScript.AST.Declarations.$s$fShow(,)_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ (ProperName
                                                               'ClassName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                             (Language.PureScript.Names.ProperName
                                                                                                                                                                                'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName)
                                            v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$cshowsPrec_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                            Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified @ Language.PureScript.Names.Ident
                                            v
  = Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowQualified
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ (OpName
                                                                          'AnyOpName)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.AnyOpName)
                                                       $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList3
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ (ProperName
                                                                          'ClassName)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)
                                                       $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList2
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowList @ Ident" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                             Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowList @ Language.PureScript.Names.Ident
                                                       $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowList1
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ (OpName
                                                                           'AnyOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.AnyOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.AnyOpName)
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec7
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ (ProperName
                                                                           'ClassName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec5
"SPEC/Language.PureScript.AST.Declarations $fShowQualified_$cshowsPrec @ Ident" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                            Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ Language.PureScript.Names.Ident
                                                        w
  = Language.PureScript.AST.Declarations.$s$fShowQualified_$cshowsPrec3
"SPEC/Language.PureScript.AST.Declarations $fShowType @ (SourceSpan,
                                                        [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                 (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                  [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       v
  = Language.PureScript.AST.Declarations.$s$fShowNonEmpty_$cshowsPrec_$s$fShowType
"SPEC/Language.PureScript.AST.Declarations $fShowTypeClassDictionaryInScope @ (Qualified
                                                                                Ident)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                          (Language.PureScript.Names.Qualified
                                                                                                                                                                                                             Language.PureScript.Names.Ident))
  Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope @ (Language.PureScript.Names.Qualified
                                                                                  Language.PureScript.Names.Ident)
                                                                             v1
  = Language.PureScript.AST.Declarations.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
"SPEC/Language.PureScript.AST.Declarations $fShowType_$cshow @ (SourceSpan,
                                                               [Comment])" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                     (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                      [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType_$cshow @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                 [Language.PureScript.Comments.Comment])
                                              $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowType_$cshow
"SPEC/Language.PureScript.AST.Declarations $fShowType_$cshowList @ (SourceSpan,
                                                                   [Comment])" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                             (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                              [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                     [Language.PureScript.Comments.Comment])
                                                  $dShow3
  = Language.PureScript.AST.Declarations.$s$fShowType_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShowType_$cshowsPrec @ (SourceSpan,
                                                                    [Comment])" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                             (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                              [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType_$cshowsPrec @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                      [Language.PureScript.Comments.Comment])
                                                   w
  = Language.PureScript.AST.Declarations.$s$fShowType_$cshowsPrec
"SPEC/Language.PureScript.AST.Declarations $fShow[] @ (ProperName
                                                        'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[] @ (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName)
                    v
  = Language.PureScript.AST.Declarations.$s$fShow[]
"SPEC/Language.PureScript.AST.Declarations $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                       Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.AST.Declarations.$fShowTypeDeclarationData_$s$fShow[]
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshow @ (ProperName
                                                               'ConstructorName)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshow @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           $dShow3
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshow
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshow @ Comment" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                    Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Comments.Comment
                           $dShow3
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshow1
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshowList @ (ProperName
                                                                   'ConstructorName)" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshowList @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
                               $dShow3
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshowList
"SPEC/Language.PureScript.AST.Declarations $fShow[]_$cshowList @ Comment" [orphan] forall ($dShow3 :: GHC.Show.Show
                                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Comments.Comment
                               $dShow3
  = Language.PureScript.AST.Declarations.$s$fShow[]_$cshowList1
"SPEC/Language.PureScript.AST.Declarations concatMap @ [] _ _" [orphan] forall @ a
                                                                               @ b
                                                                               ($dFoldable :: Data.Foldable.Foldable
                                                                                                [])
  Data.Foldable.concatMap @ [] @ a @ b $dFoldable
  = Language.PureScript.AST.Declarations.$sconcatMap @ a @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

